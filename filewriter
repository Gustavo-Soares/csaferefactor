Adding sequence to active sequences of type byte
Adding sequence to active sequences of type byte
Adding sequence to active sequences of type byte
Adding sequence to active sequences of type byte
Adding sequence to active sequences of type byte
Adding sequence to active sequences of type short
Adding sequence to active sequences of type short
Adding sequence to active sequences of type short
Adding sequence to active sequences of type short
Adding sequence to active sequences of type short
Adding sequence to active sequences of type int
Adding sequence to active sequences of type int
Adding sequence to active sequences of type int
Adding sequence to active sequences of type int
Adding sequence to active sequences of type int
Adding sequence to active sequences of type long
Adding sequence to active sequences of type long
Adding sequence to active sequences of type long
Adding sequence to active sequences of type long
Adding sequence to active sequences of type long
Adding sequence to active sequences of type float
Adding sequence to active sequences of type float
Adding sequence to active sequences of type float
Adding sequence to active sequences of type float
Adding sequence to active sequences of type float
Adding sequence to active sequences of type double
Adding sequence to active sequences of type double
Adding sequence to active sequences of type double
Adding sequence to active sequences of type double
Adding sequence to active sequences of type double
Adding sequence to active sequences of type char
Adding sequence to active sequences of type char
Adding sequence to active sequences of type char
Adding sequence to active sequences of type char
Adding sequence to active sequences of type boolean
Adding sequence to active sequences of type boolean
Adding sequence to active sequences of type class java.lang.String
Adding sequence to active sequences of type class java.lang.String
getActivesequencesThatYield: entering method, clazz=boolean
getActivesequencesThatYield: returning 2 sequences.
getActivesequencesThatYield: entering method, clazz=byte
getActivesequencesThatYield: returning 5 sequences.
getActivesequencesThatYield: entering method, clazz=char
getActivesequencesThatYield: returning 4 sequences.
getActivesequencesThatYield: entering method, clazz=double
getActivesequencesThatYield: returning 5 sequences.
getActivesequencesThatYield: entering method, clazz=float
getActivesequencesThatYield: returning 5 sequences.
getActivesequencesThatYield: entering method, clazz=int
getActivesequencesThatYield: returning 5 sequences.
getActivesequencesThatYield: entering method, clazz=long
getActivesequencesThatYield: returning 5 sequences.
getActivesequencesThatYield: entering method, clazz=short
getActivesequencesThatYield: returning 5 sequences.
getActivesequencesThatYield: entering method, clazz=class java.lang.String
getActivesequencesThatYield: returning 2 sequences.
Statements : 
java.lang.Object.<init>()
A.<init>()
B.<init>()
C.<init>()
A.k()
B.k()
C.test()
B.m()
Initial sequences (seeds):
var0 =  prim : byte:-1 : 

var0 =  prim : byte:0 : 

var0 =  prim : byte:1 : 

var0 =  prim : byte:10 : 

var0 =  prim : byte:100 : 

var0 =  prim : short:-1 : 

var0 =  prim : short:0 : 

var0 =  prim : short:1 : 

var0 =  prim : short:10 : 

var0 =  prim : short:100 : 

var0 =  prim : int:-1 : 

var0 =  prim : int:0 : 

var0 =  prim : int:1 : 

var0 =  prim : int:10 : 

var0 =  prim : int:100 : 

var0 =  prim : long:-1 : 

var0 =  prim : long:0 : 

var0 =  prim : long:1 : 

var0 =  prim : long:10 : 

var0 =  prim : long:100 : 

var0 =  prim : float:-1.0 : 

var0 =  prim : float:0.0 : 

var0 =  prim : float:1.0 : 

var0 =  prim : float:10.0 : 

var0 =  prim : float:100.0 : 

var0 =  prim : double:-1.0 : 

var0 =  prim : double:0.0 : 

var0 =  prim : double:1.0 : 

var0 =  prim : double:10.0 : 

var0 =  prim : double:100.0 : 

var0 =  prim : char:23 : 

var0 =  prim : char:20 : 

var0 =  prim : char:34 : 

var0 =  prim : char:61 : 

var0 =  prim : boolean:true : 

var0 =  prim : boolean:false : 

var0 =  prim : java.lang.String:"" : 

var0 =  prim : java.lang.String:"hi!" : 

-------------------------------------------
randoop.util.Randomness: total calls to random: 1
Selected statement: B.k()
Will query component set for objects of typeclass B
getActivesequencesThatYield: entering method, clazz=class B
getActivesequencesThatYield: found no sequences matching class class B
getActivesequencesThatYield: returning 0 sequences.
components: 0
forbid-null option is true. Failed to create new sequence.
Failed to find inputs for statement.
-------------------------------------------
randoop.util.Randomness: total calls to random: 2
Selected statement: C.test()
Will query component set for objects of typeclass C
getActivesequencesThatYield: entering method, clazz=class C
getActivesequencesThatYield: found no sequences matching class class C
getActivesequencesThatYield: returning 0 sequences.
components: 0
forbid-null option is true. Failed to create new sequence.
Failed to find inputs for statement.
-------------------------------------------
randoop.util.Randomness: total calls to random: 3
Selected statement: A.<init>()
Successfully created new unique sequence:var0 =  cons : A.<init>() : 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;

allSequences.size()=1
-------------------------------------------
randoop.util.Randomness: total calls to random: 4
Selected statement: C.<init>()
Successfully created new unique sequence:var0 =  cons : C.<init>() : 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Adding sequence to active sequences of type class C
Sequence after execution: 
C var0 = new C();
// <NormalExecution object=object-of-type-C>;

allSequences.size()=2
-------------------------------------------
randoop.util.Randomness: total calls to random: 5
Selected statement: B.m()
Will query component set for objects of typeclass B
getActivesequencesThatYield: entering method, clazz=class B
getActivesequencesThatYield: returning 1 sequences.
components: 1
randoop.util.Randomness: total calls to random: 6
randoop.util.Randomness: total calls to random: 7
Successfully created new unique sequence:var0 =  cons : C.<init>() : 
var1 =  method : B.m() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Adding sequence to active sequences of type int
Adding sequence to active sequences of type class C
Sequence after execution: 
C var0 = new C();
// <NormalExecution object=object-of-type-C>;
int var1 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
<randoop.PrimValue, value=23 [var1]  : true

allSequences.size()=3
-------------------------------------------
randoop.util.Randomness: total calls to random: 8
Selected statement: B.k()
Will query component set for objects of typeclass B
getActivesequencesThatYield: entering method, clazz=class B
getActivesequencesThatYield: returning 2 sequences.
components: 2
randoop.util.Randomness: total calls to random: 9
randoop.util.Randomness: total calls to random: 10
Successfully created new unique sequence:var0 =  cons : C.<init>() : 
var1 =  method : B.m() : var0 
var2 =  method : B.k() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Adding sequence to active sequences of type int
Adding sequence to active sequences of type class C
Sequence after execution: 
C var0 = new C();
// <NormalExecution object=object-of-type-C>;
int var1 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var2 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
<randoop.PrimValue, value=23 [var1]  : true
<randoop.PrimValue, value=42 [var2]  : true

allSequences.size()=4
-------------------------------------------
randoop.util.Randomness: total calls to random: 11
Selected statement: B.m()
Will query component set for objects of typeclass B
getActivesequencesThatYield: entering method, clazz=class B
getActivesequencesThatYield: returning 3 sequences.
components: 3
randoop.util.Randomness: total calls to random: 12
randoop.util.Randomness: total calls to random: 13
Successfully created new unique sequence:var0 =  cons : C.<init>() : 
var1 =  method : B.m() : var0 
var2 =  method : B.k() : var0 
var3 =  method : B.m() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Adding sequence to active sequences of type class C
Sequence after execution: 
C var0 = new C();
// <NormalExecution object=object-of-type-C>;
int var1 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var2 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var3 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
<randoop.PrimValue, value=23 [var1]  : true
<randoop.PrimValue, value=42 [var2]  : true
<randoop.PrimValue, value=23 [var3]  : true

allSequences.size()=5
-------------------------------------------
randoop.util.Randomness: total calls to random: 14
Selected statement: C.test()
Will query component set for objects of typeclass C
getActivesequencesThatYield: entering method, clazz=class C
getActivesequencesThatYield: returning 4 sequences.
components: 4
randoop.util.Randomness: total calls to random: 15
randoop.util.Randomness: total calls to random: 16
Successfully created new unique sequence:var0 =  cons : C.<init>() : 
var1 =  method : B.m() : var0 
var2 =  method : B.k() : var0 
var3 =  method : B.m() : var0 
var4 =  method : C.test() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Adding sequence to active sequences of type class C
Sequence after execution: 
C var0 = new C();
// <NormalExecution object=object-of-type-C>;
int var1 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var2 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var3 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var4 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
<randoop.PrimValue, value=23 [var1]  : true
<randoop.PrimValue, value=42 [var2]  : true
<randoop.PrimValue, value=23 [var3]  : true
<randoop.PrimValue, value=23 [var4]  : true

allSequences.size()=6
-------------------------------------------
randoop.util.Randomness: total calls to random: 17
Selected statement: C.test()
Will query component set for objects of typeclass C
getActivesequencesThatYield: entering method, clazz=class C
getActivesequencesThatYield: returning 5 sequences.
components: 5
randoop.util.Randomness: total calls to random: 18
randoop.util.Randomness: total calls to random: 19
Successfully created new unique sequence:var0 =  cons : C.<init>() : 
var1 =  method : C.test() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Adding sequence to active sequences of type class C
Sequence after execution: 
C var0 = new C();
// <NormalExecution object=object-of-type-C>;
int var1 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
<randoop.PrimValue, value=23 [var1]  : true

allSequences.size()=7
-------------------------------------------
randoop.util.Randomness: total calls to random: 20
Selected statement: A.k()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 1 sequences.
components: 1
randoop.util.Randomness: total calls to random: 21
randoop.util.Randomness: total calls to random: 22
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.k() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
int var1 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
<randoop.PrimValue, value=23 [var1]  : true

allSequences.size()=8
-------------------------------------------
randoop.util.Randomness: total calls to random: 23
Selected statement: A.k()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 2 sequences.
components: 2
randoop.util.Randomness: total calls to random: 24
randoop.util.Randomness: total calls to random: 25
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 26
Selected statement: C.test()
Will query component set for objects of typeclass C
getActivesequencesThatYield: entering method, clazz=class C
getActivesequencesThatYield: returning 6 sequences.
components: 6
randoop.util.Randomness: total calls to random: 27
randoop.util.Randomness: total calls to random: 28
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 29
Selected statement: java.lang.Object.<init>()
Successfully created new unique sequence:var0 =  cons : java.lang.Object.<init>() : 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Adding sequence to active sequences of type class java.lang.Object
Sequence after execution: 
java.lang.Object var0 = new java.lang.Object();
// <NormalExecution object=object-of-type-java.lang.Object>;

allSequences.size()=9
-------------------------------------------
randoop.util.Randomness: total calls to random: 30
Selected statement: C.test()
Will query component set for objects of typeclass C
getActivesequencesThatYield: entering method, clazz=class C
getActivesequencesThatYield: returning 6 sequences.
components: 6
randoop.util.Randomness: total calls to random: 31
randoop.util.Randomness: total calls to random: 32
Successfully created new unique sequence:var0 =  cons : C.<init>() : 
var1 =  method : C.test() : var0 
var2 =  method : C.test() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Adding sequence to active sequences of type class C
Sequence after execution: 
C var0 = new C();
// <NormalExecution object=object-of-type-C>;
int var1 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var2 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
<randoop.PrimValue, value=23 [var1]  : true
<randoop.PrimValue, value=23 [var2]  : true

allSequences.size()=10
-------------------------------------------
randoop.util.Randomness: total calls to random: 33
Selected statement: B.k()
Will query component set for objects of typeclass B
getActivesequencesThatYield: entering method, clazz=class B
getActivesequencesThatYield: returning 7 sequences.
components: 7
randoop.util.Randomness: total calls to random: 34
randoop.util.Randomness: total calls to random: 35
Successfully created new unique sequence:var0 =  cons : C.<init>() : 
var1 =  method : B.k() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Adding sequence to active sequences of type class C
Sequence after execution: 
C var0 = new C();
// <NormalExecution object=object-of-type-C>;
int var1 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
<randoop.PrimValue, value=42 [var1]  : true

allSequences.size()=11
-------------------------------------------
randoop.util.Randomness: total calls to random: 36
Selected statement: B.k()
Will query component set for objects of typeclass B
getActivesequencesThatYield: entering method, clazz=class B
getActivesequencesThatYield: returning 8 sequences.
components: 8
randoop.util.Randomness: total calls to random: 37
randoop.util.Randomness: total calls to random: 38
Successfully created new unique sequence:var0 =  cons : C.<init>() : 
var1 =  method : B.m() : var0 
var2 =  method : B.k() : var0 
var3 =  method : B.m() : var0 
var4 =  method : B.k() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Adding sequence to active sequences of type class C
Sequence after execution: 
C var0 = new C();
// <NormalExecution object=object-of-type-C>;
int var1 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var2 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var3 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var4 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
<randoop.PrimValue, value=23 [var1]  : true
<randoop.PrimValue, value=42 [var2]  : true
<randoop.PrimValue, value=23 [var3]  : true
<randoop.PrimValue, value=42 [var4]  : true

allSequences.size()=12
-------------------------------------------
randoop.util.Randomness: total calls to random: 39
Selected statement: C.test()
Will query component set for objects of typeclass C
getActivesequencesThatYield: entering method, clazz=class C
getActivesequencesThatYield: returning 9 sequences.
components: 9
randoop.util.Randomness: total calls to random: 40
randoop.util.Randomness: total calls to random: 41
Successfully created new unique sequence:var0 =  cons : C.<init>() : 
var1 =  method : C.test() : var0 
var2 =  method : C.test() : var0 
var3 =  method : C.test() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Adding sequence to active sequences of type class C
Sequence after execution: 
C var0 = new C();
// <NormalExecution object=object-of-type-C>;
int var1 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var2 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var3 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
<randoop.PrimValue, value=23 [var1]  : true
<randoop.PrimValue, value=23 [var2]  : true
<randoop.PrimValue, value=23 [var3]  : true

allSequences.size()=13
-------------------------------------------
randoop.util.Randomness: total calls to random: 42
Selected statement: B.<init>()
Successfully created new unique sequence:var0 =  cons : B.<init>() : 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Adding sequence to active sequences of type class B
Sequence after execution: 
B var0 = new B();
// <NormalExecution object=object-of-type-B>;

allSequences.size()=14
-------------------------------------------
randoop.util.Randomness: total calls to random: 43
Selected statement: B.k()
Will query component set for objects of typeclass B
getActivesequencesThatYield: entering method, clazz=class B
getActivesequencesThatYield: returning 11 sequences.
components: 11
randoop.util.Randomness: total calls to random: 44
randoop.util.Randomness: total calls to random: 45
Successfully created new unique sequence:var0 =  cons : C.<init>() : 
var1 =  method : B.m() : var0 
var2 =  method : B.k() : var0 
var3 =  method : B.k() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Adding sequence to active sequences of type class C
Sequence after execution: 
C var0 = new C();
// <NormalExecution object=object-of-type-C>;
int var1 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var2 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var3 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
<randoop.PrimValue, value=23 [var1]  : true
<randoop.PrimValue, value=42 [var2]  : true
<randoop.PrimValue, value=42 [var3]  : true

allSequences.size()=15
-------------------------------------------
randoop.util.Randomness: total calls to random: 46
Selected statement: B.m()
Will query component set for objects of typeclass B
getActivesequencesThatYield: entering method, clazz=class B
getActivesequencesThatYield: returning 11 sequences.
components: 11
randoop.util.Randomness: total calls to random: 47
randoop.util.Randomness: total calls to random: 48
Successfully created new unique sequence:var0 =  cons : C.<init>() : 
var1 =  method : C.test() : var0 
var2 =  method : C.test() : var0 
var3 =  method : B.m() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Adding sequence to active sequences of type class C
Sequence after execution: 
C var0 = new C();
// <NormalExecution object=object-of-type-C>;
int var1 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var2 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var3 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
<randoop.PrimValue, value=23 [var1]  : true
<randoop.PrimValue, value=23 [var2]  : true
<randoop.PrimValue, value=23 [var3]  : true

allSequences.size()=16
-------------------------------------------
randoop.util.Randomness: total calls to random: 49
Selected statement: B.m()
Will query component set for objects of typeclass B
getActivesequencesThatYield: entering method, clazz=class B
getActivesequencesThatYield: returning 12 sequences.
components: 12
randoop.util.Randomness: total calls to random: 50
randoop.util.Randomness: total calls to random: 51
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 52
Selected statement: B.k()
Will query component set for objects of typeclass B
getActivesequencesThatYield: entering method, clazz=class B
getActivesequencesThatYield: returning 13 sequences.
components: 13
randoop.util.Randomness: total calls to random: 53
randoop.util.Randomness: total calls to random: 54
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 55
Selected statement: B.m()
Will query component set for objects of typeclass B
getActivesequencesThatYield: entering method, clazz=class B
getActivesequencesThatYield: returning 12 sequences.
components: 12
randoop.util.Randomness: total calls to random: 56
randoop.util.Randomness: total calls to random: 57
Successfully created new unique sequence:var0 =  cons : C.<init>() : 
var1 =  method : B.m() : var0 
var2 =  method : B.k() : var0 
var3 =  method : B.m() : var0 
var4 =  method : C.test() : var0 
var5 =  method : B.m() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Adding sequence to active sequences of type class C
Sequence after execution: 
C var0 = new C();
// <NormalExecution object=object-of-type-C>;
int var1 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var2 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var3 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var4 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var5 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
<randoop.PrimValue, value=23 [var1]  : true
<randoop.PrimValue, value=42 [var2]  : true
<randoop.PrimValue, value=23 [var3]  : true
<randoop.PrimValue, value=23 [var4]  : true
<randoop.PrimValue, value=23 [var5]  : true

allSequences.size()=17
-------------------------------------------
randoop.util.Randomness: total calls to random: 58
Selected statement: C.test()
Will query component set for objects of typeclass C
getActivesequencesThatYield: entering method, clazz=class C
getActivesequencesThatYield: returning 13 sequences.
components: 13
randoop.util.Randomness: total calls to random: 59
randoop.util.Randomness: total calls to random: 60
Successfully created new unique sequence:var0 =  cons : C.<init>() : 
var1 =  method : C.test() : var0 
var2 =  method : C.test() : var0 
var3 =  method : B.m() : var0 
var4 =  method : C.test() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Adding sequence to active sequences of type class C
Sequence after execution: 
C var0 = new C();
// <NormalExecution object=object-of-type-C>;
int var1 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var2 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var3 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var4 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
<randoop.PrimValue, value=23 [var1]  : true
<randoop.PrimValue, value=23 [var2]  : true
<randoop.PrimValue, value=23 [var3]  : true
<randoop.PrimValue, value=23 [var4]  : true

allSequences.size()=18
-------------------------------------------
randoop.util.Randomness: total calls to random: 61
Selected statement: B.m()
Will query component set for objects of typeclass B
getActivesequencesThatYield: entering method, clazz=class B
getActivesequencesThatYield: returning 14 sequences.
components: 14
randoop.util.Randomness: total calls to random: 62
randoop.util.Randomness: total calls to random: 63
Successfully created new unique sequence:var0 =  cons : C.<init>() : 
var1 =  method : B.m() : var0 
var2 =  method : B.k() : var0 
var3 =  method : B.m() : var0 
var4 =  method : C.test() : var0 
var5 =  method : B.m() : var0 
var6 =  method : B.m() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Adding sequence to active sequences of type class C
Sequence after execution: 
C var0 = new C();
// <NormalExecution object=object-of-type-C>;
int var1 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var2 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var3 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var4 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var5 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var6 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
<randoop.PrimValue, value=23 [var1]  : true
<randoop.PrimValue, value=42 [var2]  : true
<randoop.PrimValue, value=23 [var3]  : true
<randoop.PrimValue, value=23 [var4]  : true
<randoop.PrimValue, value=23 [var5]  : true
<randoop.PrimValue, value=23 [var6]  : true

allSequences.size()=19
-------------------------------------------
randoop.util.Randomness: total calls to random: 64
Selected statement: C.test()
Will query component set for objects of typeclass C
getActivesequencesThatYield: entering method, clazz=class C
getActivesequencesThatYield: returning 15 sequences.
components: 15
randoop.util.Randomness: total calls to random: 65
randoop.util.Randomness: total calls to random: 66
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 67
Selected statement: A.k()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 2 sequences.
components: 2
randoop.util.Randomness: total calls to random: 68
randoop.util.Randomness: total calls to random: 69
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 70
Selected statement: B.k()
Will query component set for objects of typeclass B
getActivesequencesThatYield: entering method, clazz=class B
getActivesequencesThatYield: returning 16 sequences.
components: 16
randoop.util.Randomness: total calls to random: 71
randoop.util.Randomness: total calls to random: 72
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 73
Selected statement: A.k()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 2 sequences.
components: 2
randoop.util.Randomness: total calls to random: 74
randoop.util.Randomness: total calls to random: 75
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.k() : var0 
var2 =  method : A.k() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
int var1 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var2 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
<randoop.PrimValue, value=23 [var1]  : true
<randoop.PrimValue, value=23 [var2]  : true

allSequences.size()=20
-------------------------------------------
randoop.util.Randomness: total calls to random: 76
Selected statement: B.m()
Will query component set for objects of typeclass B
getActivesequencesThatYield: entering method, clazz=class B
getActivesequencesThatYield: returning 15 sequences.
components: 15
randoop.util.Randomness: total calls to random: 77
randoop.util.Randomness: total calls to random: 78
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 79
Selected statement: B.m()
Will query component set for objects of typeclass B
getActivesequencesThatYield: entering method, clazz=class B
getActivesequencesThatYield: returning 15 sequences.
components: 15
randoop.util.Randomness: total calls to random: 80
randoop.util.Randomness: total calls to random: 81
Successfully created new unique sequence:var0 =  cons : C.<init>() : 
var1 =  method : B.m() : var0 
var2 =  method : B.k() : var0 
var3 =  method : B.k() : var0 
var4 =  method : B.m() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Adding sequence to active sequences of type class C
Sequence after execution: 
C var0 = new C();
// <NormalExecution object=object-of-type-C>;
int var1 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var2 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var3 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var4 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
<randoop.PrimValue, value=23 [var1]  : true
<randoop.PrimValue, value=42 [var2]  : true
<randoop.PrimValue, value=42 [var3]  : true
<randoop.PrimValue, value=23 [var4]  : true

allSequences.size()=21
-------------------------------------------
randoop.util.Randomness: total calls to random: 82
Selected statement: C.test()
Will query component set for objects of typeclass C
getActivesequencesThatYield: entering method, clazz=class C
getActivesequencesThatYield: returning 16 sequences.
components: 16
randoop.util.Randomness: total calls to random: 83
randoop.util.Randomness: total calls to random: 84
Successfully created new unique sequence:var0 =  cons : C.<init>() : 
var1 =  method : C.test() : var0 
var2 =  method : C.test() : var0 
var3 =  method : B.m() : var0 
var4 =  method : C.test() : var0 
var5 =  method : C.test() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Adding sequence to active sequences of type class C
Sequence after execution: 
C var0 = new C();
// <NormalExecution object=object-of-type-C>;
int var1 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var2 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var3 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var4 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var5 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
<randoop.PrimValue, value=23 [var1]  : true
<randoop.PrimValue, value=23 [var2]  : true
<randoop.PrimValue, value=23 [var3]  : true
<randoop.PrimValue, value=23 [var4]  : true
<randoop.PrimValue, value=23 [var5]  : true

allSequences.size()=22
-------------------------------------------
randoop.util.Randomness: total calls to random: 85
Selected statement: C.test()
Will query component set for objects of typeclass C
getActivesequencesThatYield: entering method, clazz=class C
getActivesequencesThatYield: returning 17 sequences.
components: 17
randoop.util.Randomness: total calls to random: 86
randoop.util.Randomness: total calls to random: 87
Successfully created new unique sequence:var0 =  cons : C.<init>() : 
var1 =  method : C.test() : var0 
var2 =  method : C.test() : var0 
var3 =  method : C.test() : var0 
var4 =  method : C.test() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Adding sequence to active sequences of type class C
Sequence after execution: 
C var0 = new C();
// <NormalExecution object=object-of-type-C>;
int var1 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var2 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var3 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var4 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
<randoop.PrimValue, value=23 [var1]  : true
<randoop.PrimValue, value=23 [var2]  : true
<randoop.PrimValue, value=23 [var3]  : true
<randoop.PrimValue, value=23 [var4]  : true

allSequences.size()=23
-------------------------------------------
randoop.util.Randomness: total calls to random: 88
Selected statement: B.k()
Will query component set for objects of typeclass B
getActivesequencesThatYield: entering method, clazz=class B
getActivesequencesThatYield: returning 19 sequences.
components: 19
randoop.util.Randomness: total calls to random: 89
randoop.util.Randomness: total calls to random: 90
Successfully created new unique sequence:var0 =  cons : C.<init>() : 
var1 =  method : B.m() : var0 
var2 =  method : B.k() : var0 
var3 =  method : B.k() : var0 
var4 =  method : B.m() : var0 
var5 =  method : B.k() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Adding sequence to active sequences of type class C
Sequence after execution: 
C var0 = new C();
// <NormalExecution object=object-of-type-C>;
int var1 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var2 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var3 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var4 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var5 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
<randoop.PrimValue, value=23 [var1]  : true
<randoop.PrimValue, value=42 [var2]  : true
<randoop.PrimValue, value=42 [var3]  : true
<randoop.PrimValue, value=23 [var4]  : true
<randoop.PrimValue, value=42 [var5]  : true

allSequences.size()=24
-------------------------------------------
randoop.util.Randomness: total calls to random: 91
Selected statement: B.m()
Will query component set for objects of typeclass B
getActivesequencesThatYield: entering method, clazz=class B
getActivesequencesThatYield: returning 19 sequences.
components: 19
randoop.util.Randomness: total calls to random: 92
randoop.util.Randomness: total calls to random: 93
Successfully created new unique sequence:var0 =  cons : C.<init>() : 
var1 =  method : B.k() : var0 
var2 =  method : B.m() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Adding sequence to active sequences of type class C
Sequence after execution: 
C var0 = new C();
// <NormalExecution object=object-of-type-C>;
int var1 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var2 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
<randoop.PrimValue, value=42 [var1]  : true
<randoop.PrimValue, value=23 [var2]  : true

allSequences.size()=25
-------------------------------------------
randoop.util.Randomness: total calls to random: 94
Selected statement: B.k()
Will query component set for objects of typeclass B
getActivesequencesThatYield: entering method, clazz=class B
getActivesequencesThatYield: returning 21 sequences.
components: 21
randoop.util.Randomness: total calls to random: 95
randoop.util.Randomness: total calls to random: 96
Successfully created new unique sequence:var0 =  cons : C.<init>() : 
var1 =  method : B.m() : var0 
var2 =  method : B.k() : var0 
var3 =  method : B.m() : var0 
var4 =  method : C.test() : var0 
var5 =  method : B.m() : var0 
var6 =  method : B.m() : var0 
var7 =  method : B.k() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Adding sequence to active sequences of type class C
Sequence after execution: 
C var0 = new C();
// <NormalExecution object=object-of-type-C>;
int var1 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var2 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var3 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var4 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var5 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var6 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var7 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
<randoop.PrimValue, value=23 [var1]  : true
<randoop.PrimValue, value=42 [var2]  : true
<randoop.PrimValue, value=23 [var3]  : true
<randoop.PrimValue, value=23 [var4]  : true
<randoop.PrimValue, value=23 [var5]  : true
<randoop.PrimValue, value=23 [var6]  : true
<randoop.PrimValue, value=42 [var7]  : true

allSequences.size()=26
-------------------------------------------
randoop.util.Randomness: total calls to random: 97
Selected statement: B.m()
Will query component set for objects of typeclass B
getActivesequencesThatYield: entering method, clazz=class B
getActivesequencesThatYield: returning 21 sequences.
components: 21
randoop.util.Randomness: total calls to random: 98
randoop.util.Randomness: total calls to random: 99
Successfully created new unique sequence:var0 =  cons : C.<init>() : 
var1 =  method : B.m() : var0 
var2 =  method : B.k() : var0 
var3 =  method : B.m() : var0 
var4 =  method : B.m() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Adding sequence to active sequences of type class C
Sequence after execution: 
C var0 = new C();
// <NormalExecution object=object-of-type-C>;
int var1 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var2 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var3 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var4 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
<randoop.PrimValue, value=23 [var1]  : true
<randoop.PrimValue, value=42 [var2]  : true
<randoop.PrimValue, value=23 [var3]  : true
<randoop.PrimValue, value=23 [var4]  : true

allSequences.size()=27
-------------------------------------------
randoop.util.Randomness: total calls to random: 100
Selected statement: C.test()
Will query component set for objects of typeclass C
getActivesequencesThatYield: entering method, clazz=class C
getActivesequencesThatYield: returning 22 sequences.
components: 22
randoop.util.Randomness: total calls to random: 101
randoop.util.Randomness: total calls to random: 102
Successfully created new unique sequence:var0 =  cons : C.<init>() : 
var1 =  method : B.m() : var0 
var2 =  method : B.k() : var0 
var3 =  method : C.test() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Adding sequence to active sequences of type class C
Sequence after execution: 
C var0 = new C();
// <NormalExecution object=object-of-type-C>;
int var1 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var2 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var3 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
<randoop.PrimValue, value=23 [var1]  : true
<randoop.PrimValue, value=42 [var2]  : true
<randoop.PrimValue, value=23 [var3]  : true

allSequences.size()=28
-------------------------------------------
randoop.util.Randomness: total calls to random: 103
Selected statement: B.m()
Will query component set for objects of typeclass B
getActivesequencesThatYield: entering method, clazz=class B
getActivesequencesThatYield: returning 23 sequences.
components: 23
randoop.util.Randomness: total calls to random: 104
randoop.util.Randomness: total calls to random: 105
Successfully created new unique sequence:var0 =  cons : C.<init>() : 
var1 =  method : C.test() : var0 
var2 =  method : C.test() : var0 
var3 =  method : C.test() : var0 
var4 =  method : B.m() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Adding sequence to active sequences of type class C
Sequence after execution: 
C var0 = new C();
// <NormalExecution object=object-of-type-C>;
int var1 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var2 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var3 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var4 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
<randoop.PrimValue, value=23 [var1]  : true
<randoop.PrimValue, value=23 [var2]  : true
<randoop.PrimValue, value=23 [var3]  : true
<randoop.PrimValue, value=23 [var4]  : true

allSequences.size()=29
-------------------------------------------
randoop.util.Randomness: total calls to random: 106
Selected statement: B.m()
Will query component set for objects of typeclass B
getActivesequencesThatYield: entering method, clazz=class B
getActivesequencesThatYield: returning 24 sequences.
components: 24
randoop.util.Randomness: total calls to random: 107
randoop.util.Randomness: total calls to random: 108
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 109
Selected statement: B.k()
Will query component set for objects of typeclass B
getActivesequencesThatYield: entering method, clazz=class B
getActivesequencesThatYield: returning 25 sequences.
components: 25
randoop.util.Randomness: total calls to random: 110
randoop.util.Randomness: total calls to random: 111
Successfully created new unique sequence:var0 =  cons : C.<init>() : 
var1 =  method : C.test() : var0 
var2 =  method : C.test() : var0 
var3 =  method : B.m() : var0 
var4 =  method : C.test() : var0 
var5 =  method : B.k() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Adding sequence to active sequences of type class C
Sequence after execution: 
C var0 = new C();
// <NormalExecution object=object-of-type-C>;
int var1 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var2 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var3 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var4 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var5 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
<randoop.PrimValue, value=23 [var1]  : true
<randoop.PrimValue, value=23 [var2]  : true
<randoop.PrimValue, value=23 [var3]  : true
<randoop.PrimValue, value=23 [var4]  : true
<randoop.PrimValue, value=42 [var5]  : true

allSequences.size()=30
-------------------------------------------
randoop.util.Randomness: total calls to random: 112
Selected statement: A.k()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 3 sequences.
components: 3
randoop.util.Randomness: total calls to random: 113
randoop.util.Randomness: total calls to random: 114
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 115
Selected statement: B.m()
Will query component set for objects of typeclass B
getActivesequencesThatYield: entering method, clazz=class B
getActivesequencesThatYield: returning 25 sequences.
components: 25
randoop.util.Randomness: total calls to random: 116
randoop.util.Randomness: total calls to random: 117
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 118
Selected statement: B.k()
Will query component set for objects of typeclass B
getActivesequencesThatYield: entering method, clazz=class B
getActivesequencesThatYield: returning 26 sequences.
components: 26
randoop.util.Randomness: total calls to random: 119
randoop.util.Randomness: total calls to random: 120
Successfully created new unique sequence:var0 =  cons : C.<init>() : 
var1 =  method : B.m() : var0 
var2 =  method : B.k() : var0 
var3 =  method : C.test() : var0 
var4 =  method : B.k() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Adding sequence to active sequences of type class C
Sequence after execution: 
C var0 = new C();
// <NormalExecution object=object-of-type-C>;
int var1 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var2 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var3 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var4 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
<randoop.PrimValue, value=23 [var1]  : true
<randoop.PrimValue, value=42 [var2]  : true
<randoop.PrimValue, value=23 [var3]  : true
<randoop.PrimValue, value=42 [var4]  : true

allSequences.size()=31
-------------------------------------------
randoop.util.Randomness: total calls to random: 121
Selected statement: B.m()
Will query component set for objects of typeclass B
getActivesequencesThatYield: entering method, clazz=class B
getActivesequencesThatYield: returning 26 sequences.
components: 26
randoop.util.Randomness: total calls to random: 122
randoop.util.Randomness: total calls to random: 123
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 124
Selected statement: B.m()
Will query component set for objects of typeclass B
getActivesequencesThatYield: entering method, clazz=class B
getActivesequencesThatYield: returning 26 sequences.
components: 26
randoop.util.Randomness: total calls to random: 125
randoop.util.Randomness: total calls to random: 126
Successfully created new unique sequence:var0 =  cons : C.<init>() : 
var1 =  method : B.m() : var0 
var2 =  method : B.k() : var0 
var3 =  method : B.m() : var0 
var4 =  method : C.test() : var0 
var5 =  method : B.m() : var0 
var6 =  method : B.m() : var0 
var7 =  method : B.m() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Adding sequence to active sequences of type class C
Sequence after execution: 
C var0 = new C();
// <NormalExecution object=object-of-type-C>;
int var1 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var2 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var3 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var4 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var5 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var6 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var7 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
<randoop.PrimValue, value=23 [var1]  : true
<randoop.PrimValue, value=42 [var2]  : true
<randoop.PrimValue, value=23 [var3]  : true
<randoop.PrimValue, value=23 [var4]  : true
<randoop.PrimValue, value=23 [var5]  : true
<randoop.PrimValue, value=23 [var6]  : true
<randoop.PrimValue, value=23 [var7]  : true

allSequences.size()=32
-------------------------------------------
randoop.util.Randomness: total calls to random: 127
Selected statement: B.m()
Will query component set for objects of typeclass B
getActivesequencesThatYield: entering method, clazz=class B
getActivesequencesThatYield: returning 27 sequences.
components: 27
randoop.util.Randomness: total calls to random: 128
randoop.util.Randomness: total calls to random: 129
Successfully created new unique sequence:var0 =  cons : C.<init>() : 
var1 =  method : C.test() : var0 
var2 =  method : C.test() : var0 
var3 =  method : C.test() : var0 
var4 =  method : B.m() : var0 
var5 =  method : B.m() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Adding sequence to active sequences of type class C
Sequence after execution: 
C var0 = new C();
// <NormalExecution object=object-of-type-C>;
int var1 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var2 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var3 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var4 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var5 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
<randoop.PrimValue, value=23 [var1]  : true
<randoop.PrimValue, value=23 [var2]  : true
<randoop.PrimValue, value=23 [var3]  : true
<randoop.PrimValue, value=23 [var4]  : true
<randoop.PrimValue, value=23 [var5]  : true

allSequences.size()=33
-------------------------------------------
randoop.util.Randomness: total calls to random: 130
Selected statement: B.k()
Will query component set for objects of typeclass B
getActivesequencesThatYield: entering method, clazz=class B
getActivesequencesThatYield: returning 29 sequences.
components: 29
randoop.util.Randomness: total calls to random: 131
randoop.util.Randomness: total calls to random: 132
Successfully created new unique sequence:var0 =  cons : C.<init>() : 
var1 =  method : B.m() : var0 
var2 =  method : B.k() : var0 
var3 =  method : B.m() : var0 
var4 =  method : C.test() : var0 
var5 =  method : B.m() : var0 
var6 =  method : B.m() : var0 
var7 =  method : B.k() : var0 
var8 =  method : B.k() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Adding sequence to active sequences of type class C
Sequence after execution: 
C var0 = new C();
// <NormalExecution object=object-of-type-C>;
int var1 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var2 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var3 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var4 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var5 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var6 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var7 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var8 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
<randoop.PrimValue, value=23 [var1]  : true
<randoop.PrimValue, value=42 [var2]  : true
<randoop.PrimValue, value=23 [var3]  : true
<randoop.PrimValue, value=23 [var4]  : true
<randoop.PrimValue, value=23 [var5]  : true
<randoop.PrimValue, value=23 [var6]  : true
<randoop.PrimValue, value=42 [var7]  : true
<randoop.PrimValue, value=42 [var8]  : true

allSequences.size()=34
-------------------------------------------
randoop.util.Randomness: total calls to random: 133
Selected statement: B.m()
Will query component set for objects of typeclass B
getActivesequencesThatYield: entering method, clazz=class B
getActivesequencesThatYield: returning 29 sequences.
components: 29
randoop.util.Randomness: total calls to random: 134
randoop.util.Randomness: total calls to random: 135
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 136
Selected statement: C.test()
Will query component set for objects of typeclass C
getActivesequencesThatYield: entering method, clazz=class C
getActivesequencesThatYield: returning 29 sequences.
components: 29
randoop.util.Randomness: total calls to random: 137
randoop.util.Randomness: total calls to random: 138
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 139
Selected statement: B.m()
Will query component set for objects of typeclass B
getActivesequencesThatYield: entering method, clazz=class B
getActivesequencesThatYield: returning 29 sequences.
components: 29
randoop.util.Randomness: total calls to random: 140
randoop.util.Randomness: total calls to random: 141
Successfully created new unique sequence:var0 =  cons : C.<init>() : 
var1 =  method : B.m() : var0 
var2 =  method : B.k() : var0 
var3 =  method : B.m() : var0 
var4 =  method : B.k() : var0 
var5 =  method : B.m() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Adding sequence to active sequences of type class C
Sequence after execution: 
C var0 = new C();
// <NormalExecution object=object-of-type-C>;
int var1 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var2 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var3 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var4 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var5 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
<randoop.PrimValue, value=23 [var1]  : true
<randoop.PrimValue, value=42 [var2]  : true
<randoop.PrimValue, value=23 [var3]  : true
<randoop.PrimValue, value=42 [var4]  : true
<randoop.PrimValue, value=23 [var5]  : true

allSequences.size()=35
-------------------------------------------
randoop.util.Randomness: total calls to random: 142
Selected statement: B.k()
Will query component set for objects of typeclass B
getActivesequencesThatYield: entering method, clazz=class B
getActivesequencesThatYield: returning 31 sequences.
components: 31
randoop.util.Randomness: total calls to random: 143
randoop.util.Randomness: total calls to random: 144
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 145
Selected statement: A.k()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 3 sequences.
components: 3
randoop.util.Randomness: total calls to random: 146
randoop.util.Randomness: total calls to random: 147
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 148
Selected statement: A.k()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 3 sequences.
components: 3
randoop.util.Randomness: total calls to random: 149
randoop.util.Randomness: total calls to random: 150
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.k() : var0 
var2 =  method : A.k() : var0 
var3 =  method : A.k() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
int var1 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var2 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var3 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
<randoop.PrimValue, value=23 [var1]  : true
<randoop.PrimValue, value=23 [var2]  : true
<randoop.PrimValue, value=23 [var3]  : true

allSequences.size()=36
-------------------------------------------
randoop.util.Randomness: total calls to random: 151
Selected statement: B.m()
Will query component set for objects of typeclass B
getActivesequencesThatYield: entering method, clazz=class B
getActivesequencesThatYield: returning 30 sequences.
components: 30
randoop.util.Randomness: total calls to random: 152
randoop.util.Randomness: total calls to random: 153
Successfully created new unique sequence:var0 =  cons : C.<init>() : 
var1 =  method : C.test() : var0 
var2 =  method : C.test() : var0 
var3 =  method : B.m() : var0 
var4 =  method : C.test() : var0 
var5 =  method : B.m() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Adding sequence to active sequences of type class C
Sequence after execution: 
C var0 = new C();
// <NormalExecution object=object-of-type-C>;
int var1 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var2 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var3 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var4 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var5 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
<randoop.PrimValue, value=23 [var1]  : true
<randoop.PrimValue, value=23 [var2]  : true
<randoop.PrimValue, value=23 [var3]  : true
<randoop.PrimValue, value=23 [var4]  : true
<randoop.PrimValue, value=23 [var5]  : true

allSequences.size()=37
-------------------------------------------
randoop.util.Randomness: total calls to random: 154
Selected statement: B.k()
Will query component set for objects of typeclass B
getActivesequencesThatYield: entering method, clazz=class B
getActivesequencesThatYield: returning 32 sequences.
components: 32
randoop.util.Randomness: total calls to random: 155
randoop.util.Randomness: total calls to random: 156
Successfully created new unique sequence:var0 =  cons : C.<init>() : 
var1 =  method : C.test() : var0 
var2 =  method : C.test() : var0 
var3 =  method : B.m() : var0 
var4 =  method : C.test() : var0 
var5 =  method : B.k() : var0 
var6 =  method : B.k() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Adding sequence to active sequences of type class C
Sequence after execution: 
C var0 = new C();
// <NormalExecution object=object-of-type-C>;
int var1 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var2 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var3 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var4 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var5 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var6 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
<randoop.PrimValue, value=23 [var1]  : true
<randoop.PrimValue, value=23 [var2]  : true
<randoop.PrimValue, value=23 [var3]  : true
<randoop.PrimValue, value=23 [var4]  : true
<randoop.PrimValue, value=42 [var5]  : true
<randoop.PrimValue, value=42 [var6]  : true

allSequences.size()=38
-------------------------------------------
randoop.util.Randomness: total calls to random: 157
Selected statement: C.test()
Will query component set for objects of typeclass C
getActivesequencesThatYield: entering method, clazz=class C
getActivesequencesThatYield: returning 32 sequences.
components: 32
randoop.util.Randomness: total calls to random: 158
randoop.util.Randomness: total calls to random: 159
Successfully created new unique sequence:var0 =  cons : C.<init>() : 
var1 =  method : B.m() : var0 
var2 =  method : B.k() : var0 
var3 =  method : B.m() : var0 
var4 =  method : C.test() : var0 
var5 =  method : B.m() : var0 
var6 =  method : B.m() : var0 
var7 =  method : B.k() : var0 
var8 =  method : C.test() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Adding sequence to active sequences of type class C
Sequence after execution: 
C var0 = new C();
// <NormalExecution object=object-of-type-C>;
int var1 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var2 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var3 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var4 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var5 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var6 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var7 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var8 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
<randoop.PrimValue, value=23 [var1]  : true
<randoop.PrimValue, value=42 [var2]  : true
<randoop.PrimValue, value=23 [var3]  : true
<randoop.PrimValue, value=23 [var4]  : true
<randoop.PrimValue, value=23 [var5]  : true
<randoop.PrimValue, value=23 [var6]  : true
<randoop.PrimValue, value=42 [var7]  : true
<randoop.PrimValue, value=23 [var8]  : true

allSequences.size()=39
-------------------------------------------
randoop.util.Randomness: total calls to random: 160
Selected statement: B.k()
Will query component set for objects of typeclass B
getActivesequencesThatYield: entering method, clazz=class B
getActivesequencesThatYield: returning 34 sequences.
components: 34
randoop.util.Randomness: total calls to random: 161
randoop.util.Randomness: total calls to random: 162
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 163
Selected statement: B.m()
Will query component set for objects of typeclass B
getActivesequencesThatYield: entering method, clazz=class B
getActivesequencesThatYield: returning 33 sequences.
components: 33
randoop.util.Randomness: total calls to random: 164
randoop.util.Randomness: total calls to random: 165
Successfully created new unique sequence:var0 =  cons : C.<init>() : 
var1 =  method : C.test() : var0 
var2 =  method : C.test() : var0 
var3 =  method : B.m() : var0 
var4 =  method : B.m() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Adding sequence to active sequences of type class C
Sequence after execution: 
C var0 = new C();
// <NormalExecution object=object-of-type-C>;
int var1 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var2 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var3 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var4 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
<randoop.PrimValue, value=23 [var1]  : true
<randoop.PrimValue, value=23 [var2]  : true
<randoop.PrimValue, value=23 [var3]  : true
<randoop.PrimValue, value=23 [var4]  : true

allSequences.size()=40
-------------------------------------------
randoop.util.Randomness: total calls to random: 166
Selected statement: A.k()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 4 sequences.
components: 4
randoop.util.Randomness: total calls to random: 167
randoop.util.Randomness: total calls to random: 168
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 169
Selected statement: B.k()
Will query component set for objects of typeclass B
getActivesequencesThatYield: entering method, clazz=class B
getActivesequencesThatYield: returning 35 sequences.
components: 35
randoop.util.Randomness: total calls to random: 170
randoop.util.Randomness: total calls to random: 171
Successfully created new unique sequence:var0 =  cons : C.<init>() : 
var1 =  method : C.test() : var0 
var2 =  method : C.test() : var0 
var3 =  method : B.k() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Adding sequence to active sequences of type class C
Sequence after execution: 
C var0 = new C();
// <NormalExecution object=object-of-type-C>;
int var1 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var2 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var3 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
<randoop.PrimValue, value=23 [var1]  : true
<randoop.PrimValue, value=23 [var2]  : true
<randoop.PrimValue, value=42 [var3]  : true

allSequences.size()=41
-------------------------------------------
randoop.util.Randomness: total calls to random: 172
Selected statement: B.m()
Will query component set for objects of typeclass B
getActivesequencesThatYield: entering method, clazz=class B
getActivesequencesThatYield: returning 35 sequences.
components: 35
randoop.util.Randomness: total calls to random: 173
randoop.util.Randomness: total calls to random: 174
Successfully created new unique sequence:var0 =  cons : C.<init>() : 
var1 =  method : C.test() : var0 
var2 =  method : C.test() : var0 
var3 =  method : B.m() : var0 
var4 =  method : B.m() : var0 
var5 =  method : B.m() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Adding sequence to active sequences of type class C
Sequence after execution: 
C var0 = new C();
// <NormalExecution object=object-of-type-C>;
int var1 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var2 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var3 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var4 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var5 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
<randoop.PrimValue, value=23 [var1]  : true
<randoop.PrimValue, value=23 [var2]  : true
<randoop.PrimValue, value=23 [var3]  : true
<randoop.PrimValue, value=23 [var4]  : true
<randoop.PrimValue, value=23 [var5]  : true

allSequences.size()=42
-------------------------------------------
randoop.util.Randomness: total calls to random: 175
Selected statement: A.k()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 4 sequences.
components: 4
randoop.util.Randomness: total calls to random: 176
randoop.util.Randomness: total calls to random: 177
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 178
Selected statement: C.test()
Will query component set for objects of typeclass C
getActivesequencesThatYield: entering method, clazz=class C
getActivesequencesThatYield: returning 36 sequences.
components: 36
randoop.util.Randomness: total calls to random: 179
randoop.util.Randomness: total calls to random: 180
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 181
Selected statement: B.m()
Will query component set for objects of typeclass B
getActivesequencesThatYield: entering method, clazz=class B
getActivesequencesThatYield: returning 36 sequences.
components: 36
randoop.util.Randomness: total calls to random: 182
randoop.util.Randomness: total calls to random: 183
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 184
Selected statement: B.m()
Will query component set for objects of typeclass B
getActivesequencesThatYield: entering method, clazz=class B
getActivesequencesThatYield: returning 36 sequences.
components: 36
randoop.util.Randomness: total calls to random: 185
randoop.util.Randomness: total calls to random: 186
Successfully created new unique sequence:var0 =  cons : C.<init>() : 
var1 =  method : B.m() : var0 
var2 =  method : B.k() : var0 
var3 =  method : B.m() : var0 
var4 =  method : C.test() : var0 
var5 =  method : B.m() : var0 
var6 =  method : B.m() : var0 
var7 =  method : B.k() : var0 
var8 =  method : B.k() : var0 
var9 =  method : B.m() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Adding sequence to active sequences of type class C
Sequence after execution: 
C var0 = new C();
// <NormalExecution object=object-of-type-C>;
int var1 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var2 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var3 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var4 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var5 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var6 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var7 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var8 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var9 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
<randoop.PrimValue, value=23 [var1]  : true
<randoop.PrimValue, value=42 [var2]  : true
<randoop.PrimValue, value=23 [var3]  : true
<randoop.PrimValue, value=23 [var4]  : true
<randoop.PrimValue, value=23 [var5]  : true
<randoop.PrimValue, value=23 [var6]  : true
<randoop.PrimValue, value=42 [var7]  : true
<randoop.PrimValue, value=42 [var8]  : true
<randoop.PrimValue, value=23 [var9]  : true

allSequences.size()=43
-------------------------------------------
randoop.util.Randomness: total calls to random: 187
Selected statement: C.test()
Will query component set for objects of typeclass C
getActivesequencesThatYield: entering method, clazz=class C
getActivesequencesThatYield: returning 37 sequences.
components: 37
randoop.util.Randomness: total calls to random: 188
randoop.util.Randomness: total calls to random: 189
Successfully created new unique sequence:var0 =  cons : C.<init>() : 
var1 =  method : B.m() : var0 
var2 =  method : B.k() : var0 
var3 =  method : B.m() : var0 
var4 =  method : B.k() : var0 
var5 =  method : B.m() : var0 
var6 =  method : C.test() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Adding sequence to active sequences of type class C
Sequence after execution: 
C var0 = new C();
// <NormalExecution object=object-of-type-C>;
int var1 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var2 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var3 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var4 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var5 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var6 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
<randoop.PrimValue, value=23 [var1]  : true
<randoop.PrimValue, value=42 [var2]  : true
<randoop.PrimValue, value=23 [var3]  : true
<randoop.PrimValue, value=42 [var4]  : true
<randoop.PrimValue, value=23 [var5]  : true
<randoop.PrimValue, value=23 [var6]  : true

allSequences.size()=44
-------------------------------------------
randoop.util.Randomness: total calls to random: 190
Selected statement: A.k()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 4 sequences.
components: 4
randoop.util.Randomness: total calls to random: 191
randoop.util.Randomness: total calls to random: 192
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 193
Selected statement: C.test()
Will query component set for objects of typeclass C
getActivesequencesThatYield: entering method, clazz=class C
getActivesequencesThatYield: returning 38 sequences.
components: 38
randoop.util.Randomness: total calls to random: 194
randoop.util.Randomness: total calls to random: 195
Successfully created new unique sequence:var0 =  cons : C.<init>() : 
var1 =  method : C.test() : var0 
var2 =  method : C.test() : var0 
var3 =  method : C.test() : var0 
var4 =  method : B.m() : var0 
var5 =  method : C.test() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Adding sequence to active sequences of type class C
Sequence after execution: 
C var0 = new C();
// <NormalExecution object=object-of-type-C>;
int var1 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var2 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var3 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var4 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var5 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
<randoop.PrimValue, value=23 [var1]  : true
<randoop.PrimValue, value=23 [var2]  : true
<randoop.PrimValue, value=23 [var3]  : true
<randoop.PrimValue, value=23 [var4]  : true
<randoop.PrimValue, value=23 [var5]  : true

allSequences.size()=45
-------------------------------------------
randoop.util.Randomness: total calls to random: 196
Selected statement: A.k()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 4 sequences.
components: 4
randoop.util.Randomness: total calls to random: 197
randoop.util.Randomness: total calls to random: 198
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 199
Selected statement: C.test()
Will query component set for objects of typeclass C
getActivesequencesThatYield: entering method, clazz=class C
getActivesequencesThatYield: returning 39 sequences.
components: 39
randoop.util.Randomness: total calls to random: 200
randoop.util.Randomness: total calls to random: 201
Successfully created new unique sequence:var0 =  cons : C.<init>() : 
var1 =  method : C.test() : var0 
var2 =  method : C.test() : var0 
var3 =  method : B.m() : var0 
var4 =  method : C.test() : var0 
var5 =  method : B.k() : var0 
var6 =  method : B.k() : var0 
var7 =  method : C.test() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Adding sequence to active sequences of type class C
Sequence after execution: 
C var0 = new C();
// <NormalExecution object=object-of-type-C>;
int var1 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var2 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var3 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var4 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var5 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var6 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var7 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
<randoop.PrimValue, value=23 [var1]  : true
<randoop.PrimValue, value=23 [var2]  : true
<randoop.PrimValue, value=23 [var3]  : true
<randoop.PrimValue, value=23 [var4]  : true
<randoop.PrimValue, value=42 [var5]  : true
<randoop.PrimValue, value=42 [var6]  : true
<randoop.PrimValue, value=23 [var7]  : true

allSequences.size()=46
-------------------------------------------
randoop.util.Randomness: total calls to random: 202
Selected statement: B.k()
Will query component set for objects of typeclass B
getActivesequencesThatYield: entering method, clazz=class B
getActivesequencesThatYield: returning 41 sequences.
components: 41
randoop.util.Randomness: total calls to random: 203
randoop.util.Randomness: total calls to random: 204
Successfully created new unique sequence:var0 =  cons : C.<init>() : 
var1 =  method : B.m() : var0 
var2 =  method : B.k() : var0 
var3 =  method : B.k() : var0 
var4 =  method : B.k() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Adding sequence to active sequences of type class C
Sequence after execution: 
C var0 = new C();
// <NormalExecution object=object-of-type-C>;
int var1 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var2 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var3 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var4 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
<randoop.PrimValue, value=23 [var1]  : true
<randoop.PrimValue, value=42 [var2]  : true
<randoop.PrimValue, value=42 [var3]  : true
<randoop.PrimValue, value=42 [var4]  : true

allSequences.size()=47
-------------------------------------------
randoop.util.Randomness: total calls to random: 205
Selected statement: C.test()
Will query component set for objects of typeclass C
getActivesequencesThatYield: entering method, clazz=class C
getActivesequencesThatYield: returning 41 sequences.
components: 41
randoop.util.Randomness: total calls to random: 206
randoop.util.Randomness: total calls to random: 207
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 208
Selected statement: B.k()
Will query component set for objects of typeclass B
getActivesequencesThatYield: entering method, clazz=class B
getActivesequencesThatYield: returning 42 sequences.
components: 42
randoop.util.Randomness: total calls to random: 209
randoop.util.Randomness: total calls to random: 210
Successfully created new unique sequence:var0 =  cons : C.<init>() : 
var1 =  method : C.test() : var0 
var2 =  method : C.test() : var0 
var3 =  method : C.test() : var0 
var4 =  method : C.test() : var0 
var5 =  method : B.k() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Adding sequence to active sequences of type class C
Sequence after execution: 
C var0 = new C();
// <NormalExecution object=object-of-type-C>;
int var1 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var2 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var3 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var4 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var5 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
<randoop.PrimValue, value=23 [var1]  : true
<randoop.PrimValue, value=23 [var2]  : true
<randoop.PrimValue, value=23 [var3]  : true
<randoop.PrimValue, value=23 [var4]  : true
<randoop.PrimValue, value=42 [var5]  : true

allSequences.size()=48
-------------------------------------------
randoop.util.Randomness: total calls to random: 211
Selected statement: C.test()
Will query component set for objects of typeclass C
getActivesequencesThatYield: entering method, clazz=class C
getActivesequencesThatYield: returning 42 sequences.
components: 42
randoop.util.Randomness: total calls to random: 212
randoop.util.Randomness: total calls to random: 213
Successfully created new unique sequence:var0 =  cons : C.<init>() : 
var1 =  method : B.m() : var0 
var2 =  method : B.k() : var0 
var3 =  method : B.m() : var0 
var4 =  method : C.test() : var0 
var5 =  method : B.m() : var0 
var6 =  method : B.m() : var0 
var7 =  method : C.test() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Adding sequence to active sequences of type class C
Sequence after execution: 
C var0 = new C();
// <NormalExecution object=object-of-type-C>;
int var1 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var2 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var3 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var4 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var5 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var6 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var7 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
<randoop.PrimValue, value=23 [var1]  : true
<randoop.PrimValue, value=42 [var2]  : true
<randoop.PrimValue, value=23 [var3]  : true
<randoop.PrimValue, value=23 [var4]  : true
<randoop.PrimValue, value=23 [var5]  : true
<randoop.PrimValue, value=23 [var6]  : true
<randoop.PrimValue, value=23 [var7]  : true

allSequences.size()=49
-------------------------------------------
randoop.util.Randomness: total calls to random: 214
Selected statement: C.test()
Will query component set for objects of typeclass C
getActivesequencesThatYield: entering method, clazz=class C
getActivesequencesThatYield: returning 43 sequences.
components: 43
randoop.util.Randomness: total calls to random: 215
randoop.util.Randomness: total calls to random: 216
Successfully created new unique sequence:var0 =  cons : C.<init>() : 
var1 =  method : B.k() : var0 
var2 =  method : C.test() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Adding sequence to active sequences of type class C
Sequence after execution: 
C var0 = new C();
// <NormalExecution object=object-of-type-C>;
int var1 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var2 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
<randoop.PrimValue, value=42 [var1]  : true
<randoop.PrimValue, value=23 [var2]  : true

allSequences.size()=50
-------------------------------------------
randoop.util.Randomness: total calls to random: 217
Selected statement: A.k()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 4 sequences.
components: 4
randoop.util.Randomness: total calls to random: 218
randoop.util.Randomness: total calls to random: 219
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 220
Selected statement: A.k()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 4 sequences.
components: 4
randoop.util.Randomness: total calls to random: 221
randoop.util.Randomness: total calls to random: 222
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.k() : var0 
var2 =  method : A.k() : var0 
var3 =  method : A.k() : var0 
var4 =  method : A.k() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
int var1 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var2 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var3 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var4 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
<randoop.PrimValue, value=23 [var1]  : true
<randoop.PrimValue, value=23 [var2]  : true
<randoop.PrimValue, value=23 [var3]  : true
<randoop.PrimValue, value=23 [var4]  : true

allSequences.size()=51
-------------------------------------------
randoop.util.Randomness: total calls to random: 223
Selected statement: A.k()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 5 sequences.
components: 5
randoop.util.Randomness: total calls to random: 224
randoop.util.Randomness: total calls to random: 225
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 226
Selected statement: C.test()
Will query component set for objects of typeclass C
getActivesequencesThatYield: entering method, clazz=class C
getActivesequencesThatYield: returning 44 sequences.
components: 44
randoop.util.Randomness: total calls to random: 227
randoop.util.Randomness: total calls to random: 228
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 229
Selected statement: B.m()
Will query component set for objects of typeclass B
getActivesequencesThatYield: entering method, clazz=class B
getActivesequencesThatYield: returning 44 sequences.
components: 44
randoop.util.Randomness: total calls to random: 230
randoop.util.Randomness: total calls to random: 231
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 232
Selected statement: A.k()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 5 sequences.
components: 5
randoop.util.Randomness: total calls to random: 233
randoop.util.Randomness: total calls to random: 234
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 235
Selected statement: C.test()
Will query component set for objects of typeclass C
getActivesequencesThatYield: entering method, clazz=class C
getActivesequencesThatYield: returning 44 sequences.
components: 44
randoop.util.Randomness: total calls to random: 236
randoop.util.Randomness: total calls to random: 237
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 238
Selected statement: C.test()
Will query component set for objects of typeclass C
getActivesequencesThatYield: entering method, clazz=class C
getActivesequencesThatYield: returning 44 sequences.
components: 44
randoop.util.Randomness: total calls to random: 239
randoop.util.Randomness: total calls to random: 240
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 241
Selected statement: C.test()
Will query component set for objects of typeclass C
getActivesequencesThatYield: entering method, clazz=class C
getActivesequencesThatYield: returning 44 sequences.
components: 44
randoop.util.Randomness: total calls to random: 242
randoop.util.Randomness: total calls to random: 243
Successfully created new unique sequence:var0 =  cons : C.<init>() : 
var1 =  method : C.test() : var0 
var2 =  method : C.test() : var0 
var3 =  method : C.test() : var0 
var4 =  method : B.m() : var0 
var5 =  method : C.test() : var0 
var6 =  method : C.test() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Adding sequence to active sequences of type class C
Sequence after execution: 
C var0 = new C();
// <NormalExecution object=object-of-type-C>;
int var1 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var2 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var3 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var4 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var5 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var6 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
<randoop.PrimValue, value=23 [var1]  : true
<randoop.PrimValue, value=23 [var2]  : true
<randoop.PrimValue, value=23 [var3]  : true
<randoop.PrimValue, value=23 [var4]  : true
<randoop.PrimValue, value=23 [var5]  : true
<randoop.PrimValue, value=23 [var6]  : true

allSequences.size()=52
-------------------------------------------
randoop.util.Randomness: total calls to random: 244
Selected statement: B.m()
Will query component set for objects of typeclass B
getActivesequencesThatYield: entering method, clazz=class B
getActivesequencesThatYield: returning 45 sequences.
components: 45
randoop.util.Randomness: total calls to random: 245
randoop.util.Randomness: total calls to random: 246
Successfully created new unique sequence:var0 =  cons : C.<init>() : 
var1 =  method : C.test() : var0 
var2 =  method : C.test() : var0 
var3 =  method : B.m() : var0 
var4 =  method : C.test() : var0 
var5 =  method : B.k() : var0 
var6 =  method : B.m() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Adding sequence to active sequences of type class C
Sequence after execution: 
C var0 = new C();
// <NormalExecution object=object-of-type-C>;
int var1 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var2 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var3 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var4 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var5 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var6 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
<randoop.PrimValue, value=23 [var1]  : true
<randoop.PrimValue, value=23 [var2]  : true
<randoop.PrimValue, value=23 [var3]  : true
<randoop.PrimValue, value=23 [var4]  : true
<randoop.PrimValue, value=42 [var5]  : true
<randoop.PrimValue, value=23 [var6]  : true

allSequences.size()=53
-------------------------------------------
randoop.util.Randomness: total calls to random: 247
Selected statement: C.test()
Will query component set for objects of typeclass C
getActivesequencesThatYield: entering method, clazz=class C
getActivesequencesThatYield: returning 46 sequences.
components: 46
randoop.util.Randomness: total calls to random: 248
randoop.util.Randomness: total calls to random: 249
Successfully created new unique sequence:var0 =  cons : C.<init>() : 
var1 =  method : C.test() : var0 
var2 =  method : C.test() : var0 
var3 =  method : B.m() : var0 
var4 =  method : C.test() : var0 
var5 =  method : B.k() : var0 
var6 =  method : B.k() : var0 
var7 =  method : C.test() : var0 
var8 =  method : C.test() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Adding sequence to active sequences of type class C
Sequence after execution: 
C var0 = new C();
// <NormalExecution object=object-of-type-C>;
int var1 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var2 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var3 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var4 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var5 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var6 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var7 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var8 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
<randoop.PrimValue, value=23 [var1]  : true
<randoop.PrimValue, value=23 [var2]  : true
<randoop.PrimValue, value=23 [var3]  : true
<randoop.PrimValue, value=23 [var4]  : true
<randoop.PrimValue, value=42 [var5]  : true
<randoop.PrimValue, value=42 [var6]  : true
<randoop.PrimValue, value=23 [var7]  : true
<randoop.PrimValue, value=23 [var8]  : true

allSequences.size()=54
-------------------------------------------
randoop.util.Randomness: total calls to random: 250
Selected statement: A.k()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 5 sequences.
components: 5
randoop.util.Randomness: total calls to random: 251
randoop.util.Randomness: total calls to random: 252
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.k() : var0 
var2 =  method : A.k() : var0 
var3 =  method : A.k() : var0 
var4 =  method : A.k() : var0 
var5 =  method : A.k() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
int var1 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var2 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var3 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var4 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var5 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
<randoop.PrimValue, value=23 [var1]  : true
<randoop.PrimValue, value=23 [var2]  : true
<randoop.PrimValue, value=23 [var3]  : true
<randoop.PrimValue, value=23 [var4]  : true
<randoop.PrimValue, value=23 [var5]  : true

allSequences.size()=55
-------------------------------------------
randoop.util.Randomness: total calls to random: 253
Selected statement: C.test()
Will query component set for objects of typeclass C
getActivesequencesThatYield: entering method, clazz=class C
getActivesequencesThatYield: returning 47 sequences.
components: 47
randoop.util.Randomness: total calls to random: 254
randoop.util.Randomness: total calls to random: 255
Successfully created new unique sequence:var0 =  cons : C.<init>() : 
var1 =  method : C.test() : var0 
var2 =  method : C.test() : var0 
var3 =  method : C.test() : var0 
var4 =  method : B.m() : var0 
var5 =  method : B.m() : var0 
var6 =  method : C.test() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Adding sequence to active sequences of type class C
Sequence after execution: 
C var0 = new C();
// <NormalExecution object=object-of-type-C>;
int var1 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var2 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var3 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var4 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var5 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var6 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
<randoop.PrimValue, value=23 [var1]  : true
<randoop.PrimValue, value=23 [var2]  : true
<randoop.PrimValue, value=23 [var3]  : true
<randoop.PrimValue, value=23 [var4]  : true
<randoop.PrimValue, value=23 [var5]  : true
<randoop.PrimValue, value=23 [var6]  : true

allSequences.size()=56
-------------------------------------------
randoop.util.Randomness: total calls to random: 256
Selected statement: A.k()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 6 sequences.
components: 6
randoop.util.Randomness: total calls to random: 257
randoop.util.Randomness: total calls to random: 258
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 259
Selected statement: A.k()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 6 sequences.
components: 6
randoop.util.Randomness: total calls to random: 260
randoop.util.Randomness: total calls to random: 261
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 262
Selected statement: C.test()
Will query component set for objects of typeclass C
getActivesequencesThatYield: entering method, clazz=class C
getActivesequencesThatYield: returning 48 sequences.
components: 48
randoop.util.Randomness: total calls to random: 263
randoop.util.Randomness: total calls to random: 264
Successfully created new unique sequence:var0 =  cons : C.<init>() : 
var1 =  method : B.m() : var0 
var2 =  method : B.k() : var0 
var3 =  method : B.m() : var0 
var4 =  method : C.test() : var0 
var5 =  method : C.test() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Adding sequence to active sequences of type class C
Sequence after execution: 
C var0 = new C();
// <NormalExecution object=object-of-type-C>;
int var1 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var2 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var3 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var4 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var5 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
<randoop.PrimValue, value=23 [var1]  : true
<randoop.PrimValue, value=42 [var2]  : true
<randoop.PrimValue, value=23 [var3]  : true
<randoop.PrimValue, value=23 [var4]  : true
<randoop.PrimValue, value=23 [var5]  : true

allSequences.size()=57
-------------------------------------------
randoop.util.Randomness: total calls to random: 265
Selected statement: B.m()
Will query component set for objects of typeclass B
getActivesequencesThatYield: entering method, clazz=class B
getActivesequencesThatYield: returning 49 sequences.
components: 49
randoop.util.Randomness: total calls to random: 266
randoop.util.Randomness: total calls to random: 267
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 268
Selected statement: B.k()
Will query component set for objects of typeclass B
getActivesequencesThatYield: entering method, clazz=class B
getActivesequencesThatYield: returning 50 sequences.
components: 50
randoop.util.Randomness: total calls to random: 269
randoop.util.Randomness: total calls to random: 270
Successfully created new unique sequence:var0 =  cons : C.<init>() : 
var1 =  method : B.m() : var0 
var2 =  method : B.k() : var0 
var3 =  method : B.m() : var0 
var4 =  method : C.test() : var0 
var5 =  method : B.m() : var0 
var6 =  method : B.m() : var0 
var7 =  method : B.k() : var0 
var8 =  method : B.k() : var0 
var9 =  method : B.m() : var0 
var10 =  method : B.k() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Adding sequence to active sequences of type class C
Sequence after execution: 
C var0 = new C();
// <NormalExecution object=object-of-type-C>;
int var1 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var2 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var3 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var4 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var5 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var6 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var7 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var8 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var9 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var10 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
<randoop.PrimValue, value=23 [var1]  : true
<randoop.PrimValue, value=42 [var2]  : true
<randoop.PrimValue, value=23 [var3]  : true
<randoop.PrimValue, value=23 [var4]  : true
<randoop.PrimValue, value=23 [var5]  : true
<randoop.PrimValue, value=23 [var6]  : true
<randoop.PrimValue, value=42 [var7]  : true
<randoop.PrimValue, value=42 [var8]  : true
<randoop.PrimValue, value=23 [var9]  : true
<randoop.PrimValue, value=42 [var10]  : true

allSequences.size()=58
-------------------------------------------
randoop.util.Randomness: total calls to random: 271
Selected statement: B.k()
Will query component set for objects of typeclass B
getActivesequencesThatYield: entering method, clazz=class B
getActivesequencesThatYield: returning 51 sequences.
components: 51
randoop.util.Randomness: total calls to random: 272
randoop.util.Randomness: total calls to random: 273
Successfully created new unique sequence:var0 =  cons : C.<init>() : 
var1 =  method : C.test() : var0 
var2 =  method : C.test() : var0 
var3 =  method : C.test() : var0 
var4 =  method : B.m() : var0 
var5 =  method : C.test() : var0 
var6 =  method : C.test() : var0 
var7 =  method : B.k() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Adding sequence to active sequences of type class C
Sequence after execution: 
C var0 = new C();
// <NormalExecution object=object-of-type-C>;
int var1 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var2 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var3 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var4 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var5 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var6 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var7 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
<randoop.PrimValue, value=23 [var1]  : true
<randoop.PrimValue, value=23 [var2]  : true
<randoop.PrimValue, value=23 [var3]  : true
<randoop.PrimValue, value=23 [var4]  : true
<randoop.PrimValue, value=23 [var5]  : true
<randoop.PrimValue, value=23 [var6]  : true
<randoop.PrimValue, value=42 [var7]  : true

allSequences.size()=59
-------------------------------------------
randoop.util.Randomness: total calls to random: 274
Selected statement: A.k()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 6 sequences.
components: 6
randoop.util.Randomness: total calls to random: 275
randoop.util.Randomness: total calls to random: 276
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 277
Selected statement: A.k()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 6 sequences.
components: 6
randoop.util.Randomness: total calls to random: 278
randoop.util.Randomness: total calls to random: 279
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.k() : var0 
var2 =  method : A.k() : var0 
var3 =  method : A.k() : var0 
var4 =  method : A.k() : var0 
var5 =  method : A.k() : var0 
var6 =  method : A.k() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
int var1 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var2 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var3 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var4 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var5 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var6 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
<randoop.PrimValue, value=23 [var1]  : true
<randoop.PrimValue, value=23 [var2]  : true
<randoop.PrimValue, value=23 [var3]  : true
<randoop.PrimValue, value=23 [var4]  : true
<randoop.PrimValue, value=23 [var5]  : true
<randoop.PrimValue, value=23 [var6]  : true

allSequences.size()=60
-------------------------------------------
randoop.util.Randomness: total calls to random: 280
Selected statement: A.k()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 7 sequences.
components: 7
randoop.util.Randomness: total calls to random: 281
randoop.util.Randomness: total calls to random: 282
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 283
Selected statement: B.k()
Will query component set for objects of typeclass B
getActivesequencesThatYield: entering method, clazz=class B
getActivesequencesThatYield: returning 52 sequences.
components: 52
randoop.util.Randomness: total calls to random: 284
randoop.util.Randomness: total calls to random: 285
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 286
Selected statement: A.k()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 7 sequences.
components: 7
randoop.util.Randomness: total calls to random: 287
randoop.util.Randomness: total calls to random: 288
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 289
Selected statement: A.k()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 7 sequences.
components: 7
randoop.util.Randomness: total calls to random: 290
randoop.util.Randomness: total calls to random: 291
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 292
Selected statement: B.m()
Will query component set for objects of typeclass B
getActivesequencesThatYield: entering method, clazz=class B
getActivesequencesThatYield: returning 51 sequences.
components: 51
randoop.util.Randomness: total calls to random: 293
randoop.util.Randomness: total calls to random: 294
Successfully created new unique sequence:var0 =  cons : C.<init>() : 
var1 =  method : B.m() : var0 
var2 =  method : B.k() : var0 
var3 =  method : B.m() : var0 
var4 =  method : C.test() : var0 
var5 =  method : C.test() : var0 
var6 =  method : B.m() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Adding sequence to active sequences of type class C
Sequence after execution: 
C var0 = new C();
// <NormalExecution object=object-of-type-C>;
int var1 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var2 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var3 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var4 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var5 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var6 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
<randoop.PrimValue, value=23 [var1]  : true
<randoop.PrimValue, value=42 [var2]  : true
<randoop.PrimValue, value=23 [var3]  : true
<randoop.PrimValue, value=23 [var4]  : true
<randoop.PrimValue, value=23 [var5]  : true
<randoop.PrimValue, value=23 [var6]  : true

allSequences.size()=61
-------------------------------------------
randoop.util.Randomness: total calls to random: 295
Selected statement: C.test()
Will query component set for objects of typeclass C
getActivesequencesThatYield: entering method, clazz=class C
getActivesequencesThatYield: returning 52 sequences.
components: 52
randoop.util.Randomness: total calls to random: 296
randoop.util.Randomness: total calls to random: 297
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 298
Selected statement: B.k()
Will query component set for objects of typeclass B
getActivesequencesThatYield: entering method, clazz=class B
getActivesequencesThatYield: returning 53 sequences.
components: 53
randoop.util.Randomness: total calls to random: 299
randoop.util.Randomness: total calls to random: 300
Successfully created new unique sequence:var0 =  cons : B.<init>() : 
var1 =  method : B.k() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Adding sequence to active sequences of type class B
Sequence after execution: 
B var0 = new B();
// <NormalExecution object=object-of-type-B>;
int var1 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
<randoop.PrimValue, value=42 [var1]  : true

allSequences.size()=62
-------------------------------------------
randoop.util.Randomness: total calls to random: 301
Selected statement: A.k()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 7 sequences.
components: 7
randoop.util.Randomness: total calls to random: 302
randoop.util.Randomness: total calls to random: 303
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 304
Selected statement: C.test()
Will query component set for objects of typeclass C
getActivesequencesThatYield: entering method, clazz=class C
getActivesequencesThatYield: returning 52 sequences.
components: 52
randoop.util.Randomness: total calls to random: 305
randoop.util.Randomness: total calls to random: 306
Successfully created new unique sequence:var0 =  cons : C.<init>() : 
var1 =  method : C.test() : var0 
var2 =  method : C.test() : var0 
var3 =  method : B.m() : var0 
var4 =  method : B.m() : var0 
var5 =  method : B.m() : var0 
var6 =  method : C.test() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Adding sequence to active sequences of type class C
Sequence after execution: 
C var0 = new C();
// <NormalExecution object=object-of-type-C>;
int var1 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var2 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var3 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var4 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var5 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var6 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
<randoop.PrimValue, value=23 [var1]  : true
<randoop.PrimValue, value=23 [var2]  : true
<randoop.PrimValue, value=23 [var3]  : true
<randoop.PrimValue, value=23 [var4]  : true
<randoop.PrimValue, value=23 [var5]  : true
<randoop.PrimValue, value=23 [var6]  : true

allSequences.size()=63
-------------------------------------------
randoop.util.Randomness: total calls to random: 307
Selected statement: C.test()
Will query component set for objects of typeclass C
getActivesequencesThatYield: entering method, clazz=class C
getActivesequencesThatYield: returning 53 sequences.
components: 53
randoop.util.Randomness: total calls to random: 308
randoop.util.Randomness: total calls to random: 309
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 310
Selected statement: A.k()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 7 sequences.
components: 7
randoop.util.Randomness: total calls to random: 311
randoop.util.Randomness: total calls to random: 312
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 313
Selected statement: A.k()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 7 sequences.
components: 7
randoop.util.Randomness: total calls to random: 314
randoop.util.Randomness: total calls to random: 315
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.k() : var0 
var2 =  method : A.k() : var0 
var3 =  method : A.k() : var0 
var4 =  method : A.k() : var0 
var5 =  method : A.k() : var0 
var6 =  method : A.k() : var0 
var7 =  method : A.k() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
int var1 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var2 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var3 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var4 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var5 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var6 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var7 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
<randoop.PrimValue, value=23 [var1]  : true
<randoop.PrimValue, value=23 [var2]  : true
<randoop.PrimValue, value=23 [var3]  : true
<randoop.PrimValue, value=23 [var4]  : true
<randoop.PrimValue, value=23 [var5]  : true
<randoop.PrimValue, value=23 [var6]  : true
<randoop.PrimValue, value=23 [var7]  : true

allSequences.size()=64
-------------------------------------------
randoop.util.Randomness: total calls to random: 316
Selected statement: A.k()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 8 sequences.
components: 8
randoop.util.Randomness: total calls to random: 317
randoop.util.Randomness: total calls to random: 318
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 319
Selected statement: A.k()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 8 sequences.
components: 8
randoop.util.Randomness: total calls to random: 320
randoop.util.Randomness: total calls to random: 321
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 322
Selected statement: B.m()
Will query component set for objects of typeclass B
getActivesequencesThatYield: entering method, clazz=class B
getActivesequencesThatYield: returning 53 sequences.
components: 53
randoop.util.Randomness: total calls to random: 323
randoop.util.Randomness: total calls to random: 324
Successfully created new unique sequence:var0 =  cons : C.<init>() : 
var1 =  method : C.test() : var0 
var2 =  method : C.test() : var0 
var3 =  method : C.test() : var0 
var4 =  method : C.test() : var0 
var5 =  method : B.k() : var0 
var6 =  method : B.m() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Adding sequence to active sequences of type class C
Sequence after execution: 
C var0 = new C();
// <NormalExecution object=object-of-type-C>;
int var1 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var2 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var3 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var4 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var5 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var6 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
<randoop.PrimValue, value=23 [var1]  : true
<randoop.PrimValue, value=23 [var2]  : true
<randoop.PrimValue, value=23 [var3]  : true
<randoop.PrimValue, value=23 [var4]  : true
<randoop.PrimValue, value=42 [var5]  : true
<randoop.PrimValue, value=23 [var6]  : true

allSequences.size()=65
-------------------------------------------
randoop.util.Randomness: total calls to random: 325
Selected statement: C.test()
Will query component set for objects of typeclass C
getActivesequencesThatYield: entering method, clazz=class C
getActivesequencesThatYield: returning 54 sequences.
components: 54
randoop.util.Randomness: total calls to random: 326
randoop.util.Randomness: total calls to random: 327
Successfully created new unique sequence:var0 =  cons : C.<init>() : 
var1 =  method : B.m() : var0 
var2 =  method : B.k() : var0 
var3 =  method : B.m() : var0 
var4 =  method : C.test() : var0 
var5 =  method : B.m() : var0 
var6 =  method : B.m() : var0 
var7 =  method : B.k() : var0 
var8 =  method : C.test() : var0 
var9 =  method : C.test() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Adding sequence to active sequences of type class C
Sequence after execution: 
C var0 = new C();
// <NormalExecution object=object-of-type-C>;
int var1 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var2 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var3 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var4 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var5 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var6 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var7 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var8 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var9 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
<randoop.PrimValue, value=23 [var1]  : true
<randoop.PrimValue, value=42 [var2]  : true
<randoop.PrimValue, value=23 [var3]  : true
<randoop.PrimValue, value=23 [var4]  : true
<randoop.PrimValue, value=23 [var5]  : true
<randoop.PrimValue, value=23 [var6]  : true
<randoop.PrimValue, value=42 [var7]  : true
<randoop.PrimValue, value=23 [var8]  : true
<randoop.PrimValue, value=23 [var9]  : true

allSequences.size()=66
-------------------------------------------
randoop.util.Randomness: total calls to random: 328
Selected statement: C.test()
Will query component set for objects of typeclass C
getActivesequencesThatYield: entering method, clazz=class C
getActivesequencesThatYield: returning 55 sequences.
components: 55
randoop.util.Randomness: total calls to random: 329
randoop.util.Randomness: total calls to random: 330
Successfully created new unique sequence:var0 =  cons : C.<init>() : 
var1 =  method : C.test() : var0 
var2 =  method : C.test() : var0 
var3 =  method : B.m() : var0 
var4 =  method : C.test() : var0 
var5 =  method : B.k() : var0 
var6 =  method : B.m() : var0 
var7 =  method : C.test() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Adding sequence to active sequences of type class C
Sequence after execution: 
C var0 = new C();
// <NormalExecution object=object-of-type-C>;
int var1 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var2 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var3 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var4 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var5 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var6 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var7 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
<randoop.PrimValue, value=23 [var1]  : true
<randoop.PrimValue, value=23 [var2]  : true
<randoop.PrimValue, value=23 [var3]  : true
<randoop.PrimValue, value=23 [var4]  : true
<randoop.PrimValue, value=42 [var5]  : true
<randoop.PrimValue, value=23 [var6]  : true
<randoop.PrimValue, value=23 [var7]  : true

allSequences.size()=67
-------------------------------------------
randoop.util.Randomness: total calls to random: 331
Selected statement: A.k()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 8 sequences.
components: 8
randoop.util.Randomness: total calls to random: 332
randoop.util.Randomness: total calls to random: 333
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 334
Selected statement: B.m()
Will query component set for objects of typeclass B
getActivesequencesThatYield: entering method, clazz=class B
getActivesequencesThatYield: returning 56 sequences.
components: 56
randoop.util.Randomness: total calls to random: 335
randoop.util.Randomness: total calls to random: 336
Successfully created new unique sequence:var0 =  cons : C.<init>() : 
var1 =  method : C.test() : var0 
var2 =  method : C.test() : var0 
var3 =  method : C.test() : var0 
var4 =  method : B.m() : var0 
var5 =  method : B.m() : var0 
var6 =  method : C.test() : var0 
var7 =  method : B.m() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Adding sequence to active sequences of type class C
Sequence after execution: 
C var0 = new C();
// <NormalExecution object=object-of-type-C>;
int var1 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var2 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var3 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var4 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var5 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var6 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var7 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
<randoop.PrimValue, value=23 [var1]  : true
<randoop.PrimValue, value=23 [var2]  : true
<randoop.PrimValue, value=23 [var3]  : true
<randoop.PrimValue, value=23 [var4]  : true
<randoop.PrimValue, value=23 [var5]  : true
<randoop.PrimValue, value=23 [var6]  : true
<randoop.PrimValue, value=23 [var7]  : true

allSequences.size()=68
-------------------------------------------
randoop.util.Randomness: total calls to random: 337
Selected statement: B.k()
Will query component set for objects of typeclass B
getActivesequencesThatYield: entering method, clazz=class B
getActivesequencesThatYield: returning 59 sequences.
components: 59
randoop.util.Randomness: total calls to random: 338
randoop.util.Randomness: total calls to random: 339
Successfully created new unique sequence:var0 =  cons : C.<init>() : 
var1 =  method : C.test() : var0 
var2 =  method : C.test() : var0 
var3 =  method : B.m() : var0 
var4 =  method : C.test() : var0 
var5 =  method : B.k() : var0 
var6 =  method : B.m() : var0 
var7 =  method : C.test() : var0 
var8 =  method : B.k() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Adding sequence to active sequences of type class C
Sequence after execution: 
C var0 = new C();
// <NormalExecution object=object-of-type-C>;
int var1 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var2 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var3 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var4 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var5 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var6 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var7 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var8 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
<randoop.PrimValue, value=23 [var1]  : true
<randoop.PrimValue, value=23 [var2]  : true
<randoop.PrimValue, value=23 [var3]  : true
<randoop.PrimValue, value=23 [var4]  : true
<randoop.PrimValue, value=42 [var5]  : true
<randoop.PrimValue, value=23 [var6]  : true
<randoop.PrimValue, value=23 [var7]  : true
<randoop.PrimValue, value=42 [var8]  : true

allSequences.size()=69
-------------------------------------------
randoop.util.Randomness: total calls to random: 340
Selected statement: A.k()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 8 sequences.
components: 8
randoop.util.Randomness: total calls to random: 341
randoop.util.Randomness: total calls to random: 342
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 343
Selected statement: C.test()
Will query component set for objects of typeclass C
getActivesequencesThatYield: entering method, clazz=class C
getActivesequencesThatYield: returning 58 sequences.
components: 58
randoop.util.Randomness: total calls to random: 344
randoop.util.Randomness: total calls to random: 345
Successfully created new unique sequence:var0 =  cons : C.<init>() : 
var1 =  method : B.m() : var0 
var2 =  method : B.k() : var0 
var3 =  method : B.m() : var0 
var4 =  method : B.k() : var0 
var5 =  method : C.test() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Adding sequence to active sequences of type class C
Sequence after execution: 
C var0 = new C();
// <NormalExecution object=object-of-type-C>;
int var1 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var2 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var3 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var4 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var5 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
<randoop.PrimValue, value=23 [var1]  : true
<randoop.PrimValue, value=42 [var2]  : true
<randoop.PrimValue, value=23 [var3]  : true
<randoop.PrimValue, value=42 [var4]  : true
<randoop.PrimValue, value=23 [var5]  : true

allSequences.size()=70
-------------------------------------------
randoop.util.Randomness: total calls to random: 346
Selected statement: A.k()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 8 sequences.
components: 8
randoop.util.Randomness: total calls to random: 347
randoop.util.Randomness: total calls to random: 348
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 349
Selected statement: B.m()
Will query component set for objects of typeclass B
getActivesequencesThatYield: entering method, clazz=class B
getActivesequencesThatYield: returning 59 sequences.
components: 59
randoop.util.Randomness: total calls to random: 350
randoop.util.Randomness: total calls to random: 351
Successfully created new unique sequence:var0 =  cons : C.<init>() : 
var1 =  method : B.m() : var0 
var2 =  method : B.k() : var0 
var3 =  method : B.m() : var0 
var4 =  method : B.m() : var0 
var5 =  method : B.m() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Adding sequence to active sequences of type class C
Sequence after execution: 
C var0 = new C();
// <NormalExecution object=object-of-type-C>;
int var1 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var2 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var3 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var4 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var5 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
<randoop.PrimValue, value=23 [var1]  : true
<randoop.PrimValue, value=42 [var2]  : true
<randoop.PrimValue, value=23 [var3]  : true
<randoop.PrimValue, value=23 [var4]  : true
<randoop.PrimValue, value=23 [var5]  : true

allSequences.size()=71
-------------------------------------------
randoop.util.Randomness: total calls to random: 352
Selected statement: B.k()
Will query component set for objects of typeclass B
getActivesequencesThatYield: entering method, clazz=class B
getActivesequencesThatYield: returning 62 sequences.
components: 62
randoop.util.Randomness: total calls to random: 353
randoop.util.Randomness: total calls to random: 354
Successfully created new unique sequence:var0 =  cons : C.<init>() : 
var1 =  method : B.m() : var0 
var2 =  method : B.k() : var0 
var3 =  method : B.m() : var0 
var4 =  method : C.test() : var0 
var5 =  method : B.m() : var0 
var6 =  method : B.m() : var0 
var7 =  method : B.k() : var0 
var8 =  method : C.test() : var0 
var9 =  method : B.k() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Adding sequence to active sequences of type class C
Sequence after execution: 
C var0 = new C();
// <NormalExecution object=object-of-type-C>;
int var1 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var2 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var3 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var4 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var5 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var6 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var7 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var8 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var9 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
<randoop.PrimValue, value=23 [var1]  : true
<randoop.PrimValue, value=42 [var2]  : true
<randoop.PrimValue, value=23 [var3]  : true
<randoop.PrimValue, value=23 [var4]  : true
<randoop.PrimValue, value=23 [var5]  : true
<randoop.PrimValue, value=23 [var6]  : true
<randoop.PrimValue, value=42 [var7]  : true
<randoop.PrimValue, value=23 [var8]  : true
<randoop.PrimValue, value=42 [var9]  : true

allSequences.size()=72
-------------------------------------------
randoop.util.Randomness: total calls to random: 355
Selected statement: A.k()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 8 sequences.
components: 8
randoop.util.Randomness: total calls to random: 356
randoop.util.Randomness: total calls to random: 357
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 358
Selected statement: C.test()
Will query component set for objects of typeclass C
getActivesequencesThatYield: entering method, clazz=class C
getActivesequencesThatYield: returning 61 sequences.
components: 61
randoop.util.Randomness: total calls to random: 359
randoop.util.Randomness: total calls to random: 360
Successfully created new unique sequence:var0 =  cons : C.<init>() : 
var1 =  method : B.m() : var0 
var2 =  method : B.k() : var0 
var3 =  method : C.test() : var0 
var4 =  method : C.test() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Adding sequence to active sequences of type class C
Sequence after execution: 
C var0 = new C();
// <NormalExecution object=object-of-type-C>;
int var1 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var2 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var3 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var4 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
<randoop.PrimValue, value=23 [var1]  : true
<randoop.PrimValue, value=42 [var2]  : true
<randoop.PrimValue, value=23 [var3]  : true
<randoop.PrimValue, value=23 [var4]  : true

allSequences.size()=73
-------------------------------------------
randoop.util.Randomness: total calls to random: 361
Selected statement: B.k()
Will query component set for objects of typeclass B
getActivesequencesThatYield: entering method, clazz=class B
getActivesequencesThatYield: returning 64 sequences.
components: 64
randoop.util.Randomness: total calls to random: 362
randoop.util.Randomness: total calls to random: 363
Successfully created new unique sequence:var0 =  cons : C.<init>() : 
var1 =  method : C.test() : var0 
var2 =  method : C.test() : var0 
var3 =  method : C.test() : var0 
var4 =  method : B.m() : var0 
var5 =  method : B.m() : var0 
var6 =  method : C.test() : var0 
var7 =  method : B.m() : var0 
var8 =  method : B.k() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Adding sequence to active sequences of type class C
Sequence after execution: 
C var0 = new C();
// <NormalExecution object=object-of-type-C>;
int var1 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var2 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var3 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var4 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var5 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var6 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var7 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var8 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
<randoop.PrimValue, value=23 [var1]  : true
<randoop.PrimValue, value=23 [var2]  : true
<randoop.PrimValue, value=23 [var3]  : true
<randoop.PrimValue, value=23 [var4]  : true
<randoop.PrimValue, value=23 [var5]  : true
<randoop.PrimValue, value=23 [var6]  : true
<randoop.PrimValue, value=23 [var7]  : true
<randoop.PrimValue, value=42 [var8]  : true

allSequences.size()=74
-------------------------------------------
randoop.util.Randomness: total calls to random: 364
Selected statement: B.k()
Will query component set for objects of typeclass B
getActivesequencesThatYield: entering method, clazz=class B
getActivesequencesThatYield: returning 65 sequences.
components: 65
randoop.util.Randomness: total calls to random: 365
randoop.util.Randomness: total calls to random: 366
Successfully created new unique sequence:var0 =  cons : C.<init>() : 
var1 =  method : B.m() : var0 
var2 =  method : B.k() : var0 
var3 =  method : B.m() : var0 
var4 =  method : C.test() : var0 
var5 =  method : B.m() : var0 
var6 =  method : B.m() : var0 
var7 =  method : B.k() : var0 
var8 =  method : C.test() : var0 
var9 =  method : B.k() : var0 
var10 =  method : B.k() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Adding sequence to active sequences of type class C
Sequence after execution: 
C var0 = new C();
// <NormalExecution object=object-of-type-C>;
int var1 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var2 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var3 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var4 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var5 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var6 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var7 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var8 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var9 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var10 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
<randoop.PrimValue, value=23 [var1]  : true
<randoop.PrimValue, value=42 [var2]  : true
<randoop.PrimValue, value=23 [var3]  : true
<randoop.PrimValue, value=23 [var4]  : true
<randoop.PrimValue, value=23 [var5]  : true
<randoop.PrimValue, value=23 [var6]  : true
<randoop.PrimValue, value=42 [var7]  : true
<randoop.PrimValue, value=23 [var8]  : true
<randoop.PrimValue, value=42 [var9]  : true
<randoop.PrimValue, value=42 [var10]  : true

allSequences.size()=75
-------------------------------------------
randoop.util.Randomness: total calls to random: 367
Selected statement: A.k()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 8 sequences.
components: 8
randoop.util.Randomness: total calls to random: 368
randoop.util.Randomness: total calls to random: 369
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 370
Selected statement: C.test()
Will query component set for objects of typeclass C
getActivesequencesThatYield: entering method, clazz=class C
getActivesequencesThatYield: returning 64 sequences.
components: 64
randoop.util.Randomness: total calls to random: 371
randoop.util.Randomness: total calls to random: 372
Successfully created new unique sequence:var0 =  cons : C.<init>() : 
var1 =  method : C.test() : var0 
var2 =  method : C.test() : var0 
var3 =  method : B.m() : var0 
var4 =  method : C.test() : var0 
var5 =  method : B.k() : var0 
var6 =  method : B.k() : var0 
var7 =  method : C.test() : var0 
var8 =  method : C.test() : var0 
var9 =  method : C.test() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Adding sequence to active sequences of type class C
Sequence after execution: 
C var0 = new C();
// <NormalExecution object=object-of-type-C>;
int var1 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var2 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var3 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var4 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var5 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var6 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var7 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var8 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var9 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
<randoop.PrimValue, value=23 [var1]  : true
<randoop.PrimValue, value=23 [var2]  : true
<randoop.PrimValue, value=23 [var3]  : true
<randoop.PrimValue, value=23 [var4]  : true
<randoop.PrimValue, value=42 [var5]  : true
<randoop.PrimValue, value=42 [var6]  : true
<randoop.PrimValue, value=23 [var7]  : true
<randoop.PrimValue, value=23 [var8]  : true
<randoop.PrimValue, value=23 [var9]  : true

allSequences.size()=76
-------------------------------------------
randoop.util.Randomness: total calls to random: 373
Selected statement: B.k()
Will query component set for objects of typeclass B
getActivesequencesThatYield: entering method, clazz=class B
getActivesequencesThatYield: returning 67 sequences.
components: 67
randoop.util.Randomness: total calls to random: 374
randoop.util.Randomness: total calls to random: 375
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 376
Selected statement: A.k()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 8 sequences.
components: 8
randoop.util.Randomness: total calls to random: 377
randoop.util.Randomness: total calls to random: 378
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 379
Selected statement: B.k()
Will query component set for objects of typeclass B
getActivesequencesThatYield: entering method, clazz=class B
getActivesequencesThatYield: returning 67 sequences.
components: 67
randoop.util.Randomness: total calls to random: 380
randoop.util.Randomness: total calls to random: 381
Successfully created new unique sequence:var0 =  cons : C.<init>() : 
var1 =  method : B.m() : var0 
var2 =  method : B.k() : var0 
var3 =  method : B.m() : var0 
var4 =  method : C.test() : var0 
var5 =  method : B.m() : var0 
var6 =  method : B.m() : var0 
var7 =  method : B.k() : var0 
var8 =  method : C.test() : var0 
var9 =  method : C.test() : var0 
var10 =  method : B.k() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Adding sequence to active sequences of type class C
Sequence after execution: 
C var0 = new C();
// <NormalExecution object=object-of-type-C>;
int var1 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var2 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var3 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var4 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var5 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var6 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var7 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var8 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var9 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var10 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
<randoop.PrimValue, value=23 [var1]  : true
<randoop.PrimValue, value=42 [var2]  : true
<randoop.PrimValue, value=23 [var3]  : true
<randoop.PrimValue, value=23 [var4]  : true
<randoop.PrimValue, value=23 [var5]  : true
<randoop.PrimValue, value=23 [var6]  : true
<randoop.PrimValue, value=42 [var7]  : true
<randoop.PrimValue, value=23 [var8]  : true
<randoop.PrimValue, value=23 [var9]  : true
<randoop.PrimValue, value=42 [var10]  : true

allSequences.size()=77
-------------------------------------------
randoop.util.Randomness: total calls to random: 382
Selected statement: A.k()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 8 sequences.
components: 8
randoop.util.Randomness: total calls to random: 383
randoop.util.Randomness: total calls to random: 384
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 385
Selected statement: B.k()
Will query component set for objects of typeclass B
getActivesequencesThatYield: entering method, clazz=class B
getActivesequencesThatYield: returning 68 sequences.
components: 68
randoop.util.Randomness: total calls to random: 386
randoop.util.Randomness: total calls to random: 387
Successfully created new unique sequence:var0 =  cons : C.<init>() : 
var1 =  method : B.k() : var0 
var2 =  method : B.k() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Adding sequence to active sequences of type class C
Sequence after execution: 
C var0 = new C();
// <NormalExecution object=object-of-type-C>;
int var1 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var2 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
<randoop.PrimValue, value=42 [var1]  : true
<randoop.PrimValue, value=42 [var2]  : true

allSequences.size()=78
-------------------------------------------
randoop.util.Randomness: total calls to random: 388
Selected statement: C.test()
Will query component set for objects of typeclass C
getActivesequencesThatYield: entering method, clazz=class C
getActivesequencesThatYield: returning 67 sequences.
components: 67
randoop.util.Randomness: total calls to random: 389
randoop.util.Randomness: total calls to random: 390
Successfully created new unique sequence:var0 =  cons : C.<init>() : 
var1 =  method : B.m() : var0 
var2 =  method : B.k() : var0 
var3 =  method : B.m() : var0 
var4 =  method : B.m() : var0 
var5 =  method : B.m() : var0 
var6 =  method : C.test() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Adding sequence to active sequences of type class C
Sequence after execution: 
C var0 = new C();
// <NormalExecution object=object-of-type-C>;
int var1 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var2 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var3 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var4 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var5 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var6 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
<randoop.PrimValue, value=23 [var1]  : true
<randoop.PrimValue, value=42 [var2]  : true
<randoop.PrimValue, value=23 [var3]  : true
<randoop.PrimValue, value=23 [var4]  : true
<randoop.PrimValue, value=23 [var5]  : true
<randoop.PrimValue, value=23 [var6]  : true

allSequences.size()=79
-------------------------------------------
randoop.util.Randomness: total calls to random: 391
Selected statement: C.test()
Will query component set for objects of typeclass C
getActivesequencesThatYield: entering method, clazz=class C
getActivesequencesThatYield: returning 68 sequences.
components: 68
randoop.util.Randomness: total calls to random: 392
randoop.util.Randomness: total calls to random: 393
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 394
Selected statement: B.k()
Will query component set for objects of typeclass B
getActivesequencesThatYield: entering method, clazz=class B
getActivesequencesThatYield: returning 70 sequences.
components: 70
randoop.util.Randomness: total calls to random: 395
randoop.util.Randomness: total calls to random: 396
Successfully created new unique sequence:var0 =  cons : C.<init>() : 
var1 =  method : B.m() : var0 
var2 =  method : B.k() : var0 
var3 =  method : B.m() : var0 
var4 =  method : B.m() : var0 
var5 =  method : B.m() : var0 
var6 =  method : B.k() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Adding sequence to active sequences of type class C
Sequence after execution: 
C var0 = new C();
// <NormalExecution object=object-of-type-C>;
int var1 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var2 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var3 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var4 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var5 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var6 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
<randoop.PrimValue, value=23 [var1]  : true
<randoop.PrimValue, value=42 [var2]  : true
<randoop.PrimValue, value=23 [var3]  : true
<randoop.PrimValue, value=23 [var4]  : true
<randoop.PrimValue, value=23 [var5]  : true
<randoop.PrimValue, value=42 [var6]  : true

allSequences.size()=80
-------------------------------------------
randoop.util.Randomness: total calls to random: 397
Selected statement: B.k()
Will query component set for objects of typeclass B
getActivesequencesThatYield: entering method, clazz=class B
getActivesequencesThatYield: returning 71 sequences.
components: 71
randoop.util.Randomness: total calls to random: 398
randoop.util.Randomness: total calls to random: 399
Successfully created new unique sequence:var0 =  cons : C.<init>() : 
var1 =  method : B.m() : var0 
var2 =  method : B.k() : var0 
var3 =  method : B.m() : var0 
var4 =  method : C.test() : var0 
var5 =  method : B.m() : var0 
var6 =  method : B.m() : var0 
var7 =  method : B.k() : var0 
var8 =  method : B.k() : var0 
var9 =  method : B.m() : var0 
var10 =  method : B.k() : var0 
var11 =  method : B.k() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Adding sequence to active sequences of type class C
Sequence after execution: 
C var0 = new C();
// <NormalExecution object=object-of-type-C>;
int var1 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var2 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var3 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var4 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var5 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var6 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var7 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var8 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var9 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var10 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var11 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
<randoop.PrimValue, value=23 [var1]  : true
<randoop.PrimValue, value=42 [var2]  : true
<randoop.PrimValue, value=23 [var3]  : true
<randoop.PrimValue, value=23 [var4]  : true
<randoop.PrimValue, value=23 [var5]  : true
<randoop.PrimValue, value=23 [var6]  : true
<randoop.PrimValue, value=42 [var7]  : true
<randoop.PrimValue, value=42 [var8]  : true
<randoop.PrimValue, value=23 [var9]  : true
<randoop.PrimValue, value=42 [var10]  : true
<randoop.PrimValue, value=42 [var11]  : true

allSequences.size()=81
-------------------------------------------
randoop.util.Randomness: total calls to random: 400
Selected statement: B.m()
Will query component set for objects of typeclass B
getActivesequencesThatYield: entering method, clazz=class B
getActivesequencesThatYield: returning 70 sequences.
components: 70
randoop.util.Randomness: total calls to random: 401
randoop.util.Randomness: total calls to random: 402
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 403
Selected statement: A.k()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 8 sequences.
components: 8
randoop.util.Randomness: total calls to random: 404
randoop.util.Randomness: total calls to random: 405
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 406
Selected statement: A.k()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 8 sequences.
components: 8
randoop.util.Randomness: total calls to random: 407
randoop.util.Randomness: total calls to random: 408
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 409
Selected statement: B.m()
Will query component set for objects of typeclass B
getActivesequencesThatYield: entering method, clazz=class B
getActivesequencesThatYield: returning 70 sequences.
components: 70
randoop.util.Randomness: total calls to random: 410
randoop.util.Randomness: total calls to random: 411
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 412
Selected statement: A.k()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 8 sequences.
components: 8
randoop.util.Randomness: total calls to random: 413
randoop.util.Randomness: total calls to random: 414
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 415
Selected statement: C.test()
Will query component set for objects of typeclass C
getActivesequencesThatYield: entering method, clazz=class C
getActivesequencesThatYield: returning 70 sequences.
components: 70
randoop.util.Randomness: total calls to random: 416
randoop.util.Randomness: total calls to random: 417
Successfully created new unique sequence:var0 =  cons : C.<init>() : 
var1 =  method : B.m() : var0 
var2 =  method : C.test() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Adding sequence to active sequences of type class C
Sequence after execution: 
C var0 = new C();
// <NormalExecution object=object-of-type-C>;
int var1 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var2 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
<randoop.PrimValue, value=23 [var1]  : true
<randoop.PrimValue, value=23 [var2]  : true

allSequences.size()=82
-------------------------------------------
randoop.util.Randomness: total calls to random: 418
Selected statement: A.k()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 8 sequences.
components: 8
randoop.util.Randomness: total calls to random: 419
randoop.util.Randomness: total calls to random: 420
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 421
Selected statement: A.k()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 8 sequences.
components: 8
randoop.util.Randomness: total calls to random: 422
randoop.util.Randomness: total calls to random: 423
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 424
Selected statement: A.k()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 8 sequences.
components: 8
randoop.util.Randomness: total calls to random: 425
randoop.util.Randomness: total calls to random: 426
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 427
Selected statement: C.test()
Will query component set for objects of typeclass C
getActivesequencesThatYield: entering method, clazz=class C
getActivesequencesThatYield: returning 71 sequences.
components: 71
randoop.util.Randomness: total calls to random: 428
randoop.util.Randomness: total calls to random: 429
Successfully created new unique sequence:var0 =  cons : C.<init>() : 
var1 =  method : B.m() : var0 
var2 =  method : B.k() : var0 
var3 =  method : B.m() : var0 
var4 =  method : C.test() : var0 
var5 =  method : B.m() : var0 
var6 =  method : B.m() : var0 
var7 =  method : B.k() : var0 
var8 =  method : B.k() : var0 
var9 =  method : B.m() : var0 
var10 =  method : B.k() : var0 
var11 =  method : B.k() : var0 
var12 =  method : C.test() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Making index 12 inactive (value is a primitive)
Adding sequence to active sequences of type class C
Sequence after execution: 
C var0 = new C();
// <NormalExecution object=object-of-type-C>;
int var1 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var2 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var3 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var4 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var5 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var6 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var7 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var8 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var9 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var10 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var11 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var12 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
<randoop.PrimValue, value=23 [var1]  : true
<randoop.PrimValue, value=42 [var2]  : true
<randoop.PrimValue, value=23 [var3]  : true
<randoop.PrimValue, value=23 [var4]  : true
<randoop.PrimValue, value=23 [var5]  : true
<randoop.PrimValue, value=23 [var6]  : true
<randoop.PrimValue, value=42 [var7]  : true
<randoop.PrimValue, value=42 [var8]  : true
<randoop.PrimValue, value=23 [var9]  : true
<randoop.PrimValue, value=42 [var10]  : true
<randoop.PrimValue, value=42 [var11]  : true
<randoop.PrimValue, value=23 [var12]  : true

allSequences.size()=83
-------------------------------------------
randoop.util.Randomness: total calls to random: 430
Selected statement: A.k()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 8 sequences.
components: 8
randoop.util.Randomness: total calls to random: 431
randoop.util.Randomness: total calls to random: 432
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 433
Selected statement: B.m()
Will query component set for objects of typeclass B
getActivesequencesThatYield: entering method, clazz=class B
getActivesequencesThatYield: returning 72 sequences.
components: 72
randoop.util.Randomness: total calls to random: 434
randoop.util.Randomness: total calls to random: 435
Successfully created new unique sequence:var0 =  cons : C.<init>() : 
var1 =  method : B.m() : var0 
var2 =  method : B.k() : var0 
var3 =  method : B.k() : var0 
var4 =  method : B.m() : var0 
var5 =  method : B.m() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Adding sequence to active sequences of type class C
Sequence after execution: 
C var0 = new C();
// <NormalExecution object=object-of-type-C>;
int var1 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var2 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var3 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var4 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var5 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
<randoop.PrimValue, value=23 [var1]  : true
<randoop.PrimValue, value=42 [var2]  : true
<randoop.PrimValue, value=42 [var3]  : true
<randoop.PrimValue, value=23 [var4]  : true
<randoop.PrimValue, value=23 [var5]  : true

allSequences.size()=84
-------------------------------------------
randoop.util.Randomness: total calls to random: 436
Selected statement: C.test()
Will query component set for objects of typeclass C
getActivesequencesThatYield: entering method, clazz=class C
getActivesequencesThatYield: returning 73 sequences.
components: 73
randoop.util.Randomness: total calls to random: 437
randoop.util.Randomness: total calls to random: 438
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 439
Selected statement: C.test()
Will query component set for objects of typeclass C
getActivesequencesThatYield: entering method, clazz=class C
getActivesequencesThatYield: returning 73 sequences.
components: 73
randoop.util.Randomness: total calls to random: 440
randoop.util.Randomness: total calls to random: 441
Successfully created new unique sequence:var0 =  cons : C.<init>() : 
var1 =  method : C.test() : var0 
var2 =  method : C.test() : var0 
var3 =  method : C.test() : var0 
var4 =  method : B.m() : var0 
var5 =  method : C.test() : var0 
var6 =  method : C.test() : var0 
var7 =  method : B.k() : var0 
var8 =  method : C.test() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Adding sequence to active sequences of type class C
Sequence after execution: 
C var0 = new C();
// <NormalExecution object=object-of-type-C>;
int var1 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var2 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var3 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var4 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var5 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var6 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var7 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var8 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
<randoop.PrimValue, value=23 [var1]  : true
<randoop.PrimValue, value=23 [var2]  : true
<randoop.PrimValue, value=23 [var3]  : true
<randoop.PrimValue, value=23 [var4]  : true
<randoop.PrimValue, value=23 [var5]  : true
<randoop.PrimValue, value=23 [var6]  : true
<randoop.PrimValue, value=42 [var7]  : true
<randoop.PrimValue, value=23 [var8]  : true

allSequences.size()=85
-------------------------------------------
randoop.util.Randomness: total calls to random: 442
Selected statement: C.test()
Will query component set for objects of typeclass C
getActivesequencesThatYield: entering method, clazz=class C
getActivesequencesThatYield: returning 74 sequences.
components: 74
randoop.util.Randomness: total calls to random: 443
randoop.util.Randomness: total calls to random: 444
Successfully created new unique sequence:var0 =  cons : C.<init>() : 
var1 =  method : B.m() : var0 
var2 =  method : B.k() : var0 
var3 =  method : B.k() : var0 
var4 =  method : B.m() : var0 
var5 =  method : C.test() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Adding sequence to active sequences of type class C
Sequence after execution: 
C var0 = new C();
// <NormalExecution object=object-of-type-C>;
int var1 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var2 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var3 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var4 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var5 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
<randoop.PrimValue, value=23 [var1]  : true
<randoop.PrimValue, value=42 [var2]  : true
<randoop.PrimValue, value=42 [var3]  : true
<randoop.PrimValue, value=23 [var4]  : true
<randoop.PrimValue, value=23 [var5]  : true

allSequences.size()=86
-------------------------------------------
randoop.util.Randomness: total calls to random: 445
Selected statement: C.test()
Will query component set for objects of typeclass C
getActivesequencesThatYield: entering method, clazz=class C
getActivesequencesThatYield: returning 75 sequences.
components: 75
randoop.util.Randomness: total calls to random: 446
randoop.util.Randomness: total calls to random: 447
Successfully created new unique sequence:var0 =  cons : C.<init>() : 
var1 =  method : C.test() : var0 
var2 =  method : C.test() : var0 
var3 =  method : B.m() : var0 
var4 =  method : C.test() : var0 
var5 =  method : C.test() : var0 
var6 =  method : C.test() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Adding sequence to active sequences of type class C
Sequence after execution: 
C var0 = new C();
// <NormalExecution object=object-of-type-C>;
int var1 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var2 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var3 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var4 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var5 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var6 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
<randoop.PrimValue, value=23 [var1]  : true
<randoop.PrimValue, value=23 [var2]  : true
<randoop.PrimValue, value=23 [var3]  : true
<randoop.PrimValue, value=23 [var4]  : true
<randoop.PrimValue, value=23 [var5]  : true
<randoop.PrimValue, value=23 [var6]  : true

allSequences.size()=87
-------------------------------------------
randoop.util.Randomness: total calls to random: 448
Selected statement: A.k()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 8 sequences.
components: 8
randoop.util.Randomness: total calls to random: 449
randoop.util.Randomness: total calls to random: 450
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 451
Selected statement: C.test()
Will query component set for objects of typeclass C
getActivesequencesThatYield: entering method, clazz=class C
getActivesequencesThatYield: returning 76 sequences.
components: 76
randoop.util.Randomness: total calls to random: 452
randoop.util.Randomness: total calls to random: 453
Successfully created new unique sequence:var0 =  cons : C.<init>() : 
var1 =  method : C.test() : var0 
var2 =  method : C.test() : var0 
var3 =  method : B.m() : var0 
var4 =  method : C.test() : var0 
var5 =  method : B.k() : var0 
var6 =  method : B.m() : var0 
var7 =  method : C.test() : var0 
var8 =  method : B.k() : var0 
var9 =  method : C.test() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Adding sequence to active sequences of type class C
Sequence after execution: 
C var0 = new C();
// <NormalExecution object=object-of-type-C>;
int var1 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var2 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var3 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var4 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var5 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var6 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var7 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var8 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var9 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
<randoop.PrimValue, value=23 [var1]  : true
<randoop.PrimValue, value=23 [var2]  : true
<randoop.PrimValue, value=23 [var3]  : true
<randoop.PrimValue, value=23 [var4]  : true
<randoop.PrimValue, value=42 [var5]  : true
<randoop.PrimValue, value=23 [var6]  : true
<randoop.PrimValue, value=23 [var7]  : true
<randoop.PrimValue, value=42 [var8]  : true
<randoop.PrimValue, value=23 [var9]  : true

allSequences.size()=88
-------------------------------------------
randoop.util.Randomness: total calls to random: 454
Selected statement: B.m()
Will query component set for objects of typeclass B
getActivesequencesThatYield: entering method, clazz=class B
getActivesequencesThatYield: returning 77 sequences.
components: 77
randoop.util.Randomness: total calls to random: 455
randoop.util.Randomness: total calls to random: 456
Successfully created new unique sequence:var0 =  cons : C.<init>() : 
var1 =  method : C.test() : var0 
var2 =  method : C.test() : var0 
var3 =  method : B.m() : var0 
var4 =  method : C.test() : var0 
var5 =  method : C.test() : var0 
var6 =  method : B.m() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Adding sequence to active sequences of type class C
Sequence after execution: 
C var0 = new C();
// <NormalExecution object=object-of-type-C>;
int var1 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var2 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var3 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var4 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var5 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var6 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
<randoop.PrimValue, value=23 [var1]  : true
<randoop.PrimValue, value=23 [var2]  : true
<randoop.PrimValue, value=23 [var3]  : true
<randoop.PrimValue, value=23 [var4]  : true
<randoop.PrimValue, value=23 [var5]  : true
<randoop.PrimValue, value=23 [var6]  : true

allSequences.size()=89
-------------------------------------------
randoop.util.Randomness: total calls to random: 457
Selected statement: C.test()
Will query component set for objects of typeclass C
getActivesequencesThatYield: entering method, clazz=class C
getActivesequencesThatYield: returning 78 sequences.
components: 78
randoop.util.Randomness: total calls to random: 458
randoop.util.Randomness: total calls to random: 459
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 460
Selected statement: C.test()
Will query component set for objects of typeclass C
getActivesequencesThatYield: entering method, clazz=class C
getActivesequencesThatYield: returning 78 sequences.
components: 78
randoop.util.Randomness: total calls to random: 461
randoop.util.Randomness: total calls to random: 462
Successfully created new unique sequence:var0 =  cons : C.<init>() : 
var1 =  method : C.test() : var0 
var2 =  method : C.test() : var0 
var3 =  method : C.test() : var0 
var4 =  method : C.test() : var0 
var5 =  method : B.k() : var0 
var6 =  method : B.m() : var0 
var7 =  method : C.test() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Adding sequence to active sequences of type class C
Sequence after execution: 
C var0 = new C();
// <NormalExecution object=object-of-type-C>;
int var1 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var2 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var3 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var4 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var5 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var6 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var7 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
<randoop.PrimValue, value=23 [var1]  : true
<randoop.PrimValue, value=23 [var2]  : true
<randoop.PrimValue, value=23 [var3]  : true
<randoop.PrimValue, value=23 [var4]  : true
<randoop.PrimValue, value=42 [var5]  : true
<randoop.PrimValue, value=23 [var6]  : true
<randoop.PrimValue, value=23 [var7]  : true

allSequences.size()=90
-------------------------------------------
randoop.util.Randomness: total calls to random: 463
Selected statement: B.k()
Will query component set for objects of typeclass B
getActivesequencesThatYield: entering method, clazz=class B
getActivesequencesThatYield: returning 81 sequences.
components: 81
randoop.util.Randomness: total calls to random: 464
randoop.util.Randomness: total calls to random: 465
Successfully created new unique sequence:var0 =  cons : C.<init>() : 
var1 =  method : C.test() : var0 
var2 =  method : C.test() : var0 
var3 =  method : B.m() : var0 
var4 =  method : C.test() : var0 
var5 =  method : B.k() : var0 
var6 =  method : B.k() : var0 
var7 =  method : C.test() : var0 
var8 =  method : C.test() : var0 
var9 =  method : C.test() : var0 
var10 =  method : B.k() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Adding sequence to active sequences of type class C
Sequence after execution: 
C var0 = new C();
// <NormalExecution object=object-of-type-C>;
int var1 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var2 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var3 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var4 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var5 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var6 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var7 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var8 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var9 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var10 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
<randoop.PrimValue, value=23 [var1]  : true
<randoop.PrimValue, value=23 [var2]  : true
<randoop.PrimValue, value=23 [var3]  : true
<randoop.PrimValue, value=23 [var4]  : true
<randoop.PrimValue, value=42 [var5]  : true
<randoop.PrimValue, value=42 [var6]  : true
<randoop.PrimValue, value=23 [var7]  : true
<randoop.PrimValue, value=23 [var8]  : true
<randoop.PrimValue, value=23 [var9]  : true
<randoop.PrimValue, value=42 [var10]  : true

allSequences.size()=91
-------------------------------------------
randoop.util.Randomness: total calls to random: 466
Selected statement: B.m()
Will query component set for objects of typeclass B
getActivesequencesThatYield: entering method, clazz=class B
getActivesequencesThatYield: returning 80 sequences.
components: 80
randoop.util.Randomness: total calls to random: 467
randoop.util.Randomness: total calls to random: 468
Successfully created new unique sequence:var0 =  cons : C.<init>() : 
var1 =  method : C.test() : var0 
var2 =  method : C.test() : var0 
var3 =  method : B.m() : var0 
var4 =  method : C.test() : var0 
var5 =  method : B.m() : var0 
var6 =  method : B.m() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Adding sequence to active sequences of type class C
Sequence after execution: 
C var0 = new C();
// <NormalExecution object=object-of-type-C>;
int var1 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var2 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var3 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var4 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var5 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var6 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
<randoop.PrimValue, value=23 [var1]  : true
<randoop.PrimValue, value=23 [var2]  : true
<randoop.PrimValue, value=23 [var3]  : true
<randoop.PrimValue, value=23 [var4]  : true
<randoop.PrimValue, value=23 [var5]  : true
<randoop.PrimValue, value=23 [var6]  : true

allSequences.size()=92
-------------------------------------------
randoop.util.Randomness: total calls to random: 469
Selected statement: C.test()
Will query component set for objects of typeclass C
getActivesequencesThatYield: entering method, clazz=class C
getActivesequencesThatYield: returning 81 sequences.
components: 81
randoop.util.Randomness: total calls to random: 470
randoop.util.Randomness: total calls to random: 471
Successfully created new unique sequence:var0 =  cons : C.<init>() : 
var1 =  method : C.test() : var0 
var2 =  method : C.test() : var0 
var3 =  method : C.test() : var0 
var4 =  method : C.test() : var0 
var5 =  method : C.test() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Adding sequence to active sequences of type class C
Sequence after execution: 
C var0 = new C();
// <NormalExecution object=object-of-type-C>;
int var1 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var2 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var3 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var4 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var5 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
<randoop.PrimValue, value=23 [var1]  : true
<randoop.PrimValue, value=23 [var2]  : true
<randoop.PrimValue, value=23 [var3]  : true
<randoop.PrimValue, value=23 [var4]  : true
<randoop.PrimValue, value=23 [var5]  : true

allSequences.size()=93
-------------------------------------------
randoop.util.Randomness: total calls to random: 472
Selected statement: B.m()
Will query component set for objects of typeclass B
getActivesequencesThatYield: entering method, clazz=class B
getActivesequencesThatYield: returning 82 sequences.
components: 82
randoop.util.Randomness: total calls to random: 473
randoop.util.Randomness: total calls to random: 474
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 475
Selected statement: B.m()
Will query component set for objects of typeclass B
getActivesequencesThatYield: entering method, clazz=class B
getActivesequencesThatYield: returning 82 sequences.
components: 82
randoop.util.Randomness: total calls to random: 476
randoop.util.Randomness: total calls to random: 477
Successfully created new unique sequence:var0 =  cons : C.<init>() : 
var1 =  method : B.m() : var0 
var2 =  method : B.k() : var0 
var3 =  method : B.m() : var0 
var4 =  method : C.test() : var0 
var5 =  method : C.test() : var0 
var6 =  method : B.m() : var0 
var7 =  method : B.m() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Adding sequence to active sequences of type class C
Sequence after execution: 
C var0 = new C();
// <NormalExecution object=object-of-type-C>;
int var1 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var2 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var3 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var4 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var5 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var6 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var7 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
<randoop.PrimValue, value=23 [var1]  : true
<randoop.PrimValue, value=42 [var2]  : true
<randoop.PrimValue, value=23 [var3]  : true
<randoop.PrimValue, value=23 [var4]  : true
<randoop.PrimValue, value=23 [var5]  : true
<randoop.PrimValue, value=23 [var6]  : true
<randoop.PrimValue, value=23 [var7]  : true

allSequences.size()=94
-------------------------------------------
randoop.util.Randomness: total calls to random: 478
Selected statement: A.k()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 8 sequences.
components: 8
randoop.util.Randomness: total calls to random: 479
randoop.util.Randomness: total calls to random: 480
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 481
Selected statement: C.test()
Will query component set for objects of typeclass C
getActivesequencesThatYield: entering method, clazz=class C
getActivesequencesThatYield: returning 83 sequences.
components: 83
randoop.util.Randomness: total calls to random: 482
randoop.util.Randomness: total calls to random: 483
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 484
Selected statement: A.k()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 8 sequences.
components: 8
randoop.util.Randomness: total calls to random: 485
randoop.util.Randomness: total calls to random: 486
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 487
Selected statement: B.k()
Will query component set for objects of typeclass B
getActivesequencesThatYield: entering method, clazz=class B
getActivesequencesThatYield: returning 85 sequences.
components: 85
randoop.util.Randomness: total calls to random: 488
randoop.util.Randomness: total calls to random: 489
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 490
Selected statement: A.k()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 8 sequences.
components: 8
randoop.util.Randomness: total calls to random: 491
randoop.util.Randomness: total calls to random: 492
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 493
Selected statement: B.k()
Will query component set for objects of typeclass B
getActivesequencesThatYield: entering method, clazz=class B
getActivesequencesThatYield: returning 85 sequences.
components: 85
randoop.util.Randomness: total calls to random: 494
randoop.util.Randomness: total calls to random: 495
Successfully created new unique sequence:var0 =  cons : C.<init>() : 
var1 =  method : C.test() : var0 
var2 =  method : C.test() : var0 
var3 =  method : C.test() : var0 
var4 =  method : B.m() : var0 
var5 =  method : C.test() : var0 
var6 =  method : C.test() : var0 
var7 =  method : B.k() : var0 
var8 =  method : B.k() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Adding sequence to active sequences of type class C
Sequence after execution: 
C var0 = new C();
// <NormalExecution object=object-of-type-C>;
int var1 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var2 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var3 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var4 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var5 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var6 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var7 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var8 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
<randoop.PrimValue, value=23 [var1]  : true
<randoop.PrimValue, value=23 [var2]  : true
<randoop.PrimValue, value=23 [var3]  : true
<randoop.PrimValue, value=23 [var4]  : true
<randoop.PrimValue, value=23 [var5]  : true
<randoop.PrimValue, value=23 [var6]  : true
<randoop.PrimValue, value=42 [var7]  : true
<randoop.PrimValue, value=42 [var8]  : true

allSequences.size()=95
-------------------------------------------
randoop.util.Randomness: total calls to random: 496
Selected statement: B.k()
Will query component set for objects of typeclass B
getActivesequencesThatYield: entering method, clazz=class B
getActivesequencesThatYield: returning 86 sequences.
components: 86
randoop.util.Randomness: total calls to random: 497
randoop.util.Randomness: total calls to random: 498
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 499
Selected statement: B.k()
Will query component set for objects of typeclass B
getActivesequencesThatYield: entering method, clazz=class B
getActivesequencesThatYield: returning 86 sequences.
components: 86
randoop.util.Randomness: total calls to random: 500
randoop.util.Randomness: total calls to random: 501
Successfully created new unique sequence:var0 =  cons : C.<init>() : 
var1 =  method : C.test() : var0 
var2 =  method : C.test() : var0 
var3 =  method : C.test() : var0 
var4 =  method : C.test() : var0 
var5 =  method : B.k() : var0 
var6 =  method : B.m() : var0 
var7 =  method : B.k() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Adding sequence to active sequences of type class C
Sequence after execution: 
C var0 = new C();
// <NormalExecution object=object-of-type-C>;
int var1 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var2 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var3 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var4 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var5 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var6 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var7 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
<randoop.PrimValue, value=23 [var1]  : true
<randoop.PrimValue, value=23 [var2]  : true
<randoop.PrimValue, value=23 [var3]  : true
<randoop.PrimValue, value=23 [var4]  : true
<randoop.PrimValue, value=42 [var5]  : true
<randoop.PrimValue, value=23 [var6]  : true
<randoop.PrimValue, value=42 [var7]  : true

allSequences.size()=96
-------------------------------------------
randoop.util.Randomness: total calls to random: 502
Selected statement: B.m()
Will query component set for objects of typeclass B
getActivesequencesThatYield: entering method, clazz=class B
getActivesequencesThatYield: returning 85 sequences.
components: 85
randoop.util.Randomness: total calls to random: 503
randoop.util.Randomness: total calls to random: 504
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 505
Selected statement: B.k()
Will query component set for objects of typeclass B
getActivesequencesThatYield: entering method, clazz=class B
getActivesequencesThatYield: returning 87 sequences.
components: 87
randoop.util.Randomness: total calls to random: 506
randoop.util.Randomness: total calls to random: 507
Successfully created new unique sequence:var0 =  cons : C.<init>() : 
var1 =  method : C.test() : var0 
var2 =  method : C.test() : var0 
var3 =  method : C.test() : var0 
var4 =  method : B.m() : var0 
var5 =  method : C.test() : var0 
var6 =  method : C.test() : var0 
var7 =  method : B.k() : var0 
var8 =  method : C.test() : var0 
var9 =  method : B.k() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Adding sequence to active sequences of type class C
Sequence after execution: 
C var0 = new C();
// <NormalExecution object=object-of-type-C>;
int var1 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var2 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var3 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var4 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var5 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var6 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var7 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var8 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var9 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
<randoop.PrimValue, value=23 [var1]  : true
<randoop.PrimValue, value=23 [var2]  : true
<randoop.PrimValue, value=23 [var3]  : true
<randoop.PrimValue, value=23 [var4]  : true
<randoop.PrimValue, value=23 [var5]  : true
<randoop.PrimValue, value=23 [var6]  : true
<randoop.PrimValue, value=42 [var7]  : true
<randoop.PrimValue, value=23 [var8]  : true
<randoop.PrimValue, value=42 [var9]  : true

allSequences.size()=97
-------------------------------------------
randoop.util.Randomness: total calls to random: 508
Selected statement: B.k()
Will query component set for objects of typeclass B
getActivesequencesThatYield: entering method, clazz=class B
getActivesequencesThatYield: returning 88 sequences.
components: 88
randoop.util.Randomness: total calls to random: 509
randoop.util.Randomness: total calls to random: 510
Successfully created new unique sequence:var0 =  cons : C.<init>() : 
var1 =  method : C.test() : var0 
var2 =  method : C.test() : var0 
var3 =  method : C.test() : var0 
var4 =  method : C.test() : var0 
var5 =  method : B.k() : var0 
var6 =  method : B.m() : var0 
var7 =  method : C.test() : var0 
var8 =  method : B.k() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Adding sequence to active sequences of type class C
Sequence after execution: 
C var0 = new C();
// <NormalExecution object=object-of-type-C>;
int var1 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var2 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var3 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var4 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var5 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var6 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var7 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var8 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
<randoop.PrimValue, value=23 [var1]  : true
<randoop.PrimValue, value=23 [var2]  : true
<randoop.PrimValue, value=23 [var3]  : true
<randoop.PrimValue, value=23 [var4]  : true
<randoop.PrimValue, value=42 [var5]  : true
<randoop.PrimValue, value=23 [var6]  : true
<randoop.PrimValue, value=23 [var7]  : true
<randoop.PrimValue, value=42 [var8]  : true

allSequences.size()=98
-------------------------------------------
randoop.util.Randomness: total calls to random: 511
Selected statement: C.test()
Will query component set for objects of typeclass C
getActivesequencesThatYield: entering method, clazz=class C
getActivesequencesThatYield: returning 87 sequences.
components: 87
randoop.util.Randomness: total calls to random: 512
randoop.util.Randomness: total calls to random: 513
Successfully created new unique sequence:var0 =  cons : C.<init>() : 
var1 =  method : C.test() : var0 
var2 =  method : C.test() : var0 
var3 =  method : B.m() : var0 
var4 =  method : C.test() : var0 
var5 =  method : B.k() : var0 
var6 =  method : B.m() : var0 
var7 =  method : C.test() : var0 
var8 =  method : C.test() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Adding sequence to active sequences of type class C
Sequence after execution: 
C var0 = new C();
// <NormalExecution object=object-of-type-C>;
int var1 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var2 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var3 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var4 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var5 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var6 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var7 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var8 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
<randoop.PrimValue, value=23 [var1]  : true
<randoop.PrimValue, value=23 [var2]  : true
<randoop.PrimValue, value=23 [var3]  : true
<randoop.PrimValue, value=23 [var4]  : true
<randoop.PrimValue, value=42 [var5]  : true
<randoop.PrimValue, value=23 [var6]  : true
<randoop.PrimValue, value=23 [var7]  : true
<randoop.PrimValue, value=23 [var8]  : true

allSequences.size()=99
-------------------------------------------
randoop.util.Randomness: total calls to random: 514
Selected statement: A.k()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 8 sequences.
components: 8
randoop.util.Randomness: total calls to random: 515
randoop.util.Randomness: total calls to random: 516
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.k() : var0 
var2 =  method : A.k() : var0 
var3 =  method : A.k() : var0 
var4 =  method : A.k() : var0 
var5 =  method : A.k() : var0 
var6 =  method : A.k() : var0 
var7 =  method : A.k() : var0 
var8 =  method : A.k() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
int var1 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var2 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var3 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var4 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var5 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var6 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var7 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var8 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
<randoop.PrimValue, value=23 [var1]  : true
<randoop.PrimValue, value=23 [var2]  : true
<randoop.PrimValue, value=23 [var3]  : true
<randoop.PrimValue, value=23 [var4]  : true
<randoop.PrimValue, value=23 [var5]  : true
<randoop.PrimValue, value=23 [var6]  : true
<randoop.PrimValue, value=23 [var7]  : true
<randoop.PrimValue, value=23 [var8]  : true

allSequences.size()=100
-------------------------------------------
randoop.util.Randomness: total calls to random: 517
Selected statement: B.m()
Will query component set for objects of typeclass B
getActivesequencesThatYield: entering method, clazz=class B
getActivesequencesThatYield: returning 88 sequences.
components: 88
randoop.util.Randomness: total calls to random: 518
randoop.util.Randomness: total calls to random: 519
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 520
Selected statement: B.k()
Will query component set for objects of typeclass B
getActivesequencesThatYield: entering method, clazz=class B
getActivesequencesThatYield: returning 90 sequences.
components: 90
randoop.util.Randomness: total calls to random: 521
randoop.util.Randomness: total calls to random: 522
Successfully created new unique sequence:var0 =  cons : C.<init>() : 
var1 =  method : C.test() : var0 
var2 =  method : C.test() : var0 
var3 =  method : B.m() : var0 
var4 =  method : C.test() : var0 
var5 =  method : B.k() : var0 
var6 =  method : B.m() : var0 
var7 =  method : C.test() : var0 
var8 =  method : B.k() : var0 
var9 =  method : C.test() : var0 
var10 =  method : B.k() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Adding sequence to active sequences of type class C
Sequence after execution: 
C var0 = new C();
// <NormalExecution object=object-of-type-C>;
int var1 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var2 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var3 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var4 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var5 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var6 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var7 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var8 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var9 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var10 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
<randoop.PrimValue, value=23 [var1]  : true
<randoop.PrimValue, value=23 [var2]  : true
<randoop.PrimValue, value=23 [var3]  : true
<randoop.PrimValue, value=23 [var4]  : true
<randoop.PrimValue, value=42 [var5]  : true
<randoop.PrimValue, value=23 [var6]  : true
<randoop.PrimValue, value=23 [var7]  : true
<randoop.PrimValue, value=42 [var8]  : true
<randoop.PrimValue, value=23 [var9]  : true
<randoop.PrimValue, value=42 [var10]  : true

allSequences.size()=101
-------------------------------------------
randoop.util.Randomness: total calls to random: 523
Selected statement: B.k()
Will query component set for objects of typeclass B
getActivesequencesThatYield: entering method, clazz=class B
getActivesequencesThatYield: returning 91 sequences.
components: 91
randoop.util.Randomness: total calls to random: 524
randoop.util.Randomness: total calls to random: 525
Successfully created new unique sequence:var0 =  cons : C.<init>() : 
var1 =  method : B.k() : var0 
var2 =  method : B.k() : var0 
var3 =  method : B.k() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Adding sequence to active sequences of type class C
Sequence after execution: 
C var0 = new C();
// <NormalExecution object=object-of-type-C>;
int var1 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var2 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var3 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
<randoop.PrimValue, value=42 [var1]  : true
<randoop.PrimValue, value=42 [var2]  : true
<randoop.PrimValue, value=42 [var3]  : true

allSequences.size()=102
-------------------------------------------
randoop.util.Randomness: total calls to random: 526
Selected statement: C.test()
Will query component set for objects of typeclass C
getActivesequencesThatYield: entering method, clazz=class C
getActivesequencesThatYield: returning 90 sequences.
components: 90
randoop.util.Randomness: total calls to random: 527
randoop.util.Randomness: total calls to random: 528
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 529
Selected statement: A.k()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 9 sequences.
components: 9
randoop.util.Randomness: total calls to random: 530
randoop.util.Randomness: total calls to random: 531
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 532
Selected statement: B.m()
Will query component set for objects of typeclass B
getActivesequencesThatYield: entering method, clazz=class B
getActivesequencesThatYield: returning 90 sequences.
components: 90
randoop.util.Randomness: total calls to random: 533
randoop.util.Randomness: total calls to random: 534
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 535
Selected statement: C.test()
Will query component set for objects of typeclass C
getActivesequencesThatYield: entering method, clazz=class C
getActivesequencesThatYield: returning 90 sequences.
components: 90
randoop.util.Randomness: total calls to random: 536
randoop.util.Randomness: total calls to random: 537
Successfully created new unique sequence:var0 =  cons : C.<init>() : 
var1 =  method : C.test() : var0 
var2 =  method : C.test() : var0 
var3 =  method : B.m() : var0 
var4 =  method : C.test() : var0 
var5 =  method : B.k() : var0 
var6 =  method : B.k() : var0 
var7 =  method : C.test() : var0 
var8 =  method : C.test() : var0 
var9 =  method : C.test() : var0 
var10 =  method : C.test() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Adding sequence to active sequences of type class C
Sequence after execution: 
C var0 = new C();
// <NormalExecution object=object-of-type-C>;
int var1 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var2 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var3 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var4 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var5 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var6 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var7 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var8 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var9 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var10 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
<randoop.PrimValue, value=23 [var1]  : true
<randoop.PrimValue, value=23 [var2]  : true
<randoop.PrimValue, value=23 [var3]  : true
<randoop.PrimValue, value=23 [var4]  : true
<randoop.PrimValue, value=42 [var5]  : true
<randoop.PrimValue, value=42 [var6]  : true
<randoop.PrimValue, value=23 [var7]  : true
<randoop.PrimValue, value=23 [var8]  : true
<randoop.PrimValue, value=23 [var9]  : true
<randoop.PrimValue, value=23 [var10]  : true

allSequences.size()=103
-------------------------------------------
randoop.util.Randomness: total calls to random: 538
Selected statement: A.k()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 9 sequences.
components: 9
randoop.util.Randomness: total calls to random: 539
randoop.util.Randomness: total calls to random: 540
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 541
Selected statement: A.k()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 9 sequences.
components: 9
randoop.util.Randomness: total calls to random: 542
randoop.util.Randomness: total calls to random: 543
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 544
Selected statement: B.m()
Will query component set for objects of typeclass B
getActivesequencesThatYield: entering method, clazz=class B
getActivesequencesThatYield: returning 91 sequences.
components: 91
randoop.util.Randomness: total calls to random: 545
randoop.util.Randomness: total calls to random: 546
Successfully created new unique sequence:var0 =  cons : C.<init>() : 
var1 =  method : B.m() : var0 
var2 =  method : B.k() : var0 
var3 =  method : B.m() : var0 
var4 =  method : B.k() : var0 
var5 =  method : C.test() : var0 
var6 =  method : B.m() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Adding sequence to active sequences of type class C
Sequence after execution: 
C var0 = new C();
// <NormalExecution object=object-of-type-C>;
int var1 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var2 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var3 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var4 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var5 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var6 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
<randoop.PrimValue, value=23 [var1]  : true
<randoop.PrimValue, value=42 [var2]  : true
<randoop.PrimValue, value=23 [var3]  : true
<randoop.PrimValue, value=42 [var4]  : true
<randoop.PrimValue, value=23 [var5]  : true
<randoop.PrimValue, value=23 [var6]  : true

allSequences.size()=104
-------------------------------------------
randoop.util.Randomness: total calls to random: 547
Selected statement: B.k()
Will query component set for objects of typeclass B
getActivesequencesThatYield: entering method, clazz=class B
getActivesequencesThatYield: returning 94 sequences.
components: 94
randoop.util.Randomness: total calls to random: 548
randoop.util.Randomness: total calls to random: 549
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 550
Selected statement: C.test()
Will query component set for objects of typeclass C
getActivesequencesThatYield: entering method, clazz=class C
getActivesequencesThatYield: returning 92 sequences.
components: 92
randoop.util.Randomness: total calls to random: 551
randoop.util.Randomness: total calls to random: 552
Successfully created new unique sequence:var0 =  cons : C.<init>() : 
var1 =  method : B.m() : var0 
var2 =  method : B.k() : var0 
var3 =  method : C.test() : var0 
var4 =  method : C.test() : var0 
var5 =  method : C.test() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Adding sequence to active sequences of type class C
Sequence after execution: 
C var0 = new C();
// <NormalExecution object=object-of-type-C>;
int var1 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var2 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var3 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var4 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var5 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
<randoop.PrimValue, value=23 [var1]  : true
<randoop.PrimValue, value=42 [var2]  : true
<randoop.PrimValue, value=23 [var3]  : true
<randoop.PrimValue, value=23 [var4]  : true
<randoop.PrimValue, value=23 [var5]  : true

allSequences.size()=105
-------------------------------------------
randoop.util.Randomness: total calls to random: 553
Selected statement: B.k()
Will query component set for objects of typeclass B
getActivesequencesThatYield: entering method, clazz=class B
getActivesequencesThatYield: returning 95 sequences.
components: 95
randoop.util.Randomness: total calls to random: 554
randoop.util.Randomness: total calls to random: 555
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 556
Selected statement: A.k()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 9 sequences.
components: 9
randoop.util.Randomness: total calls to random: 557
randoop.util.Randomness: total calls to random: 558
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 559
Selected statement: B.k()
Will query component set for objects of typeclass B
getActivesequencesThatYield: entering method, clazz=class B
getActivesequencesThatYield: returning 95 sequences.
components: 95
randoop.util.Randomness: total calls to random: 560
randoop.util.Randomness: total calls to random: 561
Successfully created new unique sequence:var0 =  cons : C.<init>() : 
var1 =  method : C.test() : var0 
var2 =  method : C.test() : var0 
var3 =  method : B.m() : var0 
var4 =  method : C.test() : var0 
var5 =  method : C.test() : var0 
var6 =  method : C.test() : var0 
var7 =  method : B.k() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Adding sequence to active sequences of type class C
Sequence after execution: 
C var0 = new C();
// <NormalExecution object=object-of-type-C>;
int var1 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var2 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var3 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var4 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var5 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var6 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var7 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
<randoop.PrimValue, value=23 [var1]  : true
<randoop.PrimValue, value=23 [var2]  : true
<randoop.PrimValue, value=23 [var3]  : true
<randoop.PrimValue, value=23 [var4]  : true
<randoop.PrimValue, value=23 [var5]  : true
<randoop.PrimValue, value=23 [var6]  : true
<randoop.PrimValue, value=42 [var7]  : true

allSequences.size()=106
-------------------------------------------
randoop.util.Randomness: total calls to random: 562
Selected statement: A.k()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 9 sequences.
components: 9
randoop.util.Randomness: total calls to random: 563
randoop.util.Randomness: total calls to random: 564
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 565
Selected statement: A.k()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 9 sequences.
components: 9
randoop.util.Randomness: total calls to random: 566
randoop.util.Randomness: total calls to random: 567
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 568
Selected statement: C.test()
Will query component set for objects of typeclass C
getActivesequencesThatYield: entering method, clazz=class C
getActivesequencesThatYield: returning 94 sequences.
components: 94
randoop.util.Randomness: total calls to random: 569
randoop.util.Randomness: total calls to random: 570
Successfully created new unique sequence:var0 =  cons : C.<init>() : 
var1 =  method : B.m() : var0 
var2 =  method : B.k() : var0 
var3 =  method : B.k() : var0 
var4 =  method : B.m() : var0 
var5 =  method : B.m() : var0 
var6 =  method : C.test() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Adding sequence to active sequences of type class C
Sequence after execution: 
C var0 = new C();
// <NormalExecution object=object-of-type-C>;
int var1 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var2 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var3 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var4 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var5 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var6 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
<randoop.PrimValue, value=23 [var1]  : true
<randoop.PrimValue, value=42 [var2]  : true
<randoop.PrimValue, value=42 [var3]  : true
<randoop.PrimValue, value=23 [var4]  : true
<randoop.PrimValue, value=23 [var5]  : true
<randoop.PrimValue, value=23 [var6]  : true

allSequences.size()=107
-------------------------------------------
randoop.util.Randomness: total calls to random: 571
Selected statement: B.k()
Will query component set for objects of typeclass B
getActivesequencesThatYield: entering method, clazz=class B
getActivesequencesThatYield: returning 97 sequences.
components: 97
randoop.util.Randomness: total calls to random: 572
randoop.util.Randomness: total calls to random: 573
Successfully created new unique sequence:var0 =  cons : C.<init>() : 
var1 =  method : C.test() : var0 
var2 =  method : C.test() : var0 
var3 =  method : C.test() : var0 
var4 =  method : B.m() : var0 
var5 =  method : B.m() : var0 
var6 =  method : B.k() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Adding sequence to active sequences of type class C
Sequence after execution: 
C var0 = new C();
// <NormalExecution object=object-of-type-C>;
int var1 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var2 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var3 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var4 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var5 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var6 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
<randoop.PrimValue, value=23 [var1]  : true
<randoop.PrimValue, value=23 [var2]  : true
<randoop.PrimValue, value=23 [var3]  : true
<randoop.PrimValue, value=23 [var4]  : true
<randoop.PrimValue, value=23 [var5]  : true
<randoop.PrimValue, value=42 [var6]  : true

allSequences.size()=108
-------------------------------------------
randoop.util.Randomness: total calls to random: 574
Selected statement: A.k()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 9 sequences.
components: 9
randoop.util.Randomness: total calls to random: 575
randoop.util.Randomness: total calls to random: 576
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 577
Selected statement: B.k()
Will query component set for objects of typeclass B
getActivesequencesThatYield: entering method, clazz=class B
getActivesequencesThatYield: returning 98 sequences.
components: 98
randoop.util.Randomness: total calls to random: 578
randoop.util.Randomness: total calls to random: 579
Successfully created new unique sequence:var0 =  cons : C.<init>() : 
var1 =  method : C.test() : var0 
var2 =  method : C.test() : var0 
var3 =  method : B.m() : var0 
var4 =  method : B.m() : var0 
var5 =  method : B.m() : var0 
var6 =  method : B.k() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Adding sequence to active sequences of type class C
Sequence after execution: 
C var0 = new C();
// <NormalExecution object=object-of-type-C>;
int var1 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var2 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var3 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var4 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var5 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var6 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
<randoop.PrimValue, value=23 [var1]  : true
<randoop.PrimValue, value=23 [var2]  : true
<randoop.PrimValue, value=23 [var3]  : true
<randoop.PrimValue, value=23 [var4]  : true
<randoop.PrimValue, value=23 [var5]  : true
<randoop.PrimValue, value=42 [var6]  : true

allSequences.size()=109
-------------------------------------------
randoop.util.Randomness: total calls to random: 580
Selected statement: A.k()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 9 sequences.
components: 9
randoop.util.Randomness: total calls to random: 581
randoop.util.Randomness: total calls to random: 582
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 583
Selected statement: B.m()
Will query component set for objects of typeclass B
getActivesequencesThatYield: entering method, clazz=class B
getActivesequencesThatYield: returning 97 sequences.
components: 97
randoop.util.Randomness: total calls to random: 584
randoop.util.Randomness: total calls to random: 585
Successfully created new unique sequence:var0 =  cons : C.<init>() : 
var1 =  method : B.m() : var0 
var2 =  method : B.k() : var0 
var3 =  method : B.m() : var0 
var4 =  method : C.test() : var0 
var5 =  method : B.m() : var0 
var6 =  method : B.m() : var0 
var7 =  method : B.k() : var0 
var8 =  method : B.k() : var0 
var9 =  method : B.m() : var0 
var10 =  method : B.k() : var0 
var11 =  method : B.k() : var0 
var12 =  method : C.test() : var0 
var13 =  method : B.m() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Making index 12 inactive (value is a primitive)
Making index 13 inactive (value is a primitive)
Adding sequence to active sequences of type class C
Sequence after execution: 
C var0 = new C();
// <NormalExecution object=object-of-type-C>;
int var1 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var2 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var3 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var4 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var5 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var6 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var7 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var8 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var9 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var10 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var11 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var12 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var13 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
<randoop.PrimValue, value=23 [var1]  : true
<randoop.PrimValue, value=42 [var2]  : true
<randoop.PrimValue, value=23 [var3]  : true
<randoop.PrimValue, value=23 [var4]  : true
<randoop.PrimValue, value=23 [var5]  : true
<randoop.PrimValue, value=23 [var6]  : true
<randoop.PrimValue, value=42 [var7]  : true
<randoop.PrimValue, value=42 [var8]  : true
<randoop.PrimValue, value=23 [var9]  : true
<randoop.PrimValue, value=42 [var10]  : true
<randoop.PrimValue, value=42 [var11]  : true
<randoop.PrimValue, value=23 [var12]  : true
<randoop.PrimValue, value=23 [var13]  : true

allSequences.size()=110
-------------------------------------------
randoop.util.Randomness: total calls to random: 586
Selected statement: B.m()
Will query component set for objects of typeclass B
getActivesequencesThatYield: entering method, clazz=class B
getActivesequencesThatYield: returning 98 sequences.
components: 98
randoop.util.Randomness: total calls to random: 587
randoop.util.Randomness: total calls to random: 588
Successfully created new unique sequence:var0 =  cons : C.<init>() : 
var1 =  method : C.test() : var0 
var2 =  method : C.test() : var0 
var3 =  method : B.m() : var0 
var4 =  method : C.test() : var0 
var5 =  method : B.k() : var0 
var6 =  method : B.m() : var0 
var7 =  method : B.m() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Adding sequence to active sequences of type class C
Sequence after execution: 
C var0 = new C();
// <NormalExecution object=object-of-type-C>;
int var1 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var2 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var3 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var4 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var5 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var6 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var7 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
<randoop.PrimValue, value=23 [var1]  : true
<randoop.PrimValue, value=23 [var2]  : true
<randoop.PrimValue, value=23 [var3]  : true
<randoop.PrimValue, value=23 [var4]  : true
<randoop.PrimValue, value=42 [var5]  : true
<randoop.PrimValue, value=23 [var6]  : true
<randoop.PrimValue, value=23 [var7]  : true

allSequences.size()=111
-------------------------------------------
randoop.util.Randomness: total calls to random: 589
Selected statement: B.k()
Will query component set for objects of typeclass B
getActivesequencesThatYield: entering method, clazz=class B
getActivesequencesThatYield: returning 101 sequences.
components: 101
randoop.util.Randomness: total calls to random: 590
randoop.util.Randomness: total calls to random: 591
Successfully created new unique sequence:var0 =  cons : C.<init>() : 
var1 =  method : B.k() : var0 
var2 =  method : B.m() : var0 
var3 =  method : B.k() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Adding sequence to active sequences of type class C
Sequence after execution: 
C var0 = new C();
// <NormalExecution object=object-of-type-C>;
int var1 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var2 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var3 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
<randoop.PrimValue, value=42 [var1]  : true
<randoop.PrimValue, value=23 [var2]  : true
<randoop.PrimValue, value=42 [var3]  : true

allSequences.size()=112
-------------------------------------------
randoop.util.Randomness: total calls to random: 592
Selected statement: B.m()
Will query component set for objects of typeclass B
getActivesequencesThatYield: entering method, clazz=class B
getActivesequencesThatYield: returning 100 sequences.
components: 100
randoop.util.Randomness: total calls to random: 593
randoop.util.Randomness: total calls to random: 594
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 595
Selected statement: B.k()
Will query component set for objects of typeclass B
getActivesequencesThatYield: entering method, clazz=class B
getActivesequencesThatYield: returning 102 sequences.
components: 102
randoop.util.Randomness: total calls to random: 596
randoop.util.Randomness: total calls to random: 597
Successfully created new unique sequence:var0 =  cons : C.<init>() : 
var1 =  method : C.test() : var0 
var2 =  method : C.test() : var0 
var3 =  method : C.test() : var0 
var4 =  method : C.test() : var0 
var5 =  method : B.k() : var0 
var6 =  method : B.k() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Adding sequence to active sequences of type class C
Sequence after execution: 
C var0 = new C();
// <NormalExecution object=object-of-type-C>;
int var1 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var2 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var3 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var4 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var5 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var6 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
<randoop.PrimValue, value=23 [var1]  : true
<randoop.PrimValue, value=23 [var2]  : true
<randoop.PrimValue, value=23 [var3]  : true
<randoop.PrimValue, value=23 [var4]  : true
<randoop.PrimValue, value=42 [var5]  : true
<randoop.PrimValue, value=42 [var6]  : true

allSequences.size()=113
-------------------------------------------
randoop.util.Randomness: total calls to random: 598
Selected statement: B.m()
Will query component set for objects of typeclass B
getActivesequencesThatYield: entering method, clazz=class B
getActivesequencesThatYield: returning 101 sequences.
components: 101
randoop.util.Randomness: total calls to random: 599
randoop.util.Randomness: total calls to random: 600
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 601
Selected statement: B.m()
Will query component set for objects of typeclass B
getActivesequencesThatYield: entering method, clazz=class B
getActivesequencesThatYield: returning 101 sequences.
components: 101
randoop.util.Randomness: total calls to random: 602
randoop.util.Randomness: total calls to random: 603
Successfully created new unique sequence:var0 =  cons : C.<init>() : 
var1 =  method : C.test() : var0 
var2 =  method : C.test() : var0 
var3 =  method : B.m() : var0 
var4 =  method : C.test() : var0 
var5 =  method : B.m() : var0 
var6 =  method : B.m() : var0 
var7 =  method : B.m() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Adding sequence to active sequences of type class C
Sequence after execution: 
C var0 = new C();
// <NormalExecution object=object-of-type-C>;
int var1 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var2 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var3 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var4 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var5 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var6 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var7 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
<randoop.PrimValue, value=23 [var1]  : true
<randoop.PrimValue, value=23 [var2]  : true
<randoop.PrimValue, value=23 [var3]  : true
<randoop.PrimValue, value=23 [var4]  : true
<randoop.PrimValue, value=23 [var5]  : true
<randoop.PrimValue, value=23 [var6]  : true
<randoop.PrimValue, value=23 [var7]  : true

allSequences.size()=114
-------------------------------------------
randoop.util.Randomness: total calls to random: 604
Selected statement: A.k()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 9 sequences.
components: 9
randoop.util.Randomness: total calls to random: 605
randoop.util.Randomness: total calls to random: 606
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 607
Selected statement: B.m()
Will query component set for objects of typeclass B
getActivesequencesThatYield: entering method, clazz=class B
getActivesequencesThatYield: returning 102 sequences.
components: 102
randoop.util.Randomness: total calls to random: 608
randoop.util.Randomness: total calls to random: 609
Successfully created new unique sequence:var0 =  cons : C.<init>() : 
var1 =  method : C.test() : var0 
var2 =  method : C.test() : var0 
var3 =  method : C.test() : var0 
var4 =  method : C.test() : var0 
var5 =  method : B.k() : var0 
var6 =  method : B.m() : var0 
var7 =  method : C.test() : var0 
var8 =  method : B.k() : var0 
var9 =  method : B.m() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Adding sequence to active sequences of type class C
Sequence after execution: 
C var0 = new C();
// <NormalExecution object=object-of-type-C>;
int var1 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var2 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var3 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var4 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var5 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var6 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var7 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var8 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var9 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
<randoop.PrimValue, value=23 [var1]  : true
<randoop.PrimValue, value=23 [var2]  : true
<randoop.PrimValue, value=23 [var3]  : true
<randoop.PrimValue, value=23 [var4]  : true
<randoop.PrimValue, value=42 [var5]  : true
<randoop.PrimValue, value=23 [var6]  : true
<randoop.PrimValue, value=23 [var7]  : true
<randoop.PrimValue, value=42 [var8]  : true
<randoop.PrimValue, value=23 [var9]  : true

allSequences.size()=115
-------------------------------------------
randoop.util.Randomness: total calls to random: 610
Selected statement: C.test()
Will query component set for objects of typeclass C
getActivesequencesThatYield: entering method, clazz=class C
getActivesequencesThatYield: returning 103 sequences.
components: 103
randoop.util.Randomness: total calls to random: 611
randoop.util.Randomness: total calls to random: 612
Successfully created new unique sequence:var0 =  cons : C.<init>() : 
var1 =  method : B.m() : var0 
var2 =  method : B.k() : var0 
var3 =  method : B.m() : var0 
var4 =  method : B.k() : var0 
var5 =  method : C.test() : var0 
var6 =  method : B.m() : var0 
var7 =  method : C.test() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Adding sequence to active sequences of type class C
Sequence after execution: 
C var0 = new C();
// <NormalExecution object=object-of-type-C>;
int var1 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var2 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var3 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var4 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var5 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var6 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var7 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
<randoop.PrimValue, value=23 [var1]  : true
<randoop.PrimValue, value=42 [var2]  : true
<randoop.PrimValue, value=23 [var3]  : true
<randoop.PrimValue, value=42 [var4]  : true
<randoop.PrimValue, value=23 [var5]  : true
<randoop.PrimValue, value=23 [var6]  : true
<randoop.PrimValue, value=23 [var7]  : true

allSequences.size()=116
-------------------------------------------
randoop.util.Randomness: total calls to random: 613
Selected statement: B.k()
Will query component set for objects of typeclass B
getActivesequencesThatYield: entering method, clazz=class B
getActivesequencesThatYield: returning 106 sequences.
components: 106
randoop.util.Randomness: total calls to random: 614
randoop.util.Randomness: total calls to random: 615
Successfully created new unique sequence:var0 =  cons : C.<init>() : 
var1 =  method : C.test() : var0 
var2 =  method : C.test() : var0 
var3 =  method : C.test() : var0 
var4 =  method : B.m() : var0 
var5 =  method : B.m() : var0 
var6 =  method : C.test() : var0 
var7 =  method : B.m() : var0 
var8 =  method : B.k() : var0 
var9 =  method : B.k() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Adding sequence to active sequences of type class C
Sequence after execution: 
C var0 = new C();
// <NormalExecution object=object-of-type-C>;
int var1 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var2 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var3 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var4 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var5 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var6 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var7 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var8 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var9 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
<randoop.PrimValue, value=23 [var1]  : true
<randoop.PrimValue, value=23 [var2]  : true
<randoop.PrimValue, value=23 [var3]  : true
<randoop.PrimValue, value=23 [var4]  : true
<randoop.PrimValue, value=23 [var5]  : true
<randoop.PrimValue, value=23 [var6]  : true
<randoop.PrimValue, value=23 [var7]  : true
<randoop.PrimValue, value=42 [var8]  : true
<randoop.PrimValue, value=42 [var9]  : true

allSequences.size()=117
-------------------------------------------
randoop.util.Randomness: total calls to random: 616
Selected statement: B.k()
Will query component set for objects of typeclass B
getActivesequencesThatYield: entering method, clazz=class B
getActivesequencesThatYield: returning 107 sequences.
components: 107
randoop.util.Randomness: total calls to random: 617
randoop.util.Randomness: total calls to random: 618
Successfully created new unique sequence:var0 =  cons : C.<init>() : 
var1 =  method : B.m() : var0 
var2 =  method : B.k() : var0 
var3 =  method : B.m() : var0 
var4 =  method : C.test() : var0 
var5 =  method : C.test() : var0 
var6 =  method : B.k() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Adding sequence to active sequences of type class C
Sequence after execution: 
C var0 = new C();
// <NormalExecution object=object-of-type-C>;
int var1 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var2 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var3 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var4 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var5 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var6 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
<randoop.PrimValue, value=23 [var1]  : true
<randoop.PrimValue, value=42 [var2]  : true
<randoop.PrimValue, value=23 [var3]  : true
<randoop.PrimValue, value=23 [var4]  : true
<randoop.PrimValue, value=23 [var5]  : true
<randoop.PrimValue, value=42 [var6]  : true

allSequences.size()=118
-------------------------------------------
randoop.util.Randomness: total calls to random: 619
Selected statement: A.k()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 9 sequences.
components: 9
randoop.util.Randomness: total calls to random: 620
randoop.util.Randomness: total calls to random: 621
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.k() : var0 
var2 =  method : A.k() : var0 
var3 =  method : A.k() : var0 
var4 =  method : A.k() : var0 
var5 =  method : A.k() : var0 
var6 =  method : A.k() : var0 
var7 =  method : A.k() : var0 
var8 =  method : A.k() : var0 
var9 =  method : A.k() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
int var1 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var2 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var3 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var4 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var5 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var6 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var7 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var8 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var9 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
<randoop.PrimValue, value=23 [var1]  : true
<randoop.PrimValue, value=23 [var2]  : true
<randoop.PrimValue, value=23 [var3]  : true
<randoop.PrimValue, value=23 [var4]  : true
<randoop.PrimValue, value=23 [var5]  : true
<randoop.PrimValue, value=23 [var6]  : true
<randoop.PrimValue, value=23 [var7]  : true
<randoop.PrimValue, value=23 [var8]  : true
<randoop.PrimValue, value=23 [var9]  : true

allSequences.size()=119
-------------------------------------------
randoop.util.Randomness: total calls to random: 622
Selected statement: B.k()
Will query component set for objects of typeclass B
getActivesequencesThatYield: entering method, clazz=class B
getActivesequencesThatYield: returning 108 sequences.
components: 108
randoop.util.Randomness: total calls to random: 623
randoop.util.Randomness: total calls to random: 624
Successfully created new unique sequence:var0 =  cons : C.<init>() : 
var1 =  method : C.test() : var0 
var2 =  method : C.test() : var0 
var3 =  method : B.m() : var0 
var4 =  method : C.test() : var0 
var5 =  method : B.k() : var0 
var6 =  method : B.m() : var0 
var7 =  method : C.test() : var0 
var8 =  method : B.k() : var0 
var9 =  method : B.k() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Adding sequence to active sequences of type class C
Sequence after execution: 
C var0 = new C();
// <NormalExecution object=object-of-type-C>;
int var1 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var2 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var3 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var4 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var5 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var6 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var7 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var8 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var9 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
<randoop.PrimValue, value=23 [var1]  : true
<randoop.PrimValue, value=23 [var2]  : true
<randoop.PrimValue, value=23 [var3]  : true
<randoop.PrimValue, value=23 [var4]  : true
<randoop.PrimValue, value=42 [var5]  : true
<randoop.PrimValue, value=23 [var6]  : true
<randoop.PrimValue, value=23 [var7]  : true
<randoop.PrimValue, value=42 [var8]  : true
<randoop.PrimValue, value=42 [var9]  : true

allSequences.size()=120
-------------------------------------------
randoop.util.Randomness: total calls to random: 625
Selected statement: A.k()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 10 sequences.
components: 10
randoop.util.Randomness: total calls to random: 626
randoop.util.Randomness: total calls to random: 627
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 628
Selected statement: C.test()
Will query component set for objects of typeclass C
getActivesequencesThatYield: entering method, clazz=class C
getActivesequencesThatYield: returning 107 sequences.
components: 107
randoop.util.Randomness: total calls to random: 629
randoop.util.Randomness: total calls to random: 630
Successfully created new unique sequence:var0 =  cons : C.<init>() : 
var1 =  method : C.test() : var0 
var2 =  method : C.test() : var0 
var3 =  method : C.test() : var0 
var4 =  method : B.m() : var0 
var5 =  method : B.m() : var0 
var6 =  method : C.test() : var0 
var7 =  method : C.test() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Adding sequence to active sequences of type class C
Sequence after execution: 
C var0 = new C();
// <NormalExecution object=object-of-type-C>;
int var1 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var2 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var3 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var4 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var5 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var6 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var7 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
<randoop.PrimValue, value=23 [var1]  : true
<randoop.PrimValue, value=23 [var2]  : true
<randoop.PrimValue, value=23 [var3]  : true
<randoop.PrimValue, value=23 [var4]  : true
<randoop.PrimValue, value=23 [var5]  : true
<randoop.PrimValue, value=23 [var6]  : true
<randoop.PrimValue, value=23 [var7]  : true

allSequences.size()=121
-------------------------------------------
randoop.util.Randomness: total calls to random: 631
Selected statement: B.k()
Will query component set for objects of typeclass B
getActivesequencesThatYield: entering method, clazz=class B
getActivesequencesThatYield: returning 110 sequences.
components: 110
randoop.util.Randomness: total calls to random: 632
randoop.util.Randomness: total calls to random: 633
Successfully created new unique sequence:var0 =  cons : C.<init>() : 
var1 =  method : C.test() : var0 
var2 =  method : C.test() : var0 
var3 =  method : B.m() : var0 
var4 =  method : C.test() : var0 
var5 =  method : B.k() : var0 
var6 =  method : B.k() : var0 
var7 =  method : C.test() : var0 
var8 =  method : C.test() : var0 
var9 =  method : B.k() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Adding sequence to active sequences of type class C
Sequence after execution: 
C var0 = new C();
// <NormalExecution object=object-of-type-C>;
int var1 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var2 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var3 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var4 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var5 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var6 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var7 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var8 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var9 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
<randoop.PrimValue, value=23 [var1]  : true
<randoop.PrimValue, value=23 [var2]  : true
<randoop.PrimValue, value=23 [var3]  : true
<randoop.PrimValue, value=23 [var4]  : true
<randoop.PrimValue, value=42 [var5]  : true
<randoop.PrimValue, value=42 [var6]  : true
<randoop.PrimValue, value=23 [var7]  : true
<randoop.PrimValue, value=23 [var8]  : true
<randoop.PrimValue, value=42 [var9]  : true

allSequences.size()=122
-------------------------------------------
randoop.util.Randomness: total calls to random: 634
Selected statement: A.k()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 10 sequences.
components: 10
randoop.util.Randomness: total calls to random: 635
randoop.util.Randomness: total calls to random: 636
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 637
Selected statement: C.test()
Will query component set for objects of typeclass C
getActivesequencesThatYield: entering method, clazz=class C
getActivesequencesThatYield: returning 109 sequences.
components: 109
randoop.util.Randomness: total calls to random: 638
randoop.util.Randomness: total calls to random: 639
Successfully created new unique sequence:var0 =  cons : C.<init>() : 
var1 =  method : C.test() : var0 
var2 =  method : C.test() : var0 
var3 =  method : B.m() : var0 
var4 =  method : C.test() : var0 
var5 =  method : B.k() : var0 
var6 =  method : B.m() : var0 
var7 =  method : C.test() : var0 
var8 =  method : B.k() : var0 
var9 =  method : C.test() : var0 
var10 =  method : C.test() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Adding sequence to active sequences of type class C
Sequence after execution: 
C var0 = new C();
// <NormalExecution object=object-of-type-C>;
int var1 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var2 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var3 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var4 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var5 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var6 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var7 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var8 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var9 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var10 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
<randoop.PrimValue, value=23 [var1]  : true
<randoop.PrimValue, value=23 [var2]  : true
<randoop.PrimValue, value=23 [var3]  : true
<randoop.PrimValue, value=23 [var4]  : true
<randoop.PrimValue, value=42 [var5]  : true
<randoop.PrimValue, value=23 [var6]  : true
<randoop.PrimValue, value=23 [var7]  : true
<randoop.PrimValue, value=42 [var8]  : true
<randoop.PrimValue, value=23 [var9]  : true
<randoop.PrimValue, value=23 [var10]  : true

allSequences.size()=123
-------------------------------------------
randoop.util.Randomness: total calls to random: 640
Selected statement: B.k()
Will query component set for objects of typeclass B
getActivesequencesThatYield: entering method, clazz=class B
getActivesequencesThatYield: returning 112 sequences.
components: 112
randoop.util.Randomness: total calls to random: 641
randoop.util.Randomness: total calls to random: 642
Successfully created new unique sequence:var0 =  cons : C.<init>() : 
var1 =  method : B.m() : var0 
var2 =  method : B.k() : var0 
var3 =  method : C.test() : var0 
var4 =  method : C.test() : var0 
var5 =  method : B.k() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Adding sequence to active sequences of type class C
Sequence after execution: 
C var0 = new C();
// <NormalExecution object=object-of-type-C>;
int var1 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var2 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var3 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var4 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var5 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
<randoop.PrimValue, value=23 [var1]  : true
<randoop.PrimValue, value=42 [var2]  : true
<randoop.PrimValue, value=23 [var3]  : true
<randoop.PrimValue, value=23 [var4]  : true
<randoop.PrimValue, value=42 [var5]  : true

allSequences.size()=124
-------------------------------------------
randoop.util.Randomness: total calls to random: 643
Selected statement: A.k()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 10 sequences.
components: 10
randoop.util.Randomness: total calls to random: 644
randoop.util.Randomness: total calls to random: 645
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 646
Selected statement: B.m()
Will query component set for objects of typeclass B
getActivesequencesThatYield: entering method, clazz=class B
getActivesequencesThatYield: returning 111 sequences.
components: 111
randoop.util.Randomness: total calls to random: 647
randoop.util.Randomness: total calls to random: 648
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 649
Selected statement: C.test()
Will query component set for objects of typeclass C
getActivesequencesThatYield: entering method, clazz=class C
getActivesequencesThatYield: returning 111 sequences.
components: 111
randoop.util.Randomness: total calls to random: 650
randoop.util.Randomness: total calls to random: 651
Successfully created new unique sequence:var0 =  cons : C.<init>() : 
var1 =  method : C.test() : var0 
var2 =  method : C.test() : var0 
var3 =  method : B.m() : var0 
var4 =  method : C.test() : var0 
var5 =  method : C.test() : var0 
var6 =  method : C.test() : var0 
var7 =  method : B.k() : var0 
var8 =  method : C.test() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Adding sequence to active sequences of type class C
Sequence after execution: 
C var0 = new C();
// <NormalExecution object=object-of-type-C>;
int var1 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var2 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var3 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var4 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var5 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var6 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var7 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var8 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
<randoop.PrimValue, value=23 [var1]  : true
<randoop.PrimValue, value=23 [var2]  : true
<randoop.PrimValue, value=23 [var3]  : true
<randoop.PrimValue, value=23 [var4]  : true
<randoop.PrimValue, value=23 [var5]  : true
<randoop.PrimValue, value=23 [var6]  : true
<randoop.PrimValue, value=42 [var7]  : true
<randoop.PrimValue, value=23 [var8]  : true

allSequences.size()=125
-------------------------------------------
randoop.util.Randomness: total calls to random: 652
Selected statement: A.k()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 10 sequences.
components: 10
randoop.util.Randomness: total calls to random: 653
randoop.util.Randomness: total calls to random: 654
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 655
Selected statement: B.k()
Will query component set for objects of typeclass B
getActivesequencesThatYield: entering method, clazz=class B
getActivesequencesThatYield: returning 114 sequences.
components: 114
randoop.util.Randomness: total calls to random: 656
randoop.util.Randomness: total calls to random: 657
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 658
Selected statement: B.k()
Will query component set for objects of typeclass B
getActivesequencesThatYield: entering method, clazz=class B
getActivesequencesThatYield: returning 114 sequences.
components: 114
randoop.util.Randomness: total calls to random: 659
randoop.util.Randomness: total calls to random: 660
Successfully created new unique sequence:var0 =  cons : C.<init>() : 
var1 =  method : B.m() : var0 
var2 =  method : B.k() : var0 
var3 =  method : B.m() : var0 
var4 =  method : C.test() : var0 
var5 =  method : C.test() : var0 
var6 =  method : B.m() : var0 
var7 =  method : B.k() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Adding sequence to active sequences of type class C
Sequence after execution: 
C var0 = new C();
// <NormalExecution object=object-of-type-C>;
int var1 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var2 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var3 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var4 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var5 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var6 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var7 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
<randoop.PrimValue, value=23 [var1]  : true
<randoop.PrimValue, value=42 [var2]  : true
<randoop.PrimValue, value=23 [var3]  : true
<randoop.PrimValue, value=23 [var4]  : true
<randoop.PrimValue, value=23 [var5]  : true
<randoop.PrimValue, value=23 [var6]  : true
<randoop.PrimValue, value=42 [var7]  : true

allSequences.size()=126
-------------------------------------------
randoop.util.Randomness: total calls to random: 661
Selected statement: A.k()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 10 sequences.
components: 10
randoop.util.Randomness: total calls to random: 662
randoop.util.Randomness: total calls to random: 663
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 664
Selected statement: C.test()
Will query component set for objects of typeclass C
getActivesequencesThatYield: entering method, clazz=class C
getActivesequencesThatYield: returning 113 sequences.
components: 113
randoop.util.Randomness: total calls to random: 665
randoop.util.Randomness: total calls to random: 666
Successfully created new unique sequence:var0 =  cons : C.<init>() : 
var1 =  method : C.test() : var0 
var2 =  method : C.test() : var0 
var3 =  method : B.m() : var0 
var4 =  method : C.test() : var0 
var5 =  method : C.test() : var0 
var6 =  method : B.m() : var0 
var7 =  method : C.test() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Adding sequence to active sequences of type class C
Sequence after execution: 
C var0 = new C();
// <NormalExecution object=object-of-type-C>;
int var1 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var2 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var3 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var4 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var5 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var6 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var7 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
<randoop.PrimValue, value=23 [var1]  : true
<randoop.PrimValue, value=23 [var2]  : true
<randoop.PrimValue, value=23 [var3]  : true
<randoop.PrimValue, value=23 [var4]  : true
<randoop.PrimValue, value=23 [var5]  : true
<randoop.PrimValue, value=23 [var6]  : true
<randoop.PrimValue, value=23 [var7]  : true

allSequences.size()=127
-------------------------------------------
randoop.util.Randomness: total calls to random: 667
Selected statement: B.m()
Will query component set for objects of typeclass B
getActivesequencesThatYield: entering method, clazz=class B
getActivesequencesThatYield: returning 114 sequences.
components: 114
randoop.util.Randomness: total calls to random: 668
randoop.util.Randomness: total calls to random: 669
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 670
Selected statement: C.test()
Will query component set for objects of typeclass C
getActivesequencesThatYield: entering method, clazz=class C
getActivesequencesThatYield: returning 114 sequences.
components: 114
randoop.util.Randomness: total calls to random: 671
randoop.util.Randomness: total calls to random: 672
Successfully created new unique sequence:var0 =  cons : C.<init>() : 
var1 =  method : B.m() : var0 
var2 =  method : B.k() : var0 
var3 =  method : C.test() : var0 
var4 =  method : C.test() : var0 
var5 =  method : C.test() : var0 
var6 =  method : C.test() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Adding sequence to active sequences of type class C
Sequence after execution: 
C var0 = new C();
// <NormalExecution object=object-of-type-C>;
int var1 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var2 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var3 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var4 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var5 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var6 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
<randoop.PrimValue, value=23 [var1]  : true
<randoop.PrimValue, value=42 [var2]  : true
<randoop.PrimValue, value=23 [var3]  : true
<randoop.PrimValue, value=23 [var4]  : true
<randoop.PrimValue, value=23 [var5]  : true
<randoop.PrimValue, value=23 [var6]  : true

allSequences.size()=128
-------------------------------------------
randoop.util.Randomness: total calls to random: 673
Selected statement: A.k()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 10 sequences.
components: 10
randoop.util.Randomness: total calls to random: 674
randoop.util.Randomness: total calls to random: 675
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.k() : var0 
var2 =  method : A.k() : var0 
var3 =  method : A.k() : var0 
var4 =  method : A.k() : var0 
var5 =  method : A.k() : var0 
var6 =  method : A.k() : var0 
var7 =  method : A.k() : var0 
var8 =  method : A.k() : var0 
var9 =  method : A.k() : var0 
var10 =  method : A.k() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
int var1 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var2 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var3 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var4 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var5 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var6 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var7 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var8 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var9 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var10 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
<randoop.PrimValue, value=23 [var1]  : true
<randoop.PrimValue, value=23 [var2]  : true
<randoop.PrimValue, value=23 [var3]  : true
<randoop.PrimValue, value=23 [var4]  : true
<randoop.PrimValue, value=23 [var5]  : true
<randoop.PrimValue, value=23 [var6]  : true
<randoop.PrimValue, value=23 [var7]  : true
<randoop.PrimValue, value=23 [var8]  : true
<randoop.PrimValue, value=23 [var9]  : true
<randoop.PrimValue, value=23 [var10]  : true

allSequences.size()=129
-------------------------------------------
randoop.util.Randomness: total calls to random: 676
Selected statement: B.k()
Will query component set for objects of typeclass B
getActivesequencesThatYield: entering method, clazz=class B
getActivesequencesThatYield: returning 117 sequences.
components: 117
randoop.util.Randomness: total calls to random: 677
randoop.util.Randomness: total calls to random: 678
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 679
Selected statement: B.m()
Will query component set for objects of typeclass B
getActivesequencesThatYield: entering method, clazz=class B
getActivesequencesThatYield: returning 115 sequences.
components: 115
randoop.util.Randomness: total calls to random: 680
randoop.util.Randomness: total calls to random: 681
Successfully created new unique sequence:var0 =  cons : C.<init>() : 
var1 =  method : B.m() : var0 
var2 =  method : B.k() : var0 
var3 =  method : B.m() : var0 
var4 =  method : C.test() : var0 
var5 =  method : C.test() : var0 
var6 =  method : B.m() : var0 
var7 =  method : B.m() : var0 
var8 =  method : B.m() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Adding sequence to active sequences of type class C
Sequence after execution: 
C var0 = new C();
// <NormalExecution object=object-of-type-C>;
int var1 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var2 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var3 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var4 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var5 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var6 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var7 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var8 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
<randoop.PrimValue, value=23 [var1]  : true
<randoop.PrimValue, value=42 [var2]  : true
<randoop.PrimValue, value=23 [var3]  : true
<randoop.PrimValue, value=23 [var4]  : true
<randoop.PrimValue, value=23 [var5]  : true
<randoop.PrimValue, value=23 [var6]  : true
<randoop.PrimValue, value=23 [var7]  : true
<randoop.PrimValue, value=23 [var8]  : true

allSequences.size()=130
-------------------------------------------
randoop.util.Randomness: total calls to random: 682
Selected statement: A.k()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 11 sequences.
components: 11
randoop.util.Randomness: total calls to random: 683
randoop.util.Randomness: total calls to random: 684
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 685
Selected statement: C.test()
Will query component set for objects of typeclass C
getActivesequencesThatYield: entering method, clazz=class C
getActivesequencesThatYield: returning 116 sequences.
components: 116
randoop.util.Randomness: total calls to random: 686
randoop.util.Randomness: total calls to random: 687
Successfully created new unique sequence:var0 =  cons : C.<init>() : 
var1 =  method : B.m() : var0 
var2 =  method : B.k() : var0 
var3 =  method : B.m() : var0 
var4 =  method : C.test() : var0 
var5 =  method : B.m() : var0 
var6 =  method : B.m() : var0 
var7 =  method : C.test() : var0 
var8 =  method : C.test() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Adding sequence to active sequences of type class C
Sequence after execution: 
C var0 = new C();
// <NormalExecution object=object-of-type-C>;
int var1 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var2 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var3 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var4 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var5 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var6 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var7 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var8 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
<randoop.PrimValue, value=23 [var1]  : true
<randoop.PrimValue, value=42 [var2]  : true
<randoop.PrimValue, value=23 [var3]  : true
<randoop.PrimValue, value=23 [var4]  : true
<randoop.PrimValue, value=23 [var5]  : true
<randoop.PrimValue, value=23 [var6]  : true
<randoop.PrimValue, value=23 [var7]  : true
<randoop.PrimValue, value=23 [var8]  : true

allSequences.size()=131
-------------------------------------------
randoop.util.Randomness: total calls to random: 688
Selected statement: B.k()
Will query component set for objects of typeclass B
getActivesequencesThatYield: entering method, clazz=class B
getActivesequencesThatYield: returning 119 sequences.
components: 119
randoop.util.Randomness: total calls to random: 689
randoop.util.Randomness: total calls to random: 690
Successfully created new unique sequence:var0 =  cons : C.<init>() : 
var1 =  method : B.m() : var0 
var2 =  method : B.k() : var0 
var3 =  method : B.m() : var0 
var4 =  method : C.test() : var0 
var5 =  method : B.m() : var0 
var6 =  method : B.m() : var0 
var7 =  method : C.test() : var0 
var8 =  method : B.k() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Adding sequence to active sequences of type class C
Sequence after execution: 
C var0 = new C();
// <NormalExecution object=object-of-type-C>;
int var1 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var2 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var3 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var4 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var5 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var6 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var7 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var8 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
<randoop.PrimValue, value=23 [var1]  : true
<randoop.PrimValue, value=42 [var2]  : true
<randoop.PrimValue, value=23 [var3]  : true
<randoop.PrimValue, value=23 [var4]  : true
<randoop.PrimValue, value=23 [var5]  : true
<randoop.PrimValue, value=23 [var6]  : true
<randoop.PrimValue, value=23 [var7]  : true
<randoop.PrimValue, value=42 [var8]  : true

allSequences.size()=132
-------------------------------------------
randoop.util.Randomness: total calls to random: 691
Selected statement: B.m()
Will query component set for objects of typeclass B
getActivesequencesThatYield: entering method, clazz=class B
getActivesequencesThatYield: returning 118 sequences.
components: 118
randoop.util.Randomness: total calls to random: 692
randoop.util.Randomness: total calls to random: 693
Successfully created new unique sequence:var0 =  cons : C.<init>() : 
var1 =  method : C.test() : var0 
var2 =  method : C.test() : var0 
var3 =  method : B.m() : var0 
var4 =  method : C.test() : var0 
var5 =  method : B.k() : var0 
var6 =  method : B.m() : var0 
var7 =  method : C.test() : var0 
var8 =  method : B.k() : var0 
var9 =  method : C.test() : var0 
var10 =  method : B.k() : var0 
var11 =  method : B.m() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Adding sequence to active sequences of type class C
Sequence after execution: 
C var0 = new C();
// <NormalExecution object=object-of-type-C>;
int var1 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var2 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var3 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var4 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var5 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var6 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var7 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var8 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var9 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var10 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var11 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
<randoop.PrimValue, value=23 [var1]  : true
<randoop.PrimValue, value=23 [var2]  : true
<randoop.PrimValue, value=23 [var3]  : true
<randoop.PrimValue, value=23 [var4]  : true
<randoop.PrimValue, value=42 [var5]  : true
<randoop.PrimValue, value=23 [var6]  : true
<randoop.PrimValue, value=23 [var7]  : true
<randoop.PrimValue, value=42 [var8]  : true
<randoop.PrimValue, value=23 [var9]  : true
<randoop.PrimValue, value=42 [var10]  : true
<randoop.PrimValue, value=23 [var11]  : true

allSequences.size()=133
-------------------------------------------
randoop.util.Randomness: total calls to random: 694
Selected statement: B.m()
Will query component set for objects of typeclass B
getActivesequencesThatYield: entering method, clazz=class B
getActivesequencesThatYield: returning 119 sequences.
components: 119
randoop.util.Randomness: total calls to random: 695
randoop.util.Randomness: total calls to random: 696
Successfully created new unique sequence:var0 =  cons : C.<init>() : 
var1 =  method : B.m() : var0 
var2 =  method : B.k() : var0 
var3 =  method : C.test() : var0 
var4 =  method : B.k() : var0 
var5 =  method : B.m() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Adding sequence to active sequences of type class C
Sequence after execution: 
C var0 = new C();
// <NormalExecution object=object-of-type-C>;
int var1 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var2 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var3 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var4 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var5 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
<randoop.PrimValue, value=23 [var1]  : true
<randoop.PrimValue, value=42 [var2]  : true
<randoop.PrimValue, value=23 [var3]  : true
<randoop.PrimValue, value=42 [var4]  : true
<randoop.PrimValue, value=23 [var5]  : true

allSequences.size()=134
-------------------------------------------
randoop.util.Randomness: total calls to random: 697
Selected statement: B.k()
Will query component set for objects of typeclass B
getActivesequencesThatYield: entering method, clazz=class B
getActivesequencesThatYield: returning 122 sequences.
components: 122
randoop.util.Randomness: total calls to random: 698
randoop.util.Randomness: total calls to random: 699
Successfully created new unique sequence:var0 =  cons : C.<init>() : 
var1 =  method : B.m() : var0 
var2 =  method : B.k() : var0 
var3 =  method : B.m() : var0 
var4 =  method : B.k() : var0 
var5 =  method : C.test() : var0 
var6 =  method : B.m() : var0 
var7 =  method : C.test() : var0 
var8 =  method : B.k() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Adding sequence to active sequences of type class C
Sequence after execution: 
C var0 = new C();
// <NormalExecution object=object-of-type-C>;
int var1 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var2 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var3 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var4 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var5 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var6 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var7 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var8 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
<randoop.PrimValue, value=23 [var1]  : true
<randoop.PrimValue, value=42 [var2]  : true
<randoop.PrimValue, value=23 [var3]  : true
<randoop.PrimValue, value=42 [var4]  : true
<randoop.PrimValue, value=23 [var5]  : true
<randoop.PrimValue, value=23 [var6]  : true
<randoop.PrimValue, value=23 [var7]  : true
<randoop.PrimValue, value=42 [var8]  : true

allSequences.size()=135
-------------------------------------------
randoop.util.Randomness: total calls to random: 700
Selected statement: B.m()
Will query component set for objects of typeclass B
getActivesequencesThatYield: entering method, clazz=class B
getActivesequencesThatYield: returning 121 sequences.
components: 121
randoop.util.Randomness: total calls to random: 701
randoop.util.Randomness: total calls to random: 702
Successfully created new unique sequence:var0 =  cons : C.<init>() : 
var1 =  method : B.m() : var0 
var2 =  method : B.k() : var0 
var3 =  method : B.m() : var0 
var4 =  method : B.k() : var0 
var5 =  method : C.test() : var0 
var6 =  method : B.m() : var0 
var7 =  method : C.test() : var0 
var8 =  method : B.k() : var0 
var9 =  method : B.m() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Adding sequence to active sequences of type class C
Sequence after execution: 
C var0 = new C();
// <NormalExecution object=object-of-type-C>;
int var1 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var2 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var3 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var4 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var5 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var6 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var7 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var8 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var9 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
<randoop.PrimValue, value=23 [var1]  : true
<randoop.PrimValue, value=42 [var2]  : true
<randoop.PrimValue, value=23 [var3]  : true
<randoop.PrimValue, value=42 [var4]  : true
<randoop.PrimValue, value=23 [var5]  : true
<randoop.PrimValue, value=23 [var6]  : true
<randoop.PrimValue, value=23 [var7]  : true
<randoop.PrimValue, value=42 [var8]  : true
<randoop.PrimValue, value=23 [var9]  : true

allSequences.size()=136
-------------------------------------------
randoop.util.Randomness: total calls to random: 703
Selected statement: A.k()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 11 sequences.
components: 11
randoop.util.Randomness: total calls to random: 704
randoop.util.Randomness: total calls to random: 705
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 706
Selected statement: B.k()
Will query component set for objects of typeclass B
getActivesequencesThatYield: entering method, clazz=class B
getActivesequencesThatYield: returning 124 sequences.
components: 124
randoop.util.Randomness: total calls to random: 707
randoop.util.Randomness: total calls to random: 708
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 709
Selected statement: B.k()
Will query component set for objects of typeclass B
getActivesequencesThatYield: entering method, clazz=class B
getActivesequencesThatYield: returning 124 sequences.
components: 124
randoop.util.Randomness: total calls to random: 710
randoop.util.Randomness: total calls to random: 711
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 712
Selected statement: C.test()
Will query component set for objects of typeclass C
getActivesequencesThatYield: entering method, clazz=class C
getActivesequencesThatYield: returning 122 sequences.
components: 122
randoop.util.Randomness: total calls to random: 713
randoop.util.Randomness: total calls to random: 714
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 715
Selected statement: C.test()
Will query component set for objects of typeclass C
getActivesequencesThatYield: entering method, clazz=class C
getActivesequencesThatYield: returning 122 sequences.
components: 122
randoop.util.Randomness: total calls to random: 716
randoop.util.Randomness: total calls to random: 717
Successfully created new unique sequence:var0 =  cons : C.<init>() : 
var1 =  method : B.m() : var0 
var2 =  method : B.k() : var0 
var3 =  method : B.m() : var0 
var4 =  method : C.test() : var0 
var5 =  method : C.test() : var0 
var6 =  method : B.k() : var0 
var7 =  method : C.test() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Adding sequence to active sequences of type class C
Sequence after execution: 
C var0 = new C();
// <NormalExecution object=object-of-type-C>;
int var1 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var2 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var3 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var4 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var5 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var6 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var7 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
<randoop.PrimValue, value=23 [var1]  : true
<randoop.PrimValue, value=42 [var2]  : true
<randoop.PrimValue, value=23 [var3]  : true
<randoop.PrimValue, value=23 [var4]  : true
<randoop.PrimValue, value=23 [var5]  : true
<randoop.PrimValue, value=42 [var6]  : true
<randoop.PrimValue, value=23 [var7]  : true

allSequences.size()=137
-------------------------------------------
randoop.util.Randomness: total calls to random: 718
Selected statement: B.k()
Will query component set for objects of typeclass B
getActivesequencesThatYield: entering method, clazz=class B
getActivesequencesThatYield: returning 125 sequences.
components: 125
randoop.util.Randomness: total calls to random: 719
randoop.util.Randomness: total calls to random: 720
Successfully created new unique sequence:var0 =  cons : C.<init>() : 
var1 =  method : B.m() : var0 
var2 =  method : B.k() : var0 
var3 =  method : B.m() : var0 
var4 =  method : B.k() : var0 
var5 =  method : B.k() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Adding sequence to active sequences of type class C
Sequence after execution: 
C var0 = new C();
// <NormalExecution object=object-of-type-C>;
int var1 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var2 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var3 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var4 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var5 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
<randoop.PrimValue, value=23 [var1]  : true
<randoop.PrimValue, value=42 [var2]  : true
<randoop.PrimValue, value=23 [var3]  : true
<randoop.PrimValue, value=42 [var4]  : true
<randoop.PrimValue, value=42 [var5]  : true

allSequences.size()=138
-------------------------------------------
randoop.util.Randomness: total calls to random: 721
Selected statement: B.k()
Will query component set for objects of typeclass B
getActivesequencesThatYield: entering method, clazz=class B
getActivesequencesThatYield: returning 126 sequences.
components: 126
randoop.util.Randomness: total calls to random: 722
randoop.util.Randomness: total calls to random: 723
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 724
Selected statement: C.test()
Will query component set for objects of typeclass C
getActivesequencesThatYield: entering method, clazz=class C
getActivesequencesThatYield: returning 124 sequences.
components: 124
randoop.util.Randomness: total calls to random: 725
randoop.util.Randomness: total calls to random: 726
Successfully created new unique sequence:var0 =  cons : C.<init>() : 
var1 =  method : B.m() : var0 
var2 =  method : B.k() : var0 
var3 =  method : B.m() : var0 
var4 =  method : C.test() : var0 
var5 =  method : C.test() : var0 
var6 =  method : B.m() : var0 
var7 =  method : B.m() : var0 
var8 =  method : B.m() : var0 
var9 =  method : C.test() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Adding sequence to active sequences of type class C
Sequence after execution: 
C var0 = new C();
// <NormalExecution object=object-of-type-C>;
int var1 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var2 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var3 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var4 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var5 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var6 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var7 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var8 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var9 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
<randoop.PrimValue, value=23 [var1]  : true
<randoop.PrimValue, value=42 [var2]  : true
<randoop.PrimValue, value=23 [var3]  : true
<randoop.PrimValue, value=23 [var4]  : true
<randoop.PrimValue, value=23 [var5]  : true
<randoop.PrimValue, value=23 [var6]  : true
<randoop.PrimValue, value=23 [var7]  : true
<randoop.PrimValue, value=23 [var8]  : true
<randoop.PrimValue, value=23 [var9]  : true

allSequences.size()=139
-------------------------------------------
randoop.util.Randomness: total calls to random: 727
Selected statement: C.test()
Will query component set for objects of typeclass C
getActivesequencesThatYield: entering method, clazz=class C
getActivesequencesThatYield: returning 125 sequences.
components: 125
randoop.util.Randomness: total calls to random: 728
randoop.util.Randomness: total calls to random: 729
Successfully created new unique sequence:var0 =  cons : C.<init>() : 
var1 =  method : C.test() : var0 
var2 =  method : C.test() : var0 
var3 =  method : C.test() : var0 
var4 =  method : C.test() : var0 
var5 =  method : B.k() : var0 
var6 =  method : B.k() : var0 
var7 =  method : C.test() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Adding sequence to active sequences of type class C
Sequence after execution: 
C var0 = new C();
// <NormalExecution object=object-of-type-C>;
int var1 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var2 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var3 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var4 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var5 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var6 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var7 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
<randoop.PrimValue, value=23 [var1]  : true
<randoop.PrimValue, value=23 [var2]  : true
<randoop.PrimValue, value=23 [var3]  : true
<randoop.PrimValue, value=23 [var4]  : true
<randoop.PrimValue, value=42 [var5]  : true
<randoop.PrimValue, value=42 [var6]  : true
<randoop.PrimValue, value=23 [var7]  : true

allSequences.size()=140
-------------------------------------------
randoop.util.Randomness: total calls to random: 730
Selected statement: A.k()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 11 sequences.
components: 11
randoop.util.Randomness: total calls to random: 731
randoop.util.Randomness: total calls to random: 732
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 733
Selected statement: A.k()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 11 sequences.
components: 11
randoop.util.Randomness: total calls to random: 734
randoop.util.Randomness: total calls to random: 735
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 736
Selected statement: A.k()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 11 sequences.
components: 11
randoop.util.Randomness: total calls to random: 737
randoop.util.Randomness: total calls to random: 738
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 739
Selected statement: C.test()
Will query component set for objects of typeclass C
getActivesequencesThatYield: entering method, clazz=class C
getActivesequencesThatYield: returning 126 sequences.
components: 126
randoop.util.Randomness: total calls to random: 740
randoop.util.Randomness: total calls to random: 741
Successfully created new unique sequence:var0 =  cons : C.<init>() : 
var1 =  method : B.m() : var0 
var2 =  method : B.k() : var0 
var3 =  method : B.m() : var0 
var4 =  method : B.m() : var0 
var5 =  method : B.m() : var0 
var6 =  method : B.k() : var0 
var7 =  method : C.test() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Adding sequence to active sequences of type class C
Sequence after execution: 
C var0 = new C();
// <NormalExecution object=object-of-type-C>;
int var1 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var2 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var3 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var4 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var5 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var6 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var7 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
<randoop.PrimValue, value=23 [var1]  : true
<randoop.PrimValue, value=42 [var2]  : true
<randoop.PrimValue, value=23 [var3]  : true
<randoop.PrimValue, value=23 [var4]  : true
<randoop.PrimValue, value=23 [var5]  : true
<randoop.PrimValue, value=42 [var6]  : true
<randoop.PrimValue, value=23 [var7]  : true

allSequences.size()=141
-------------------------------------------
randoop.util.Randomness: total calls to random: 742
Selected statement: C.test()
Will query component set for objects of typeclass C
getActivesequencesThatYield: entering method, clazz=class C
getActivesequencesThatYield: returning 127 sequences.
components: 127
randoop.util.Randomness: total calls to random: 743
randoop.util.Randomness: total calls to random: 744
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 745
Selected statement: B.m()
Will query component set for objects of typeclass B
getActivesequencesThatYield: entering method, clazz=class B
getActivesequencesThatYield: returning 127 sequences.
components: 127
randoop.util.Randomness: total calls to random: 746
randoop.util.Randomness: total calls to random: 747
Successfully created new unique sequence:var0 =  cons : C.<init>() : 
var1 =  method : C.test() : var0 
var2 =  method : C.test() : var0 
var3 =  method : B.m() : var0 
var4 =  method : C.test() : var0 
var5 =  method : B.k() : var0 
var6 =  method : B.m() : var0 
var7 =  method : C.test() : var0 
var8 =  method : C.test() : var0 
var9 =  method : B.m() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Adding sequence to active sequences of type class C
Sequence after execution: 
C var0 = new C();
// <NormalExecution object=object-of-type-C>;
int var1 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var2 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var3 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var4 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var5 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var6 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var7 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var8 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var9 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
<randoop.PrimValue, value=23 [var1]  : true
<randoop.PrimValue, value=23 [var2]  : true
<randoop.PrimValue, value=23 [var3]  : true
<randoop.PrimValue, value=23 [var4]  : true
<randoop.PrimValue, value=42 [var5]  : true
<randoop.PrimValue, value=23 [var6]  : true
<randoop.PrimValue, value=23 [var7]  : true
<randoop.PrimValue, value=23 [var8]  : true
<randoop.PrimValue, value=23 [var9]  : true

allSequences.size()=142
-------------------------------------------
randoop.util.Randomness: total calls to random: 748
Selected statement: A.k()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 11 sequences.
components: 11
randoop.util.Randomness: total calls to random: 749
randoop.util.Randomness: total calls to random: 750
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 751
Selected statement: A.k()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 11 sequences.
components: 11
randoop.util.Randomness: total calls to random: 752
randoop.util.Randomness: total calls to random: 753
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 754
Selected statement: B.k()
Will query component set for objects of typeclass B
getActivesequencesThatYield: entering method, clazz=class B
getActivesequencesThatYield: returning 130 sequences.
components: 130
randoop.util.Randomness: total calls to random: 755
randoop.util.Randomness: total calls to random: 756
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 757
Selected statement: B.m()
Will query component set for objects of typeclass B
getActivesequencesThatYield: entering method, clazz=class B
getActivesequencesThatYield: returning 128 sequences.
components: 128
randoop.util.Randomness: total calls to random: 758
randoop.util.Randomness: total calls to random: 759
Successfully created new unique sequence:var0 =  cons : C.<init>() : 
var1 =  method : C.test() : var0 
var2 =  method : C.test() : var0 
var3 =  method : C.test() : var0 
var4 =  method : B.m() : var0 
var5 =  method : C.test() : var0 
var6 =  method : C.test() : var0 
var7 =  method : B.k() : var0 
var8 =  method : B.k() : var0 
var9 =  method : B.m() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Adding sequence to active sequences of type class C
Sequence after execution: 
C var0 = new C();
// <NormalExecution object=object-of-type-C>;
int var1 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var2 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var3 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var4 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var5 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var6 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var7 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var8 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var9 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
<randoop.PrimValue, value=23 [var1]  : true
<randoop.PrimValue, value=23 [var2]  : true
<randoop.PrimValue, value=23 [var3]  : true
<randoop.PrimValue, value=23 [var4]  : true
<randoop.PrimValue, value=23 [var5]  : true
<randoop.PrimValue, value=23 [var6]  : true
<randoop.PrimValue, value=42 [var7]  : true
<randoop.PrimValue, value=42 [var8]  : true
<randoop.PrimValue, value=23 [var9]  : true

allSequences.size()=143
-------------------------------------------
randoop.util.Randomness: total calls to random: 760
Selected statement: C.test()
Will query component set for objects of typeclass C
getActivesequencesThatYield: entering method, clazz=class C
getActivesequencesThatYield: returning 129 sequences.
components: 129
randoop.util.Randomness: total calls to random: 761
randoop.util.Randomness: total calls to random: 762
Successfully created new unique sequence:var0 =  cons : C.<init>() : 
var1 =  method : B.m() : var0 
var2 =  method : B.k() : var0 
var3 =  method : B.m() : var0 
var4 =  method : B.m() : var0 
var5 =  method : B.m() : var0 
var6 =  method : B.k() : var0 
var7 =  method : C.test() : var0 
var8 =  method : C.test() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Adding sequence to active sequences of type class C
Sequence after execution: 
C var0 = new C();
// <NormalExecution object=object-of-type-C>;
int var1 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var2 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var3 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var4 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var5 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var6 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var7 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var8 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
<randoop.PrimValue, value=23 [var1]  : true
<randoop.PrimValue, value=42 [var2]  : true
<randoop.PrimValue, value=23 [var3]  : true
<randoop.PrimValue, value=23 [var4]  : true
<randoop.PrimValue, value=23 [var5]  : true
<randoop.PrimValue, value=42 [var6]  : true
<randoop.PrimValue, value=23 [var7]  : true
<randoop.PrimValue, value=23 [var8]  : true

allSequences.size()=144
-------------------------------------------
randoop.util.Randomness: total calls to random: 763
Selected statement: B.m()
Will query component set for objects of typeclass B
getActivesequencesThatYield: entering method, clazz=class B
getActivesequencesThatYield: returning 130 sequences.
components: 130
randoop.util.Randomness: total calls to random: 764
randoop.util.Randomness: total calls to random: 765
Successfully created new unique sequence:var0 =  cons : C.<init>() : 
var1 =  method : B.m() : var0 
var2 =  method : B.k() : var0 
var3 =  method : B.k() : var0 
var4 =  method : B.m() : var0 
var5 =  method : B.m() : var0 
var6 =  method : C.test() : var0 
var7 =  method : B.m() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Adding sequence to active sequences of type class C
Sequence after execution: 
C var0 = new C();
// <NormalExecution object=object-of-type-C>;
int var1 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var2 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var3 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var4 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var5 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var6 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var7 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
<randoop.PrimValue, value=23 [var1]  : true
<randoop.PrimValue, value=42 [var2]  : true
<randoop.PrimValue, value=42 [var3]  : true
<randoop.PrimValue, value=23 [var4]  : true
<randoop.PrimValue, value=23 [var5]  : true
<randoop.PrimValue, value=23 [var6]  : true
<randoop.PrimValue, value=23 [var7]  : true

allSequences.size()=145
-------------------------------------------
randoop.util.Randomness: total calls to random: 766
Selected statement: C.test()
Will query component set for objects of typeclass C
getActivesequencesThatYield: entering method, clazz=class C
getActivesequencesThatYield: returning 131 sequences.
components: 131
randoop.util.Randomness: total calls to random: 767
randoop.util.Randomness: total calls to random: 768
Successfully created new unique sequence:var0 =  cons : C.<init>() : 
var1 =  method : B.m() : var0 
var2 =  method : B.k() : var0 
var3 =  method : B.k() : var0 
var4 =  method : C.test() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Adding sequence to active sequences of type class C
Sequence after execution: 
C var0 = new C();
// <NormalExecution object=object-of-type-C>;
int var1 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var2 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var3 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var4 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
<randoop.PrimValue, value=23 [var1]  : true
<randoop.PrimValue, value=42 [var2]  : true
<randoop.PrimValue, value=42 [var3]  : true
<randoop.PrimValue, value=23 [var4]  : true

allSequences.size()=146
-------------------------------------------
randoop.util.Randomness: total calls to random: 769
Selected statement: C.test()
Will query component set for objects of typeclass C
getActivesequencesThatYield: entering method, clazz=class C
getActivesequencesThatYield: returning 132 sequences.
components: 132
randoop.util.Randomness: total calls to random: 770
randoop.util.Randomness: total calls to random: 771
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 772
Selected statement: A.k()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 11 sequences.
components: 11
randoop.util.Randomness: total calls to random: 773
randoop.util.Randomness: total calls to random: 774
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 775
Selected statement: A.k()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 11 sequences.
components: 11
randoop.util.Randomness: total calls to random: 776
randoop.util.Randomness: total calls to random: 777
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 778
Selected statement: B.m()
Will query component set for objects of typeclass B
getActivesequencesThatYield: entering method, clazz=class B
getActivesequencesThatYield: returning 132 sequences.
components: 132
randoop.util.Randomness: total calls to random: 779
randoop.util.Randomness: total calls to random: 780
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 781
Selected statement: C.test()
Will query component set for objects of typeclass C
getActivesequencesThatYield: entering method, clazz=class C
getActivesequencesThatYield: returning 132 sequences.
components: 132
randoop.util.Randomness: total calls to random: 782
randoop.util.Randomness: total calls to random: 783
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 784
Selected statement: C.test()
Will query component set for objects of typeclass C
getActivesequencesThatYield: entering method, clazz=class C
getActivesequencesThatYield: returning 132 sequences.
components: 132
randoop.util.Randomness: total calls to random: 785
randoop.util.Randomness: total calls to random: 786
Successfully created new unique sequence:var0 =  cons : C.<init>() : 
var1 =  method : B.m() : var0 
var2 =  method : B.k() : var0 
var3 =  method : B.k() : var0 
var4 =  method : B.m() : var0 
var5 =  method : C.test() : var0 
var6 =  method : C.test() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Adding sequence to active sequences of type class C
Sequence after execution: 
C var0 = new C();
// <NormalExecution object=object-of-type-C>;
int var1 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var2 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var3 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var4 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var5 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var6 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
<randoop.PrimValue, value=23 [var1]  : true
<randoop.PrimValue, value=42 [var2]  : true
<randoop.PrimValue, value=42 [var3]  : true
<randoop.PrimValue, value=23 [var4]  : true
<randoop.PrimValue, value=23 [var5]  : true
<randoop.PrimValue, value=23 [var6]  : true

allSequences.size()=147
-------------------------------------------
randoop.util.Randomness: total calls to random: 787
Selected statement: C.test()
Will query component set for objects of typeclass C
getActivesequencesThatYield: entering method, clazz=class C
getActivesequencesThatYield: returning 133 sequences.
components: 133
randoop.util.Randomness: total calls to random: 788
randoop.util.Randomness: total calls to random: 789
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 790
Selected statement: B.k()
Will query component set for objects of typeclass B
getActivesequencesThatYield: entering method, clazz=class B
getActivesequencesThatYield: returning 135 sequences.
components: 135
randoop.util.Randomness: total calls to random: 791
randoop.util.Randomness: total calls to random: 792
Successfully created new unique sequence:var0 =  cons : C.<init>() : 
var1 =  method : B.m() : var0 
var2 =  method : B.k() : var0 
var3 =  method : B.m() : var0 
var4 =  method : C.test() : var0 
var5 =  method : B.k() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Adding sequence to active sequences of type class C
Sequence after execution: 
C var0 = new C();
// <NormalExecution object=object-of-type-C>;
int var1 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var2 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var3 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var4 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var5 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
<randoop.PrimValue, value=23 [var1]  : true
<randoop.PrimValue, value=42 [var2]  : true
<randoop.PrimValue, value=23 [var3]  : true
<randoop.PrimValue, value=23 [var4]  : true
<randoop.PrimValue, value=42 [var5]  : true

allSequences.size()=148
-------------------------------------------
randoop.util.Randomness: total calls to random: 793
Selected statement: B.k()
Will query component set for objects of typeclass B
getActivesequencesThatYield: entering method, clazz=class B
getActivesequencesThatYield: returning 136 sequences.
components: 136
randoop.util.Randomness: total calls to random: 794
randoop.util.Randomness: total calls to random: 795
Successfully created new unique sequence:var0 =  cons : C.<init>() : 
var1 =  method : C.test() : var0 
var2 =  method : C.test() : var0 
var3 =  method : B.m() : var0 
var4 =  method : C.test() : var0 
var5 =  method : C.test() : var0 
var6 =  method : C.test() : var0 
var7 =  method : B.k() : var0 
var8 =  method : C.test() : var0 
var9 =  method : B.k() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Adding sequence to active sequences of type class C
Sequence after execution: 
C var0 = new C();
// <NormalExecution object=object-of-type-C>;
int var1 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var2 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var3 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var4 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var5 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var6 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var7 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var8 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var9 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
<randoop.PrimValue, value=23 [var1]  : true
<randoop.PrimValue, value=23 [var2]  : true
<randoop.PrimValue, value=23 [var3]  : true
<randoop.PrimValue, value=23 [var4]  : true
<randoop.PrimValue, value=23 [var5]  : true
<randoop.PrimValue, value=23 [var6]  : true
<randoop.PrimValue, value=42 [var7]  : true
<randoop.PrimValue, value=23 [var8]  : true
<randoop.PrimValue, value=42 [var9]  : true

allSequences.size()=149
-------------------------------------------
randoop.util.Randomness: total calls to random: 796
Selected statement: B.m()
Will query component set for objects of typeclass B
getActivesequencesThatYield: entering method, clazz=class B
getActivesequencesThatYield: returning 135 sequences.
components: 135
randoop.util.Randomness: total calls to random: 797
randoop.util.Randomness: total calls to random: 798
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 799
Selected statement: B.m()
Will query component set for objects of typeclass B
getActivesequencesThatYield: entering method, clazz=class B
getActivesequencesThatYield: returning 135 sequences.
components: 135
randoop.util.Randomness: total calls to random: 800
randoop.util.Randomness: total calls to random: 801
Successfully created new unique sequence:var0 =  cons : C.<init>() : 
var1 =  method : C.test() : var0 
var2 =  method : C.test() : var0 
var3 =  method : B.m() : var0 
var4 =  method : B.m() : var0 
var5 =  method : B.m() : var0 
var6 =  method : B.m() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Adding sequence to active sequences of type class C
Sequence after execution: 
C var0 = new C();
// <NormalExecution object=object-of-type-C>;
int var1 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var2 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var3 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var4 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var5 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var6 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
<randoop.PrimValue, value=23 [var1]  : true
<randoop.PrimValue, value=23 [var2]  : true
<randoop.PrimValue, value=23 [var3]  : true
<randoop.PrimValue, value=23 [var4]  : true
<randoop.PrimValue, value=23 [var5]  : true
<randoop.PrimValue, value=23 [var6]  : true

allSequences.size()=150
-------------------------------------------
randoop.util.Randomness: total calls to random: 802
Selected statement: C.test()
Will query component set for objects of typeclass C
getActivesequencesThatYield: entering method, clazz=class C
getActivesequencesThatYield: returning 136 sequences.
components: 136
randoop.util.Randomness: total calls to random: 803
randoop.util.Randomness: total calls to random: 804
Successfully created new unique sequence:var0 =  cons : C.<init>() : 
var1 =  method : C.test() : var0 
var2 =  method : C.test() : var0 
var3 =  method : B.m() : var0 
var4 =  method : B.m() : var0 
var5 =  method : B.m() : var0 
var6 =  method : C.test() : var0 
var7 =  method : C.test() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Adding sequence to active sequences of type class C
Sequence after execution: 
C var0 = new C();
// <NormalExecution object=object-of-type-C>;
int var1 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var2 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var3 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var4 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var5 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var6 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var7 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
<randoop.PrimValue, value=23 [var1]  : true
<randoop.PrimValue, value=23 [var2]  : true
<randoop.PrimValue, value=23 [var3]  : true
<randoop.PrimValue, value=23 [var4]  : true
<randoop.PrimValue, value=23 [var5]  : true
<randoop.PrimValue, value=23 [var6]  : true
<randoop.PrimValue, value=23 [var7]  : true

allSequences.size()=151
-------------------------------------------
randoop.util.Randomness: total calls to random: 805
Selected statement: C.test()
Will query component set for objects of typeclass C
getActivesequencesThatYield: entering method, clazz=class C
getActivesequencesThatYield: returning 137 sequences.
components: 137
randoop.util.Randomness: total calls to random: 806
randoop.util.Randomness: total calls to random: 807
Successfully created new unique sequence:var0 =  cons : C.<init>() : 
var1 =  method : B.m() : var0 
var2 =  method : B.k() : var0 
var3 =  method : B.m() : var0 
var4 =  method : B.k() : var0 
var5 =  method : B.k() : var0 
var6 =  method : C.test() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Adding sequence to active sequences of type class C
Sequence after execution: 
C var0 = new C();
// <NormalExecution object=object-of-type-C>;
int var1 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var2 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var3 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var4 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var5 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var6 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
<randoop.PrimValue, value=23 [var1]  : true
<randoop.PrimValue, value=42 [var2]  : true
<randoop.PrimValue, value=23 [var3]  : true
<randoop.PrimValue, value=42 [var4]  : true
<randoop.PrimValue, value=42 [var5]  : true
<randoop.PrimValue, value=23 [var6]  : true

allSequences.size()=152
-------------------------------------------
randoop.util.Randomness: total calls to random: 808
Selected statement: A.k()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 11 sequences.
components: 11
randoop.util.Randomness: total calls to random: 809
randoop.util.Randomness: total calls to random: 810
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 811
Selected statement: A.k()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 11 sequences.
components: 11
randoop.util.Randomness: total calls to random: 812
randoop.util.Randomness: total calls to random: 813
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 814
Selected statement: B.k()
Will query component set for objects of typeclass B
getActivesequencesThatYield: entering method, clazz=class B
getActivesequencesThatYield: returning 140 sequences.
components: 140
randoop.util.Randomness: total calls to random: 815
randoop.util.Randomness: total calls to random: 816
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 817
Selected statement: B.k()
Will query component set for objects of typeclass B
getActivesequencesThatYield: entering method, clazz=class B
getActivesequencesThatYield: returning 140 sequences.
components: 140
randoop.util.Randomness: total calls to random: 818
randoop.util.Randomness: total calls to random: 819
Successfully created new unique sequence:var0 =  cons : C.<init>() : 
var1 =  method : B.m() : var0 
var2 =  method : B.k() : var0 
var3 =  method : B.m() : var0 
var4 =  method : C.test() : var0 
var5 =  method : C.test() : var0 
var6 =  method : B.k() : var0 
var7 =  method : C.test() : var0 
var8 =  method : B.k() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Adding sequence to active sequences of type class C
Sequence after execution: 
C var0 = new C();
// <NormalExecution object=object-of-type-C>;
int var1 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var2 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var3 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var4 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var5 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var6 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var7 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var8 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
<randoop.PrimValue, value=23 [var1]  : true
<randoop.PrimValue, value=42 [var2]  : true
<randoop.PrimValue, value=23 [var3]  : true
<randoop.PrimValue, value=23 [var4]  : true
<randoop.PrimValue, value=23 [var5]  : true
<randoop.PrimValue, value=42 [var6]  : true
<randoop.PrimValue, value=23 [var7]  : true
<randoop.PrimValue, value=42 [var8]  : true

allSequences.size()=153
-------------------------------------------
randoop.util.Randomness: total calls to random: 820
Selected statement: B.m()
Will query component set for objects of typeclass B
getActivesequencesThatYield: entering method, clazz=class B
getActivesequencesThatYield: returning 139 sequences.
components: 139
randoop.util.Randomness: total calls to random: 821
randoop.util.Randomness: total calls to random: 822
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 823
Selected statement: B.m()
Will query component set for objects of typeclass B
getActivesequencesThatYield: entering method, clazz=class B
getActivesequencesThatYield: returning 139 sequences.
components: 139
randoop.util.Randomness: total calls to random: 824
randoop.util.Randomness: total calls to random: 825
Successfully created new unique sequence:var0 =  cons : C.<init>() : 
var1 =  method : B.m() : var0 
var2 =  method : C.test() : var0 
var3 =  method : B.m() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Adding sequence to active sequences of type class C
Sequence after execution: 
C var0 = new C();
// <NormalExecution object=object-of-type-C>;
int var1 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var2 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var3 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
<randoop.PrimValue, value=23 [var1]  : true
<randoop.PrimValue, value=23 [var2]  : true
<randoop.PrimValue, value=23 [var3]  : true

allSequences.size()=154
-------------------------------------------
randoop.util.Randomness: total calls to random: 826
Selected statement: B.m()
Will query component set for objects of typeclass B
getActivesequencesThatYield: entering method, clazz=class B
getActivesequencesThatYield: returning 140 sequences.
components: 140
randoop.util.Randomness: total calls to random: 827
randoop.util.Randomness: total calls to random: 828
Successfully created new unique sequence:var0 =  cons : C.<init>() : 
var1 =  method : C.test() : var0 
var2 =  method : C.test() : var0 
var3 =  method : B.m() : var0 
var4 =  method : C.test() : var0 
var5 =  method : B.k() : var0 
var6 =  method : B.m() : var0 
var7 =  method : C.test() : var0 
var8 =  method : C.test() : var0 
var9 =  method : B.m() : var0 
var10 =  method : B.m() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Adding sequence to active sequences of type class C
Sequence after execution: 
C var0 = new C();
// <NormalExecution object=object-of-type-C>;
int var1 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var2 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var3 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var4 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var5 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var6 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var7 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var8 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var9 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var10 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
<randoop.PrimValue, value=23 [var1]  : true
<randoop.PrimValue, value=23 [var2]  : true
<randoop.PrimValue, value=23 [var3]  : true
<randoop.PrimValue, value=23 [var4]  : true
<randoop.PrimValue, value=42 [var5]  : true
<randoop.PrimValue, value=23 [var6]  : true
<randoop.PrimValue, value=23 [var7]  : true
<randoop.PrimValue, value=23 [var8]  : true
<randoop.PrimValue, value=23 [var9]  : true
<randoop.PrimValue, value=23 [var10]  : true

allSequences.size()=155
-------------------------------------------
randoop.util.Randomness: total calls to random: 829
Selected statement: B.k()
Will query component set for objects of typeclass B
getActivesequencesThatYield: entering method, clazz=class B
getActivesequencesThatYield: returning 143 sequences.
components: 143
randoop.util.Randomness: total calls to random: 830
randoop.util.Randomness: total calls to random: 831
Successfully created new unique sequence:var0 =  cons : C.<init>() : 
var1 =  method : C.test() : var0 
var2 =  method : C.test() : var0 
var3 =  method : B.m() : var0 
var4 =  method : C.test() : var0 
var5 =  method : B.m() : var0 
var6 =  method : B.m() : var0 
var7 =  method : B.k() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Adding sequence to active sequences of type class C
Sequence after execution: 
C var0 = new C();
// <NormalExecution object=object-of-type-C>;
int var1 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var2 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var3 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var4 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var5 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var6 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var7 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
<randoop.PrimValue, value=23 [var1]  : true
<randoop.PrimValue, value=23 [var2]  : true
<randoop.PrimValue, value=23 [var3]  : true
<randoop.PrimValue, value=23 [var4]  : true
<randoop.PrimValue, value=23 [var5]  : true
<randoop.PrimValue, value=23 [var6]  : true
<randoop.PrimValue, value=42 [var7]  : true

allSequences.size()=156
-------------------------------------------
randoop.util.Randomness: total calls to random: 832
Selected statement: B.m()
Will query component set for objects of typeclass B
getActivesequencesThatYield: entering method, clazz=class B
getActivesequencesThatYield: returning 142 sequences.
components: 142
randoop.util.Randomness: total calls to random: 833
randoop.util.Randomness: total calls to random: 834
Successfully created new unique sequence:var0 =  cons : C.<init>() : 
var1 =  method : C.test() : var0 
var2 =  method : C.test() : var0 
var3 =  method : B.m() : var0 
var4 =  method : C.test() : var0 
var5 =  method : B.k() : var0 
var6 =  method : B.k() : var0 
var7 =  method : C.test() : var0 
var8 =  method : C.test() : var0 
var9 =  method : B.k() : var0 
var10 =  method : B.m() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Adding sequence to active sequences of type class C
Sequence after execution: 
C var0 = new C();
// <NormalExecution object=object-of-type-C>;
int var1 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var2 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var3 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var4 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var5 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var6 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var7 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var8 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var9 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var10 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
<randoop.PrimValue, value=23 [var1]  : true
<randoop.PrimValue, value=23 [var2]  : true
<randoop.PrimValue, value=23 [var3]  : true
<randoop.PrimValue, value=23 [var4]  : true
<randoop.PrimValue, value=42 [var5]  : true
<randoop.PrimValue, value=42 [var6]  : true
<randoop.PrimValue, value=23 [var7]  : true
<randoop.PrimValue, value=23 [var8]  : true
<randoop.PrimValue, value=42 [var9]  : true
<randoop.PrimValue, value=23 [var10]  : true

allSequences.size()=157
-------------------------------------------
randoop.util.Randomness: total calls to random: 835
Selected statement: C.test()
Will query component set for objects of typeclass C
getActivesequencesThatYield: entering method, clazz=class C
getActivesequencesThatYield: returning 143 sequences.
components: 143
randoop.util.Randomness: total calls to random: 836
randoop.util.Randomness: total calls to random: 837
Successfully created new unique sequence:var0 =  cons : C.<init>() : 
var1 =  method : C.test() : var0 
var2 =  method : C.test() : var0 
var3 =  method : B.m() : var0 
var4 =  method : B.m() : var0 
var5 =  method : B.m() : var0 
var6 =  method : B.m() : var0 
var7 =  method : C.test() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Adding sequence to active sequences of type class C
Sequence after execution: 
C var0 = new C();
// <NormalExecution object=object-of-type-C>;
int var1 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var2 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var3 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var4 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var5 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var6 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var7 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
<randoop.PrimValue, value=23 [var1]  : true
<randoop.PrimValue, value=23 [var2]  : true
<randoop.PrimValue, value=23 [var3]  : true
<randoop.PrimValue, value=23 [var4]  : true
<randoop.PrimValue, value=23 [var5]  : true
<randoop.PrimValue, value=23 [var6]  : true
<randoop.PrimValue, value=23 [var7]  : true

allSequences.size()=158
-------------------------------------------
randoop.util.Randomness: total calls to random: 838
Selected statement: B.m()
Will query component set for objects of typeclass B
getActivesequencesThatYield: entering method, clazz=class B
getActivesequencesThatYield: returning 144 sequences.
components: 144
randoop.util.Randomness: total calls to random: 839
randoop.util.Randomness: total calls to random: 840
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 841
Selected statement: B.m()
Will query component set for objects of typeclass B
getActivesequencesThatYield: entering method, clazz=class B
getActivesequencesThatYield: returning 144 sequences.
components: 144
randoop.util.Randomness: total calls to random: 842
randoop.util.Randomness: total calls to random: 843
Successfully created new unique sequence:var0 =  cons : C.<init>() : 
var1 =  method : B.k() : var0 
var2 =  method : C.test() : var0 
var3 =  method : B.m() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Adding sequence to active sequences of type class C
Sequence after execution: 
C var0 = new C();
// <NormalExecution object=object-of-type-C>;
int var1 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var2 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var3 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
<randoop.PrimValue, value=42 [var1]  : true
<randoop.PrimValue, value=23 [var2]  : true
<randoop.PrimValue, value=23 [var3]  : true

allSequences.size()=159
-------------------------------------------
randoop.util.Randomness: total calls to random: 844
Selected statement: B.m()
Will query component set for objects of typeclass B
getActivesequencesThatYield: entering method, clazz=class B
getActivesequencesThatYield: returning 145 sequences.
components: 145
randoop.util.Randomness: total calls to random: 845
randoop.util.Randomness: total calls to random: 846
Successfully created new unique sequence:var0 =  cons : C.<init>() : 
var1 =  method : B.m() : var0 
var2 =  method : B.k() : var0 
var3 =  method : B.m() : var0 
var4 =  method : C.test() : var0 
var5 =  method : B.m() : var0 
var6 =  method : B.m() : var0 
var7 =  method : B.k() : var0 
var8 =  method : C.test() : var0 
var9 =  method : B.k() : var0 
var10 =  method : B.m() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Adding sequence to active sequences of type class C
Sequence after execution: 
C var0 = new C();
// <NormalExecution object=object-of-type-C>;
int var1 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var2 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var3 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var4 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var5 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var6 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var7 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var8 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var9 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var10 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
<randoop.PrimValue, value=23 [var1]  : true
<randoop.PrimValue, value=42 [var2]  : true
<randoop.PrimValue, value=23 [var3]  : true
<randoop.PrimValue, value=23 [var4]  : true
<randoop.PrimValue, value=23 [var5]  : true
<randoop.PrimValue, value=23 [var6]  : true
<randoop.PrimValue, value=42 [var7]  : true
<randoop.PrimValue, value=23 [var8]  : true
<randoop.PrimValue, value=42 [var9]  : true
<randoop.PrimValue, value=23 [var10]  : true

allSequences.size()=160
-------------------------------------------
randoop.util.Randomness: total calls to random: 847
Selected statement: B.k()
Will query component set for objects of typeclass B
getActivesequencesThatYield: entering method, clazz=class B
getActivesequencesThatYield: returning 148 sequences.
components: 148
randoop.util.Randomness: total calls to random: 848
randoop.util.Randomness: total calls to random: 849
Successfully created new unique sequence:var0 =  cons : C.<init>() : 
var1 =  method : C.test() : var0 
var2 =  method : C.test() : var0 
var3 =  method : C.test() : var0 
var4 =  method : B.m() : var0 
var5 =  method : C.test() : var0 
var6 =  method : C.test() : var0 
var7 =  method : B.k() : var0 
var8 =  method : B.k() : var0 
var9 =  method : B.k() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Adding sequence to active sequences of type class C
Sequence after execution: 
C var0 = new C();
// <NormalExecution object=object-of-type-C>;
int var1 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var2 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var3 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var4 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var5 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var6 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var7 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var8 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var9 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
<randoop.PrimValue, value=23 [var1]  : true
<randoop.PrimValue, value=23 [var2]  : true
<randoop.PrimValue, value=23 [var3]  : true
<randoop.PrimValue, value=23 [var4]  : true
<randoop.PrimValue, value=23 [var5]  : true
<randoop.PrimValue, value=23 [var6]  : true
<randoop.PrimValue, value=42 [var7]  : true
<randoop.PrimValue, value=42 [var8]  : true
<randoop.PrimValue, value=42 [var9]  : true

allSequences.size()=161
-------------------------------------------
randoop.util.Randomness: total calls to random: 850
Selected statement: C.test()
Will query component set for objects of typeclass C
getActivesequencesThatYield: entering method, clazz=class C
getActivesequencesThatYield: returning 147 sequences.
components: 147
randoop.util.Randomness: total calls to random: 851
randoop.util.Randomness: total calls to random: 852
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 853
Selected statement: C.test()
Will query component set for objects of typeclass C
getActivesequencesThatYield: entering method, clazz=class C
getActivesequencesThatYield: returning 147 sequences.
components: 147
randoop.util.Randomness: total calls to random: 854
randoop.util.Randomness: total calls to random: 855
Successfully created new unique sequence:var0 =  cons : C.<init>() : 
var1 =  method : B.m() : var0 
var2 =  method : B.k() : var0 
var3 =  method : C.test() : var0 
var4 =  method : C.test() : var0 
var5 =  method : C.test() : var0 
var6 =  method : C.test() : var0 
var7 =  method : C.test() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Adding sequence to active sequences of type class C
Sequence after execution: 
C var0 = new C();
// <NormalExecution object=object-of-type-C>;
int var1 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var2 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var3 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var4 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var5 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var6 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var7 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
<randoop.PrimValue, value=23 [var1]  : true
<randoop.PrimValue, value=42 [var2]  : true
<randoop.PrimValue, value=23 [var3]  : true
<randoop.PrimValue, value=23 [var4]  : true
<randoop.PrimValue, value=23 [var5]  : true
<randoop.PrimValue, value=23 [var6]  : true
<randoop.PrimValue, value=23 [var7]  : true

allSequences.size()=162
-------------------------------------------
randoop.util.Randomness: total calls to random: 856
Selected statement: B.k()
Will query component set for objects of typeclass B
getActivesequencesThatYield: entering method, clazz=class B
getActivesequencesThatYield: returning 150 sequences.
components: 150
randoop.util.Randomness: total calls to random: 857
randoop.util.Randomness: total calls to random: 858
Successfully created new unique sequence:var0 =  cons : C.<init>() : 
var1 =  method : B.m() : var0 
var2 =  method : B.k() : var0 
var3 =  method : B.m() : var0 
var4 =  method : C.test() : var0 
var5 =  method : B.m() : var0 
var6 =  method : B.m() : var0 
var7 =  method : B.k() : var0 
var8 =  method : B.k() : var0 
var9 =  method : B.m() : var0 
var10 =  method : B.k() : var0 
var11 =  method : B.k() : var0 
var12 =  method : C.test() : var0 
var13 =  method : B.k() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Making index 12 inactive (value is a primitive)
Making index 13 inactive (value is a primitive)
Adding sequence to active sequences of type class C
Sequence after execution: 
C var0 = new C();
// <NormalExecution object=object-of-type-C>;
int var1 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var2 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var3 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var4 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var5 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var6 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var7 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var8 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var9 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var10 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var11 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var12 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var13 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
<randoop.PrimValue, value=23 [var1]  : true
<randoop.PrimValue, value=42 [var2]  : true
<randoop.PrimValue, value=23 [var3]  : true
<randoop.PrimValue, value=23 [var4]  : true
<randoop.PrimValue, value=23 [var5]  : true
<randoop.PrimValue, value=23 [var6]  : true
<randoop.PrimValue, value=42 [var7]  : true
<randoop.PrimValue, value=42 [var8]  : true
<randoop.PrimValue, value=23 [var9]  : true
<randoop.PrimValue, value=42 [var10]  : true
<randoop.PrimValue, value=42 [var11]  : true
<randoop.PrimValue, value=23 [var12]  : true
<randoop.PrimValue, value=42 [var13]  : true

allSequences.size()=163
-------------------------------------------
randoop.util.Randomness: total calls to random: 859
Selected statement: C.test()
Will query component set for objects of typeclass C
getActivesequencesThatYield: entering method, clazz=class C
getActivesequencesThatYield: returning 149 sequences.
components: 149
randoop.util.Randomness: total calls to random: 860
randoop.util.Randomness: total calls to random: 861
Successfully created new unique sequence:var0 =  cons : C.<init>() : 
var1 =  method : B.m() : var0 
var2 =  method : B.k() : var0 
var3 =  method : B.m() : var0 
var4 =  method : C.test() : var0 
var5 =  method : C.test() : var0 
var6 =  method : B.k() : var0 
var7 =  method : C.test() : var0 
var8 =  method : C.test() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Adding sequence to active sequences of type class C
Sequence after execution: 
C var0 = new C();
// <NormalExecution object=object-of-type-C>;
int var1 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var2 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var3 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var4 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var5 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var6 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var7 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var8 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
<randoop.PrimValue, value=23 [var1]  : true
<randoop.PrimValue, value=42 [var2]  : true
<randoop.PrimValue, value=23 [var3]  : true
<randoop.PrimValue, value=23 [var4]  : true
<randoop.PrimValue, value=23 [var5]  : true
<randoop.PrimValue, value=42 [var6]  : true
<randoop.PrimValue, value=23 [var7]  : true
<randoop.PrimValue, value=23 [var8]  : true

allSequences.size()=164
-------------------------------------------
randoop.util.Randomness: total calls to random: 862
Selected statement: B.m()
Will query component set for objects of typeclass B
getActivesequencesThatYield: entering method, clazz=class B
getActivesequencesThatYield: returning 150 sequences.
components: 150
randoop.util.Randomness: total calls to random: 863
randoop.util.Randomness: total calls to random: 864
Successfully created new unique sequence:var0 =  cons : C.<init>() : 
var1 =  method : B.m() : var0 
var2 =  method : B.k() : var0 
var3 =  method : B.m() : var0 
var4 =  method : C.test() : var0 
var5 =  method : B.m() : var0 
var6 =  method : B.m() : var0 
var7 =  method : B.k() : var0 
var8 =  method : B.k() : var0 
var9 =  method : B.m() : var0 
var10 =  method : B.k() : var0 
var11 =  method : B.k() : var0 
var12 =  method : B.m() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Making index 12 inactive (value is a primitive)
Adding sequence to active sequences of type class C
Sequence after execution: 
C var0 = new C();
// <NormalExecution object=object-of-type-C>;
int var1 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var2 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var3 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var4 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var5 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var6 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var7 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var8 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var9 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var10 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var11 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var12 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
<randoop.PrimValue, value=23 [var1]  : true
<randoop.PrimValue, value=42 [var2]  : true
<randoop.PrimValue, value=23 [var3]  : true
<randoop.PrimValue, value=23 [var4]  : true
<randoop.PrimValue, value=23 [var5]  : true
<randoop.PrimValue, value=23 [var6]  : true
<randoop.PrimValue, value=42 [var7]  : true
<randoop.PrimValue, value=42 [var8]  : true
<randoop.PrimValue, value=23 [var9]  : true
<randoop.PrimValue, value=42 [var10]  : true
<randoop.PrimValue, value=42 [var11]  : true
<randoop.PrimValue, value=23 [var12]  : true

allSequences.size()=165
-------------------------------------------
randoop.util.Randomness: total calls to random: 865
Selected statement: B.k()
Will query component set for objects of typeclass B
getActivesequencesThatYield: entering method, clazz=class B
getActivesequencesThatYield: returning 153 sequences.
components: 153
randoop.util.Randomness: total calls to random: 866
randoop.util.Randomness: total calls to random: 867
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 868
Selected statement: A.k()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 11 sequences.
components: 11
randoop.util.Randomness: total calls to random: 869
randoop.util.Randomness: total calls to random: 870
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 871
Selected statement: A.k()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 11 sequences.
components: 11
randoop.util.Randomness: total calls to random: 872
randoop.util.Randomness: total calls to random: 873
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 874
Selected statement: B.k()
Will query component set for objects of typeclass B
getActivesequencesThatYield: entering method, clazz=class B
getActivesequencesThatYield: returning 153 sequences.
components: 153
randoop.util.Randomness: total calls to random: 875
randoop.util.Randomness: total calls to random: 876
Successfully created new unique sequence:var0 =  cons : C.<init>() : 
var1 =  method : B.m() : var0 
var2 =  method : B.k() : var0 
var3 =  method : B.m() : var0 
var4 =  method : B.k() : var0 
var5 =  method : B.k() : var0 
var6 =  method : B.k() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Adding sequence to active sequences of type class C
Sequence after execution: 
C var0 = new C();
// <NormalExecution object=object-of-type-C>;
int var1 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var2 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var3 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var4 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var5 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var6 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
<randoop.PrimValue, value=23 [var1]  : true
<randoop.PrimValue, value=42 [var2]  : true
<randoop.PrimValue, value=23 [var3]  : true
<randoop.PrimValue, value=42 [var4]  : true
<randoop.PrimValue, value=42 [var5]  : true
<randoop.PrimValue, value=42 [var6]  : true

allSequences.size()=166
-------------------------------------------
randoop.util.Randomness: total calls to random: 877
Selected statement: A.k()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 11 sequences.
components: 11
randoop.util.Randomness: total calls to random: 878
randoop.util.Randomness: total calls to random: 879
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 880
Selected statement: C.test()
Will query component set for objects of typeclass C
getActivesequencesThatYield: entering method, clazz=class C
getActivesequencesThatYield: returning 152 sequences.
components: 152
randoop.util.Randomness: total calls to random: 881
randoop.util.Randomness: total calls to random: 882
Successfully created new unique sequence:var0 =  cons : C.<init>() : 
var1 =  method : C.test() : var0 
var2 =  method : C.test() : var0 
var3 =  method : B.m() : var0 
var4 =  method : C.test() : var0 
var5 =  method : B.k() : var0 
var6 =  method : B.m() : var0 
var7 =  method : C.test() : var0 
var8 =  method : C.test() : var0 
var9 =  method : C.test() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Adding sequence to active sequences of type class C
Sequence after execution: 
C var0 = new C();
// <NormalExecution object=object-of-type-C>;
int var1 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var2 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var3 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var4 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var5 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var6 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var7 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var8 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var9 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
<randoop.PrimValue, value=23 [var1]  : true
<randoop.PrimValue, value=23 [var2]  : true
<randoop.PrimValue, value=23 [var3]  : true
<randoop.PrimValue, value=23 [var4]  : true
<randoop.PrimValue, value=42 [var5]  : true
<randoop.PrimValue, value=23 [var6]  : true
<randoop.PrimValue, value=23 [var7]  : true
<randoop.PrimValue, value=23 [var8]  : true
<randoop.PrimValue, value=23 [var9]  : true

allSequences.size()=167
-------------------------------------------
randoop.util.Randomness: total calls to random: 883
Selected statement: B.k()
Will query component set for objects of typeclass B
getActivesequencesThatYield: entering method, clazz=class B
getActivesequencesThatYield: returning 155 sequences.
components: 155
randoop.util.Randomness: total calls to random: 884
randoop.util.Randomness: total calls to random: 885
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 886
Selected statement: C.test()
Will query component set for objects of typeclass C
getActivesequencesThatYield: entering method, clazz=class C
getActivesequencesThatYield: returning 153 sequences.
components: 153
randoop.util.Randomness: total calls to random: 887
randoop.util.Randomness: total calls to random: 888
Successfully created new unique sequence:var0 =  cons : C.<init>() : 
var1 =  method : B.m() : var0 
var2 =  method : B.k() : var0 
var3 =  method : B.m() : var0 
var4 =  method : B.k() : var0 
var5 =  method : C.test() : var0 
var6 =  method : C.test() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Adding sequence to active sequences of type class C
Sequence after execution: 
C var0 = new C();
// <NormalExecution object=object-of-type-C>;
int var1 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var2 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var3 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var4 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var5 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var6 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
<randoop.PrimValue, value=23 [var1]  : true
<randoop.PrimValue, value=42 [var2]  : true
<randoop.PrimValue, value=23 [var3]  : true
<randoop.PrimValue, value=42 [var4]  : true
<randoop.PrimValue, value=23 [var5]  : true
<randoop.PrimValue, value=23 [var6]  : true

allSequences.size()=168
-------------------------------------------
randoop.util.Randomness: total calls to random: 889
Selected statement: C.test()
Will query component set for objects of typeclass C
getActivesequencesThatYield: entering method, clazz=class C
getActivesequencesThatYield: returning 154 sequences.
components: 154
randoop.util.Randomness: total calls to random: 890
randoop.util.Randomness: total calls to random: 891
Successfully created new unique sequence:var0 =  cons : C.<init>() : 
var1 =  method : C.test() : var0 
var2 =  method : C.test() : var0 
var3 =  method : B.m() : var0 
var4 =  method : C.test() : var0 
var5 =  method : B.k() : var0 
var6 =  method : B.m() : var0 
var7 =  method : C.test() : var0 
var8 =  method : C.test() : var0 
var9 =  method : B.m() : var0 
var10 =  method : C.test() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Adding sequence to active sequences of type class C
Sequence after execution: 
C var0 = new C();
// <NormalExecution object=object-of-type-C>;
int var1 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var2 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var3 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var4 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var5 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var6 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var7 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var8 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var9 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var10 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
<randoop.PrimValue, value=23 [var1]  : true
<randoop.PrimValue, value=23 [var2]  : true
<randoop.PrimValue, value=23 [var3]  : true
<randoop.PrimValue, value=23 [var4]  : true
<randoop.PrimValue, value=42 [var5]  : true
<randoop.PrimValue, value=23 [var6]  : true
<randoop.PrimValue, value=23 [var7]  : true
<randoop.PrimValue, value=23 [var8]  : true
<randoop.PrimValue, value=23 [var9]  : true
<randoop.PrimValue, value=23 [var10]  : true

allSequences.size()=169
-------------------------------------------
randoop.util.Randomness: total calls to random: 892
Selected statement: A.k()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 11 sequences.
components: 11
randoop.util.Randomness: total calls to random: 893
randoop.util.Randomness: total calls to random: 894
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 895
Selected statement: C.test()
Will query component set for objects of typeclass C
getActivesequencesThatYield: entering method, clazz=class C
getActivesequencesThatYield: returning 155 sequences.
components: 155
randoop.util.Randomness: total calls to random: 896
randoop.util.Randomness: total calls to random: 897
Successfully created new unique sequence:var0 =  cons : C.<init>() : 
var1 =  method : C.test() : var0 
var2 =  method : C.test() : var0 
var3 =  method : B.m() : var0 
var4 =  method : B.m() : var0 
var5 =  method : B.m() : var0 
var6 =  method : B.k() : var0 
var7 =  method : C.test() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Adding sequence to active sequences of type class C
Sequence after execution: 
C var0 = new C();
// <NormalExecution object=object-of-type-C>;
int var1 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var2 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var3 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var4 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var5 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var6 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var7 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
<randoop.PrimValue, value=23 [var1]  : true
<randoop.PrimValue, value=23 [var2]  : true
<randoop.PrimValue, value=23 [var3]  : true
<randoop.PrimValue, value=23 [var4]  : true
<randoop.PrimValue, value=23 [var5]  : true
<randoop.PrimValue, value=42 [var6]  : true
<randoop.PrimValue, value=23 [var7]  : true

allSequences.size()=170
-------------------------------------------
randoop.util.Randomness: total calls to random: 898
Selected statement: B.k()
Will query component set for objects of typeclass B
getActivesequencesThatYield: entering method, clazz=class B
getActivesequencesThatYield: returning 158 sequences.
components: 158
randoop.util.Randomness: total calls to random: 899
randoop.util.Randomness: total calls to random: 900
Successfully created new unique sequence:var0 =  cons : C.<init>() : 
var1 =  method : C.test() : var0 
var2 =  method : C.test() : var0 
var3 =  method : B.m() : var0 
var4 =  method : C.test() : var0 
var5 =  method : B.k() : var0 
var6 =  method : B.m() : var0 
var7 =  method : C.test() : var0 
var8 =  method : B.k() : var0 
var9 =  method : C.test() : var0 
var10 =  method : C.test() : var0 
var11 =  method : B.k() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Adding sequence to active sequences of type class C
Sequence after execution: 
C var0 = new C();
// <NormalExecution object=object-of-type-C>;
int var1 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var2 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var3 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var4 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var5 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var6 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var7 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var8 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var9 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var10 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var11 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
<randoop.PrimValue, value=23 [var1]  : true
<randoop.PrimValue, value=23 [var2]  : true
<randoop.PrimValue, value=23 [var3]  : true
<randoop.PrimValue, value=23 [var4]  : true
<randoop.PrimValue, value=42 [var5]  : true
<randoop.PrimValue, value=23 [var6]  : true
<randoop.PrimValue, value=23 [var7]  : true
<randoop.PrimValue, value=42 [var8]  : true
<randoop.PrimValue, value=23 [var9]  : true
<randoop.PrimValue, value=23 [var10]  : true
<randoop.PrimValue, value=42 [var11]  : true

allSequences.size()=171
-------------------------------------------
randoop.util.Randomness: total calls to random: 901
Selected statement: A.k()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 11 sequences.
components: 11
randoop.util.Randomness: total calls to random: 902
randoop.util.Randomness: total calls to random: 903
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 904
Selected statement: B.m()
Will query component set for objects of typeclass B
getActivesequencesThatYield: entering method, clazz=class B
getActivesequencesThatYield: returning 157 sequences.
components: 157
randoop.util.Randomness: total calls to random: 905
randoop.util.Randomness: total calls to random: 906
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 907
Selected statement: C.test()
Will query component set for objects of typeclass C
getActivesequencesThatYield: entering method, clazz=class C
getActivesequencesThatYield: returning 157 sequences.
components: 157
randoop.util.Randomness: total calls to random: 908
randoop.util.Randomness: total calls to random: 909
Successfully created new unique sequence:var0 =  cons : C.<init>() : 
var1 =  method : B.m() : var0 
var2 =  method : B.k() : var0 
var3 =  method : B.k() : var0 
var4 =  method : B.m() : var0 
var5 =  method : C.test() : var0 
var6 =  method : C.test() : var0 
var7 =  method : C.test() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Adding sequence to active sequences of type class C
Sequence after execution: 
C var0 = new C();
// <NormalExecution object=object-of-type-C>;
int var1 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var2 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var3 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var4 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var5 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var6 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var7 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
<randoop.PrimValue, value=23 [var1]  : true
<randoop.PrimValue, value=42 [var2]  : true
<randoop.PrimValue, value=42 [var3]  : true
<randoop.PrimValue, value=23 [var4]  : true
<randoop.PrimValue, value=23 [var5]  : true
<randoop.PrimValue, value=23 [var6]  : true
<randoop.PrimValue, value=23 [var7]  : true

allSequences.size()=172
-------------------------------------------
randoop.util.Randomness: total calls to random: 910
Selected statement: C.test()
Will query component set for objects of typeclass C
getActivesequencesThatYield: entering method, clazz=class C
getActivesequencesThatYield: returning 158 sequences.
components: 158
randoop.util.Randomness: total calls to random: 911
randoop.util.Randomness: total calls to random: 912
Successfully created new unique sequence:var0 =  cons : C.<init>() : 
var1 =  method : C.test() : var0 
var2 =  method : C.test() : var0 
var3 =  method : B.m() : var0 
var4 =  method : C.test() : var0 
var5 =  method : B.k() : var0 
var6 =  method : C.test() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Adding sequence to active sequences of type class C
Sequence after execution: 
C var0 = new C();
// <NormalExecution object=object-of-type-C>;
int var1 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var2 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var3 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var4 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var5 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var6 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
<randoop.PrimValue, value=23 [var1]  : true
<randoop.PrimValue, value=23 [var2]  : true
<randoop.PrimValue, value=23 [var3]  : true
<randoop.PrimValue, value=23 [var4]  : true
<randoop.PrimValue, value=42 [var5]  : true
<randoop.PrimValue, value=23 [var6]  : true

allSequences.size()=173
-------------------------------------------
randoop.util.Randomness: total calls to random: 913
Selected statement: A.k()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 11 sequences.
components: 11
randoop.util.Randomness: total calls to random: 914
randoop.util.Randomness: total calls to random: 915
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 916
Selected statement: B.k()
Will query component set for objects of typeclass B
getActivesequencesThatYield: entering method, clazz=class B
getActivesequencesThatYield: returning 161 sequences.
components: 161
randoop.util.Randomness: total calls to random: 917
randoop.util.Randomness: total calls to random: 918
Successfully created new unique sequence:var0 =  cons : C.<init>() : 
var1 =  method : C.test() : var0 
var2 =  method : C.test() : var0 
var3 =  method : B.m() : var0 
var4 =  method : C.test() : var0 
var5 =  method : C.test() : var0 
var6 =  method : C.test() : var0 
var7 =  method : B.k() : var0 
var8 =  method : B.k() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Adding sequence to active sequences of type class C
Sequence after execution: 
C var0 = new C();
// <NormalExecution object=object-of-type-C>;
int var1 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var2 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var3 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var4 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var5 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var6 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var7 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var8 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
<randoop.PrimValue, value=23 [var1]  : true
<randoop.PrimValue, value=23 [var2]  : true
<randoop.PrimValue, value=23 [var3]  : true
<randoop.PrimValue, value=23 [var4]  : true
<randoop.PrimValue, value=23 [var5]  : true
<randoop.PrimValue, value=23 [var6]  : true
<randoop.PrimValue, value=42 [var7]  : true
<randoop.PrimValue, value=42 [var8]  : true

allSequences.size()=174
-------------------------------------------
randoop.util.Randomness: total calls to random: 919
Selected statement: B.k()
Will query component set for objects of typeclass B
getActivesequencesThatYield: entering method, clazz=class B
getActivesequencesThatYield: returning 162 sequences.
components: 162
randoop.util.Randomness: total calls to random: 920
randoop.util.Randomness: total calls to random: 921
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 922
Selected statement: A.k()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 11 sequences.
components: 11
randoop.util.Randomness: total calls to random: 923
randoop.util.Randomness: total calls to random: 924
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 925
Selected statement: B.k()
Will query component set for objects of typeclass B
getActivesequencesThatYield: entering method, clazz=class B
getActivesequencesThatYield: returning 162 sequences.
components: 162
randoop.util.Randomness: total calls to random: 926
randoop.util.Randomness: total calls to random: 927
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 928
Selected statement: B.k()
Will query component set for objects of typeclass B
getActivesequencesThatYield: entering method, clazz=class B
getActivesequencesThatYield: returning 162 sequences.
components: 162
randoop.util.Randomness: total calls to random: 929
randoop.util.Randomness: total calls to random: 930
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 931
Selected statement: B.k()
Will query component set for objects of typeclass B
getActivesequencesThatYield: entering method, clazz=class B
getActivesequencesThatYield: returning 162 sequences.
components: 162
randoop.util.Randomness: total calls to random: 932
randoop.util.Randomness: total calls to random: 933
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 934
Selected statement: B.m()
Will query component set for objects of typeclass B
getActivesequencesThatYield: entering method, clazz=class B
getActivesequencesThatYield: returning 160 sequences.
components: 160
randoop.util.Randomness: total calls to random: 935
randoop.util.Randomness: total calls to random: 936
Successfully created new unique sequence:var0 =  cons : C.<init>() : 
var1 =  method : C.test() : var0 
var2 =  method : C.test() : var0 
var3 =  method : B.m() : var0 
var4 =  method : C.test() : var0 
var5 =  method : B.k() : var0 
var6 =  method : B.m() : var0 
var7 =  method : C.test() : var0 
var8 =  method : C.test() : var0 
var9 =  method : B.m() : var0 
var10 =  method : C.test() : var0 
var11 =  method : B.m() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Adding sequence to active sequences of type class C
Sequence after execution: 
C var0 = new C();
// <NormalExecution object=object-of-type-C>;
int var1 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var2 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var3 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var4 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var5 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var6 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var7 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var8 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var9 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var10 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var11 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
<randoop.PrimValue, value=23 [var1]  : true
<randoop.PrimValue, value=23 [var2]  : true
<randoop.PrimValue, value=23 [var3]  : true
<randoop.PrimValue, value=23 [var4]  : true
<randoop.PrimValue, value=42 [var5]  : true
<randoop.PrimValue, value=23 [var6]  : true
<randoop.PrimValue, value=23 [var7]  : true
<randoop.PrimValue, value=23 [var8]  : true
<randoop.PrimValue, value=23 [var9]  : true
<randoop.PrimValue, value=23 [var10]  : true
<randoop.PrimValue, value=23 [var11]  : true

allSequences.size()=175
-------------------------------------------
randoop.util.Randomness: total calls to random: 937
Selected statement: C.test()
Will query component set for objects of typeclass C
getActivesequencesThatYield: entering method, clazz=class C
getActivesequencesThatYield: returning 161 sequences.
components: 161
randoop.util.Randomness: total calls to random: 938
randoop.util.Randomness: total calls to random: 939
Successfully created new unique sequence:var0 =  cons : C.<init>() : 
var1 =  method : C.test() : var0 
var2 =  method : C.test() : var0 
var3 =  method : C.test() : var0 
var4 =  method : B.m() : var0 
var5 =  method : C.test() : var0 
var6 =  method : C.test() : var0 
var7 =  method : B.k() : var0 
var8 =  method : B.k() : var0 
var9 =  method : B.k() : var0 
var10 =  method : C.test() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Adding sequence to active sequences of type class C
Sequence after execution: 
C var0 = new C();
// <NormalExecution object=object-of-type-C>;
int var1 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var2 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var3 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var4 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var5 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var6 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var7 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var8 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var9 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var10 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
<randoop.PrimValue, value=23 [var1]  : true
<randoop.PrimValue, value=23 [var2]  : true
<randoop.PrimValue, value=23 [var3]  : true
<randoop.PrimValue, value=23 [var4]  : true
<randoop.PrimValue, value=23 [var5]  : true
<randoop.PrimValue, value=23 [var6]  : true
<randoop.PrimValue, value=42 [var7]  : true
<randoop.PrimValue, value=42 [var8]  : true
<randoop.PrimValue, value=42 [var9]  : true
<randoop.PrimValue, value=23 [var10]  : true

allSequences.size()=176
-------------------------------------------
randoop.util.Randomness: total calls to random: 940
Selected statement: A.k()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 11 sequences.
components: 11
randoop.util.Randomness: total calls to random: 941
randoop.util.Randomness: total calls to random: 942
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 943
Selected statement: C.test()
Will query component set for objects of typeclass C
getActivesequencesThatYield: entering method, clazz=class C
getActivesequencesThatYield: returning 162 sequences.
components: 162
randoop.util.Randomness: total calls to random: 944
randoop.util.Randomness: total calls to random: 945
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 946
Selected statement: B.k()
Will query component set for objects of typeclass B
getActivesequencesThatYield: entering method, clazz=class B
getActivesequencesThatYield: returning 164 sequences.
components: 164
randoop.util.Randomness: total calls to random: 947
randoop.util.Randomness: total calls to random: 948
Successfully created new unique sequence:var0 =  cons : C.<init>() : 
var1 =  method : B.m() : var0 
var2 =  method : B.k() : var0 
var3 =  method : B.m() : var0 
var4 =  method : C.test() : var0 
var5 =  method : C.test() : var0 
var6 =  method : B.k() : var0 
var7 =  method : B.k() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Adding sequence to active sequences of type class C
Sequence after execution: 
C var0 = new C();
// <NormalExecution object=object-of-type-C>;
int var1 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var2 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var3 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var4 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var5 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var6 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var7 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
<randoop.PrimValue, value=23 [var1]  : true
<randoop.PrimValue, value=42 [var2]  : true
<randoop.PrimValue, value=23 [var3]  : true
<randoop.PrimValue, value=23 [var4]  : true
<randoop.PrimValue, value=23 [var5]  : true
<randoop.PrimValue, value=42 [var6]  : true
<randoop.PrimValue, value=42 [var7]  : true

allSequences.size()=177
-------------------------------------------
randoop.util.Randomness: total calls to random: 949
Selected statement: B.m()
Will query component set for objects of typeclass B
getActivesequencesThatYield: entering method, clazz=class B
getActivesequencesThatYield: returning 163 sequences.
components: 163
randoop.util.Randomness: total calls to random: 950
randoop.util.Randomness: total calls to random: 951
Successfully created new unique sequence:var0 =  cons : C.<init>() : 
var1 =  method : B.m() : var0 
var2 =  method : B.k() : var0 
var3 =  method : B.m() : var0 
var4 =  method : B.k() : var0 
var5 =  method : C.test() : var0 
var6 =  method : B.m() : var0 
var7 =  method : B.m() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Adding sequence to active sequences of type class C
Sequence after execution: 
C var0 = new C();
// <NormalExecution object=object-of-type-C>;
int var1 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var2 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var3 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var4 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var5 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var6 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var7 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
<randoop.PrimValue, value=23 [var1]  : true
<randoop.PrimValue, value=42 [var2]  : true
<randoop.PrimValue, value=23 [var3]  : true
<randoop.PrimValue, value=42 [var4]  : true
<randoop.PrimValue, value=23 [var5]  : true
<randoop.PrimValue, value=23 [var6]  : true
<randoop.PrimValue, value=23 [var7]  : true

allSequences.size()=178
-------------------------------------------
randoop.util.Randomness: total calls to random: 952
Selected statement: A.k()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 11 sequences.
components: 11
randoop.util.Randomness: total calls to random: 953
randoop.util.Randomness: total calls to random: 954
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.k() : var0 
var2 =  method : A.k() : var0 
var3 =  method : A.k() : var0 
var4 =  method : A.k() : var0 
var5 =  method : A.k() : var0 
var6 =  method : A.k() : var0 
var7 =  method : A.k() : var0 
var8 =  method : A.k() : var0 
var9 =  method : A.k() : var0 
var10 =  method : A.k() : var0 
var11 =  method : A.k() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
int var1 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var2 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var3 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var4 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var5 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var6 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var7 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var8 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var9 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var10 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var11 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
<randoop.PrimValue, value=23 [var1]  : true
<randoop.PrimValue, value=23 [var2]  : true
<randoop.PrimValue, value=23 [var3]  : true
<randoop.PrimValue, value=23 [var4]  : true
<randoop.PrimValue, value=23 [var5]  : true
<randoop.PrimValue, value=23 [var6]  : true
<randoop.PrimValue, value=23 [var7]  : true
<randoop.PrimValue, value=23 [var8]  : true
<randoop.PrimValue, value=23 [var9]  : true
<randoop.PrimValue, value=23 [var10]  : true
<randoop.PrimValue, value=23 [var11]  : true

allSequences.size()=179
-------------------------------------------
randoop.util.Randomness: total calls to random: 955
Selected statement: A.k()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 12 sequences.
components: 12
randoop.util.Randomness: total calls to random: 956
randoop.util.Randomness: total calls to random: 957
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 958
Selected statement: C.test()
Will query component set for objects of typeclass C
getActivesequencesThatYield: entering method, clazz=class C
getActivesequencesThatYield: returning 164 sequences.
components: 164
randoop.util.Randomness: total calls to random: 959
randoop.util.Randomness: total calls to random: 960
Successfully created new unique sequence:var0 =  cons : C.<init>() : 
var1 =  method : C.test() : var0 
var2 =  method : C.test() : var0 
var3 =  method : B.m() : var0 
var4 =  method : C.test() : var0 
var5 =  method : C.test() : var0 
var6 =  method : C.test() : var0 
var7 =  method : B.k() : var0 
var8 =  method : C.test() : var0 
var9 =  method : C.test() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Adding sequence to active sequences of type class C
Sequence after execution: 
C var0 = new C();
// <NormalExecution object=object-of-type-C>;
int var1 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var2 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var3 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var4 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var5 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var6 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var7 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var8 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var9 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
<randoop.PrimValue, value=23 [var1]  : true
<randoop.PrimValue, value=23 [var2]  : true
<randoop.PrimValue, value=23 [var3]  : true
<randoop.PrimValue, value=23 [var4]  : true
<randoop.PrimValue, value=23 [var5]  : true
<randoop.PrimValue, value=23 [var6]  : true
<randoop.PrimValue, value=42 [var7]  : true
<randoop.PrimValue, value=23 [var8]  : true
<randoop.PrimValue, value=23 [var9]  : true

allSequences.size()=180
-------------------------------------------
randoop.util.Randomness: total calls to random: 961
Selected statement: A.k()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 12 sequences.
components: 12
randoop.util.Randomness: total calls to random: 962
randoop.util.Randomness: total calls to random: 963
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 964
Selected statement: B.m()
Will query component set for objects of typeclass B
getActivesequencesThatYield: entering method, clazz=class B
getActivesequencesThatYield: returning 165 sequences.
components: 165
randoop.util.Randomness: total calls to random: 965
randoop.util.Randomness: total calls to random: 966
Successfully created new unique sequence:var0 =  cons : C.<init>() : 
var1 =  method : C.test() : var0 
var2 =  method : C.test() : var0 
var3 =  method : C.test() : var0 
var4 =  method : B.m() : var0 
var5 =  method : B.m() : var0 
var6 =  method : C.test() : var0 
var7 =  method : B.m() : var0 
var8 =  method : B.k() : var0 
var9 =  method : B.k() : var0 
var10 =  method : B.m() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Adding sequence to active sequences of type class C
Sequence after execution: 
C var0 = new C();
// <NormalExecution object=object-of-type-C>;
int var1 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var2 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var3 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var4 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var5 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var6 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var7 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var8 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var9 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var10 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
<randoop.PrimValue, value=23 [var1]  : true
<randoop.PrimValue, value=23 [var2]  : true
<randoop.PrimValue, value=23 [var3]  : true
<randoop.PrimValue, value=23 [var4]  : true
<randoop.PrimValue, value=23 [var5]  : true
<randoop.PrimValue, value=23 [var6]  : true
<randoop.PrimValue, value=23 [var7]  : true
<randoop.PrimValue, value=42 [var8]  : true
<randoop.PrimValue, value=42 [var9]  : true
<randoop.PrimValue, value=23 [var10]  : true

allSequences.size()=181
-------------------------------------------
randoop.util.Randomness: total calls to random: 967
Selected statement: B.m()
Will query component set for objects of typeclass B
getActivesequencesThatYield: entering method, clazz=class B
getActivesequencesThatYield: returning 166 sequences.
components: 166
randoop.util.Randomness: total calls to random: 968
randoop.util.Randomness: total calls to random: 969
Successfully created new unique sequence:var0 =  cons : C.<init>() : 
var1 =  method : B.m() : var0 
var2 =  method : B.k() : var0 
var3 =  method : B.m() : var0 
var4 =  method : B.k() : var0 
var5 =  method : C.test() : var0 
var6 =  method : B.m() : var0 
var7 =  method : C.test() : var0 
var8 =  method : B.m() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Adding sequence to active sequences of type class C
Sequence after execution: 
C var0 = new C();
// <NormalExecution object=object-of-type-C>;
int var1 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var2 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var3 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var4 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var5 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var6 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var7 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var8 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
<randoop.PrimValue, value=23 [var1]  : true
<randoop.PrimValue, value=42 [var2]  : true
<randoop.PrimValue, value=23 [var3]  : true
<randoop.PrimValue, value=42 [var4]  : true
<randoop.PrimValue, value=23 [var5]  : true
<randoop.PrimValue, value=23 [var6]  : true
<randoop.PrimValue, value=23 [var7]  : true
<randoop.PrimValue, value=23 [var8]  : true

allSequences.size()=182
-------------------------------------------
randoop.util.Randomness: total calls to random: 970
Selected statement: B.k()
Will query component set for objects of typeclass B
getActivesequencesThatYield: entering method, clazz=class B
getActivesequencesThatYield: returning 169 sequences.
components: 169
randoop.util.Randomness: total calls to random: 971
randoop.util.Randomness: total calls to random: 972
Successfully created new unique sequence:var0 =  cons : C.<init>() : 
var1 =  method : B.m() : var0 
var2 =  method : B.k() : var0 
var3 =  method : B.k() : var0 
var4 =  method : B.m() : var0 
var5 =  method : C.test() : var0 
var6 =  method : C.test() : var0 
var7 =  method : B.k() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Adding sequence to active sequences of type class C
Sequence after execution: 
C var0 = new C();
// <NormalExecution object=object-of-type-C>;
int var1 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var2 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var3 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var4 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var5 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var6 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var7 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
<randoop.PrimValue, value=23 [var1]  : true
<randoop.PrimValue, value=42 [var2]  : true
<randoop.PrimValue, value=42 [var3]  : true
<randoop.PrimValue, value=23 [var4]  : true
<randoop.PrimValue, value=23 [var5]  : true
<randoop.PrimValue, value=23 [var6]  : true
<randoop.PrimValue, value=42 [var7]  : true

allSequences.size()=183
-------------------------------------------
randoop.util.Randomness: total calls to random: 973
Selected statement: B.k()
Will query component set for objects of typeclass B
getActivesequencesThatYield: entering method, clazz=class B
getActivesequencesThatYield: returning 170 sequences.
components: 170
randoop.util.Randomness: total calls to random: 974
randoop.util.Randomness: total calls to random: 975
Successfully created new unique sequence:var0 =  cons : C.<init>() : 
var1 =  method : B.m() : var0 
var2 =  method : B.k() : var0 
var3 =  method : B.k() : var0 
var4 =  method : B.m() : var0 
var5 =  method : B.m() : var0 
var6 =  method : B.k() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Adding sequence to active sequences of type class C
Sequence after execution: 
C var0 = new C();
// <NormalExecution object=object-of-type-C>;
int var1 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var2 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var3 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var4 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var5 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var6 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
<randoop.PrimValue, value=23 [var1]  : true
<randoop.PrimValue, value=42 [var2]  : true
<randoop.PrimValue, value=42 [var3]  : true
<randoop.PrimValue, value=23 [var4]  : true
<randoop.PrimValue, value=23 [var5]  : true
<randoop.PrimValue, value=42 [var6]  : true

allSequences.size()=184
-------------------------------------------
randoop.util.Randomness: total calls to random: 976
Selected statement: B.k()
Will query component set for objects of typeclass B
getActivesequencesThatYield: entering method, clazz=class B
getActivesequencesThatYield: returning 171 sequences.
components: 171
randoop.util.Randomness: total calls to random: 977
randoop.util.Randomness: total calls to random: 978
Successfully created new unique sequence:var0 =  cons : C.<init>() : 
var1 =  method : C.test() : var0 
var2 =  method : C.test() : var0 
var3 =  method : B.m() : var0 
var4 =  method : C.test() : var0 
var5 =  method : B.k() : var0 
var6 =  method : B.k() : var0 
var7 =  method : C.test() : var0 
var8 =  method : C.test() : var0 
var9 =  method : B.k() : var0 
var10 =  method : B.k() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Adding sequence to active sequences of type class C
Sequence after execution: 
C var0 = new C();
// <NormalExecution object=object-of-type-C>;
int var1 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var2 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var3 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var4 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var5 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var6 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var7 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var8 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var9 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var10 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
<randoop.PrimValue, value=23 [var1]  : true
<randoop.PrimValue, value=23 [var2]  : true
<randoop.PrimValue, value=23 [var3]  : true
<randoop.PrimValue, value=23 [var4]  : true
<randoop.PrimValue, value=42 [var5]  : true
<randoop.PrimValue, value=42 [var6]  : true
<randoop.PrimValue, value=23 [var7]  : true
<randoop.PrimValue, value=23 [var8]  : true
<randoop.PrimValue, value=42 [var9]  : true
<randoop.PrimValue, value=42 [var10]  : true

allSequences.size()=185
-------------------------------------------
randoop.util.Randomness: total calls to random: 979
Selected statement: B.k()
Will query component set for objects of typeclass B
getActivesequencesThatYield: entering method, clazz=class B
getActivesequencesThatYield: returning 172 sequences.
components: 172
randoop.util.Randomness: total calls to random: 980
randoop.util.Randomness: total calls to random: 981
Successfully created new unique sequence:var0 =  cons : C.<init>() : 
var1 =  method : B.m() : var0 
var2 =  method : B.k() : var0 
var3 =  method : B.m() : var0 
var4 =  method : B.k() : var0 
var5 =  method : C.test() : var0 
var6 =  method : B.m() : var0 
var7 =  method : B.m() : var0 
var8 =  method : B.k() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Adding sequence to active sequences of type class C
Sequence after execution: 
C var0 = new C();
// <NormalExecution object=object-of-type-C>;
int var1 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var2 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var3 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var4 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var5 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var6 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var7 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var8 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
<randoop.PrimValue, value=23 [var1]  : true
<randoop.PrimValue, value=42 [var2]  : true
<randoop.PrimValue, value=23 [var3]  : true
<randoop.PrimValue, value=42 [var4]  : true
<randoop.PrimValue, value=23 [var5]  : true
<randoop.PrimValue, value=23 [var6]  : true
<randoop.PrimValue, value=23 [var7]  : true
<randoop.PrimValue, value=42 [var8]  : true

allSequences.size()=186
-------------------------------------------
randoop.util.Randomness: total calls to random: 982
Selected statement: B.m()
Will query component set for objects of typeclass B
getActivesequencesThatYield: entering method, clazz=class B
getActivesequencesThatYield: returning 171 sequences.
components: 171
randoop.util.Randomness: total calls to random: 983
randoop.util.Randomness: total calls to random: 984
Successfully created new unique sequence:var0 =  cons : C.<init>() : 
var1 =  method : B.m() : var0 
var2 =  method : B.k() : var0 
var3 =  method : B.m() : var0 
var4 =  method : C.test() : var0 
var5 =  method : C.test() : var0 
var6 =  method : B.m() : var0 
var7 =  method : B.m() : var0 
var8 =  method : B.m() : var0 
var9 =  method : C.test() : var0 
var10 =  method : B.m() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Adding sequence to active sequences of type class C
Sequence after execution: 
C var0 = new C();
// <NormalExecution object=object-of-type-C>;
int var1 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var2 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var3 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var4 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var5 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var6 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var7 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var8 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var9 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var10 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
<randoop.PrimValue, value=23 [var1]  : true
<randoop.PrimValue, value=42 [var2]  : true
<randoop.PrimValue, value=23 [var3]  : true
<randoop.PrimValue, value=23 [var4]  : true
<randoop.PrimValue, value=23 [var5]  : true
<randoop.PrimValue, value=23 [var6]  : true
<randoop.PrimValue, value=23 [var7]  : true
<randoop.PrimValue, value=23 [var8]  : true
<randoop.PrimValue, value=23 [var9]  : true
<randoop.PrimValue, value=23 [var10]  : true

allSequences.size()=187
-------------------------------------------
randoop.util.Randomness: total calls to random: 985
Selected statement: C.test()
Will query component set for objects of typeclass C
getActivesequencesThatYield: entering method, clazz=class C
getActivesequencesThatYield: returning 172 sequences.
components: 172
randoop.util.Randomness: total calls to random: 986
randoop.util.Randomness: total calls to random: 987
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 988
Selected statement: B.m()
Will query component set for objects of typeclass B
getActivesequencesThatYield: entering method, clazz=class B
getActivesequencesThatYield: returning 172 sequences.
components: 172
randoop.util.Randomness: total calls to random: 989
randoop.util.Randomness: total calls to random: 990
Successfully created new unique sequence:var0 =  cons : C.<init>() : 
var1 =  method : B.m() : var0 
var2 =  method : B.k() : var0 
var3 =  method : B.k() : var0 
var4 =  method : B.m() : var0 
var5 =  method : C.test() : var0 
var6 =  method : C.test() : var0 
var7 =  method : B.m() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Adding sequence to active sequences of type class C
Sequence after execution: 
C var0 = new C();
// <NormalExecution object=object-of-type-C>;
int var1 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var2 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var3 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var4 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var5 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var6 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var7 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
<randoop.PrimValue, value=23 [var1]  : true
<randoop.PrimValue, value=42 [var2]  : true
<randoop.PrimValue, value=42 [var3]  : true
<randoop.PrimValue, value=23 [var4]  : true
<randoop.PrimValue, value=23 [var5]  : true
<randoop.PrimValue, value=23 [var6]  : true
<randoop.PrimValue, value=23 [var7]  : true

allSequences.size()=188
-------------------------------------------
randoop.util.Randomness: total calls to random: 991
Selected statement: B.k()
Will query component set for objects of typeclass B
getActivesequencesThatYield: entering method, clazz=class B
getActivesequencesThatYield: returning 175 sequences.
components: 175
randoop.util.Randomness: total calls to random: 992
randoop.util.Randomness: total calls to random: 993
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 994
Selected statement: A.k()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 12 sequences.
components: 12
randoop.util.Randomness: total calls to random: 995
randoop.util.Randomness: total calls to random: 996
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 997
Selected statement: C.test()
Will query component set for objects of typeclass C
getActivesequencesThatYield: entering method, clazz=class C
getActivesequencesThatYield: returning 173 sequences.
components: 173
randoop.util.Randomness: total calls to random: 998
randoop.util.Randomness: total calls to random: 999
Successfully created new unique sequence:var0 =  cons : C.<init>() : 
var1 =  method : B.m() : var0 
var2 =  method : B.k() : var0 
var3 =  method : B.k() : var0 
var4 =  method : B.m() : var0 
var5 =  method : C.test() : var0 
var6 =  method : C.test() : var0 
var7 =  method : B.k() : var0 
var8 =  method : C.test() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Adding sequence to active sequences of type class C
Sequence after execution: 
C var0 = new C();
// <NormalExecution object=object-of-type-C>;
int var1 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var2 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var3 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var4 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var5 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var6 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var7 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var8 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
<randoop.PrimValue, value=23 [var1]  : true
<randoop.PrimValue, value=42 [var2]  : true
<randoop.PrimValue, value=42 [var3]  : true
<randoop.PrimValue, value=23 [var4]  : true
<randoop.PrimValue, value=23 [var5]  : true
<randoop.PrimValue, value=23 [var6]  : true
<randoop.PrimValue, value=42 [var7]  : true
<randoop.PrimValue, value=23 [var8]  : true

allSequences.size()=189
-------------------------------------------
randoop.util.Randomness: total calls to random: 1000
Selected statement: A.k()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 12 sequences.
components: 12
randoop.util.Randomness: total calls to random: 1001
randoop.util.Randomness: total calls to random: 1002
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 1003
Selected statement: B.m()
Will query component set for objects of typeclass B
getActivesequencesThatYield: entering method, clazz=class B
getActivesequencesThatYield: returning 174 sequences.
components: 174
randoop.util.Randomness: total calls to random: 1004
randoop.util.Randomness: total calls to random: 1005
Successfully created new unique sequence:var0 =  cons : C.<init>() : 
var1 =  method : C.test() : var0 
var2 =  method : C.test() : var0 
var3 =  method : B.m() : var0 
var4 =  method : C.test() : var0 
var5 =  method : B.k() : var0 
var6 =  method : C.test() : var0 
var7 =  method : B.m() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Adding sequence to active sequences of type class C
Sequence after execution: 
C var0 = new C();
// <NormalExecution object=object-of-type-C>;
int var1 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var2 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var3 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var4 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var5 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var6 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var7 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
<randoop.PrimValue, value=23 [var1]  : true
<randoop.PrimValue, value=23 [var2]  : true
<randoop.PrimValue, value=23 [var3]  : true
<randoop.PrimValue, value=23 [var4]  : true
<randoop.PrimValue, value=42 [var5]  : true
<randoop.PrimValue, value=23 [var6]  : true
<randoop.PrimValue, value=23 [var7]  : true

allSequences.size()=190
-------------------------------------------
randoop.util.Randomness: total calls to random: 1006
Selected statement: A.k()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 12 sequences.
components: 12
randoop.util.Randomness: total calls to random: 1007
randoop.util.Randomness: total calls to random: 1008
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 1009
Selected statement: C.test()
Will query component set for objects of typeclass C
getActivesequencesThatYield: entering method, clazz=class C
getActivesequencesThatYield: returning 175 sequences.
components: 175
randoop.util.Randomness: total calls to random: 1010
randoop.util.Randomness: total calls to random: 1011
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 1012
Selected statement: B.k()
Will query component set for objects of typeclass B
getActivesequencesThatYield: entering method, clazz=class B
getActivesequencesThatYield: returning 177 sequences.
components: 177
randoop.util.Randomness: total calls to random: 1013
randoop.util.Randomness: total calls to random: 1014
Successfully created new unique sequence:var0 =  cons : C.<init>() : 
var1 =  method : B.m() : var0 
var2 =  method : B.k() : var0 
var3 =  method : B.m() : var0 
var4 =  method : C.test() : var0 
var5 =  method : B.m() : var0 
var6 =  method : B.m() : var0 
var7 =  method : B.k() : var0 
var8 =  method : B.k() : var0 
var9 =  method : B.m() : var0 
var10 =  method : B.k() : var0 
var11 =  method : B.k() : var0 
var12 =  method : B.m() : var0 
var13 =  method : B.k() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Making index 12 inactive (value is a primitive)
Making index 13 inactive (value is a primitive)
Adding sequence to active sequences of type class C
Sequence after execution: 
C var0 = new C();
// <NormalExecution object=object-of-type-C>;
int var1 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var2 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var3 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var4 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var5 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var6 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var7 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var8 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var9 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var10 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var11 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var12 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var13 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
<randoop.PrimValue, value=23 [var1]  : true
<randoop.PrimValue, value=42 [var2]  : true
<randoop.PrimValue, value=23 [var3]  : true
<randoop.PrimValue, value=23 [var4]  : true
<randoop.PrimValue, value=23 [var5]  : true
<randoop.PrimValue, value=23 [var6]  : true
<randoop.PrimValue, value=42 [var7]  : true
<randoop.PrimValue, value=42 [var8]  : true
<randoop.PrimValue, value=23 [var9]  : true
<randoop.PrimValue, value=42 [var10]  : true
<randoop.PrimValue, value=42 [var11]  : true
<randoop.PrimValue, value=23 [var12]  : true
<randoop.PrimValue, value=42 [var13]  : true

allSequences.size()=191
-------------------------------------------
randoop.util.Randomness: total calls to random: 1015
Selected statement: B.m()
Will query component set for objects of typeclass B
getActivesequencesThatYield: entering method, clazz=class B
getActivesequencesThatYield: returning 176 sequences.
components: 176
randoop.util.Randomness: total calls to random: 1016
randoop.util.Randomness: total calls to random: 1017
Successfully created new unique sequence:var0 =  cons : C.<init>() : 
var1 =  method : C.test() : var0 
var2 =  method : C.test() : var0 
var3 =  method : B.m() : var0 
var4 =  method : C.test() : var0 
var5 =  method : C.test() : var0 
var6 =  method : B.m() : var0 
var7 =  method : C.test() : var0 
var8 =  method : B.m() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Adding sequence to active sequences of type class C
Sequence after execution: 
C var0 = new C();
// <NormalExecution object=object-of-type-C>;
int var1 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var2 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var3 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var4 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var5 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var6 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var7 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var8 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
<randoop.PrimValue, value=23 [var1]  : true
<randoop.PrimValue, value=23 [var2]  : true
<randoop.PrimValue, value=23 [var3]  : true
<randoop.PrimValue, value=23 [var4]  : true
<randoop.PrimValue, value=23 [var5]  : true
<randoop.PrimValue, value=23 [var6]  : true
<randoop.PrimValue, value=23 [var7]  : true
<randoop.PrimValue, value=23 [var8]  : true

allSequences.size()=192
-------------------------------------------
randoop.util.Randomness: total calls to random: 1018
Selected statement: A.k()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 12 sequences.
components: 12
randoop.util.Randomness: total calls to random: 1019
randoop.util.Randomness: total calls to random: 1020
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 1021
Selected statement: C.test()
Will query component set for objects of typeclass C
getActivesequencesThatYield: entering method, clazz=class C
getActivesequencesThatYield: returning 177 sequences.
components: 177
randoop.util.Randomness: total calls to random: 1022
randoop.util.Randomness: total calls to random: 1023
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 1024
Selected statement: B.k()
Will query component set for objects of typeclass B
getActivesequencesThatYield: entering method, clazz=class B
getActivesequencesThatYield: returning 179 sequences.
components: 179
randoop.util.Randomness: total calls to random: 1025
randoop.util.Randomness: total calls to random: 1026
Successfully created new unique sequence:var0 =  cons : C.<init>() : 
var1 =  method : B.m() : var0 
var2 =  method : B.k() : var0 
var3 =  method : B.m() : var0 
var4 =  method : C.test() : var0 
var5 =  method : C.test() : var0 
var6 =  method : B.k() : var0 
var7 =  method : B.k() : var0 
var8 =  method : B.k() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Adding sequence to active sequences of type class C
Sequence after execution: 
C var0 = new C();
// <NormalExecution object=object-of-type-C>;
int var1 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var2 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var3 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var4 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var5 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var6 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var7 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var8 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
<randoop.PrimValue, value=23 [var1]  : true
<randoop.PrimValue, value=42 [var2]  : true
<randoop.PrimValue, value=23 [var3]  : true
<randoop.PrimValue, value=23 [var4]  : true
<randoop.PrimValue, value=23 [var5]  : true
<randoop.PrimValue, value=42 [var6]  : true
<randoop.PrimValue, value=42 [var7]  : true
<randoop.PrimValue, value=42 [var8]  : true

allSequences.size()=193
-------------------------------------------
randoop.util.Randomness: total calls to random: 1027
Selected statement: B.m()
Will query component set for objects of typeclass B
getActivesequencesThatYield: entering method, clazz=class B
getActivesequencesThatYield: returning 178 sequences.
components: 178
randoop.util.Randomness: total calls to random: 1028
randoop.util.Randomness: total calls to random: 1029
Successfully created new unique sequence:var0 =  cons : C.<init>() : 
var1 =  method : C.test() : var0 
var2 =  method : C.test() : var0 
var3 =  method : B.k() : var0 
var4 =  method : B.m() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Adding sequence to active sequences of type class C
Sequence after execution: 
C var0 = new C();
// <NormalExecution object=object-of-type-C>;
int var1 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var2 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var3 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var4 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
<randoop.PrimValue, value=23 [var1]  : true
<randoop.PrimValue, value=23 [var2]  : true
<randoop.PrimValue, value=42 [var3]  : true
<randoop.PrimValue, value=23 [var4]  : true

allSequences.size()=194
-------------------------------------------
randoop.util.Randomness: total calls to random: 1030
Selected statement: A.k()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 12 sequences.
components: 12
randoop.util.Randomness: total calls to random: 1031
randoop.util.Randomness: total calls to random: 1032
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 1033
Selected statement: C.test()
Will query component set for objects of typeclass C
getActivesequencesThatYield: entering method, clazz=class C
getActivesequencesThatYield: returning 179 sequences.
components: 179
randoop.util.Randomness: total calls to random: 1034
randoop.util.Randomness: total calls to random: 1035
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 1036
Selected statement: A.k()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 12 sequences.
components: 12
randoop.util.Randomness: total calls to random: 1037
randoop.util.Randomness: total calls to random: 1038
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 1039
Selected statement: A.k()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 12 sequences.
components: 12
randoop.util.Randomness: total calls to random: 1040
randoop.util.Randomness: total calls to random: 1041
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 1042
Selected statement: A.k()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 12 sequences.
components: 12
randoop.util.Randomness: total calls to random: 1043
randoop.util.Randomness: total calls to random: 1044
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.k() : var0 
var2 =  method : A.k() : var0 
var3 =  method : A.k() : var0 
var4 =  method : A.k() : var0 
var5 =  method : A.k() : var0 
var6 =  method : A.k() : var0 
var7 =  method : A.k() : var0 
var8 =  method : A.k() : var0 
var9 =  method : A.k() : var0 
var10 =  method : A.k() : var0 
var11 =  method : A.k() : var0 
var12 =  method : A.k() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Making index 12 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
int var1 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var2 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var3 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var4 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var5 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var6 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var7 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var8 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var9 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var10 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var11 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var12 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
<randoop.PrimValue, value=23 [var1]  : true
<randoop.PrimValue, value=23 [var2]  : true
<randoop.PrimValue, value=23 [var3]  : true
<randoop.PrimValue, value=23 [var4]  : true
<randoop.PrimValue, value=23 [var5]  : true
<randoop.PrimValue, value=23 [var6]  : true
<randoop.PrimValue, value=23 [var7]  : true
<randoop.PrimValue, value=23 [var8]  : true
<randoop.PrimValue, value=23 [var9]  : true
<randoop.PrimValue, value=23 [var10]  : true
<randoop.PrimValue, value=23 [var11]  : true
<randoop.PrimValue, value=23 [var12]  : true

allSequences.size()=195
-------------------------------------------
randoop.util.Randomness: total calls to random: 1045
Selected statement: A.k()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 13 sequences.
components: 13
randoop.util.Randomness: total calls to random: 1046
randoop.util.Randomness: total calls to random: 1047
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 1048
Selected statement: C.test()
Will query component set for objects of typeclass C
getActivesequencesThatYield: entering method, clazz=class C
getActivesequencesThatYield: returning 179 sequences.
components: 179
randoop.util.Randomness: total calls to random: 1049
randoop.util.Randomness: total calls to random: 1050
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 1051
Selected statement: B.k()
Will query component set for objects of typeclass B
getActivesequencesThatYield: entering method, clazz=class B
getActivesequencesThatYield: returning 181 sequences.
components: 181
randoop.util.Randomness: total calls to random: 1052
randoop.util.Randomness: total calls to random: 1053
Successfully created new unique sequence:var0 =  cons : C.<init>() : 
var1 =  method : C.test() : var0 
var2 =  method : C.test() : var0 
var3 =  method : B.m() : var0 
var4 =  method : C.test() : var0 
var5 =  method : B.k() : var0 
var6 =  method : C.test() : var0 
var7 =  method : B.k() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Adding sequence to active sequences of type class C
Sequence after execution: 
C var0 = new C();
// <NormalExecution object=object-of-type-C>;
int var1 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var2 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var3 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var4 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var5 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var6 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var7 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
<randoop.PrimValue, value=23 [var1]  : true
<randoop.PrimValue, value=23 [var2]  : true
<randoop.PrimValue, value=23 [var3]  : true
<randoop.PrimValue, value=23 [var4]  : true
<randoop.PrimValue, value=42 [var5]  : true
<randoop.PrimValue, value=23 [var6]  : true
<randoop.PrimValue, value=42 [var7]  : true

allSequences.size()=196
-------------------------------------------
randoop.util.Randomness: total calls to random: 1054
Selected statement: C.test()
Will query component set for objects of typeclass C
getActivesequencesThatYield: entering method, clazz=class C
getActivesequencesThatYield: returning 180 sequences.
components: 180
randoop.util.Randomness: total calls to random: 1055
randoop.util.Randomness: total calls to random: 1056
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 1057
Selected statement: A.k()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 13 sequences.
components: 13
randoop.util.Randomness: total calls to random: 1058
randoop.util.Randomness: total calls to random: 1059
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 1060
Selected statement: C.test()
Will query component set for objects of typeclass C
getActivesequencesThatYield: entering method, clazz=class C
getActivesequencesThatYield: returning 180 sequences.
components: 180
randoop.util.Randomness: total calls to random: 1061
randoop.util.Randomness: total calls to random: 1062
Successfully created new unique sequence:var0 =  cons : C.<init>() : 
var1 =  method : B.m() : var0 
var2 =  method : B.k() : var0 
var3 =  method : C.test() : var0 
var4 =  method : B.k() : var0 
var5 =  method : B.m() : var0 
var6 =  method : C.test() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Adding sequence to active sequences of type class C
Sequence after execution: 
C var0 = new C();
// <NormalExecution object=object-of-type-C>;
int var1 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var2 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var3 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var4 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var5 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var6 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
<randoop.PrimValue, value=23 [var1]  : true
<randoop.PrimValue, value=42 [var2]  : true
<randoop.PrimValue, value=23 [var3]  : true
<randoop.PrimValue, value=42 [var4]  : true
<randoop.PrimValue, value=23 [var5]  : true
<randoop.PrimValue, value=23 [var6]  : true

allSequences.size()=197
-------------------------------------------
randoop.util.Randomness: total calls to random: 1063
Selected statement: C.test()
Will query component set for objects of typeclass C
getActivesequencesThatYield: entering method, clazz=class C
getActivesequencesThatYield: returning 181 sequences.
components: 181
randoop.util.Randomness: total calls to random: 1064
randoop.util.Randomness: total calls to random: 1065
Successfully created new unique sequence:var0 =  cons : C.<init>() : 
var1 =  method : B.m() : var0 
var2 =  method : B.k() : var0 
var3 =  method : B.m() : var0 
var4 =  method : C.test() : var0 
var5 =  method : B.m() : var0 
var6 =  method : B.m() : var0 
var7 =  method : B.k() : var0 
var8 =  method : C.test() : var0 
var9 =  method : B.k() : var0 
var10 =  method : B.k() : var0 
var11 =  method : C.test() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Adding sequence to active sequences of type class C
Sequence after execution: 
C var0 = new C();
// <NormalExecution object=object-of-type-C>;
int var1 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var2 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var3 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var4 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var5 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var6 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var7 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var8 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var9 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var10 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var11 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
<randoop.PrimValue, value=23 [var1]  : true
<randoop.PrimValue, value=42 [var2]  : true
<randoop.PrimValue, value=23 [var3]  : true
<randoop.PrimValue, value=23 [var4]  : true
<randoop.PrimValue, value=23 [var5]  : true
<randoop.PrimValue, value=23 [var6]  : true
<randoop.PrimValue, value=42 [var7]  : true
<randoop.PrimValue, value=23 [var8]  : true
<randoop.PrimValue, value=42 [var9]  : true
<randoop.PrimValue, value=42 [var10]  : true
<randoop.PrimValue, value=23 [var11]  : true

allSequences.size()=198
-------------------------------------------
randoop.util.Randomness: total calls to random: 1066
Selected statement: B.m()
Will query component set for objects of typeclass B
getActivesequencesThatYield: entering method, clazz=class B
getActivesequencesThatYield: returning 182 sequences.
components: 182
randoop.util.Randomness: total calls to random: 1067
randoop.util.Randomness: total calls to random: 1068
Successfully created new unique sequence:var0 =  cons : C.<init>() : 
var1 =  method : B.m() : var0 
var2 =  method : B.k() : var0 
var3 =  method : B.m() : var0 
var4 =  method : C.test() : var0 
var5 =  method : B.m() : var0 
var6 =  method : B.m() : var0 
var7 =  method : C.test() : var0 
var8 =  method : B.k() : var0 
var9 =  method : B.m() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Adding sequence to active sequences of type class C
Sequence after execution: 
C var0 = new C();
// <NormalExecution object=object-of-type-C>;
int var1 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var2 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var3 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var4 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var5 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var6 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var7 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var8 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var9 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
<randoop.PrimValue, value=23 [var1]  : true
<randoop.PrimValue, value=42 [var2]  : true
<randoop.PrimValue, value=23 [var3]  : true
<randoop.PrimValue, value=23 [var4]  : true
<randoop.PrimValue, value=23 [var5]  : true
<randoop.PrimValue, value=23 [var6]  : true
<randoop.PrimValue, value=23 [var7]  : true
<randoop.PrimValue, value=42 [var8]  : true
<randoop.PrimValue, value=23 [var9]  : true

allSequences.size()=199
-------------------------------------------
randoop.util.Randomness: total calls to random: 1069
Selected statement: A.k()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 13 sequences.
components: 13
randoop.util.Randomness: total calls to random: 1070
randoop.util.Randomness: total calls to random: 1071
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 1072
Selected statement: B.k()
Will query component set for objects of typeclass B
getActivesequencesThatYield: entering method, clazz=class B
getActivesequencesThatYield: returning 185 sequences.
components: 185
randoop.util.Randomness: total calls to random: 1073
randoop.util.Randomness: total calls to random: 1074
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 1075
Selected statement: C.test()
Will query component set for objects of typeclass C
getActivesequencesThatYield: entering method, clazz=class C
getActivesequencesThatYield: returning 183 sequences.
components: 183
randoop.util.Randomness: total calls to random: 1076
randoop.util.Randomness: total calls to random: 1077
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 1078
Selected statement: B.m()
Will query component set for objects of typeclass B
getActivesequencesThatYield: entering method, clazz=class B
getActivesequencesThatYield: returning 183 sequences.
components: 183
randoop.util.Randomness: total calls to random: 1079
randoop.util.Randomness: total calls to random: 1080
Successfully created new unique sequence:var0 =  cons : C.<init>() : 
var1 =  method : B.m() : var0 
var2 =  method : B.k() : var0 
var3 =  method : B.m() : var0 
var4 =  method : C.test() : var0 
var5 =  method : B.m() : var0 
var6 =  method : B.m() : var0 
var7 =  method : B.k() : var0 
var8 =  method : C.test() : var0 
var9 =  method : B.k() : var0 
var10 =  method : B.m() : var0 
var11 =  method : B.m() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Adding sequence to active sequences of type class C
Sequence after execution: 
C var0 = new C();
// <NormalExecution object=object-of-type-C>;
int var1 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var2 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var3 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var4 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var5 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var6 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var7 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var8 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var9 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var10 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var11 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
<randoop.PrimValue, value=23 [var1]  : true
<randoop.PrimValue, value=42 [var2]  : true
<randoop.PrimValue, value=23 [var3]  : true
<randoop.PrimValue, value=23 [var4]  : true
<randoop.PrimValue, value=23 [var5]  : true
<randoop.PrimValue, value=23 [var6]  : true
<randoop.PrimValue, value=42 [var7]  : true
<randoop.PrimValue, value=23 [var8]  : true
<randoop.PrimValue, value=42 [var9]  : true
<randoop.PrimValue, value=23 [var10]  : true
<randoop.PrimValue, value=23 [var11]  : true

allSequences.size()=200
-------------------------------------------
randoop.util.Randomness: total calls to random: 1081
Selected statement: B.k()
Will query component set for objects of typeclass B
getActivesequencesThatYield: entering method, clazz=class B
getActivesequencesThatYield: returning 186 sequences.
components: 186
randoop.util.Randomness: total calls to random: 1082
randoop.util.Randomness: total calls to random: 1083
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 1084
Selected statement: A.k()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 13 sequences.
components: 13
randoop.util.Randomness: total calls to random: 1085
randoop.util.Randomness: total calls to random: 1086
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 1087
Selected statement: B.k()
Will query component set for objects of typeclass B
getActivesequencesThatYield: entering method, clazz=class B
getActivesequencesThatYield: returning 186 sequences.
components: 186
randoop.util.Randomness: total calls to random: 1088
randoop.util.Randomness: total calls to random: 1089
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 1090
Selected statement: C.test()
Will query component set for objects of typeclass C
getActivesequencesThatYield: entering method, clazz=class C
getActivesequencesThatYield: returning 184 sequences.
components: 184
randoop.util.Randomness: total calls to random: 1091
randoop.util.Randomness: total calls to random: 1092
Successfully created new unique sequence:var0 =  cons : C.<init>() : 
var1 =  method : B.m() : var0 
var2 =  method : B.k() : var0 
var3 =  method : B.m() : var0 
var4 =  method : C.test() : var0 
var5 =  method : B.m() : var0 
var6 =  method : B.m() : var0 
var7 =  method : B.k() : var0 
var8 =  method : B.k() : var0 
var9 =  method : B.m() : var0 
var10 =  method : B.k() : var0 
var11 =  method : B.k() : var0 
var12 =  method : B.m() : var0 
var13 =  method : C.test() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Making index 12 inactive (value is a primitive)
Making index 13 inactive (value is a primitive)
Adding sequence to active sequences of type class C
Sequence after execution: 
C var0 = new C();
// <NormalExecution object=object-of-type-C>;
int var1 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var2 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var3 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var4 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var5 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var6 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var7 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var8 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var9 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var10 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var11 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var12 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var13 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
<randoop.PrimValue, value=23 [var1]  : true
<randoop.PrimValue, value=42 [var2]  : true
<randoop.PrimValue, value=23 [var3]  : true
<randoop.PrimValue, value=23 [var4]  : true
<randoop.PrimValue, value=23 [var5]  : true
<randoop.PrimValue, value=23 [var6]  : true
<randoop.PrimValue, value=42 [var7]  : true
<randoop.PrimValue, value=42 [var8]  : true
<randoop.PrimValue, value=23 [var9]  : true
<randoop.PrimValue, value=42 [var10]  : true
<randoop.PrimValue, value=42 [var11]  : true
<randoop.PrimValue, value=23 [var12]  : true
<randoop.PrimValue, value=23 [var13]  : true

allSequences.size()=201
-------------------------------------------
randoop.util.Randomness: total calls to random: 1093
Selected statement: B.m()
Will query component set for objects of typeclass B
getActivesequencesThatYield: entering method, clazz=class B
getActivesequencesThatYield: returning 185 sequences.
components: 185
randoop.util.Randomness: total calls to random: 1094
randoop.util.Randomness: total calls to random: 1095
Successfully created new unique sequence:var0 =  cons : C.<init>() : 
var1 =  method : B.m() : var0 
var2 =  method : B.k() : var0 
var3 =  method : B.k() : var0 
var4 =  method : B.m() : var0 
var5 =  method : B.m() : var0 
var6 =  method : C.test() : var0 
var7 =  method : B.m() : var0 
var8 =  method : B.m() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Adding sequence to active sequences of type class C
Sequence after execution: 
C var0 = new C();
// <NormalExecution object=object-of-type-C>;
int var1 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var2 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var3 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var4 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var5 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var6 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var7 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var8 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
<randoop.PrimValue, value=23 [var1]  : true
<randoop.PrimValue, value=42 [var2]  : true
<randoop.PrimValue, value=42 [var3]  : true
<randoop.PrimValue, value=23 [var4]  : true
<randoop.PrimValue, value=23 [var5]  : true
<randoop.PrimValue, value=23 [var6]  : true
<randoop.PrimValue, value=23 [var7]  : true
<randoop.PrimValue, value=23 [var8]  : true

allSequences.size()=202
-------------------------------------------
randoop.util.Randomness: total calls to random: 1096
Selected statement: C.test()
Will query component set for objects of typeclass C
getActivesequencesThatYield: entering method, clazz=class C
getActivesequencesThatYield: returning 186 sequences.
components: 186
randoop.util.Randomness: total calls to random: 1097
randoop.util.Randomness: total calls to random: 1098
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 1099
Selected statement: C.test()
Will query component set for objects of typeclass C
getActivesequencesThatYield: entering method, clazz=class C
getActivesequencesThatYield: returning 186 sequences.
components: 186
randoop.util.Randomness: total calls to random: 1100
randoop.util.Randomness: total calls to random: 1101
Successfully created new unique sequence:var0 =  cons : C.<init>() : 
var1 =  method : B.m() : var0 
var2 =  method : B.k() : var0 
var3 =  method : B.m() : var0 
var4 =  method : C.test() : var0 
var5 =  method : B.m() : var0 
var6 =  method : B.m() : var0 
var7 =  method : B.k() : var0 
var8 =  method : B.k() : var0 
var9 =  method : B.m() : var0 
var10 =  method : C.test() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Adding sequence to active sequences of type class C
Sequence after execution: 
C var0 = new C();
// <NormalExecution object=object-of-type-C>;
int var1 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var2 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var3 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var4 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var5 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var6 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var7 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var8 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var9 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var10 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
<randoop.PrimValue, value=23 [var1]  : true
<randoop.PrimValue, value=42 [var2]  : true
<randoop.PrimValue, value=23 [var3]  : true
<randoop.PrimValue, value=23 [var4]  : true
<randoop.PrimValue, value=23 [var5]  : true
<randoop.PrimValue, value=23 [var6]  : true
<randoop.PrimValue, value=42 [var7]  : true
<randoop.PrimValue, value=42 [var8]  : true
<randoop.PrimValue, value=23 [var9]  : true
<randoop.PrimValue, value=23 [var10]  : true

allSequences.size()=203
-------------------------------------------
randoop.util.Randomness: total calls to random: 1102
Selected statement: B.m()
Will query component set for objects of typeclass B
getActivesequencesThatYield: entering method, clazz=class B
getActivesequencesThatYield: returning 187 sequences.
components: 187
randoop.util.Randomness: total calls to random: 1103
randoop.util.Randomness: total calls to random: 1104
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 1105
Selected statement: B.k()
Will query component set for objects of typeclass B
getActivesequencesThatYield: entering method, clazz=class B
getActivesequencesThatYield: returning 189 sequences.
components: 189
randoop.util.Randomness: total calls to random: 1106
randoop.util.Randomness: total calls to random: 1107
Successfully created new unique sequence:var0 =  cons : C.<init>() : 
var1 =  method : C.test() : var0 
var2 =  method : C.test() : var0 
var3 =  method : B.m() : var0 
var4 =  method : C.test() : var0 
var5 =  method : B.k() : var0 
var6 =  method : C.test() : var0 
var7 =  method : B.m() : var0 
var8 =  method : B.k() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Adding sequence to active sequences of type class C
Sequence after execution: 
C var0 = new C();
// <NormalExecution object=object-of-type-C>;
int var1 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var2 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var3 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var4 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var5 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var6 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var7 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var8 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
<randoop.PrimValue, value=23 [var1]  : true
<randoop.PrimValue, value=23 [var2]  : true
<randoop.PrimValue, value=23 [var3]  : true
<randoop.PrimValue, value=23 [var4]  : true
<randoop.PrimValue, value=42 [var5]  : true
<randoop.PrimValue, value=23 [var6]  : true
<randoop.PrimValue, value=23 [var7]  : true
<randoop.PrimValue, value=42 [var8]  : true

allSequences.size()=204
-------------------------------------------
randoop.util.Randomness: total calls to random: 1108
Selected statement: B.k()
Will query component set for objects of typeclass B
getActivesequencesThatYield: entering method, clazz=class B
getActivesequencesThatYield: returning 190 sequences.
components: 190
randoop.util.Randomness: total calls to random: 1109
randoop.util.Randomness: total calls to random: 1110
Successfully created new unique sequence:var0 =  cons : C.<init>() : 
var1 =  method : B.m() : var0 
var2 =  method : B.k() : var0 
var3 =  method : B.m() : var0 
var4 =  method : B.k() : var0 
var5 =  method : B.m() : var0 
var6 =  method : B.k() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Adding sequence to active sequences of type class C
Sequence after execution: 
C var0 = new C();
// <NormalExecution object=object-of-type-C>;
int var1 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var2 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var3 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var4 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var5 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var6 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
<randoop.PrimValue, value=23 [var1]  : true
<randoop.PrimValue, value=42 [var2]  : true
<randoop.PrimValue, value=23 [var3]  : true
<randoop.PrimValue, value=42 [var4]  : true
<randoop.PrimValue, value=23 [var5]  : true
<randoop.PrimValue, value=42 [var6]  : true

allSequences.size()=205
-------------------------------------------
randoop.util.Randomness: total calls to random: 1111
Selected statement: A.k()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 13 sequences.
components: 13
randoop.util.Randomness: total calls to random: 1112
randoop.util.Randomness: total calls to random: 1113
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 1114
Selected statement: C.test()
Will query component set for objects of typeclass C
getActivesequencesThatYield: entering method, clazz=class C
getActivesequencesThatYield: returning 189 sequences.
components: 189
randoop.util.Randomness: total calls to random: 1115
randoop.util.Randomness: total calls to random: 1116
Successfully created new unique sequence:var0 =  cons : C.<init>() : 
var1 =  method : B.m() : var0 
var2 =  method : B.k() : var0 
var3 =  method : B.m() : var0 
var4 =  method : B.m() : var0 
var5 =  method : C.test() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Adding sequence to active sequences of type class C
Sequence after execution: 
C var0 = new C();
// <NormalExecution object=object-of-type-C>;
int var1 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var2 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var3 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var4 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var5 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
<randoop.PrimValue, value=23 [var1]  : true
<randoop.PrimValue, value=42 [var2]  : true
<randoop.PrimValue, value=23 [var3]  : true
<randoop.PrimValue, value=23 [var4]  : true
<randoop.PrimValue, value=23 [var5]  : true

allSequences.size()=206
-------------------------------------------
randoop.util.Randomness: total calls to random: 1117
Selected statement: A.k()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 13 sequences.
components: 13
randoop.util.Randomness: total calls to random: 1118
randoop.util.Randomness: total calls to random: 1119
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 1120
Selected statement: C.test()
Will query component set for objects of typeclass C
getActivesequencesThatYield: entering method, clazz=class C
getActivesequencesThatYield: returning 190 sequences.
components: 190
randoop.util.Randomness: total calls to random: 1121
randoop.util.Randomness: total calls to random: 1122
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 1123
Selected statement: C.test()
Will query component set for objects of typeclass C
getActivesequencesThatYield: entering method, clazz=class C
getActivesequencesThatYield: returning 190 sequences.
components: 190
randoop.util.Randomness: total calls to random: 1124
randoop.util.Randomness: total calls to random: 1125
Successfully created new unique sequence:var0 =  cons : C.<init>() : 
var1 =  method : B.m() : var0 
var2 =  method : B.k() : var0 
var3 =  method : B.m() : var0 
var4 =  method : C.test() : var0 
var5 =  method : C.test() : var0 
var6 =  method : B.k() : var0 
var7 =  method : C.test() : var0 
var8 =  method : C.test() : var0 
var9 =  method : C.test() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Adding sequence to active sequences of type class C
Sequence after execution: 
C var0 = new C();
// <NormalExecution object=object-of-type-C>;
int var1 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var2 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var3 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var4 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var5 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var6 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var7 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var8 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var9 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
<randoop.PrimValue, value=23 [var1]  : true
<randoop.PrimValue, value=42 [var2]  : true
<randoop.PrimValue, value=23 [var3]  : true
<randoop.PrimValue, value=23 [var4]  : true
<randoop.PrimValue, value=23 [var5]  : true
<randoop.PrimValue, value=42 [var6]  : true
<randoop.PrimValue, value=23 [var7]  : true
<randoop.PrimValue, value=23 [var8]  : true
<randoop.PrimValue, value=23 [var9]  : true

allSequences.size()=207
-------------------------------------------
randoop.util.Randomness: total calls to random: 1126
Selected statement: B.k()
Will query component set for objects of typeclass B
getActivesequencesThatYield: entering method, clazz=class B
getActivesequencesThatYield: returning 193 sequences.
components: 193
randoop.util.Randomness: total calls to random: 1127
randoop.util.Randomness: total calls to random: 1128
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 1129
Selected statement: C.test()
Will query component set for objects of typeclass C
getActivesequencesThatYield: entering method, clazz=class C
getActivesequencesThatYield: returning 191 sequences.
components: 191
randoop.util.Randomness: total calls to random: 1130
randoop.util.Randomness: total calls to random: 1131
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 1132
Selected statement: C.test()
Will query component set for objects of typeclass C
getActivesequencesThatYield: entering method, clazz=class C
getActivesequencesThatYield: returning 191 sequences.
components: 191
randoop.util.Randomness: total calls to random: 1133
randoop.util.Randomness: total calls to random: 1134
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 1135
Selected statement: A.k()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 13 sequences.
components: 13
randoop.util.Randomness: total calls to random: 1136
randoop.util.Randomness: total calls to random: 1137
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 1138
Selected statement: B.k()
Will query component set for objects of typeclass B
getActivesequencesThatYield: entering method, clazz=class B
getActivesequencesThatYield: returning 193 sequences.
components: 193
randoop.util.Randomness: total calls to random: 1139
randoop.util.Randomness: total calls to random: 1140
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 1141
Selected statement: B.m()
Will query component set for objects of typeclass B
getActivesequencesThatYield: entering method, clazz=class B
getActivesequencesThatYield: returning 191 sequences.
components: 191
randoop.util.Randomness: total calls to random: 1142
randoop.util.Randomness: total calls to random: 1143
Successfully created new unique sequence:var0 =  cons : C.<init>() : 
var1 =  method : C.test() : var0 
var2 =  method : C.test() : var0 
var3 =  method : B.m() : var0 
var4 =  method : C.test() : var0 
var5 =  method : B.k() : var0 
var6 =  method : B.m() : var0 
var7 =  method : C.test() : var0 
var8 =  method : B.k() : var0 
var9 =  method : C.test() : var0 
var10 =  method : B.k() : var0 
var11 =  method : B.m() : var0 
var12 =  method : B.m() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Making index 12 inactive (value is a primitive)
Adding sequence to active sequences of type class C
Sequence after execution: 
C var0 = new C();
// <NormalExecution object=object-of-type-C>;
int var1 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var2 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var3 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var4 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var5 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var6 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var7 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var8 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var9 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var10 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var11 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var12 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
<randoop.PrimValue, value=23 [var1]  : true
<randoop.PrimValue, value=23 [var2]  : true
<randoop.PrimValue, value=23 [var3]  : true
<randoop.PrimValue, value=23 [var4]  : true
<randoop.PrimValue, value=42 [var5]  : true
<randoop.PrimValue, value=23 [var6]  : true
<randoop.PrimValue, value=23 [var7]  : true
<randoop.PrimValue, value=42 [var8]  : true
<randoop.PrimValue, value=23 [var9]  : true
<randoop.PrimValue, value=42 [var10]  : true
<randoop.PrimValue, value=23 [var11]  : true
<randoop.PrimValue, value=23 [var12]  : true

allSequences.size()=208
-------------------------------------------
randoop.util.Randomness: total calls to random: 1144
Selected statement: B.m()
Will query component set for objects of typeclass B
getActivesequencesThatYield: entering method, clazz=class B
getActivesequencesThatYield: returning 192 sequences.
components: 192
randoop.util.Randomness: total calls to random: 1145
randoop.util.Randomness: total calls to random: 1146
Successfully created new unique sequence:var0 =  cons : C.<init>() : 
var1 =  method : C.test() : var0 
var2 =  method : C.test() : var0 
var3 =  method : C.test() : var0 
var4 =  method : C.test() : var0 
var5 =  method : B.m() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Adding sequence to active sequences of type class C
Sequence after execution: 
C var0 = new C();
// <NormalExecution object=object-of-type-C>;
int var1 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var2 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var3 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var4 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var5 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
<randoop.PrimValue, value=23 [var1]  : true
<randoop.PrimValue, value=23 [var2]  : true
<randoop.PrimValue, value=23 [var3]  : true
<randoop.PrimValue, value=23 [var4]  : true
<randoop.PrimValue, value=23 [var5]  : true

allSequences.size()=209
-------------------------------------------
randoop.util.Randomness: total calls to random: 1147
Selected statement: C.test()
Will query component set for objects of typeclass C
getActivesequencesThatYield: entering method, clazz=class C
getActivesequencesThatYield: returning 193 sequences.
components: 193
randoop.util.Randomness: total calls to random: 1148
randoop.util.Randomness: total calls to random: 1149
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 1150
Selected statement: A.k()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 13 sequences.
components: 13
randoop.util.Randomness: total calls to random: 1151
randoop.util.Randomness: total calls to random: 1152
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.k() : var0 
var2 =  method : A.k() : var0 
var3 =  method : A.k() : var0 
var4 =  method : A.k() : var0 
var5 =  method : A.k() : var0 
var6 =  method : A.k() : var0 
var7 =  method : A.k() : var0 
var8 =  method : A.k() : var0 
var9 =  method : A.k() : var0 
var10 =  method : A.k() : var0 
var11 =  method : A.k() : var0 
var12 =  method : A.k() : var0 
var13 =  method : A.k() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Making index 12 inactive (value is a primitive)
Making index 13 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
int var1 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var2 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var3 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var4 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var5 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var6 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var7 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var8 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var9 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var10 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var11 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var12 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var13 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
<randoop.PrimValue, value=23 [var1]  : true
<randoop.PrimValue, value=23 [var2]  : true
<randoop.PrimValue, value=23 [var3]  : true
<randoop.PrimValue, value=23 [var4]  : true
<randoop.PrimValue, value=23 [var5]  : true
<randoop.PrimValue, value=23 [var6]  : true
<randoop.PrimValue, value=23 [var7]  : true
<randoop.PrimValue, value=23 [var8]  : true
<randoop.PrimValue, value=23 [var9]  : true
<randoop.PrimValue, value=23 [var10]  : true
<randoop.PrimValue, value=23 [var11]  : true
<randoop.PrimValue, value=23 [var12]  : true
<randoop.PrimValue, value=23 [var13]  : true

allSequences.size()=210
-------------------------------------------
randoop.util.Randomness: total calls to random: 1153
Selected statement: B.k()
Will query component set for objects of typeclass B
getActivesequencesThatYield: entering method, clazz=class B
getActivesequencesThatYield: returning 195 sequences.
components: 195
randoop.util.Randomness: total calls to random: 1154
randoop.util.Randomness: total calls to random: 1155
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 1156
Selected statement: C.test()
Will query component set for objects of typeclass C
getActivesequencesThatYield: entering method, clazz=class C
getActivesequencesThatYield: returning 193 sequences.
components: 193
randoop.util.Randomness: total calls to random: 1157
randoop.util.Randomness: total calls to random: 1158
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 1159
Selected statement: B.m()
Will query component set for objects of typeclass B
getActivesequencesThatYield: entering method, clazz=class B
getActivesequencesThatYield: returning 193 sequences.
components: 193
randoop.util.Randomness: total calls to random: 1160
randoop.util.Randomness: total calls to random: 1161
Successfully created new unique sequence:var0 =  cons : C.<init>() : 
var1 =  method : C.test() : var0 
var2 =  method : C.test() : var0 
var3 =  method : B.m() : var0 
var4 =  method : C.test() : var0 
var5 =  method : B.k() : var0 
var6 =  method : B.m() : var0 
var7 =  method : C.test() : var0 
var8 =  method : B.k() : var0 
var9 =  method : C.test() : var0 
var10 =  method : B.m() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Adding sequence to active sequences of type class C
Sequence after execution: 
C var0 = new C();
// <NormalExecution object=object-of-type-C>;
int var1 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var2 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var3 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var4 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var5 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var6 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var7 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var8 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var9 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var10 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
<randoop.PrimValue, value=23 [var1]  : true
<randoop.PrimValue, value=23 [var2]  : true
<randoop.PrimValue, value=23 [var3]  : true
<randoop.PrimValue, value=23 [var4]  : true
<randoop.PrimValue, value=42 [var5]  : true
<randoop.PrimValue, value=23 [var6]  : true
<randoop.PrimValue, value=23 [var7]  : true
<randoop.PrimValue, value=42 [var8]  : true
<randoop.PrimValue, value=23 [var9]  : true
<randoop.PrimValue, value=23 [var10]  : true

allSequences.size()=211
-------------------------------------------
randoop.util.Randomness: total calls to random: 1162
Selected statement: B.m()
Will query component set for objects of typeclass B
getActivesequencesThatYield: entering method, clazz=class B
getActivesequencesThatYield: returning 194 sequences.
components: 194
randoop.util.Randomness: total calls to random: 1163
randoop.util.Randomness: total calls to random: 1164
Successfully created new unique sequence:var0 =  cons : C.<init>() : 
var1 =  method : B.m() : var0 
var2 =  method : B.m() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Adding sequence to active sequences of type class C
Sequence after execution: 
C var0 = new C();
// <NormalExecution object=object-of-type-C>;
int var1 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var2 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
<randoop.PrimValue, value=23 [var1]  : true
<randoop.PrimValue, value=23 [var2]  : true

allSequences.size()=212
-------------------------------------------
randoop.util.Randomness: total calls to random: 1165
Selected statement: B.k()
Will query component set for objects of typeclass B
getActivesequencesThatYield: entering method, clazz=class B
getActivesequencesThatYield: returning 197 sequences.
components: 197
randoop.util.Randomness: total calls to random: 1166
randoop.util.Randomness: total calls to random: 1167
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 1168
Selected statement: C.test()
Will query component set for objects of typeclass C
getActivesequencesThatYield: entering method, clazz=class C
getActivesequencesThatYield: returning 195 sequences.
components: 195
randoop.util.Randomness: total calls to random: 1169
randoop.util.Randomness: total calls to random: 1170
Successfully created new unique sequence:var0 =  cons : C.<init>() : 
var1 =  method : B.m() : var0 
var2 =  method : B.k() : var0 
var3 =  method : B.m() : var0 
var4 =  method : C.test() : var0 
var5 =  method : C.test() : var0 
var6 =  method : B.m() : var0 
var7 =  method : C.test() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Adding sequence to active sequences of type class C
Sequence after execution: 
C var0 = new C();
// <NormalExecution object=object-of-type-C>;
int var1 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var2 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var3 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var4 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var5 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var6 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var7 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
<randoop.PrimValue, value=23 [var1]  : true
<randoop.PrimValue, value=42 [var2]  : true
<randoop.PrimValue, value=23 [var3]  : true
<randoop.PrimValue, value=23 [var4]  : true
<randoop.PrimValue, value=23 [var5]  : true
<randoop.PrimValue, value=23 [var6]  : true
<randoop.PrimValue, value=23 [var7]  : true

allSequences.size()=213
-------------------------------------------
randoop.util.Randomness: total calls to random: 1171
Selected statement: C.test()
Will query component set for objects of typeclass C
getActivesequencesThatYield: entering method, clazz=class C
getActivesequencesThatYield: returning 196 sequences.
components: 196
randoop.util.Randomness: total calls to random: 1172
randoop.util.Randomness: total calls to random: 1173
Successfully created new unique sequence:var0 =  cons : C.<init>() : 
var1 =  method : C.test() : var0 
var2 =  method : C.test() : var0 
var3 =  method : B.m() : var0 
var4 =  method : C.test() : var0 
var5 =  method : B.k() : var0 
var6 =  method : B.m() : var0 
var7 =  method : C.test() : var0 
var8 =  method : B.k() : var0 
var9 =  method : C.test() : var0 
var10 =  method : B.k() : var0 
var11 =  method : C.test() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Adding sequence to active sequences of type class C
Sequence after execution: 
C var0 = new C();
// <NormalExecution object=object-of-type-C>;
int var1 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var2 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var3 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var4 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var5 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var6 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var7 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var8 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var9 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var10 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var11 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
<randoop.PrimValue, value=23 [var1]  : true
<randoop.PrimValue, value=23 [var2]  : true
<randoop.PrimValue, value=23 [var3]  : true
<randoop.PrimValue, value=23 [var4]  : true
<randoop.PrimValue, value=42 [var5]  : true
<randoop.PrimValue, value=23 [var6]  : true
<randoop.PrimValue, value=23 [var7]  : true
<randoop.PrimValue, value=42 [var8]  : true
<randoop.PrimValue, value=23 [var9]  : true
<randoop.PrimValue, value=42 [var10]  : true
<randoop.PrimValue, value=23 [var11]  : true

allSequences.size()=214
-------------------------------------------
randoop.util.Randomness: total calls to random: 1174
Selected statement: C.test()
Will query component set for objects of typeclass C
getActivesequencesThatYield: entering method, clazz=class C
getActivesequencesThatYield: returning 197 sequences.
components: 197
randoop.util.Randomness: total calls to random: 1175
randoop.util.Randomness: total calls to random: 1176
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 1177
Selected statement: B.m()
Will query component set for objects of typeclass B
getActivesequencesThatYield: entering method, clazz=class B
getActivesequencesThatYield: returning 197 sequences.
components: 197
randoop.util.Randomness: total calls to random: 1178
randoop.util.Randomness: total calls to random: 1179
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 1180
Selected statement: B.k()
Will query component set for objects of typeclass B
getActivesequencesThatYield: entering method, clazz=class B
getActivesequencesThatYield: returning 199 sequences.
components: 199
randoop.util.Randomness: total calls to random: 1181
randoop.util.Randomness: total calls to random: 1182
Successfully created new unique sequence:var0 =  cons : C.<init>() : 
var1 =  method : C.test() : var0 
var2 =  method : C.test() : var0 
var3 =  method : C.test() : var0 
var4 =  method : B.m() : var0 
var5 =  method : C.test() : var0 
var6 =  method : C.test() : var0 
var7 =  method : B.k() : var0 
var8 =  method : B.k() : var0 
var9 =  method : B.m() : var0 
var10 =  method : B.k() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Adding sequence to active sequences of type class C
Sequence after execution: 
C var0 = new C();
// <NormalExecution object=object-of-type-C>;
int var1 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var2 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var3 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var4 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var5 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var6 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var7 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var8 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var9 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var10 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
<randoop.PrimValue, value=23 [var1]  : true
<randoop.PrimValue, value=23 [var2]  : true
<randoop.PrimValue, value=23 [var3]  : true
<randoop.PrimValue, value=23 [var4]  : true
<randoop.PrimValue, value=23 [var5]  : true
<randoop.PrimValue, value=23 [var6]  : true
<randoop.PrimValue, value=42 [var7]  : true
<randoop.PrimValue, value=42 [var8]  : true
<randoop.PrimValue, value=23 [var9]  : true
<randoop.PrimValue, value=42 [var10]  : true

allSequences.size()=215
-------------------------------------------
randoop.util.Randomness: total calls to random: 1183
Selected statement: B.k()
Will query component set for objects of typeclass B
getActivesequencesThatYield: entering method, clazz=class B
getActivesequencesThatYield: returning 200 sequences.
components: 200
randoop.util.Randomness: total calls to random: 1184
randoop.util.Randomness: total calls to random: 1185
Successfully created new unique sequence:var0 =  cons : C.<init>() : 
var1 =  method : C.test() : var0 
var2 =  method : C.test() : var0 
var3 =  method : B.m() : var0 
var4 =  method : C.test() : var0 
var5 =  method : C.test() : var0 
var6 =  method : C.test() : var0 
var7 =  method : B.k() : var0 
var8 =  method : B.k() : var0 
var9 =  method : B.k() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Adding sequence to active sequences of type class C
Sequence after execution: 
C var0 = new C();
// <NormalExecution object=object-of-type-C>;
int var1 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var2 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var3 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var4 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var5 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var6 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var7 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var8 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var9 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
<randoop.PrimValue, value=23 [var1]  : true
<randoop.PrimValue, value=23 [var2]  : true
<randoop.PrimValue, value=23 [var3]  : true
<randoop.PrimValue, value=23 [var4]  : true
<randoop.PrimValue, value=23 [var5]  : true
<randoop.PrimValue, value=23 [var6]  : true
<randoop.PrimValue, value=42 [var7]  : true
<randoop.PrimValue, value=42 [var8]  : true
<randoop.PrimValue, value=42 [var9]  : true

allSequences.size()=216
-------------------------------------------
randoop.util.Randomness: total calls to random: 1186
Selected statement: A.k()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 14 sequences.
components: 14
randoop.util.Randomness: total calls to random: 1187
randoop.util.Randomness: total calls to random: 1188
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 1189
Selected statement: A.k()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 14 sequences.
components: 14
randoop.util.Randomness: total calls to random: 1190
randoop.util.Randomness: total calls to random: 1191
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 1192
Selected statement: C.test()
Will query component set for objects of typeclass C
getActivesequencesThatYield: entering method, clazz=class C
getActivesequencesThatYield: returning 199 sequences.
components: 199
randoop.util.Randomness: total calls to random: 1193
randoop.util.Randomness: total calls to random: 1194
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 1195
Selected statement: B.m()
Will query component set for objects of typeclass B
getActivesequencesThatYield: entering method, clazz=class B
getActivesequencesThatYield: returning 199 sequences.
components: 199
randoop.util.Randomness: total calls to random: 1196
randoop.util.Randomness: total calls to random: 1197
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 1198
Selected statement: B.m()
Will query component set for objects of typeclass B
getActivesequencesThatYield: entering method, clazz=class B
getActivesequencesThatYield: returning 199 sequences.
components: 199
randoop.util.Randomness: total calls to random: 1199
randoop.util.Randomness: total calls to random: 1200
Successfully created new unique sequence:var0 =  cons : C.<init>() : 
var1 =  method : C.test() : var0 
var2 =  method : C.test() : var0 
var3 =  method : B.m() : var0 
var4 =  method : C.test() : var0 
var5 =  method : B.k() : var0 
var6 =  method : B.m() : var0 
var7 =  method : C.test() : var0 
var8 =  method : B.m() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Adding sequence to active sequences of type class C
Sequence after execution: 
C var0 = new C();
// <NormalExecution object=object-of-type-C>;
int var1 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var2 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var3 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var4 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var5 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var6 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var7 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var8 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
<randoop.PrimValue, value=23 [var1]  : true
<randoop.PrimValue, value=23 [var2]  : true
<randoop.PrimValue, value=23 [var3]  : true
<randoop.PrimValue, value=23 [var4]  : true
<randoop.PrimValue, value=42 [var5]  : true
<randoop.PrimValue, value=23 [var6]  : true
<randoop.PrimValue, value=23 [var7]  : true
<randoop.PrimValue, value=23 [var8]  : true

allSequences.size()=217
-------------------------------------------
randoop.util.Randomness: total calls to random: 1201
Selected statement: A.k()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 14 sequences.
components: 14
randoop.util.Randomness: total calls to random: 1202
randoop.util.Randomness: total calls to random: 1203
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 1204
Selected statement: C.test()
Will query component set for objects of typeclass C
getActivesequencesThatYield: entering method, clazz=class C
getActivesequencesThatYield: returning 200 sequences.
components: 200
randoop.util.Randomness: total calls to random: 1205
randoop.util.Randomness: total calls to random: 1206
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 1207
Selected statement: B.k()
Will query component set for objects of typeclass B
getActivesequencesThatYield: entering method, clazz=class B
getActivesequencesThatYield: returning 202 sequences.
components: 202
randoop.util.Randomness: total calls to random: 1208
randoop.util.Randomness: total calls to random: 1209
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 1210
Selected statement: B.k()
Will query component set for objects of typeclass B
getActivesequencesThatYield: entering method, clazz=class B
getActivesequencesThatYield: returning 202 sequences.
components: 202
randoop.util.Randomness: total calls to random: 1211
randoop.util.Randomness: total calls to random: 1212
Successfully created new unique sequence:var0 =  cons : C.<init>() : 
var1 =  method : C.test() : var0 
var2 =  method : C.test() : var0 
var3 =  method : C.test() : var0 
var4 =  method : B.m() : var0 
var5 =  method : C.test() : var0 
var6 =  method : B.k() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Adding sequence to active sequences of type class C
Sequence after execution: 
C var0 = new C();
// <NormalExecution object=object-of-type-C>;
int var1 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var2 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var3 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var4 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var5 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var6 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
<randoop.PrimValue, value=23 [var1]  : true
<randoop.PrimValue, value=23 [var2]  : true
<randoop.PrimValue, value=23 [var3]  : true
<randoop.PrimValue, value=23 [var4]  : true
<randoop.PrimValue, value=23 [var5]  : true
<randoop.PrimValue, value=42 [var6]  : true

allSequences.size()=218
-------------------------------------------
randoop.util.Randomness: total calls to random: 1213
Selected statement: A.k()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 14 sequences.
components: 14
randoop.util.Randomness: total calls to random: 1214
randoop.util.Randomness: total calls to random: 1215
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 1216
Selected statement: C.test()
Will query component set for objects of typeclass C
getActivesequencesThatYield: entering method, clazz=class C
getActivesequencesThatYield: returning 201 sequences.
components: 201
randoop.util.Randomness: total calls to random: 1217
randoop.util.Randomness: total calls to random: 1218
Successfully created new unique sequence:var0 =  cons : C.<init>() : 
var1 =  method : C.test() : var0 
var2 =  method : C.test() : var0 
var3 =  method : C.test() : var0 
var4 =  method : B.m() : var0 
var5 =  method : C.test() : var0 
var6 =  method : C.test() : var0 
var7 =  method : B.k() : var0 
var8 =  method : B.k() : var0 
var9 =  method : B.k() : var0 
var10 =  method : C.test() : var0 
var11 =  method : C.test() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Adding sequence to active sequences of type class C
Sequence after execution: 
C var0 = new C();
// <NormalExecution object=object-of-type-C>;
int var1 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var2 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var3 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var4 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var5 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var6 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var7 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var8 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var9 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var10 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var11 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
<randoop.PrimValue, value=23 [var1]  : true
<randoop.PrimValue, value=23 [var2]  : true
<randoop.PrimValue, value=23 [var3]  : true
<randoop.PrimValue, value=23 [var4]  : true
<randoop.PrimValue, value=23 [var5]  : true
<randoop.PrimValue, value=23 [var6]  : true
<randoop.PrimValue, value=42 [var7]  : true
<randoop.PrimValue, value=42 [var8]  : true
<randoop.PrimValue, value=42 [var9]  : true
<randoop.PrimValue, value=23 [var10]  : true
<randoop.PrimValue, value=23 [var11]  : true

allSequences.size()=219
-------------------------------------------
randoop.util.Randomness: total calls to random: 1219
Selected statement: C.test()
Will query component set for objects of typeclass C
getActivesequencesThatYield: entering method, clazz=class C
getActivesequencesThatYield: returning 202 sequences.
components: 202
randoop.util.Randomness: total calls to random: 1220
randoop.util.Randomness: total calls to random: 1221
Successfully created new unique sequence:var0 =  cons : C.<init>() : 
var1 =  method : C.test() : var0 
var2 =  method : C.test() : var0 
var3 =  method : B.m() : var0 
var4 =  method : C.test() : var0 
var5 =  method : B.k() : var0 
var6 =  method : C.test() : var0 
var7 =  method : C.test() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Adding sequence to active sequences of type class C
Sequence after execution: 
C var0 = new C();
// <NormalExecution object=object-of-type-C>;
int var1 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var2 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var3 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var4 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var5 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var6 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var7 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
<randoop.PrimValue, value=23 [var1]  : true
<randoop.PrimValue, value=23 [var2]  : true
<randoop.PrimValue, value=23 [var3]  : true
<randoop.PrimValue, value=23 [var4]  : true
<randoop.PrimValue, value=42 [var5]  : true
<randoop.PrimValue, value=23 [var6]  : true
<randoop.PrimValue, value=23 [var7]  : true

allSequences.size()=220
-------------------------------------------
randoop.util.Randomness: total calls to random: 1222
Selected statement: C.test()
Will query component set for objects of typeclass C
getActivesequencesThatYield: entering method, clazz=class C
getActivesequencesThatYield: returning 203 sequences.
components: 203
randoop.util.Randomness: total calls to random: 1223
randoop.util.Randomness: total calls to random: 1224
Successfully created new unique sequence:var0 =  cons : C.<init>() : 
var1 =  method : B.m() : var0 
var2 =  method : B.k() : var0 
var3 =  method : B.m() : var0 
var4 =  method : B.k() : var0 
var5 =  method : C.test() : var0 
var6 =  method : B.m() : var0 
var7 =  method : B.m() : var0 
var8 =  method : C.test() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Adding sequence to active sequences of type class C
Sequence after execution: 
C var0 = new C();
// <NormalExecution object=object-of-type-C>;
int var1 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var2 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var3 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var4 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var5 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var6 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var7 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var8 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
<randoop.PrimValue, value=23 [var1]  : true
<randoop.PrimValue, value=42 [var2]  : true
<randoop.PrimValue, value=23 [var3]  : true
<randoop.PrimValue, value=42 [var4]  : true
<randoop.PrimValue, value=23 [var5]  : true
<randoop.PrimValue, value=23 [var6]  : true
<randoop.PrimValue, value=23 [var7]  : true
<randoop.PrimValue, value=23 [var8]  : true

allSequences.size()=221
-------------------------------------------
randoop.util.Randomness: total calls to random: 1225
Selected statement: C.test()
Will query component set for objects of typeclass C
getActivesequencesThatYield: entering method, clazz=class C
getActivesequencesThatYield: returning 204 sequences.
components: 204
randoop.util.Randomness: total calls to random: 1226
randoop.util.Randomness: total calls to random: 1227
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 1228
Selected statement: B.m()
Will query component set for objects of typeclass B
getActivesequencesThatYield: entering method, clazz=class B
getActivesequencesThatYield: returning 204 sequences.
components: 204
randoop.util.Randomness: total calls to random: 1229
randoop.util.Randomness: total calls to random: 1230
Successfully created new unique sequence:var0 =  cons : C.<init>() : 
var1 =  method : B.m() : var0 
var2 =  method : B.k() : var0 
var3 =  method : B.m() : var0 
var4 =  method : C.test() : var0 
var5 =  method : B.m() : var0 
var6 =  method : B.m() : var0 
var7 =  method : B.k() : var0 
var8 =  method : C.test() : var0 
var9 =  method : C.test() : var0 
var10 =  method : B.k() : var0 
var11 =  method : B.m() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Adding sequence to active sequences of type class C
Sequence after execution: 
C var0 = new C();
// <NormalExecution object=object-of-type-C>;
int var1 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var2 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var3 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var4 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var5 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var6 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var7 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var8 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var9 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var10 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var11 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
<randoop.PrimValue, value=23 [var1]  : true
<randoop.PrimValue, value=42 [var2]  : true
<randoop.PrimValue, value=23 [var3]  : true
<randoop.PrimValue, value=23 [var4]  : true
<randoop.PrimValue, value=23 [var5]  : true
<randoop.PrimValue, value=23 [var6]  : true
<randoop.PrimValue, value=42 [var7]  : true
<randoop.PrimValue, value=23 [var8]  : true
<randoop.PrimValue, value=23 [var9]  : true
<randoop.PrimValue, value=42 [var10]  : true
<randoop.PrimValue, value=23 [var11]  : true

allSequences.size()=222
-------------------------------------------
randoop.util.Randomness: total calls to random: 1231
Selected statement: C.test()
Will query component set for objects of typeclass C
getActivesequencesThatYield: entering method, clazz=class C
getActivesequencesThatYield: returning 205 sequences.
components: 205
randoop.util.Randomness: total calls to random: 1232
randoop.util.Randomness: total calls to random: 1233
Successfully created new unique sequence:var0 =  cons : C.<init>() : 
var1 =  method : B.m() : var0 
var2 =  method : B.k() : var0 
var3 =  method : B.m() : var0 
var4 =  method : C.test() : var0 
var5 =  method : B.m() : var0 
var6 =  method : B.m() : var0 
var7 =  method : B.k() : var0 
var8 =  method : B.k() : var0 
var9 =  method : B.m() : var0 
var10 =  method : B.k() : var0 
var11 =  method : C.test() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Adding sequence to active sequences of type class C
Sequence after execution: 
C var0 = new C();
// <NormalExecution object=object-of-type-C>;
int var1 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var2 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var3 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var4 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var5 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var6 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var7 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var8 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var9 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var10 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var11 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
<randoop.PrimValue, value=23 [var1]  : true
<randoop.PrimValue, value=42 [var2]  : true
<randoop.PrimValue, value=23 [var3]  : true
<randoop.PrimValue, value=23 [var4]  : true
<randoop.PrimValue, value=23 [var5]  : true
<randoop.PrimValue, value=23 [var6]  : true
<randoop.PrimValue, value=42 [var7]  : true
<randoop.PrimValue, value=42 [var8]  : true
<randoop.PrimValue, value=23 [var9]  : true
<randoop.PrimValue, value=42 [var10]  : true
<randoop.PrimValue, value=23 [var11]  : true

allSequences.size()=223
-------------------------------------------
randoop.util.Randomness: total calls to random: 1234
Selected statement: B.m()
Will query component set for objects of typeclass B
getActivesequencesThatYield: entering method, clazz=class B
getActivesequencesThatYield: returning 206 sequences.
components: 206
randoop.util.Randomness: total calls to random: 1235
randoop.util.Randomness: total calls to random: 1236
Successfully created new unique sequence:var0 =  cons : C.<init>() : 
var1 =  method : B.m() : var0 
var2 =  method : B.k() : var0 
var3 =  method : B.m() : var0 
var4 =  method : C.test() : var0 
var5 =  method : B.m() : var0 
var6 =  method : B.m() : var0 
var7 =  method : C.test() : var0 
var8 =  method : C.test() : var0 
var9 =  method : B.m() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Adding sequence to active sequences of type class C
Sequence after execution: 
C var0 = new C();
// <NormalExecution object=object-of-type-C>;
int var1 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var2 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var3 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var4 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var5 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var6 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var7 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var8 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var9 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
<randoop.PrimValue, value=23 [var1]  : true
<randoop.PrimValue, value=42 [var2]  : true
<randoop.PrimValue, value=23 [var3]  : true
<randoop.PrimValue, value=23 [var4]  : true
<randoop.PrimValue, value=23 [var5]  : true
<randoop.PrimValue, value=23 [var6]  : true
<randoop.PrimValue, value=23 [var7]  : true
<randoop.PrimValue, value=23 [var8]  : true
<randoop.PrimValue, value=23 [var9]  : true

allSequences.size()=224
-------------------------------------------
randoop.util.Randomness: total calls to random: 1237
Selected statement: B.m()
Will query component set for objects of typeclass B
getActivesequencesThatYield: entering method, clazz=class B
getActivesequencesThatYield: returning 207 sequences.
components: 207
randoop.util.Randomness: total calls to random: 1238
randoop.util.Randomness: total calls to random: 1239
Successfully created new unique sequence:var0 =  cons : C.<init>() : 
var1 =  method : B.m() : var0 
var2 =  method : B.k() : var0 
var3 =  method : C.test() : var0 
var4 =  method : C.test() : var0 
var5 =  method : B.m() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Adding sequence to active sequences of type class C
Sequence after execution: 
C var0 = new C();
// <NormalExecution object=object-of-type-C>;
int var1 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var2 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var3 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var4 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var5 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
<randoop.PrimValue, value=23 [var1]  : true
<randoop.PrimValue, value=42 [var2]  : true
<randoop.PrimValue, value=23 [var3]  : true
<randoop.PrimValue, value=23 [var4]  : true
<randoop.PrimValue, value=23 [var5]  : true

allSequences.size()=225
-------------------------------------------
randoop.util.Randomness: total calls to random: 1240
Selected statement: C.test()
Will query component set for objects of typeclass C
getActivesequencesThatYield: entering method, clazz=class C
getActivesequencesThatYield: returning 208 sequences.
components: 208
randoop.util.Randomness: total calls to random: 1241
randoop.util.Randomness: total calls to random: 1242
Successfully created new unique sequence:var0 =  cons : C.<init>() : 
var1 =  method : B.m() : var0 
var2 =  method : B.k() : var0 
var3 =  method : B.m() : var0 
var4 =  method : C.test() : var0 
var5 =  method : B.m() : var0 
var6 =  method : B.m() : var0 
var7 =  method : B.k() : var0 
var8 =  method : C.test() : var0 
var9 =  method : C.test() : var0 
var10 =  method : B.k() : var0 
var11 =  method : B.m() : var0 
var12 =  method : C.test() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Making index 12 inactive (value is a primitive)
Adding sequence to active sequences of type class C
Sequence after execution: 
C var0 = new C();
// <NormalExecution object=object-of-type-C>;
int var1 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var2 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var3 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var4 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var5 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var6 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var7 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var8 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var9 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var10 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var11 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var12 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
<randoop.PrimValue, value=23 [var1]  : true
<randoop.PrimValue, value=42 [var2]  : true
<randoop.PrimValue, value=23 [var3]  : true
<randoop.PrimValue, value=23 [var4]  : true
<randoop.PrimValue, value=23 [var5]  : true
<randoop.PrimValue, value=23 [var6]  : true
<randoop.PrimValue, value=42 [var7]  : true
<randoop.PrimValue, value=23 [var8]  : true
<randoop.PrimValue, value=23 [var9]  : true
<randoop.PrimValue, value=42 [var10]  : true
<randoop.PrimValue, value=23 [var11]  : true
<randoop.PrimValue, value=23 [var12]  : true

allSequences.size()=226
-------------------------------------------
randoop.util.Randomness: total calls to random: 1243
Selected statement: A.k()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 14 sequences.
components: 14
randoop.util.Randomness: total calls to random: 1244
randoop.util.Randomness: total calls to random: 1245
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 1246
Selected statement: B.m()
Will query component set for objects of typeclass B
getActivesequencesThatYield: entering method, clazz=class B
getActivesequencesThatYield: returning 209 sequences.
components: 209
randoop.util.Randomness: total calls to random: 1247
randoop.util.Randomness: total calls to random: 1248
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 1249
Selected statement: B.k()
Will query component set for objects of typeclass B
getActivesequencesThatYield: entering method, clazz=class B
getActivesequencesThatYield: returning 211 sequences.
components: 211
randoop.util.Randomness: total calls to random: 1250
randoop.util.Randomness: total calls to random: 1251
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 1252
Selected statement: B.k()
Will query component set for objects of typeclass B
getActivesequencesThatYield: entering method, clazz=class B
getActivesequencesThatYield: returning 211 sequences.
components: 211
randoop.util.Randomness: total calls to random: 1253
randoop.util.Randomness: total calls to random: 1254
Successfully created new unique sequence:var0 =  cons : C.<init>() : 
var1 =  method : C.test() : var0 
var2 =  method : C.test() : var0 
var3 =  method : B.m() : var0 
var4 =  method : C.test() : var0 
var5 =  method : B.k() : var0 
var6 =  method : B.m() : var0 
var7 =  method : B.k() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Adding sequence to active sequences of type class C
Sequence after execution: 
C var0 = new C();
// <NormalExecution object=object-of-type-C>;
int var1 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var2 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var3 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var4 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var5 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var6 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var7 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
<randoop.PrimValue, value=23 [var1]  : true
<randoop.PrimValue, value=23 [var2]  : true
<randoop.PrimValue, value=23 [var3]  : true
<randoop.PrimValue, value=23 [var4]  : true
<randoop.PrimValue, value=42 [var5]  : true
<randoop.PrimValue, value=23 [var6]  : true
<randoop.PrimValue, value=42 [var7]  : true

allSequences.size()=227
-------------------------------------------
randoop.util.Randomness: total calls to random: 1255
Selected statement: B.m()
Will query component set for objects of typeclass B
getActivesequencesThatYield: entering method, clazz=class B
getActivesequencesThatYield: returning 210 sequences.
components: 210
randoop.util.Randomness: total calls to random: 1256
randoop.util.Randomness: total calls to random: 1257
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 1258
Selected statement: B.k()
Will query component set for objects of typeclass B
getActivesequencesThatYield: entering method, clazz=class B
getActivesequencesThatYield: returning 212 sequences.
components: 212
randoop.util.Randomness: total calls to random: 1259
randoop.util.Randomness: total calls to random: 1260
Successfully created new unique sequence:var0 =  cons : C.<init>() : 
var1 =  method : C.test() : var0 
var2 =  method : C.test() : var0 
var3 =  method : C.test() : var0 
var4 =  method : C.test() : var0 
var5 =  method : B.k() : var0 
var6 =  method : B.k() : var0 
var7 =  method : B.k() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Adding sequence to active sequences of type class C
Sequence after execution: 
C var0 = new C();
// <NormalExecution object=object-of-type-C>;
int var1 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var2 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var3 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var4 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var5 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var6 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var7 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
<randoop.PrimValue, value=23 [var1]  : true
<randoop.PrimValue, value=23 [var2]  : true
<randoop.PrimValue, value=23 [var3]  : true
<randoop.PrimValue, value=23 [var4]  : true
<randoop.PrimValue, value=42 [var5]  : true
<randoop.PrimValue, value=42 [var6]  : true
<randoop.PrimValue, value=42 [var7]  : true

allSequences.size()=228
-------------------------------------------
randoop.util.Randomness: total calls to random: 1261
Selected statement: C.test()
Will query component set for objects of typeclass C
getActivesequencesThatYield: entering method, clazz=class C
getActivesequencesThatYield: returning 211 sequences.
components: 211
randoop.util.Randomness: total calls to random: 1262
randoop.util.Randomness: total calls to random: 1263
Successfully created new unique sequence:var0 =  cons : C.<init>() : 
var1 =  method : C.test() : var0 
var2 =  method : C.test() : var0 
var3 =  method : B.m() : var0 
var4 =  method : C.test() : var0 
var5 =  method : B.k() : var0 
var6 =  method : B.m() : var0 
var7 =  method : B.k() : var0 
var8 =  method : C.test() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Adding sequence to active sequences of type class C
Sequence after execution: 
C var0 = new C();
// <NormalExecution object=object-of-type-C>;
int var1 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var2 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var3 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var4 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var5 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var6 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var7 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var8 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
<randoop.PrimValue, value=23 [var1]  : true
<randoop.PrimValue, value=23 [var2]  : true
<randoop.PrimValue, value=23 [var3]  : true
<randoop.PrimValue, value=23 [var4]  : true
<randoop.PrimValue, value=42 [var5]  : true
<randoop.PrimValue, value=23 [var6]  : true
<randoop.PrimValue, value=42 [var7]  : true
<randoop.PrimValue, value=23 [var8]  : true

allSequences.size()=229
-------------------------------------------
randoop.util.Randomness: total calls to random: 1264
Selected statement: A.k()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 14 sequences.
components: 14
randoop.util.Randomness: total calls to random: 1265
randoop.util.Randomness: total calls to random: 1266
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.k() : var0 
var2 =  method : A.k() : var0 
var3 =  method : A.k() : var0 
var4 =  method : A.k() : var0 
var5 =  method : A.k() : var0 
var6 =  method : A.k() : var0 
var7 =  method : A.k() : var0 
var8 =  method : A.k() : var0 
var9 =  method : A.k() : var0 
var10 =  method : A.k() : var0 
var11 =  method : A.k() : var0 
var12 =  method : A.k() : var0 
var13 =  method : A.k() : var0 
var14 =  method : A.k() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Making index 12 inactive (value is a primitive)
Making index 13 inactive (value is a primitive)
Making index 14 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
int var1 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var2 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var3 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var4 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var5 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var6 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var7 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var8 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var9 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var10 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var11 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var12 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var13 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var14 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
<randoop.PrimValue, value=23 [var1]  : true
<randoop.PrimValue, value=23 [var2]  : true
<randoop.PrimValue, value=23 [var3]  : true
<randoop.PrimValue, value=23 [var4]  : true
<randoop.PrimValue, value=23 [var5]  : true
<randoop.PrimValue, value=23 [var6]  : true
<randoop.PrimValue, value=23 [var7]  : true
<randoop.PrimValue, value=23 [var8]  : true
<randoop.PrimValue, value=23 [var9]  : true
<randoop.PrimValue, value=23 [var10]  : true
<randoop.PrimValue, value=23 [var11]  : true
<randoop.PrimValue, value=23 [var12]  : true
<randoop.PrimValue, value=23 [var13]  : true
<randoop.PrimValue, value=23 [var14]  : true

allSequences.size()=230
-------------------------------------------
randoop.util.Randomness: total calls to random: 1267
Selected statement: B.m()
Will query component set for objects of typeclass B
getActivesequencesThatYield: entering method, clazz=class B
getActivesequencesThatYield: returning 212 sequences.
components: 212
randoop.util.Randomness: total calls to random: 1268
randoop.util.Randomness: total calls to random: 1269
Successfully created new unique sequence:var0 =  cons : C.<init>() : 
var1 =  method : B.m() : var0 
var2 =  method : B.k() : var0 
var3 =  method : B.k() : var0 
var4 =  method : B.m() : var0 
var5 =  method : C.test() : var0 
var6 =  method : B.m() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Adding sequence to active sequences of type class C
Sequence after execution: 
C var0 = new C();
// <NormalExecution object=object-of-type-C>;
int var1 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var2 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var3 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var4 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var5 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var6 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
<randoop.PrimValue, value=23 [var1]  : true
<randoop.PrimValue, value=42 [var2]  : true
<randoop.PrimValue, value=42 [var3]  : true
<randoop.PrimValue, value=23 [var4]  : true
<randoop.PrimValue, value=23 [var5]  : true
<randoop.PrimValue, value=23 [var6]  : true

allSequences.size()=231
-------------------------------------------
randoop.util.Randomness: total calls to random: 1270
Selected statement: C.test()
Will query component set for objects of typeclass C
getActivesequencesThatYield: entering method, clazz=class C
getActivesequencesThatYield: returning 213 sequences.
components: 213
randoop.util.Randomness: total calls to random: 1271
randoop.util.Randomness: total calls to random: 1272
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 1273
Selected statement: B.m()
Will query component set for objects of typeclass B
getActivesequencesThatYield: entering method, clazz=class B
getActivesequencesThatYield: returning 213 sequences.
components: 213
randoop.util.Randomness: total calls to random: 1274
randoop.util.Randomness: total calls to random: 1275
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 1276
Selected statement: C.test()
Will query component set for objects of typeclass C
getActivesequencesThatYield: entering method, clazz=class C
getActivesequencesThatYield: returning 213 sequences.
components: 213
randoop.util.Randomness: total calls to random: 1277
randoop.util.Randomness: total calls to random: 1278
Successfully created new unique sequence:var0 =  cons : C.<init>() : 
var1 =  method : B.m() : var0 
var2 =  method : B.k() : var0 
var3 =  method : B.k() : var0 
var4 =  method : B.m() : var0 
var5 =  method : B.m() : var0 
var6 =  method : C.test() : var0 
var7 =  method : B.m() : var0 
var8 =  method : B.m() : var0 
var9 =  method : C.test() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Adding sequence to active sequences of type class C
Sequence after execution: 
C var0 = new C();
// <NormalExecution object=object-of-type-C>;
int var1 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var2 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var3 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var4 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var5 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var6 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var7 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var8 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var9 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
<randoop.PrimValue, value=23 [var1]  : true
<randoop.PrimValue, value=42 [var2]  : true
<randoop.PrimValue, value=42 [var3]  : true
<randoop.PrimValue, value=23 [var4]  : true
<randoop.PrimValue, value=23 [var5]  : true
<randoop.PrimValue, value=23 [var6]  : true
<randoop.PrimValue, value=23 [var7]  : true
<randoop.PrimValue, value=23 [var8]  : true
<randoop.PrimValue, value=23 [var9]  : true

allSequences.size()=232
-------------------------------------------
randoop.util.Randomness: total calls to random: 1279
Selected statement: A.k()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 15 sequences.
components: 15
randoop.util.Randomness: total calls to random: 1280
randoop.util.Randomness: total calls to random: 1281
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 1282
Selected statement: B.k()
Will query component set for objects of typeclass B
getActivesequencesThatYield: entering method, clazz=class B
getActivesequencesThatYield: returning 216 sequences.
components: 216
randoop.util.Randomness: total calls to random: 1283
randoop.util.Randomness: total calls to random: 1284
Successfully created new unique sequence:var0 =  cons : C.<init>() : 
var1 =  method : C.test() : var0 
var2 =  method : C.test() : var0 
var3 =  method : C.test() : var0 
var4 =  method : B.m() : var0 
var5 =  method : C.test() : var0 
var6 =  method : C.test() : var0 
var7 =  method : B.k() : var0 
var8 =  method : B.k() : var0 
var9 =  method : B.k() : var0 
var10 =  method : B.k() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Adding sequence to active sequences of type class C
Sequence after execution: 
C var0 = new C();
// <NormalExecution object=object-of-type-C>;
int var1 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var2 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var3 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var4 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var5 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var6 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var7 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var8 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var9 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var10 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
<randoop.PrimValue, value=23 [var1]  : true
<randoop.PrimValue, value=23 [var2]  : true
<randoop.PrimValue, value=23 [var3]  : true
<randoop.PrimValue, value=23 [var4]  : true
<randoop.PrimValue, value=23 [var5]  : true
<randoop.PrimValue, value=23 [var6]  : true
<randoop.PrimValue, value=42 [var7]  : true
<randoop.PrimValue, value=42 [var8]  : true
<randoop.PrimValue, value=42 [var9]  : true
<randoop.PrimValue, value=42 [var10]  : true

allSequences.size()=233
-------------------------------------------
randoop.util.Randomness: total calls to random: 1285
Selected statement: B.k()
Will query component set for objects of typeclass B
getActivesequencesThatYield: entering method, clazz=class B
getActivesequencesThatYield: returning 217 sequences.
components: 217
randoop.util.Randomness: total calls to random: 1286
randoop.util.Randomness: total calls to random: 1287
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 1288
Selected statement: A.k()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 15 sequences.
components: 15
randoop.util.Randomness: total calls to random: 1289
randoop.util.Randomness: total calls to random: 1290
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 1291
Selected statement: B.m()
Will query component set for objects of typeclass B
getActivesequencesThatYield: entering method, clazz=class B
getActivesequencesThatYield: returning 215 sequences.
components: 215
randoop.util.Randomness: total calls to random: 1292
randoop.util.Randomness: total calls to random: 1293
Successfully created new unique sequence:var0 =  cons : C.<init>() : 
var1 =  method : C.test() : var0 
var2 =  method : C.test() : var0 
var3 =  method : B.m() : var0 
var4 =  method : C.test() : var0 
var5 =  method : B.k() : var0 
var6 =  method : B.m() : var0 
var7 =  method : C.test() : var0 
var8 =  method : B.k() : var0 
var9 =  method : C.test() : var0 
var10 =  method : B.m() : var0 
var11 =  method : B.m() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Adding sequence to active sequences of type class C
Sequence after execution: 
C var0 = new C();
// <NormalExecution object=object-of-type-C>;
int var1 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var2 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var3 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var4 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var5 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var6 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var7 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var8 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var9 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var10 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var11 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
<randoop.PrimValue, value=23 [var1]  : true
<randoop.PrimValue, value=23 [var2]  : true
<randoop.PrimValue, value=23 [var3]  : true
<randoop.PrimValue, value=23 [var4]  : true
<randoop.PrimValue, value=42 [var5]  : true
<randoop.PrimValue, value=23 [var6]  : true
<randoop.PrimValue, value=23 [var7]  : true
<randoop.PrimValue, value=42 [var8]  : true
<randoop.PrimValue, value=23 [var9]  : true
<randoop.PrimValue, value=23 [var10]  : true
<randoop.PrimValue, value=23 [var11]  : true

allSequences.size()=234
-------------------------------------------
randoop.util.Randomness: total calls to random: 1294
Selected statement: B.m()
Will query component set for objects of typeclass B
getActivesequencesThatYield: entering method, clazz=class B
getActivesequencesThatYield: returning 216 sequences.
components: 216
randoop.util.Randomness: total calls to random: 1295
randoop.util.Randomness: total calls to random: 1296
Successfully created new unique sequence:var0 =  cons : C.<init>() : 
var1 =  method : B.m() : var0 
var2 =  method : B.k() : var0 
var3 =  method : B.m() : var0 
var4 =  method : C.test() : var0 
var5 =  method : B.m() : var0 
var6 =  method : B.m() : var0 
var7 =  method : B.k() : var0 
var8 =  method : C.test() : var0 
var9 =  method : B.k() : var0 
var10 =  method : B.m() : var0 
var11 =  method : B.m() : var0 
var12 =  method : B.m() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Making index 12 inactive (value is a primitive)
Adding sequence to active sequences of type class C
Sequence after execution: 
C var0 = new C();
// <NormalExecution object=object-of-type-C>;
int var1 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var2 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var3 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var4 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var5 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var6 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var7 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var8 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var9 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var10 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var11 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var12 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
<randoop.PrimValue, value=23 [var1]  : true
<randoop.PrimValue, value=42 [var2]  : true
<randoop.PrimValue, value=23 [var3]  : true
<randoop.PrimValue, value=23 [var4]  : true
<randoop.PrimValue, value=23 [var5]  : true
<randoop.PrimValue, value=23 [var6]  : true
<randoop.PrimValue, value=42 [var7]  : true
<randoop.PrimValue, value=23 [var8]  : true
<randoop.PrimValue, value=42 [var9]  : true
<randoop.PrimValue, value=23 [var10]  : true
<randoop.PrimValue, value=23 [var11]  : true
<randoop.PrimValue, value=23 [var12]  : true

allSequences.size()=235
-------------------------------------------
randoop.util.Randomness: total calls to random: 1297
Selected statement: B.k()
Will query component set for objects of typeclass B
getActivesequencesThatYield: entering method, clazz=class B
getActivesequencesThatYield: returning 219 sequences.
components: 219
randoop.util.Randomness: total calls to random: 1298
randoop.util.Randomness: total calls to random: 1299
Successfully created new unique sequence:var0 =  cons : C.<init>() : 
var1 =  method : C.test() : var0 
var2 =  method : C.test() : var0 
var3 =  method : B.m() : var0 
var4 =  method : C.test() : var0 
var5 =  method : B.k() : var0 
var6 =  method : B.m() : var0 
var7 =  method : C.test() : var0 
var8 =  method : B.k() : var0 
var9 =  method : C.test() : var0 
var10 =  method : B.k() : var0 
var11 =  method : B.m() : var0 
var12 =  method : B.m() : var0 
var13 =  method : B.k() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Making index 12 inactive (value is a primitive)
Making index 13 inactive (value is a primitive)
Adding sequence to active sequences of type class C
Sequence after execution: 
C var0 = new C();
// <NormalExecution object=object-of-type-C>;
int var1 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var2 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var3 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var4 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var5 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var6 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var7 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var8 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var9 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var10 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var11 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var12 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var13 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
<randoop.PrimValue, value=23 [var1]  : true
<randoop.PrimValue, value=23 [var2]  : true
<randoop.PrimValue, value=23 [var3]  : true
<randoop.PrimValue, value=23 [var4]  : true
<randoop.PrimValue, value=42 [var5]  : true
<randoop.PrimValue, value=23 [var6]  : true
<randoop.PrimValue, value=23 [var7]  : true
<randoop.PrimValue, value=42 [var8]  : true
<randoop.PrimValue, value=23 [var9]  : true
<randoop.PrimValue, value=42 [var10]  : true
<randoop.PrimValue, value=23 [var11]  : true
<randoop.PrimValue, value=23 [var12]  : true
<randoop.PrimValue, value=42 [var13]  : true

allSequences.size()=236
-------------------------------------------
randoop.util.Randomness: total calls to random: 1300
Selected statement: A.k()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 15 sequences.
components: 15
randoop.util.Randomness: total calls to random: 1301
randoop.util.Randomness: total calls to random: 1302
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 1303
Selected statement: B.k()
Will query component set for objects of typeclass B
getActivesequencesThatYield: entering method, clazz=class B
getActivesequencesThatYield: returning 220 sequences.
components: 220
randoop.util.Randomness: total calls to random: 1304
randoop.util.Randomness: total calls to random: 1305
Successfully created new unique sequence:var0 =  cons : C.<init>() : 
var1 =  method : B.m() : var0 
var2 =  method : B.k() : var0 
var3 =  method : B.m() : var0 
var4 =  method : C.test() : var0 
var5 =  method : B.m() : var0 
var6 =  method : B.m() : var0 
var7 =  method : B.k() : var0 
var8 =  method : C.test() : var0 
var9 =  method : B.k() : var0 
var10 =  method : B.m() : var0 
var11 =  method : B.m() : var0 
var12 =  method : B.m() : var0 
var13 =  method : B.k() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Making index 12 inactive (value is a primitive)
Making index 13 inactive (value is a primitive)
Adding sequence to active sequences of type class C
Sequence after execution: 
C var0 = new C();
// <NormalExecution object=object-of-type-C>;
int var1 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var2 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var3 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var4 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var5 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var6 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var7 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var8 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var9 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var10 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var11 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var12 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var13 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
<randoop.PrimValue, value=23 [var1]  : true
<randoop.PrimValue, value=42 [var2]  : true
<randoop.PrimValue, value=23 [var3]  : true
<randoop.PrimValue, value=23 [var4]  : true
<randoop.PrimValue, value=23 [var5]  : true
<randoop.PrimValue, value=23 [var6]  : true
<randoop.PrimValue, value=42 [var7]  : true
<randoop.PrimValue, value=23 [var8]  : true
<randoop.PrimValue, value=42 [var9]  : true
<randoop.PrimValue, value=23 [var10]  : true
<randoop.PrimValue, value=23 [var11]  : true
<randoop.PrimValue, value=23 [var12]  : true
<randoop.PrimValue, value=42 [var13]  : true

allSequences.size()=237
-------------------------------------------
randoop.util.Randomness: total calls to random: 1306
Selected statement: B.m()
Will query component set for objects of typeclass B
getActivesequencesThatYield: entering method, clazz=class B
getActivesequencesThatYield: returning 219 sequences.
components: 219
randoop.util.Randomness: total calls to random: 1307
randoop.util.Randomness: total calls to random: 1308
Successfully created new unique sequence:var0 =  cons : C.<init>() : 
var1 =  method : B.m() : var0 
var2 =  method : B.k() : var0 
var3 =  method : B.k() : var0 
var4 =  method : B.m() : var0 
var5 =  method : C.test() : var0 
var6 =  method : B.m() : var0 
var7 =  method : B.m() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Adding sequence to active sequences of type class C
Sequence after execution: 
C var0 = new C();
// <NormalExecution object=object-of-type-C>;
int var1 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var2 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var3 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var4 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var5 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var6 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var7 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
<randoop.PrimValue, value=23 [var1]  : true
<randoop.PrimValue, value=42 [var2]  : true
<randoop.PrimValue, value=42 [var3]  : true
<randoop.PrimValue, value=23 [var4]  : true
<randoop.PrimValue, value=23 [var5]  : true
<randoop.PrimValue, value=23 [var6]  : true
<randoop.PrimValue, value=23 [var7]  : true

allSequences.size()=238
-------------------------------------------
randoop.util.Randomness: total calls to random: 1309
Selected statement: B.k()
Will query component set for objects of typeclass B
getActivesequencesThatYield: entering method, clazz=class B
getActivesequencesThatYield: returning 222 sequences.
components: 222
randoop.util.Randomness: total calls to random: 1310
randoop.util.Randomness: total calls to random: 1311
Successfully created new unique sequence:var0 =  cons : C.<init>() : 
var1 =  method : B.m() : var0 
var2 =  method : B.k() : var0 
var3 =  method : C.test() : var0 
var4 =  method : C.test() : var0 
var5 =  method : C.test() : var0 
var6 =  method : C.test() : var0 
var7 =  method : B.k() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Adding sequence to active sequences of type class C
Sequence after execution: 
C var0 = new C();
// <NormalExecution object=object-of-type-C>;
int var1 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var2 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var3 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var4 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var5 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var6 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var7 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
<randoop.PrimValue, value=23 [var1]  : true
<randoop.PrimValue, value=42 [var2]  : true
<randoop.PrimValue, value=23 [var3]  : true
<randoop.PrimValue, value=23 [var4]  : true
<randoop.PrimValue, value=23 [var5]  : true
<randoop.PrimValue, value=23 [var6]  : true
<randoop.PrimValue, value=42 [var7]  : true

allSequences.size()=239
-------------------------------------------
randoop.util.Randomness: total calls to random: 1312
Selected statement: B.k()
Will query component set for objects of typeclass B
getActivesequencesThatYield: entering method, clazz=class B
getActivesequencesThatYield: returning 223 sequences.
components: 223
randoop.util.Randomness: total calls to random: 1313
randoop.util.Randomness: total calls to random: 1314
Successfully created new unique sequence:var0 =  cons : C.<init>() : 
var1 =  method : B.m() : var0 
var2 =  method : B.k() : var0 
var3 =  method : C.test() : var0 
var4 =  method : C.test() : var0 
var5 =  method : B.k() : var0 
var6 =  method : B.k() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Adding sequence to active sequences of type class C
Sequence after execution: 
C var0 = new C();
// <NormalExecution object=object-of-type-C>;
int var1 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var2 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var3 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var4 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var5 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var6 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
<randoop.PrimValue, value=23 [var1]  : true
<randoop.PrimValue, value=42 [var2]  : true
<randoop.PrimValue, value=23 [var3]  : true
<randoop.PrimValue, value=23 [var4]  : true
<randoop.PrimValue, value=42 [var5]  : true
<randoop.PrimValue, value=42 [var6]  : true

allSequences.size()=240
-------------------------------------------
randoop.util.Randomness: total calls to random: 1315
Selected statement: B.m()
Will query component set for objects of typeclass B
getActivesequencesThatYield: entering method, clazz=class B
getActivesequencesThatYield: returning 222 sequences.
components: 222
randoop.util.Randomness: total calls to random: 1316
randoop.util.Randomness: total calls to random: 1317
Successfully created new unique sequence:var0 =  cons : C.<init>() : 
var1 =  method : B.m() : var0 
var2 =  method : B.k() : var0 
var3 =  method : B.m() : var0 
var4 =  method : C.test() : var0 
var5 =  method : B.m() : var0 
var6 =  method : B.m() : var0 
var7 =  method : B.k() : var0 
var8 =  method : C.test() : var0 
var9 =  method : C.test() : var0 
var10 =  method : B.k() : var0 
var11 =  method : B.m() : var0 
var12 =  method : C.test() : var0 
var13 =  method : B.m() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Making index 12 inactive (value is a primitive)
Making index 13 inactive (value is a primitive)
Adding sequence to active sequences of type class C
Sequence after execution: 
C var0 = new C();
// <NormalExecution object=object-of-type-C>;
int var1 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var2 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var3 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var4 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var5 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var6 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var7 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var8 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var9 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var10 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var11 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var12 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var13 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
<randoop.PrimValue, value=23 [var1]  : true
<randoop.PrimValue, value=42 [var2]  : true
<randoop.PrimValue, value=23 [var3]  : true
<randoop.PrimValue, value=23 [var4]  : true
<randoop.PrimValue, value=23 [var5]  : true
<randoop.PrimValue, value=23 [var6]  : true
<randoop.PrimValue, value=42 [var7]  : true
<randoop.PrimValue, value=23 [var8]  : true
<randoop.PrimValue, value=23 [var9]  : true
<randoop.PrimValue, value=42 [var10]  : true
<randoop.PrimValue, value=23 [var11]  : true
<randoop.PrimValue, value=23 [var12]  : true
<randoop.PrimValue, value=23 [var13]  : true

allSequences.size()=241
-------------------------------------------
randoop.util.Randomness: total calls to random: 1318
Selected statement: B.k()
Will query component set for objects of typeclass B
getActivesequencesThatYield: entering method, clazz=class B
getActivesequencesThatYield: returning 225 sequences.
components: 225
randoop.util.Randomness: total calls to random: 1319
randoop.util.Randomness: total calls to random: 1320
Successfully created new unique sequence:var0 =  cons : C.<init>() : 
var1 =  method : B.m() : var0 
var2 =  method : B.k() : var0 
var3 =  method : B.k() : var0 
var4 =  method : B.m() : var0 
var5 =  method : B.m() : var0 
var6 =  method : C.test() : var0 
var7 =  method : B.m() : var0 
var8 =  method : B.m() : var0 
var9 =  method : C.test() : var0 
var10 =  method : B.k() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Adding sequence to active sequences of type class C
Sequence after execution: 
C var0 = new C();
// <NormalExecution object=object-of-type-C>;
int var1 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var2 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var3 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var4 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var5 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var6 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var7 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var8 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var9 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var10 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
<randoop.PrimValue, value=23 [var1]  : true
<randoop.PrimValue, value=42 [var2]  : true
<randoop.PrimValue, value=42 [var3]  : true
<randoop.PrimValue, value=23 [var4]  : true
<randoop.PrimValue, value=23 [var5]  : true
<randoop.PrimValue, value=23 [var6]  : true
<randoop.PrimValue, value=23 [var7]  : true
<randoop.PrimValue, value=23 [var8]  : true
<randoop.PrimValue, value=23 [var9]  : true
<randoop.PrimValue, value=42 [var10]  : true

allSequences.size()=242
-------------------------------------------
randoop.util.Randomness: total calls to random: 1321
Selected statement: A.k()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 15 sequences.
components: 15
randoop.util.Randomness: total calls to random: 1322
randoop.util.Randomness: total calls to random: 1323
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 1324
Selected statement: A.k()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 15 sequences.
components: 15
randoop.util.Randomness: total calls to random: 1325
randoop.util.Randomness: total calls to random: 1326
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 1327
Selected statement: A.k()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 15 sequences.
components: 15
randoop.util.Randomness: total calls to random: 1328
randoop.util.Randomness: total calls to random: 1329
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 1330
Selected statement: A.k()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 15 sequences.
components: 15
randoop.util.Randomness: total calls to random: 1331
randoop.util.Randomness: total calls to random: 1332
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.k() : var0 
var2 =  method : A.k() : var0 
var3 =  method : A.k() : var0 
var4 =  method : A.k() : var0 
var5 =  method : A.k() : var0 
var6 =  method : A.k() : var0 
var7 =  method : A.k() : var0 
var8 =  method : A.k() : var0 
var9 =  method : A.k() : var0 
var10 =  method : A.k() : var0 
var11 =  method : A.k() : var0 
var12 =  method : A.k() : var0 
var13 =  method : A.k() : var0 
var14 =  method : A.k() : var0 
var15 =  method : A.k() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Making index 12 inactive (value is a primitive)
Making index 13 inactive (value is a primitive)
Making index 14 inactive (value is a primitive)
Making index 15 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
int var1 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var2 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var3 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var4 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var5 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var6 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var7 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var8 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var9 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var10 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var11 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var12 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var13 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var14 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var15 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
<randoop.PrimValue, value=23 [var1]  : true
<randoop.PrimValue, value=23 [var2]  : true
<randoop.PrimValue, value=23 [var3]  : true
<randoop.PrimValue, value=23 [var4]  : true
<randoop.PrimValue, value=23 [var5]  : true
<randoop.PrimValue, value=23 [var6]  : true
<randoop.PrimValue, value=23 [var7]  : true
<randoop.PrimValue, value=23 [var8]  : true
<randoop.PrimValue, value=23 [var9]  : true
<randoop.PrimValue, value=23 [var10]  : true
<randoop.PrimValue, value=23 [var11]  : true
<randoop.PrimValue, value=23 [var12]  : true
<randoop.PrimValue, value=23 [var13]  : true
<randoop.PrimValue, value=23 [var14]  : true
<randoop.PrimValue, value=23 [var15]  : true

allSequences.size()=243
-------------------------------------------
randoop.util.Randomness: total calls to random: 1333
Selected statement: C.test()
Will query component set for objects of typeclass C
getActivesequencesThatYield: entering method, clazz=class C
getActivesequencesThatYield: returning 224 sequences.
components: 224
randoop.util.Randomness: total calls to random: 1334
randoop.util.Randomness: total calls to random: 1335
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 1336
Selected statement: B.k()
Will query component set for objects of typeclass B
getActivesequencesThatYield: entering method, clazz=class B
getActivesequencesThatYield: returning 226 sequences.
components: 226
randoop.util.Randomness: total calls to random: 1337
randoop.util.Randomness: total calls to random: 1338
Successfully created new unique sequence:var0 =  cons : C.<init>() : 
var1 =  method : B.m() : var0 
var2 =  method : B.k() : var0 
var3 =  method : B.m() : var0 
var4 =  method : C.test() : var0 
var5 =  method : B.m() : var0 
var6 =  method : B.m() : var0 
var7 =  method : B.k() : var0 
var8 =  method : C.test() : var0 
var9 =  method : C.test() : var0 
var10 =  method : B.k() : var0 
var11 =  method : B.k() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Adding sequence to active sequences of type class C
Sequence after execution: 
C var0 = new C();
// <NormalExecution object=object-of-type-C>;
int var1 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var2 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var3 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var4 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var5 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var6 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var7 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var8 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var9 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var10 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var11 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
<randoop.PrimValue, value=23 [var1]  : true
<randoop.PrimValue, value=42 [var2]  : true
<randoop.PrimValue, value=23 [var3]  : true
<randoop.PrimValue, value=23 [var4]  : true
<randoop.PrimValue, value=23 [var5]  : true
<randoop.PrimValue, value=23 [var6]  : true
<randoop.PrimValue, value=42 [var7]  : true
<randoop.PrimValue, value=23 [var8]  : true
<randoop.PrimValue, value=23 [var9]  : true
<randoop.PrimValue, value=42 [var10]  : true
<randoop.PrimValue, value=42 [var11]  : true

allSequences.size()=244
-------------------------------------------
randoop.util.Randomness: total calls to random: 1339
Selected statement: A.k()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 16 sequences.
components: 16
randoop.util.Randomness: total calls to random: 1340
randoop.util.Randomness: total calls to random: 1341
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 1342
Selected statement: A.k()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 16 sequences.
components: 16
randoop.util.Randomness: total calls to random: 1343
randoop.util.Randomness: total calls to random: 1344
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 1345
Selected statement: C.test()
Will query component set for objects of typeclass C
getActivesequencesThatYield: entering method, clazz=class C
getActivesequencesThatYield: returning 225 sequences.
components: 225
randoop.util.Randomness: total calls to random: 1346
randoop.util.Randomness: total calls to random: 1347
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 1348
Selected statement: B.k()
Will query component set for objects of typeclass B
getActivesequencesThatYield: entering method, clazz=class B
getActivesequencesThatYield: returning 227 sequences.
components: 227
randoop.util.Randomness: total calls to random: 1349
randoop.util.Randomness: total calls to random: 1350
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 1351
Selected statement: A.k()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 16 sequences.
components: 16
randoop.util.Randomness: total calls to random: 1352
randoop.util.Randomness: total calls to random: 1353
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 1354
Selected statement: A.k()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 16 sequences.
components: 16
randoop.util.Randomness: total calls to random: 1355
randoop.util.Randomness: total calls to random: 1356
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 1357
Selected statement: C.test()
Will query component set for objects of typeclass C
getActivesequencesThatYield: entering method, clazz=class C
getActivesequencesThatYield: returning 225 sequences.
components: 225
randoop.util.Randomness: total calls to random: 1358
randoop.util.Randomness: total calls to random: 1359
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 1360
Selected statement: B.k()
Will query component set for objects of typeclass B
getActivesequencesThatYield: entering method, clazz=class B
getActivesequencesThatYield: returning 227 sequences.
components: 227
randoop.util.Randomness: total calls to random: 1361
randoop.util.Randomness: total calls to random: 1362
Successfully created new unique sequence:var0 =  cons : C.<init>() : 
var1 =  method : B.m() : var0 
var2 =  method : B.k() : var0 
var3 =  method : B.k() : var0 
var4 =  method : B.m() : var0 
var5 =  method : B.m() : var0 
var6 =  method : C.test() : var0 
var7 =  method : B.m() : var0 
var8 =  method : B.m() : var0 
var9 =  method : B.k() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Adding sequence to active sequences of type class C
Sequence after execution: 
C var0 = new C();
// <NormalExecution object=object-of-type-C>;
int var1 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var2 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var3 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var4 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var5 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var6 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var7 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var8 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var9 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
<randoop.PrimValue, value=23 [var1]  : true
<randoop.PrimValue, value=42 [var2]  : true
<randoop.PrimValue, value=42 [var3]  : true
<randoop.PrimValue, value=23 [var4]  : true
<randoop.PrimValue, value=23 [var5]  : true
<randoop.PrimValue, value=23 [var6]  : true
<randoop.PrimValue, value=23 [var7]  : true
<randoop.PrimValue, value=23 [var8]  : true
<randoop.PrimValue, value=42 [var9]  : true

allSequences.size()=245
-------------------------------------------
randoop.util.Randomness: total calls to random: 1363
Selected statement: B.m()
Will query component set for objects of typeclass B
getActivesequencesThatYield: entering method, clazz=class B
getActivesequencesThatYield: returning 226 sequences.
components: 226
randoop.util.Randomness: total calls to random: 1364
randoop.util.Randomness: total calls to random: 1365
Successfully created new unique sequence:var0 =  cons : C.<init>() : 
var1 =  method : B.m() : var0 
var2 =  method : B.k() : var0 
var3 =  method : C.test() : var0 
var4 =  method : B.k() : var0 
var5 =  method : B.m() : var0 
var6 =  method : C.test() : var0 
var7 =  method : B.m() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Adding sequence to active sequences of type class C
Sequence after execution: 
C var0 = new C();
// <NormalExecution object=object-of-type-C>;
int var1 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var2 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var3 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var4 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var5 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var6 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var7 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
<randoop.PrimValue, value=23 [var1]  : true
<randoop.PrimValue, value=42 [var2]  : true
<randoop.PrimValue, value=23 [var3]  : true
<randoop.PrimValue, value=42 [var4]  : true
<randoop.PrimValue, value=23 [var5]  : true
<randoop.PrimValue, value=23 [var6]  : true
<randoop.PrimValue, value=23 [var7]  : true

allSequences.size()=246
-------------------------------------------
randoop.util.Randomness: total calls to random: 1366
Selected statement: A.k()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 16 sequences.
components: 16
randoop.util.Randomness: total calls to random: 1367
randoop.util.Randomness: total calls to random: 1368
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 1369
Selected statement: A.k()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 16 sequences.
components: 16
randoop.util.Randomness: total calls to random: 1370
randoop.util.Randomness: total calls to random: 1371
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 1372
Selected statement: B.m()
Will query component set for objects of typeclass B
getActivesequencesThatYield: entering method, clazz=class B
getActivesequencesThatYield: returning 227 sequences.
components: 227
randoop.util.Randomness: total calls to random: 1373
randoop.util.Randomness: total calls to random: 1374
Successfully created new unique sequence:var0 =  cons : C.<init>() : 
var1 =  method : B.m() : var0 
var2 =  method : B.k() : var0 
var3 =  method : C.test() : var0 
var4 =  method : C.test() : var0 
var5 =  method : B.m() : var0 
var6 =  method : B.m() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Adding sequence to active sequences of type class C
Sequence after execution: 
C var0 = new C();
// <NormalExecution object=object-of-type-C>;
int var1 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var2 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var3 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var4 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var5 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var6 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
<randoop.PrimValue, value=23 [var1]  : true
<randoop.PrimValue, value=42 [var2]  : true
<randoop.PrimValue, value=23 [var3]  : true
<randoop.PrimValue, value=23 [var4]  : true
<randoop.PrimValue, value=23 [var5]  : true
<randoop.PrimValue, value=23 [var6]  : true

allSequences.size()=247
-------------------------------------------
randoop.util.Randomness: total calls to random: 1375
Selected statement: A.k()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 16 sequences.
components: 16
randoop.util.Randomness: total calls to random: 1376
randoop.util.Randomness: total calls to random: 1377
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 1378
Selected statement: C.test()
Will query component set for objects of typeclass C
getActivesequencesThatYield: entering method, clazz=class C
getActivesequencesThatYield: returning 228 sequences.
components: 228
randoop.util.Randomness: total calls to random: 1379
randoop.util.Randomness: total calls to random: 1380
Successfully created new unique sequence:var0 =  cons : C.<init>() : 
var1 =  method : C.test() : var0 
var2 =  method : C.test() : var0 
var3 =  method : C.test() : var0 
var4 =  method : B.m() : var0 
var5 =  method : C.test() : var0 
var6 =  method : C.test() : var0 
var7 =  method : C.test() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Adding sequence to active sequences of type class C
Sequence after execution: 
C var0 = new C();
// <NormalExecution object=object-of-type-C>;
int var1 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var2 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var3 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var4 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var5 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var6 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var7 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
<randoop.PrimValue, value=23 [var1]  : true
<randoop.PrimValue, value=23 [var2]  : true
<randoop.PrimValue, value=23 [var3]  : true
<randoop.PrimValue, value=23 [var4]  : true
<randoop.PrimValue, value=23 [var5]  : true
<randoop.PrimValue, value=23 [var6]  : true
<randoop.PrimValue, value=23 [var7]  : true

allSequences.size()=248
-------------------------------------------
randoop.util.Randomness: total calls to random: 1381
Selected statement: A.k()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 16 sequences.
components: 16
randoop.util.Randomness: total calls to random: 1382
randoop.util.Randomness: total calls to random: 1383
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 1384
Selected statement: B.k()
Will query component set for objects of typeclass B
getActivesequencesThatYield: entering method, clazz=class B
getActivesequencesThatYield: returning 231 sequences.
components: 231
randoop.util.Randomness: total calls to random: 1385
randoop.util.Randomness: total calls to random: 1386
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 1387
Selected statement: A.k()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 16 sequences.
components: 16
randoop.util.Randomness: total calls to random: 1388
randoop.util.Randomness: total calls to random: 1389
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 1390
Selected statement: C.test()
Will query component set for objects of typeclass C
getActivesequencesThatYield: entering method, clazz=class C
getActivesequencesThatYield: returning 229 sequences.
components: 229
randoop.util.Randomness: total calls to random: 1391
randoop.util.Randomness: total calls to random: 1392
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 1393
Selected statement: B.m()
Will query component set for objects of typeclass B
getActivesequencesThatYield: entering method, clazz=class B
getActivesequencesThatYield: returning 229 sequences.
components: 229
randoop.util.Randomness: total calls to random: 1394
randoop.util.Randomness: total calls to random: 1395
Successfully created new unique sequence:var0 =  cons : C.<init>() : 
var1 =  method : C.test() : var0 
var2 =  method : C.test() : var0 
var3 =  method : B.m() : var0 
var4 =  method : C.test() : var0 
var5 =  method : B.k() : var0 
var6 =  method : B.k() : var0 
var7 =  method : C.test() : var0 
var8 =  method : B.m() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Adding sequence to active sequences of type class C
Sequence after execution: 
C var0 = new C();
// <NormalExecution object=object-of-type-C>;
int var1 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var2 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var3 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var4 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var5 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var6 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var7 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var8 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
<randoop.PrimValue, value=23 [var1]  : true
<randoop.PrimValue, value=23 [var2]  : true
<randoop.PrimValue, value=23 [var3]  : true
<randoop.PrimValue, value=23 [var4]  : true
<randoop.PrimValue, value=42 [var5]  : true
<randoop.PrimValue, value=42 [var6]  : true
<randoop.PrimValue, value=23 [var7]  : true
<randoop.PrimValue, value=23 [var8]  : true

allSequences.size()=249
-------------------------------------------
randoop.util.Randomness: total calls to random: 1396
Selected statement: A.k()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 16 sequences.
components: 16
randoop.util.Randomness: total calls to random: 1397
randoop.util.Randomness: total calls to random: 1398
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 1399
Selected statement: B.k()
Will query component set for objects of typeclass B
getActivesequencesThatYield: entering method, clazz=class B
getActivesequencesThatYield: returning 232 sequences.
components: 232
randoop.util.Randomness: total calls to random: 1400
randoop.util.Randomness: total calls to random: 1401
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 1402
Selected statement: B.k()
Will query component set for objects of typeclass B
getActivesequencesThatYield: entering method, clazz=class B
getActivesequencesThatYield: returning 232 sequences.
components: 232
randoop.util.Randomness: total calls to random: 1403
randoop.util.Randomness: total calls to random: 1404
Successfully created new unique sequence:var0 =  cons : C.<init>() : 
var1 =  method : C.test() : var0 
var2 =  method : C.test() : var0 
var3 =  method : C.test() : var0 
var4 =  method : B.m() : var0 
var5 =  method : C.test() : var0 
var6 =  method : C.test() : var0 
var7 =  method : B.k() : var0 
var8 =  method : B.k() : var0 
var9 =  method : B.k() : var0 
var10 =  method : C.test() : var0 
var11 =  method : C.test() : var0 
var12 =  method : B.k() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Making index 12 inactive (value is a primitive)
Adding sequence to active sequences of type class C
Sequence after execution: 
C var0 = new C();
// <NormalExecution object=object-of-type-C>;
int var1 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var2 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var3 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var4 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var5 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var6 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var7 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var8 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var9 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var10 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var11 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var12 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
<randoop.PrimValue, value=23 [var1]  : true
<randoop.PrimValue, value=23 [var2]  : true
<randoop.PrimValue, value=23 [var3]  : true
<randoop.PrimValue, value=23 [var4]  : true
<randoop.PrimValue, value=23 [var5]  : true
<randoop.PrimValue, value=23 [var6]  : true
<randoop.PrimValue, value=42 [var7]  : true
<randoop.PrimValue, value=42 [var8]  : true
<randoop.PrimValue, value=42 [var9]  : true
<randoop.PrimValue, value=23 [var10]  : true
<randoop.PrimValue, value=23 [var11]  : true
<randoop.PrimValue, value=42 [var12]  : true

allSequences.size()=250
-------------------------------------------
randoop.util.Randomness: total calls to random: 1405
Selected statement: B.m()
Will query component set for objects of typeclass B
getActivesequencesThatYield: entering method, clazz=class B
getActivesequencesThatYield: returning 231 sequences.
components: 231
randoop.util.Randomness: total calls to random: 1406
randoop.util.Randomness: total calls to random: 1407
Successfully created new unique sequence:var0 =  cons : C.<init>() : 
var1 =  method : B.k() : var0 
var2 =  method : B.m() : var0 
var3 =  method : B.m() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Adding sequence to active sequences of type class C
Sequence after execution: 
C var0 = new C();
// <NormalExecution object=object-of-type-C>;
int var1 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var2 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var3 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
<randoop.PrimValue, value=42 [var1]  : true
<randoop.PrimValue, value=23 [var2]  : true
<randoop.PrimValue, value=23 [var3]  : true

allSequences.size()=251
-------------------------------------------
randoop.util.Randomness: total calls to random: 1408
Selected statement: B.k()
Will query component set for objects of typeclass B
getActivesequencesThatYield: entering method, clazz=class B
getActivesequencesThatYield: returning 234 sequences.
components: 234
randoop.util.Randomness: total calls to random: 1409
randoop.util.Randomness: total calls to random: 1410
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 1411
Selected statement: A.k()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 16 sequences.
components: 16
randoop.util.Randomness: total calls to random: 1412
randoop.util.Randomness: total calls to random: 1413
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.k() : var0 
var2 =  method : A.k() : var0 
var3 =  method : A.k() : var0 
var4 =  method : A.k() : var0 
var5 =  method : A.k() : var0 
var6 =  method : A.k() : var0 
var7 =  method : A.k() : var0 
var8 =  method : A.k() : var0 
var9 =  method : A.k() : var0 
var10 =  method : A.k() : var0 
var11 =  method : A.k() : var0 
var12 =  method : A.k() : var0 
var13 =  method : A.k() : var0 
var14 =  method : A.k() : var0 
var15 =  method : A.k() : var0 
var16 =  method : A.k() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Making index 12 inactive (value is a primitive)
Making index 13 inactive (value is a primitive)
Making index 14 inactive (value is a primitive)
Making index 15 inactive (value is a primitive)
Making index 16 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
int var1 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var2 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var3 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var4 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var5 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var6 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var7 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var8 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var9 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var10 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var11 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var12 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var13 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var14 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var15 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var16 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
<randoop.PrimValue, value=23 [var1]  : true
<randoop.PrimValue, value=23 [var2]  : true
<randoop.PrimValue, value=23 [var3]  : true
<randoop.PrimValue, value=23 [var4]  : true
<randoop.PrimValue, value=23 [var5]  : true
<randoop.PrimValue, value=23 [var6]  : true
<randoop.PrimValue, value=23 [var7]  : true
<randoop.PrimValue, value=23 [var8]  : true
<randoop.PrimValue, value=23 [var9]  : true
<randoop.PrimValue, value=23 [var10]  : true
<randoop.PrimValue, value=23 [var11]  : true
<randoop.PrimValue, value=23 [var12]  : true
<randoop.PrimValue, value=23 [var13]  : true
<randoop.PrimValue, value=23 [var14]  : true
<randoop.PrimValue, value=23 [var15]  : true
<randoop.PrimValue, value=23 [var16]  : true

allSequences.size()=252
-------------------------------------------
randoop.util.Randomness: total calls to random: 1414
Selected statement: B.m()
Will query component set for objects of typeclass B
getActivesequencesThatYield: entering method, clazz=class B
getActivesequencesThatYield: returning 232 sequences.
components: 232
randoop.util.Randomness: total calls to random: 1415
randoop.util.Randomness: total calls to random: 1416
Successfully created new unique sequence:var0 =  cons : C.<init>() : 
var1 =  method : C.test() : var0 
var2 =  method : C.test() : var0 
var3 =  method : B.m() : var0 
var4 =  method : C.test() : var0 
var5 =  method : B.k() : var0 
var6 =  method : B.m() : var0 
var7 =  method : C.test() : var0 
var8 =  method : C.test() : var0 
var9 =  method : C.test() : var0 
var10 =  method : B.m() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Adding sequence to active sequences of type class C
Sequence after execution: 
C var0 = new C();
// <NormalExecution object=object-of-type-C>;
int var1 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var2 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var3 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var4 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var5 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var6 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var7 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var8 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var9 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var10 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
<randoop.PrimValue, value=23 [var1]  : true
<randoop.PrimValue, value=23 [var2]  : true
<randoop.PrimValue, value=23 [var3]  : true
<randoop.PrimValue, value=23 [var4]  : true
<randoop.PrimValue, value=42 [var5]  : true
<randoop.PrimValue, value=23 [var6]  : true
<randoop.PrimValue, value=23 [var7]  : true
<randoop.PrimValue, value=23 [var8]  : true
<randoop.PrimValue, value=23 [var9]  : true
<randoop.PrimValue, value=23 [var10]  : true

allSequences.size()=253
-------------------------------------------
randoop.util.Randomness: total calls to random: 1417
Selected statement: C.test()
Will query component set for objects of typeclass C
getActivesequencesThatYield: entering method, clazz=class C
getActivesequencesThatYield: returning 233 sequences.
components: 233
randoop.util.Randomness: total calls to random: 1418
randoop.util.Randomness: total calls to random: 1419
Successfully created new unique sequence:var0 =  cons : C.<init>() : 
var1 =  method : C.test() : var0 
var2 =  method : C.test() : var0 
var3 =  method : C.test() : var0 
var4 =  method : C.test() : var0 
var5 =  method : B.k() : var0 
var6 =  method : B.m() : var0 
var7 =  method : B.k() : var0 
var8 =  method : C.test() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Adding sequence to active sequences of type class C
Sequence after execution: 
C var0 = new C();
// <NormalExecution object=object-of-type-C>;
int var1 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var2 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var3 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var4 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var5 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var6 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var7 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var8 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
<randoop.PrimValue, value=23 [var1]  : true
<randoop.PrimValue, value=23 [var2]  : true
<randoop.PrimValue, value=23 [var3]  : true
<randoop.PrimValue, value=23 [var4]  : true
<randoop.PrimValue, value=42 [var5]  : true
<randoop.PrimValue, value=23 [var6]  : true
<randoop.PrimValue, value=42 [var7]  : true
<randoop.PrimValue, value=23 [var8]  : true

allSequences.size()=254
-------------------------------------------
randoop.util.Randomness: total calls to random: 1420
Selected statement: A.k()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 17 sequences.
components: 17
randoop.util.Randomness: total calls to random: 1421
randoop.util.Randomness: total calls to random: 1422
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 1423
Selected statement: A.k()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 17 sequences.
components: 17
randoop.util.Randomness: total calls to random: 1424
randoop.util.Randomness: total calls to random: 1425
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 1426
Selected statement: B.m()
Will query component set for objects of typeclass B
getActivesequencesThatYield: entering method, clazz=class B
getActivesequencesThatYield: returning 234 sequences.
components: 234
randoop.util.Randomness: total calls to random: 1427
randoop.util.Randomness: total calls to random: 1428
Successfully created new unique sequence:var0 =  cons : C.<init>() : 
var1 =  method : C.test() : var0 
var2 =  method : C.test() : var0 
var3 =  method : B.m() : var0 
var4 =  method : C.test() : var0 
var5 =  method : B.k() : var0 
var6 =  method : B.m() : var0 
var7 =  method : C.test() : var0 
var8 =  method : B.k() : var0 
var9 =  method : C.test() : var0 
var10 =  method : B.k() : var0 
var11 =  method : B.m() : var0 
var12 =  method : B.m() : var0 
var13 =  method : B.m() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Making index 12 inactive (value is a primitive)
Making index 13 inactive (value is a primitive)
Adding sequence to active sequences of type class C
Sequence after execution: 
C var0 = new C();
// <NormalExecution object=object-of-type-C>;
int var1 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var2 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var3 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var4 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var5 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var6 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var7 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var8 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var9 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var10 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var11 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var12 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var13 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
<randoop.PrimValue, value=23 [var1]  : true
<randoop.PrimValue, value=23 [var2]  : true
<randoop.PrimValue, value=23 [var3]  : true
<randoop.PrimValue, value=23 [var4]  : true
<randoop.PrimValue, value=42 [var5]  : true
<randoop.PrimValue, value=23 [var6]  : true
<randoop.PrimValue, value=23 [var7]  : true
<randoop.PrimValue, value=42 [var8]  : true
<randoop.PrimValue, value=23 [var9]  : true
<randoop.PrimValue, value=42 [var10]  : true
<randoop.PrimValue, value=23 [var11]  : true
<randoop.PrimValue, value=23 [var12]  : true
<randoop.PrimValue, value=23 [var13]  : true

allSequences.size()=255
-------------------------------------------
randoop.util.Randomness: total calls to random: 1429
Selected statement: B.m()
Will query component set for objects of typeclass B
getActivesequencesThatYield: entering method, clazz=class B
getActivesequencesThatYield: returning 235 sequences.
components: 235
randoop.util.Randomness: total calls to random: 1430
randoop.util.Randomness: total calls to random: 1431
Successfully created new unique sequence:var0 =  cons : C.<init>() : 
var1 =  method : C.test() : var0 
var2 =  method : C.test() : var0 
var3 =  method : B.m() : var0 
var4 =  method : C.test() : var0 
var5 =  method : B.k() : var0 
var6 =  method : B.m() : var0 
var7 =  method : C.test() : var0 
var8 =  method : C.test() : var0 
var9 =  method : B.m() : var0 
var10 =  method : C.test() : var0 
var11 =  method : B.m() : var0 
var12 =  method : B.m() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Making index 12 inactive (value is a primitive)
Adding sequence to active sequences of type class C
Sequence after execution: 
C var0 = new C();
// <NormalExecution object=object-of-type-C>;
int var1 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var2 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var3 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var4 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var5 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var6 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var7 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var8 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var9 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var10 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var11 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var12 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
<randoop.PrimValue, value=23 [var1]  : true
<randoop.PrimValue, value=23 [var2]  : true
<randoop.PrimValue, value=23 [var3]  : true
<randoop.PrimValue, value=23 [var4]  : true
<randoop.PrimValue, value=42 [var5]  : true
<randoop.PrimValue, value=23 [var6]  : true
<randoop.PrimValue, value=23 [var7]  : true
<randoop.PrimValue, value=23 [var8]  : true
<randoop.PrimValue, value=23 [var9]  : true
<randoop.PrimValue, value=23 [var10]  : true
<randoop.PrimValue, value=23 [var11]  : true
<randoop.PrimValue, value=23 [var12]  : true

allSequences.size()=256
-------------------------------------------
randoop.util.Randomness: total calls to random: 1432
Selected statement: A.k()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 17 sequences.
components: 17
randoop.util.Randomness: total calls to random: 1433
randoop.util.Randomness: total calls to random: 1434
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 1435
Selected statement: B.k()
Will query component set for objects of typeclass B
getActivesequencesThatYield: entering method, clazz=class B
getActivesequencesThatYield: returning 238 sequences.
components: 238
randoop.util.Randomness: total calls to random: 1436
randoop.util.Randomness: total calls to random: 1437
Successfully created new unique sequence:var0 =  cons : C.<init>() : 
var1 =  method : B.m() : var0 
var2 =  method : B.k() : var0 
var3 =  method : B.m() : var0 
var4 =  method : C.test() : var0 
var5 =  method : B.m() : var0 
var6 =  method : B.m() : var0 
var7 =  method : B.k() : var0 
var8 =  method : B.k() : var0 
var9 =  method : B.m() : var0 
var10 =  method : C.test() : var0 
var11 =  method : B.k() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Adding sequence to active sequences of type class C
Sequence after execution: 
C var0 = new C();
// <NormalExecution object=object-of-type-C>;
int var1 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var2 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var3 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var4 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var5 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var6 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var7 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var8 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var9 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var10 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var11 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
<randoop.PrimValue, value=23 [var1]  : true
<randoop.PrimValue, value=42 [var2]  : true
<randoop.PrimValue, value=23 [var3]  : true
<randoop.PrimValue, value=23 [var4]  : true
<randoop.PrimValue, value=23 [var5]  : true
<randoop.PrimValue, value=23 [var6]  : true
<randoop.PrimValue, value=42 [var7]  : true
<randoop.PrimValue, value=42 [var8]  : true
<randoop.PrimValue, value=23 [var9]  : true
<randoop.PrimValue, value=23 [var10]  : true
<randoop.PrimValue, value=42 [var11]  : true

allSequences.size()=257
-------------------------------------------
randoop.util.Randomness: total calls to random: 1438
Selected statement: C.test()
Will query component set for objects of typeclass C
getActivesequencesThatYield: entering method, clazz=class C
getActivesequencesThatYield: returning 237 sequences.
components: 237
randoop.util.Randomness: total calls to random: 1439
randoop.util.Randomness: total calls to random: 1440
Successfully created new unique sequence:var0 =  cons : C.<init>() : 
var1 =  method : B.k() : var0 
var2 =  method : B.k() : var0 
var3 =  method : B.k() : var0 
var4 =  method : C.test() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Adding sequence to active sequences of type class C
Sequence after execution: 
C var0 = new C();
// <NormalExecution object=object-of-type-C>;
int var1 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var2 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var3 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var4 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
<randoop.PrimValue, value=42 [var1]  : true
<randoop.PrimValue, value=42 [var2]  : true
<randoop.PrimValue, value=42 [var3]  : true
<randoop.PrimValue, value=23 [var4]  : true

allSequences.size()=258
-------------------------------------------
randoop.util.Randomness: total calls to random: 1441
Selected statement: A.k()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 17 sequences.
components: 17
randoop.util.Randomness: total calls to random: 1442
randoop.util.Randomness: total calls to random: 1443
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 1444
Selected statement: C.test()
Will query component set for objects of typeclass C
getActivesequencesThatYield: entering method, clazz=class C
getActivesequencesThatYield: returning 238 sequences.
components: 238
randoop.util.Randomness: total calls to random: 1445
randoop.util.Randomness: total calls to random: 1446
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 1447
Selected statement: B.m()
Will query component set for objects of typeclass B
getActivesequencesThatYield: entering method, clazz=class B
getActivesequencesThatYield: returning 238 sequences.
components: 238
randoop.util.Randomness: total calls to random: 1448
randoop.util.Randomness: total calls to random: 1449
Successfully created new unique sequence:var0 =  cons : C.<init>() : 
var1 =  method : C.test() : var0 
var2 =  method : C.test() : var0 
var3 =  method : C.test() : var0 
var4 =  method : B.m() : var0 
var5 =  method : C.test() : var0 
var6 =  method : B.m() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Adding sequence to active sequences of type class C
Sequence after execution: 
C var0 = new C();
// <NormalExecution object=object-of-type-C>;
int var1 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var2 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var3 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var4 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var5 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var6 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
<randoop.PrimValue, value=23 [var1]  : true
<randoop.PrimValue, value=23 [var2]  : true
<randoop.PrimValue, value=23 [var3]  : true
<randoop.PrimValue, value=23 [var4]  : true
<randoop.PrimValue, value=23 [var5]  : true
<randoop.PrimValue, value=23 [var6]  : true

allSequences.size()=259
-------------------------------------------
randoop.util.Randomness: total calls to random: 1450
Selected statement: B.m()
Will query component set for objects of typeclass B
getActivesequencesThatYield: entering method, clazz=class B
getActivesequencesThatYield: returning 239 sequences.
components: 239
randoop.util.Randomness: total calls to random: 1451
randoop.util.Randomness: total calls to random: 1452
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 1453
Selected statement: B.k()
Will query component set for objects of typeclass B
getActivesequencesThatYield: entering method, clazz=class B
getActivesequencesThatYield: returning 241 sequences.
components: 241
randoop.util.Randomness: total calls to random: 1454
randoop.util.Randomness: total calls to random: 1455
Successfully created new unique sequence:var0 =  cons : C.<init>() : 
var1 =  method : C.test() : var0 
var2 =  method : C.test() : var0 
var3 =  method : B.m() : var0 
var4 =  method : C.test() : var0 
var5 =  method : B.k() : var0 
var6 =  method : B.m() : var0 
var7 =  method : C.test() : var0 
var8 =  method : C.test() : var0 
var9 =  method : B.m() : var0 
var10 =  method : B.m() : var0 
var11 =  method : B.k() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Adding sequence to active sequences of type class C
Sequence after execution: 
C var0 = new C();
// <NormalExecution object=object-of-type-C>;
int var1 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var2 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var3 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var4 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var5 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var6 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var7 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var8 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var9 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var10 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var11 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
<randoop.PrimValue, value=23 [var1]  : true
<randoop.PrimValue, value=23 [var2]  : true
<randoop.PrimValue, value=23 [var3]  : true
<randoop.PrimValue, value=23 [var4]  : true
<randoop.PrimValue, value=42 [var5]  : true
<randoop.PrimValue, value=23 [var6]  : true
<randoop.PrimValue, value=23 [var7]  : true
<randoop.PrimValue, value=23 [var8]  : true
<randoop.PrimValue, value=23 [var9]  : true
<randoop.PrimValue, value=23 [var10]  : true
<randoop.PrimValue, value=42 [var11]  : true

allSequences.size()=260
-------------------------------------------
randoop.util.Randomness: total calls to random: 1456
Selected statement: C.test()
Will query component set for objects of typeclass C
getActivesequencesThatYield: entering method, clazz=class C
getActivesequencesThatYield: returning 240 sequences.
components: 240
randoop.util.Randomness: total calls to random: 1457
randoop.util.Randomness: total calls to random: 1458
Successfully created new unique sequence:var0 =  cons : C.<init>() : 
var1 =  method : B.m() : var0 
var2 =  method : B.k() : var0 
var3 =  method : B.m() : var0 
var4 =  method : C.test() : var0 
var5 =  method : B.m() : var0 
var6 =  method : B.m() : var0 
var7 =  method : B.k() : var0 
var8 =  method : C.test() : var0 
var9 =  method : B.k() : var0 
var10 =  method : B.m() : var0 
var11 =  method : B.m() : var0 
var12 =  method : C.test() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Making index 12 inactive (value is a primitive)
Adding sequence to active sequences of type class C
Sequence after execution: 
C var0 = new C();
// <NormalExecution object=object-of-type-C>;
int var1 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var2 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var3 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var4 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var5 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var6 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var7 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var8 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var9 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var10 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var11 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var12 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
<randoop.PrimValue, value=23 [var1]  : true
<randoop.PrimValue, value=42 [var2]  : true
<randoop.PrimValue, value=23 [var3]  : true
<randoop.PrimValue, value=23 [var4]  : true
<randoop.PrimValue, value=23 [var5]  : true
<randoop.PrimValue, value=23 [var6]  : true
<randoop.PrimValue, value=42 [var7]  : true
<randoop.PrimValue, value=23 [var8]  : true
<randoop.PrimValue, value=42 [var9]  : true
<randoop.PrimValue, value=23 [var10]  : true
<randoop.PrimValue, value=23 [var11]  : true
<randoop.PrimValue, value=23 [var12]  : true

allSequences.size()=261
-------------------------------------------
randoop.util.Randomness: total calls to random: 1459
Selected statement: C.test()
Will query component set for objects of typeclass C
getActivesequencesThatYield: entering method, clazz=class C
getActivesequencesThatYield: returning 241 sequences.
components: 241
randoop.util.Randomness: total calls to random: 1460
randoop.util.Randomness: total calls to random: 1461
Successfully created new unique sequence:var0 =  cons : C.<init>() : 
var1 =  method : C.test() : var0 
var2 =  method : C.test() : var0 
var3 =  method : B.m() : var0 
var4 =  method : C.test() : var0 
var5 =  method : B.k() : var0 
var6 =  method : C.test() : var0 
var7 =  method : B.m() : var0 
var8 =  method : B.k() : var0 
var9 =  method : C.test() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Adding sequence to active sequences of type class C
Sequence after execution: 
C var0 = new C();
// <NormalExecution object=object-of-type-C>;
int var1 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var2 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var3 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var4 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var5 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var6 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var7 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var8 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var9 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
<randoop.PrimValue, value=23 [var1]  : true
<randoop.PrimValue, value=23 [var2]  : true
<randoop.PrimValue, value=23 [var3]  : true
<randoop.PrimValue, value=23 [var4]  : true
<randoop.PrimValue, value=42 [var5]  : true
<randoop.PrimValue, value=23 [var6]  : true
<randoop.PrimValue, value=23 [var7]  : true
<randoop.PrimValue, value=42 [var8]  : true
<randoop.PrimValue, value=23 [var9]  : true

allSequences.size()=262
-------------------------------------------
randoop.util.Randomness: total calls to random: 1462
Selected statement: A.k()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 17 sequences.
components: 17
randoop.util.Randomness: total calls to random: 1463
randoop.util.Randomness: total calls to random: 1464
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 1465
Selected statement: C.test()
Will query component set for objects of typeclass C
getActivesequencesThatYield: entering method, clazz=class C
getActivesequencesThatYield: returning 242 sequences.
components: 242
randoop.util.Randomness: total calls to random: 1466
randoop.util.Randomness: total calls to random: 1467
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 1468
Selected statement: A.k()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 17 sequences.
components: 17
randoop.util.Randomness: total calls to random: 1469
randoop.util.Randomness: total calls to random: 1470
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 1471
Selected statement: C.test()
Will query component set for objects of typeclass C
getActivesequencesThatYield: entering method, clazz=class C
getActivesequencesThatYield: returning 242 sequences.
components: 242
randoop.util.Randomness: total calls to random: 1472
randoop.util.Randomness: total calls to random: 1473
Successfully created new unique sequence:var0 =  cons : C.<init>() : 
var1 =  method : C.test() : var0 
var2 =  method : C.test() : var0 
var3 =  method : B.m() : var0 
var4 =  method : C.test() : var0 
var5 =  method : B.k() : var0 
var6 =  method : B.k() : var0 
var7 =  method : C.test() : var0 
var8 =  method : C.test() : var0 
var9 =  method : C.test() : var0 
var10 =  method : C.test() : var0 
var11 =  method : C.test() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Adding sequence to active sequences of type class C
Sequence after execution: 
C var0 = new C();
// <NormalExecution object=object-of-type-C>;
int var1 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var2 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var3 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var4 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var5 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var6 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var7 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var8 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var9 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var10 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var11 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
<randoop.PrimValue, value=23 [var1]  : true
<randoop.PrimValue, value=23 [var2]  : true
<randoop.PrimValue, value=23 [var3]  : true
<randoop.PrimValue, value=23 [var4]  : true
<randoop.PrimValue, value=42 [var5]  : true
<randoop.PrimValue, value=42 [var6]  : true
<randoop.PrimValue, value=23 [var7]  : true
<randoop.PrimValue, value=23 [var8]  : true
<randoop.PrimValue, value=23 [var9]  : true
<randoop.PrimValue, value=23 [var10]  : true
<randoop.PrimValue, value=23 [var11]  : true

allSequences.size()=263
-------------------------------------------
randoop.util.Randomness: total calls to random: 1474
Selected statement: C.test()
Will query component set for objects of typeclass C
getActivesequencesThatYield: entering method, clazz=class C
getActivesequencesThatYield: returning 243 sequences.
components: 243
randoop.util.Randomness: total calls to random: 1475
randoop.util.Randomness: total calls to random: 1476
Successfully created new unique sequence:var0 =  cons : C.<init>() : 
var1 =  method : B.m() : var0 
var2 =  method : B.k() : var0 
var3 =  method : B.m() : var0 
var4 =  method : B.k() : var0 
var5 =  method : B.k() : var0 
var6 =  method : B.k() : var0 
var7 =  method : C.test() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Adding sequence to active sequences of type class C
Sequence after execution: 
C var0 = new C();
// <NormalExecution object=object-of-type-C>;
int var1 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var2 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var3 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var4 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var5 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var6 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var7 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
<randoop.PrimValue, value=23 [var1]  : true
<randoop.PrimValue, value=42 [var2]  : true
<randoop.PrimValue, value=23 [var3]  : true
<randoop.PrimValue, value=42 [var4]  : true
<randoop.PrimValue, value=42 [var5]  : true
<randoop.PrimValue, value=42 [var6]  : true
<randoop.PrimValue, value=23 [var7]  : true

allSequences.size()=264
-------------------------------------------
randoop.util.Randomness: total calls to random: 1477
Selected statement: C.test()
Will query component set for objects of typeclass C
getActivesequencesThatYield: entering method, clazz=class C
getActivesequencesThatYield: returning 244 sequences.
components: 244
randoop.util.Randomness: total calls to random: 1478
randoop.util.Randomness: total calls to random: 1479
Successfully created new unique sequence:var0 =  cons : C.<init>() : 
var1 =  method : C.test() : var0 
var2 =  method : C.test() : var0 
var3 =  method : B.m() : var0 
var4 =  method : C.test() : var0 
var5 =  method : B.m() : var0 
var6 =  method : B.m() : var0 
var7 =  method : B.k() : var0 
var8 =  method : C.test() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Adding sequence to active sequences of type class C
Sequence after execution: 
C var0 = new C();
// <NormalExecution object=object-of-type-C>;
int var1 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var2 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var3 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var4 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var5 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var6 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var7 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var8 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
<randoop.PrimValue, value=23 [var1]  : true
<randoop.PrimValue, value=23 [var2]  : true
<randoop.PrimValue, value=23 [var3]  : true
<randoop.PrimValue, value=23 [var4]  : true
<randoop.PrimValue, value=23 [var5]  : true
<randoop.PrimValue, value=23 [var6]  : true
<randoop.PrimValue, value=42 [var7]  : true
<randoop.PrimValue, value=23 [var8]  : true

allSequences.size()=265
-------------------------------------------
randoop.util.Randomness: total calls to random: 1480
Selected statement: C.test()
Will query component set for objects of typeclass C
getActivesequencesThatYield: entering method, clazz=class C
getActivesequencesThatYield: returning 245 sequences.
components: 245
randoop.util.Randomness: total calls to random: 1481
randoop.util.Randomness: total calls to random: 1482
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 1483
Selected statement: B.k()
Will query component set for objects of typeclass B
getActivesequencesThatYield: entering method, clazz=class B
getActivesequencesThatYield: returning 247 sequences.
components: 247
randoop.util.Randomness: total calls to random: 1484
randoop.util.Randomness: total calls to random: 1485
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 1486
Selected statement: B.m()
Will query component set for objects of typeclass B
getActivesequencesThatYield: entering method, clazz=class B
getActivesequencesThatYield: returning 245 sequences.
components: 245
randoop.util.Randomness: total calls to random: 1487
randoop.util.Randomness: total calls to random: 1488
Successfully created new unique sequence:var0 =  cons : C.<init>() : 
var1 =  method : C.test() : var0 
var2 =  method : C.test() : var0 
var3 =  method : B.m() : var0 
var4 =  method : C.test() : var0 
var5 =  method : B.k() : var0 
var6 =  method : B.m() : var0 
var7 =  method : C.test() : var0 
var8 =  method : C.test() : var0 
var9 =  method : B.m() : var0 
var10 =  method : C.test() : var0 
var11 =  method : B.m() : var0 
var12 =  method : B.m() : var0 
var13 =  method : B.m() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Making index 12 inactive (value is a primitive)
Making index 13 inactive (value is a primitive)
Adding sequence to active sequences of type class C
Sequence after execution: 
C var0 = new C();
// <NormalExecution object=object-of-type-C>;
int var1 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var2 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var3 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var4 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var5 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var6 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var7 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var8 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var9 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var10 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var11 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var12 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var13 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
<randoop.PrimValue, value=23 [var1]  : true
<randoop.PrimValue, value=23 [var2]  : true
<randoop.PrimValue, value=23 [var3]  : true
<randoop.PrimValue, value=23 [var4]  : true
<randoop.PrimValue, value=42 [var5]  : true
<randoop.PrimValue, value=23 [var6]  : true
<randoop.PrimValue, value=23 [var7]  : true
<randoop.PrimValue, value=23 [var8]  : true
<randoop.PrimValue, value=23 [var9]  : true
<randoop.PrimValue, value=23 [var10]  : true
<randoop.PrimValue, value=23 [var11]  : true
<randoop.PrimValue, value=23 [var12]  : true
<randoop.PrimValue, value=23 [var13]  : true

allSequences.size()=266
-------------------------------------------
randoop.util.Randomness: total calls to random: 1489
Selected statement: C.test()
Will query component set for objects of typeclass C
getActivesequencesThatYield: entering method, clazz=class C
getActivesequencesThatYield: returning 246 sequences.
components: 246
randoop.util.Randomness: total calls to random: 1490
randoop.util.Randomness: total calls to random: 1491
Successfully created new unique sequence:var0 =  cons : C.<init>() : 
var1 =  method : B.m() : var0 
var2 =  method : B.k() : var0 
var3 =  method : B.k() : var0 
var4 =  method : B.m() : var0 
var5 =  method : C.test() : var0 
var6 =  method : C.test() : var0 
var7 =  method : C.test() : var0 
var8 =  method : C.test() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Adding sequence to active sequences of type class C
Sequence after execution: 
C var0 = new C();
// <NormalExecution object=object-of-type-C>;
int var1 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var2 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var3 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var4 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var5 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var6 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var7 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var8 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
<randoop.PrimValue, value=23 [var1]  : true
<randoop.PrimValue, value=42 [var2]  : true
<randoop.PrimValue, value=42 [var3]  : true
<randoop.PrimValue, value=23 [var4]  : true
<randoop.PrimValue, value=23 [var5]  : true
<randoop.PrimValue, value=23 [var6]  : true
<randoop.PrimValue, value=23 [var7]  : true
<randoop.PrimValue, value=23 [var8]  : true

allSequences.size()=267
-------------------------------------------
randoop.util.Randomness: total calls to random: 1492
Selected statement: B.m()
Will query component set for objects of typeclass B
getActivesequencesThatYield: entering method, clazz=class B
getActivesequencesThatYield: returning 247 sequences.
components: 247
randoop.util.Randomness: total calls to random: 1493
randoop.util.Randomness: total calls to random: 1494
Successfully created new unique sequence:var0 =  cons : C.<init>() : 
var1 =  method : C.test() : var0 
var2 =  method : C.test() : var0 
var3 =  method : B.m() : var0 
var4 =  method : C.test() : var0 
var5 =  method : C.test() : var0 
var6 =  method : C.test() : var0 
var7 =  method : B.k() : var0 
var8 =  method : B.k() : var0 
var9 =  method : B.m() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Adding sequence to active sequences of type class C
Sequence after execution: 
C var0 = new C();
// <NormalExecution object=object-of-type-C>;
int var1 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var2 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var3 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var4 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var5 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var6 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var7 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var8 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var9 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
<randoop.PrimValue, value=23 [var1]  : true
<randoop.PrimValue, value=23 [var2]  : true
<randoop.PrimValue, value=23 [var3]  : true
<randoop.PrimValue, value=23 [var4]  : true
<randoop.PrimValue, value=23 [var5]  : true
<randoop.PrimValue, value=23 [var6]  : true
<randoop.PrimValue, value=42 [var7]  : true
<randoop.PrimValue, value=42 [var8]  : true
<randoop.PrimValue, value=23 [var9]  : true

allSequences.size()=268
-------------------------------------------
randoop.util.Randomness: total calls to random: 1495
Selected statement: A.k()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 17 sequences.
components: 17
randoop.util.Randomness: total calls to random: 1496
randoop.util.Randomness: total calls to random: 1497
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 1498
Selected statement: B.k()
Will query component set for objects of typeclass B
getActivesequencesThatYield: entering method, clazz=class B
getActivesequencesThatYield: returning 250 sequences.
components: 250
randoop.util.Randomness: total calls to random: 1499
randoop.util.Randomness: total calls to random: 1500
Successfully created new unique sequence:var0 =  cons : C.<init>() : 
var1 =  method : C.test() : var0 
var2 =  method : C.test() : var0 
var3 =  method : C.test() : var0 
var4 =  method : B.m() : var0 
var5 =  method : C.test() : var0 
var6 =  method : B.m() : var0 
var7 =  method : B.k() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Adding sequence to active sequences of type class C
Sequence after execution: 
C var0 = new C();
// <NormalExecution object=object-of-type-C>;
int var1 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var2 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var3 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var4 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var5 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var6 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var7 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
<randoop.PrimValue, value=23 [var1]  : true
<randoop.PrimValue, value=23 [var2]  : true
<randoop.PrimValue, value=23 [var3]  : true
<randoop.PrimValue, value=23 [var4]  : true
<randoop.PrimValue, value=23 [var5]  : true
<randoop.PrimValue, value=23 [var6]  : true
<randoop.PrimValue, value=42 [var7]  : true

allSequences.size()=269
-------------------------------------------
randoop.util.Randomness: total calls to random: 1501
Selected statement: B.m()
Will query component set for objects of typeclass B
getActivesequencesThatYield: entering method, clazz=class B
getActivesequencesThatYield: returning 249 sequences.
components: 249
randoop.util.Randomness: total calls to random: 1502
randoop.util.Randomness: total calls to random: 1503
Successfully created new unique sequence:var0 =  cons : C.<init>() : 
var1 =  method : B.m() : var0 
var2 =  method : B.k() : var0 
var3 =  method : B.k() : var0 
var4 =  method : B.m() : var0 
var5 =  method : B.m() : var0 
var6 =  method : C.test() : var0 
var7 =  method : B.m() : var0 
var8 =  method : B.m() : var0 
var9 =  method : B.m() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Adding sequence to active sequences of type class C
Sequence after execution: 
C var0 = new C();
// <NormalExecution object=object-of-type-C>;
int var1 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var2 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var3 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var4 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var5 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var6 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var7 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var8 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var9 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
<randoop.PrimValue, value=23 [var1]  : true
<randoop.PrimValue, value=42 [var2]  : true
<randoop.PrimValue, value=42 [var3]  : true
<randoop.PrimValue, value=23 [var4]  : true
<randoop.PrimValue, value=23 [var5]  : true
<randoop.PrimValue, value=23 [var6]  : true
<randoop.PrimValue, value=23 [var7]  : true
<randoop.PrimValue, value=23 [var8]  : true
<randoop.PrimValue, value=23 [var9]  : true

allSequences.size()=270
-------------------------------------------
randoop.util.Randomness: total calls to random: 1504
Selected statement: C.test()
Will query component set for objects of typeclass C
getActivesequencesThatYield: entering method, clazz=class C
getActivesequencesThatYield: returning 250 sequences.
components: 250
randoop.util.Randomness: total calls to random: 1505
randoop.util.Randomness: total calls to random: 1506
Successfully created new unique sequence:var0 =  cons : C.<init>() : 
var1 =  method : B.m() : var0 
var2 =  method : B.k() : var0 
var3 =  method : C.test() : var0 
var4 =  method : C.test() : var0 
var5 =  method : B.m() : var0 
var6 =  method : B.m() : var0 
var7 =  method : C.test() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Adding sequence to active sequences of type class C
Sequence after execution: 
C var0 = new C();
// <NormalExecution object=object-of-type-C>;
int var1 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var2 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var3 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var4 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var5 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var6 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var7 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
<randoop.PrimValue, value=23 [var1]  : true
<randoop.PrimValue, value=42 [var2]  : true
<randoop.PrimValue, value=23 [var3]  : true
<randoop.PrimValue, value=23 [var4]  : true
<randoop.PrimValue, value=23 [var5]  : true
<randoop.PrimValue, value=23 [var6]  : true
<randoop.PrimValue, value=23 [var7]  : true

allSequences.size()=271
-------------------------------------------
randoop.util.Randomness: total calls to random: 1507
Selected statement: C.test()
Will query component set for objects of typeclass C
getActivesequencesThatYield: entering method, clazz=class C
getActivesequencesThatYield: returning 251 sequences.
components: 251
randoop.util.Randomness: total calls to random: 1508
randoop.util.Randomness: total calls to random: 1509
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 1510
Selected statement: C.test()
Will query component set for objects of typeclass C
getActivesequencesThatYield: entering method, clazz=class C
getActivesequencesThatYield: returning 251 sequences.
components: 251
randoop.util.Randomness: total calls to random: 1511
randoop.util.Randomness: total calls to random: 1512
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 1513
Selected statement: C.test()
Will query component set for objects of typeclass C
getActivesequencesThatYield: entering method, clazz=class C
getActivesequencesThatYield: returning 251 sequences.
components: 251
randoop.util.Randomness: total calls to random: 1514
randoop.util.Randomness: total calls to random: 1515
Successfully created new unique sequence:var0 =  cons : C.<init>() : 
var1 =  method : C.test() : var0 
var2 =  method : C.test() : var0 
var3 =  method : B.m() : var0 
var4 =  method : C.test() : var0 
var5 =  method : C.test() : var0 
var6 =  method : B.m() : var0 
var7 =  method : C.test() : var0 
var8 =  method : C.test() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Adding sequence to active sequences of type class C
Sequence after execution: 
C var0 = new C();
// <NormalExecution object=object-of-type-C>;
int var1 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var2 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var3 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var4 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var5 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var6 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var7 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var8 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
<randoop.PrimValue, value=23 [var1]  : true
<randoop.PrimValue, value=23 [var2]  : true
<randoop.PrimValue, value=23 [var3]  : true
<randoop.PrimValue, value=23 [var4]  : true
<randoop.PrimValue, value=23 [var5]  : true
<randoop.PrimValue, value=23 [var6]  : true
<randoop.PrimValue, value=23 [var7]  : true
<randoop.PrimValue, value=23 [var8]  : true

allSequences.size()=272
-------------------------------------------
randoop.util.Randomness: total calls to random: 1516
Selected statement: B.m()
Will query component set for objects of typeclass B
getActivesequencesThatYield: entering method, clazz=class B
getActivesequencesThatYield: returning 252 sequences.
components: 252
randoop.util.Randomness: total calls to random: 1517
randoop.util.Randomness: total calls to random: 1518
Successfully created new unique sequence:var0 =  cons : C.<init>() : 
var1 =  method : C.test() : var0 
var2 =  method : C.test() : var0 
var3 =  method : B.m() : var0 
var4 =  method : B.m() : var0 
var5 =  method : B.m() : var0 
var6 =  method : C.test() : var0 
var7 =  method : C.test() : var0 
var8 =  method : B.m() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Adding sequence to active sequences of type class C
Sequence after execution: 
C var0 = new C();
// <NormalExecution object=object-of-type-C>;
int var1 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var2 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var3 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var4 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var5 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var6 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var7 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var8 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
<randoop.PrimValue, value=23 [var1]  : true
<randoop.PrimValue, value=23 [var2]  : true
<randoop.PrimValue, value=23 [var3]  : true
<randoop.PrimValue, value=23 [var4]  : true
<randoop.PrimValue, value=23 [var5]  : true
<randoop.PrimValue, value=23 [var6]  : true
<randoop.PrimValue, value=23 [var7]  : true
<randoop.PrimValue, value=23 [var8]  : true

allSequences.size()=273
-------------------------------------------
randoop.util.Randomness: total calls to random: 1519
Selected statement: C.test()
Will query component set for objects of typeclass C
getActivesequencesThatYield: entering method, clazz=class C
getActivesequencesThatYield: returning 253 sequences.
components: 253
randoop.util.Randomness: total calls to random: 1520
randoop.util.Randomness: total calls to random: 1521
Successfully created new unique sequence:var0 =  cons : C.<init>() : 
var1 =  method : B.k() : var0 
var2 =  method : C.test() : var0 
var3 =  method : C.test() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Adding sequence to active sequences of type class C
Sequence after execution: 
C var0 = new C();
// <NormalExecution object=object-of-type-C>;
int var1 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var2 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var3 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
<randoop.PrimValue, value=42 [var1]  : true
<randoop.PrimValue, value=23 [var2]  : true
<randoop.PrimValue, value=23 [var3]  : true

allSequences.size()=274
-------------------------------------------
randoop.util.Randomness: total calls to random: 1522
Selected statement: A.k()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 17 sequences.
components: 17
randoop.util.Randomness: total calls to random: 1523
randoop.util.Randomness: total calls to random: 1524
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 1525
Selected statement: C.test()
Will query component set for objects of typeclass C
getActivesequencesThatYield: entering method, clazz=class C
getActivesequencesThatYield: returning 254 sequences.
components: 254
randoop.util.Randomness: total calls to random: 1526
randoop.util.Randomness: total calls to random: 1527
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 1528
Selected statement: C.test()
Will query component set for objects of typeclass C
getActivesequencesThatYield: entering method, clazz=class C
getActivesequencesThatYield: returning 254 sequences.
components: 254
randoop.util.Randomness: total calls to random: 1529
randoop.util.Randomness: total calls to random: 1530
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 1531
Selected statement: A.k()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 17 sequences.
components: 17
randoop.util.Randomness: total calls to random: 1532
randoop.util.Randomness: total calls to random: 1533
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 1534
Selected statement: C.test()
Will query component set for objects of typeclass C
getActivesequencesThatYield: entering method, clazz=class C
getActivesequencesThatYield: returning 254 sequences.
components: 254
randoop.util.Randomness: total calls to random: 1535
randoop.util.Randomness: total calls to random: 1536
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 1537
Selected statement: A.k()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 17 sequences.
components: 17
randoop.util.Randomness: total calls to random: 1538
randoop.util.Randomness: total calls to random: 1539
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 1540
Selected statement: B.m()
Will query component set for objects of typeclass B
getActivesequencesThatYield: entering method, clazz=class B
getActivesequencesThatYield: returning 254 sequences.
components: 254
randoop.util.Randomness: total calls to random: 1541
randoop.util.Randomness: total calls to random: 1542
Successfully created new unique sequence:var0 =  cons : C.<init>() : 
var1 =  method : C.test() : var0 
var2 =  method : C.test() : var0 
var3 =  method : C.test() : var0 
var4 =  method : B.m() : var0 
var5 =  method : C.test() : var0 
var6 =  method : C.test() : var0 
var7 =  method : B.k() : var0 
var8 =  method : C.test() : var0 
var9 =  method : B.k() : var0 
var10 =  method : B.m() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Adding sequence to active sequences of type class C
Sequence after execution: 
C var0 = new C();
// <NormalExecution object=object-of-type-C>;
int var1 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var2 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var3 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var4 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var5 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var6 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var7 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var8 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var9 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var10 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
<randoop.PrimValue, value=23 [var1]  : true
<randoop.PrimValue, value=23 [var2]  : true
<randoop.PrimValue, value=23 [var3]  : true
<randoop.PrimValue, value=23 [var4]  : true
<randoop.PrimValue, value=23 [var5]  : true
<randoop.PrimValue, value=23 [var6]  : true
<randoop.PrimValue, value=42 [var7]  : true
<randoop.PrimValue, value=23 [var8]  : true
<randoop.PrimValue, value=42 [var9]  : true
<randoop.PrimValue, value=23 [var10]  : true

allSequences.size()=275
-------------------------------------------
randoop.util.Randomness: total calls to random: 1543
Selected statement: B.m()
Will query component set for objects of typeclass B
getActivesequencesThatYield: entering method, clazz=class B
getActivesequencesThatYield: returning 255 sequences.
components: 255
randoop.util.Randomness: total calls to random: 1544
randoop.util.Randomness: total calls to random: 1545
Successfully created new unique sequence:var0 =  cons : C.<init>() : 
var1 =  method : B.m() : var0 
var2 =  method : B.k() : var0 
var3 =  method : B.m() : var0 
var4 =  method : C.test() : var0 
var5 =  method : B.m() : var0 
var6 =  method : B.m() : var0 
var7 =  method : B.k() : var0 
var8 =  method : C.test() : var0 
var9 =  method : B.k() : var0 
var10 =  method : B.m() : var0 
var11 =  method : B.m() : var0 
var12 =  method : B.m() : var0 
var13 =  method : B.m() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Making index 12 inactive (value is a primitive)
Making index 13 inactive (value is a primitive)
Adding sequence to active sequences of type class C
Sequence after execution: 
C var0 = new C();
// <NormalExecution object=object-of-type-C>;
int var1 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var2 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var3 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var4 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var5 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var6 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var7 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var8 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var9 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var10 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var11 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var12 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var13 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
<randoop.PrimValue, value=23 [var1]  : true
<randoop.PrimValue, value=42 [var2]  : true
<randoop.PrimValue, value=23 [var3]  : true
<randoop.PrimValue, value=23 [var4]  : true
<randoop.PrimValue, value=23 [var5]  : true
<randoop.PrimValue, value=23 [var6]  : true
<randoop.PrimValue, value=42 [var7]  : true
<randoop.PrimValue, value=23 [var8]  : true
<randoop.PrimValue, value=42 [var9]  : true
<randoop.PrimValue, value=23 [var10]  : true
<randoop.PrimValue, value=23 [var11]  : true
<randoop.PrimValue, value=23 [var12]  : true
<randoop.PrimValue, value=23 [var13]  : true

allSequences.size()=276
-------------------------------------------
randoop.util.Randomness: total calls to random: 1546
Selected statement: B.k()
Will query component set for objects of typeclass B
getActivesequencesThatYield: entering method, clazz=class B
getActivesequencesThatYield: returning 258 sequences.
components: 258
randoop.util.Randomness: total calls to random: 1547
randoop.util.Randomness: total calls to random: 1548
Successfully created new unique sequence:var0 =  cons : C.<init>() : 
var1 =  method : B.m() : var0 
var2 =  method : B.k() : var0 
var3 =  method : B.m() : var0 
var4 =  method : C.test() : var0 
var5 =  method : B.m() : var0 
var6 =  method : B.m() : var0 
var7 =  method : B.k() : var0 
var8 =  method : B.k() : var0 
var9 =  method : B.m() : var0 
var10 =  method : B.k() : var0 
var11 =  method : B.k() : var0 
var12 =  method : B.k() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Making index 12 inactive (value is a primitive)
Adding sequence to active sequences of type class C
Sequence after execution: 
C var0 = new C();
// <NormalExecution object=object-of-type-C>;
int var1 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var2 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var3 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var4 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var5 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var6 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var7 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var8 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var9 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var10 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var11 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var12 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
<randoop.PrimValue, value=23 [var1]  : true
<randoop.PrimValue, value=42 [var2]  : true
<randoop.PrimValue, value=23 [var3]  : true
<randoop.PrimValue, value=23 [var4]  : true
<randoop.PrimValue, value=23 [var5]  : true
<randoop.PrimValue, value=23 [var6]  : true
<randoop.PrimValue, value=42 [var7]  : true
<randoop.PrimValue, value=42 [var8]  : true
<randoop.PrimValue, value=23 [var9]  : true
<randoop.PrimValue, value=42 [var10]  : true
<randoop.PrimValue, value=42 [var11]  : true
<randoop.PrimValue, value=42 [var12]  : true

allSequences.size()=277
-------------------------------------------
randoop.util.Randomness: total calls to random: 1549
Selected statement: A.k()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 17 sequences.
components: 17
randoop.util.Randomness: total calls to random: 1550
randoop.util.Randomness: total calls to random: 1551
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 1552
Selected statement: B.m()
Will query component set for objects of typeclass B
getActivesequencesThatYield: entering method, clazz=class B
getActivesequencesThatYield: returning 257 sequences.
components: 257
randoop.util.Randomness: total calls to random: 1553
randoop.util.Randomness: total calls to random: 1554
Successfully created new unique sequence:var0 =  cons : C.<init>() : 
var1 =  method : C.test() : var0 
var2 =  method : C.test() : var0 
var3 =  method : B.m() : var0 
var4 =  method : C.test() : var0 
var5 =  method : B.m() : var0 
var6 =  method : B.m() : var0 
var7 =  method : B.k() : var0 
var8 =  method : C.test() : var0 
var9 =  method : B.m() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Adding sequence to active sequences of type class C
Sequence after execution: 
C var0 = new C();
// <NormalExecution object=object-of-type-C>;
int var1 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var2 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var3 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var4 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var5 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var6 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var7 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var8 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var9 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
<randoop.PrimValue, value=23 [var1]  : true
<randoop.PrimValue, value=23 [var2]  : true
<randoop.PrimValue, value=23 [var3]  : true
<randoop.PrimValue, value=23 [var4]  : true
<randoop.PrimValue, value=23 [var5]  : true
<randoop.PrimValue, value=23 [var6]  : true
<randoop.PrimValue, value=42 [var7]  : true
<randoop.PrimValue, value=23 [var8]  : true
<randoop.PrimValue, value=23 [var9]  : true

allSequences.size()=278
-------------------------------------------
randoop.util.Randomness: total calls to random: 1555
Selected statement: C.test()
Will query component set for objects of typeclass C
getActivesequencesThatYield: entering method, clazz=class C
getActivesequencesThatYield: returning 258 sequences.
components: 258
randoop.util.Randomness: total calls to random: 1556
randoop.util.Randomness: total calls to random: 1557
Successfully created new unique sequence:var0 =  cons : C.<init>() : 
var1 =  method : B.m() : var0 
var2 =  method : B.k() : var0 
var3 =  method : B.m() : var0 
var4 =  method : C.test() : var0 
var5 =  method : B.m() : var0 
var6 =  method : B.m() : var0 
var7 =  method : B.k() : var0 
var8 =  method : C.test() : var0 
var9 =  method : C.test() : var0 
var10 =  method : B.k() : var0 
var11 =  method : B.m() : var0 
var12 =  method : C.test() : var0 
var13 =  method : B.m() : var0 
var14 =  method : C.test() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Making index 12 inactive (value is a primitive)
Making index 13 inactive (value is a primitive)
Making index 14 inactive (value is a primitive)
Adding sequence to active sequences of type class C
Sequence after execution: 
C var0 = new C();
// <NormalExecution object=object-of-type-C>;
int var1 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var2 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var3 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var4 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var5 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var6 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var7 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var8 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var9 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var10 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var11 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var12 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var13 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var14 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
<randoop.PrimValue, value=23 [var1]  : true
<randoop.PrimValue, value=42 [var2]  : true
<randoop.PrimValue, value=23 [var3]  : true
<randoop.PrimValue, value=23 [var4]  : true
<randoop.PrimValue, value=23 [var5]  : true
<randoop.PrimValue, value=23 [var6]  : true
<randoop.PrimValue, value=42 [var7]  : true
<randoop.PrimValue, value=23 [var8]  : true
<randoop.PrimValue, value=23 [var9]  : true
<randoop.PrimValue, value=42 [var10]  : true
<randoop.PrimValue, value=23 [var11]  : true
<randoop.PrimValue, value=23 [var12]  : true
<randoop.PrimValue, value=23 [var13]  : true
<randoop.PrimValue, value=23 [var14]  : true

allSequences.size()=279
-------------------------------------------
randoop.util.Randomness: total calls to random: 1558
Selected statement: B.k()
Will query component set for objects of typeclass B
getActivesequencesThatYield: entering method, clazz=class B
getActivesequencesThatYield: returning 261 sequences.
components: 261
randoop.util.Randomness: total calls to random: 1559
randoop.util.Randomness: total calls to random: 1560
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 1561
Selected statement: B.m()
Will query component set for objects of typeclass B
getActivesequencesThatYield: entering method, clazz=class B
getActivesequencesThatYield: returning 259 sequences.
components: 259
randoop.util.Randomness: total calls to random: 1562
randoop.util.Randomness: total calls to random: 1563
Successfully created new unique sequence:var0 =  cons : C.<init>() : 
var1 =  method : B.m() : var0 
var2 =  method : B.k() : var0 
var3 =  method : B.m() : var0 
var4 =  method : C.test() : var0 
var5 =  method : B.m() : var0 
var6 =  method : B.m() : var0 
var7 =  method : B.k() : var0 
var8 =  method : B.k() : var0 
var9 =  method : B.m() : var0 
var10 =  method : B.m() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Adding sequence to active sequences of type class C
Sequence after execution: 
C var0 = new C();
// <NormalExecution object=object-of-type-C>;
int var1 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var2 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var3 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var4 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var5 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var6 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var7 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var8 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var9 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var10 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
<randoop.PrimValue, value=23 [var1]  : true
<randoop.PrimValue, value=42 [var2]  : true
<randoop.PrimValue, value=23 [var3]  : true
<randoop.PrimValue, value=23 [var4]  : true
<randoop.PrimValue, value=23 [var5]  : true
<randoop.PrimValue, value=23 [var6]  : true
<randoop.PrimValue, value=42 [var7]  : true
<randoop.PrimValue, value=42 [var8]  : true
<randoop.PrimValue, value=23 [var9]  : true
<randoop.PrimValue, value=23 [var10]  : true

allSequences.size()=280
-------------------------------------------
randoop.util.Randomness: total calls to random: 1564
Selected statement: A.k()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 17 sequences.
components: 17
randoop.util.Randomness: total calls to random: 1565
randoop.util.Randomness: total calls to random: 1566
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 1567
Selected statement: C.test()
Will query component set for objects of typeclass C
getActivesequencesThatYield: entering method, clazz=class C
getActivesequencesThatYield: returning 260 sequences.
components: 260
randoop.util.Randomness: total calls to random: 1568
randoop.util.Randomness: total calls to random: 1569
Successfully created new unique sequence:var0 =  cons : C.<init>() : 
var1 =  method : C.test() : var0 
var2 =  method : C.test() : var0 
var3 =  method : C.test() : var0 
var4 =  method : C.test() : var0 
var5 =  method : C.test() : var0 
var6 =  method : C.test() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Adding sequence to active sequences of type class C
Sequence after execution: 
C var0 = new C();
// <NormalExecution object=object-of-type-C>;
int var1 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var2 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var3 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var4 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var5 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var6 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
<randoop.PrimValue, value=23 [var1]  : true
<randoop.PrimValue, value=23 [var2]  : true
<randoop.PrimValue, value=23 [var3]  : true
<randoop.PrimValue, value=23 [var4]  : true
<randoop.PrimValue, value=23 [var5]  : true
<randoop.PrimValue, value=23 [var6]  : true

allSequences.size()=281
-------------------------------------------
randoop.util.Randomness: total calls to random: 1570
Selected statement: B.m()
Will query component set for objects of typeclass B
getActivesequencesThatYield: entering method, clazz=class B
getActivesequencesThatYield: returning 261 sequences.
components: 261
randoop.util.Randomness: total calls to random: 1571
randoop.util.Randomness: total calls to random: 1572
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 1573
Selected statement: B.m()
Will query component set for objects of typeclass B
getActivesequencesThatYield: entering method, clazz=class B
getActivesequencesThatYield: returning 261 sequences.
components: 261
randoop.util.Randomness: total calls to random: 1574
randoop.util.Randomness: total calls to random: 1575
Successfully created new unique sequence:var0 =  cons : C.<init>() : 
var1 =  method : C.test() : var0 
var2 =  method : C.test() : var0 
var3 =  method : C.test() : var0 
var4 =  method : B.m() : var0 
var5 =  method : B.m() : var0 
var6 =  method : C.test() : var0 
var7 =  method : B.m() : var0 
var8 =  method : B.m() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Adding sequence to active sequences of type class C
Sequence after execution: 
C var0 = new C();
// <NormalExecution object=object-of-type-C>;
int var1 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var2 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var3 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var4 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var5 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var6 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var7 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var8 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
<randoop.PrimValue, value=23 [var1]  : true
<randoop.PrimValue, value=23 [var2]  : true
<randoop.PrimValue, value=23 [var3]  : true
<randoop.PrimValue, value=23 [var4]  : true
<randoop.PrimValue, value=23 [var5]  : true
<randoop.PrimValue, value=23 [var6]  : true
<randoop.PrimValue, value=23 [var7]  : true
<randoop.PrimValue, value=23 [var8]  : true

allSequences.size()=282
-------------------------------------------
randoop.util.Randomness: total calls to random: 1576
Selected statement: B.k()
Will query component set for objects of typeclass B
getActivesequencesThatYield: entering method, clazz=class B
getActivesequencesThatYield: returning 264 sequences.
components: 264
randoop.util.Randomness: total calls to random: 1577
randoop.util.Randomness: total calls to random: 1578
Successfully created new unique sequence:var0 =  cons : C.<init>() : 
var1 =  method : C.test() : var0 
var2 =  method : C.test() : var0 
var3 =  method : B.m() : var0 
var4 =  method : C.test() : var0 
var5 =  method : B.k() : var0 
var6 =  method : C.test() : var0 
var7 =  method : B.k() : var0 
var8 =  method : B.k() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Adding sequence to active sequences of type class C
Sequence after execution: 
C var0 = new C();
// <NormalExecution object=object-of-type-C>;
int var1 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var2 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var3 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var4 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var5 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var6 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var7 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var8 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
<randoop.PrimValue, value=23 [var1]  : true
<randoop.PrimValue, value=23 [var2]  : true
<randoop.PrimValue, value=23 [var3]  : true
<randoop.PrimValue, value=23 [var4]  : true
<randoop.PrimValue, value=42 [var5]  : true
<randoop.PrimValue, value=23 [var6]  : true
<randoop.PrimValue, value=42 [var7]  : true
<randoop.PrimValue, value=42 [var8]  : true

allSequences.size()=283
-------------------------------------------
randoop.util.Randomness: total calls to random: 1579
Selected statement: C.test()
Will query component set for objects of typeclass C
getActivesequencesThatYield: entering method, clazz=class C
getActivesequencesThatYield: returning 263 sequences.
components: 263
randoop.util.Randomness: total calls to random: 1580
randoop.util.Randomness: total calls to random: 1581
Successfully created new unique sequence:var0 =  cons : C.<init>() : 
var1 =  method : C.test() : var0 
var2 =  method : C.test() : var0 
var3 =  method : B.m() : var0 
var4 =  method : C.test() : var0 
var5 =  method : B.k() : var0 
var6 =  method : B.m() : var0 
var7 =  method : C.test() : var0 
var8 =  method : B.m() : var0 
var9 =  method : C.test() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Adding sequence to active sequences of type class C
Sequence after execution: 
C var0 = new C();
// <NormalExecution object=object-of-type-C>;
int var1 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var2 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var3 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var4 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var5 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var6 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var7 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var8 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var9 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
<randoop.PrimValue, value=23 [var1]  : true
<randoop.PrimValue, value=23 [var2]  : true
<randoop.PrimValue, value=23 [var3]  : true
<randoop.PrimValue, value=23 [var4]  : true
<randoop.PrimValue, value=42 [var5]  : true
<randoop.PrimValue, value=23 [var6]  : true
<randoop.PrimValue, value=23 [var7]  : true
<randoop.PrimValue, value=23 [var8]  : true
<randoop.PrimValue, value=23 [var9]  : true

allSequences.size()=284
-------------------------------------------
randoop.util.Randomness: total calls to random: 1582
Selected statement: B.k()
Will query component set for objects of typeclass B
getActivesequencesThatYield: entering method, clazz=class B
getActivesequencesThatYield: returning 266 sequences.
components: 266
randoop.util.Randomness: total calls to random: 1583
randoop.util.Randomness: total calls to random: 1584
Successfully created new unique sequence:var0 =  cons : C.<init>() : 
var1 =  method : C.test() : var0 
var2 =  method : C.test() : var0 
var3 =  method : C.test() : var0 
var4 =  method : B.m() : var0 
var5 =  method : B.m() : var0 
var6 =  method : B.k() : var0 
var7 =  method : B.k() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Adding sequence to active sequences of type class C
Sequence after execution: 
C var0 = new C();
// <NormalExecution object=object-of-type-C>;
int var1 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var2 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var3 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var4 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var5 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var6 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var7 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
<randoop.PrimValue, value=23 [var1]  : true
<randoop.PrimValue, value=23 [var2]  : true
<randoop.PrimValue, value=23 [var3]  : true
<randoop.PrimValue, value=23 [var4]  : true
<randoop.PrimValue, value=23 [var5]  : true
<randoop.PrimValue, value=42 [var6]  : true
<randoop.PrimValue, value=42 [var7]  : true

allSequences.size()=285
-------------------------------------------
randoop.util.Randomness: total calls to random: 1585
Selected statement: B.k()
Will query component set for objects of typeclass B
getActivesequencesThatYield: entering method, clazz=class B
getActivesequencesThatYield: returning 267 sequences.
components: 267
randoop.util.Randomness: total calls to random: 1586
randoop.util.Randomness: total calls to random: 1587
Successfully created new unique sequence:var0 =  cons : C.<init>() : 
var1 =  method : C.test() : var0 
var2 =  method : C.test() : var0 
var3 =  method : C.test() : var0 
var4 =  method : C.test() : var0 
var5 =  method : B.k() : var0 
var6 =  method : B.m() : var0 
var7 =  method : C.test() : var0 
var8 =  method : B.k() : var0 
var9 =  method : B.m() : var0 
var10 =  method : B.k() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Adding sequence to active sequences of type class C
Sequence after execution: 
C var0 = new C();
// <NormalExecution object=object-of-type-C>;
int var1 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var2 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var3 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var4 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var5 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var6 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var7 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var8 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var9 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var10 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
<randoop.PrimValue, value=23 [var1]  : true
<randoop.PrimValue, value=23 [var2]  : true
<randoop.PrimValue, value=23 [var3]  : true
<randoop.PrimValue, value=23 [var4]  : true
<randoop.PrimValue, value=42 [var5]  : true
<randoop.PrimValue, value=23 [var6]  : true
<randoop.PrimValue, value=23 [var7]  : true
<randoop.PrimValue, value=42 [var8]  : true
<randoop.PrimValue, value=23 [var9]  : true
<randoop.PrimValue, value=42 [var10]  : true

allSequences.size()=286
-------------------------------------------
randoop.util.Randomness: total calls to random: 1588
Selected statement: C.test()
Will query component set for objects of typeclass C
getActivesequencesThatYield: entering method, clazz=class C
getActivesequencesThatYield: returning 266 sequences.
components: 266
randoop.util.Randomness: total calls to random: 1589
randoop.util.Randomness: total calls to random: 1590
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 1591
Selected statement: B.m()
Will query component set for objects of typeclass B
getActivesequencesThatYield: entering method, clazz=class B
getActivesequencesThatYield: returning 266 sequences.
components: 266
randoop.util.Randomness: total calls to random: 1592
randoop.util.Randomness: total calls to random: 1593
Successfully created new unique sequence:var0 =  cons : C.<init>() : 
var1 =  method : B.m() : var0 
var2 =  method : B.k() : var0 
var3 =  method : B.k() : var0 
var4 =  method : B.m() : var0 
var5 =  method : C.test() : var0 
var6 =  method : C.test() : var0 
var7 =  method : C.test() : var0 
var8 =  method : C.test() : var0 
var9 =  method : B.m() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Adding sequence to active sequences of type class C
Sequence after execution: 
C var0 = new C();
// <NormalExecution object=object-of-type-C>;
int var1 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var2 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var3 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var4 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var5 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var6 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var7 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var8 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var9 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
<randoop.PrimValue, value=23 [var1]  : true
<randoop.PrimValue, value=42 [var2]  : true
<randoop.PrimValue, value=42 [var3]  : true
<randoop.PrimValue, value=23 [var4]  : true
<randoop.PrimValue, value=23 [var5]  : true
<randoop.PrimValue, value=23 [var6]  : true
<randoop.PrimValue, value=23 [var7]  : true
<randoop.PrimValue, value=23 [var8]  : true
<randoop.PrimValue, value=23 [var9]  : true

allSequences.size()=287
-------------------------------------------
randoop.util.Randomness: total calls to random: 1594
Selected statement: B.k()
Will query component set for objects of typeclass B
getActivesequencesThatYield: entering method, clazz=class B
getActivesequencesThatYield: returning 269 sequences.
components: 269
randoop.util.Randomness: total calls to random: 1595
randoop.util.Randomness: total calls to random: 1596
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 1597
Selected statement: C.test()
Will query component set for objects of typeclass C
getActivesequencesThatYield: entering method, clazz=class C
getActivesequencesThatYield: returning 267 sequences.
components: 267
randoop.util.Randomness: total calls to random: 1598
randoop.util.Randomness: total calls to random: 1599
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 1600
Selected statement: B.k()
Will query component set for objects of typeclass B
getActivesequencesThatYield: entering method, clazz=class B
getActivesequencesThatYield: returning 269 sequences.
components: 269
randoop.util.Randomness: total calls to random: 1601
randoop.util.Randomness: total calls to random: 1602
Successfully created new unique sequence:var0 =  cons : C.<init>() : 
var1 =  method : C.test() : var0 
var2 =  method : C.test() : var0 
var3 =  method : B.m() : var0 
var4 =  method : C.test() : var0 
var5 =  method : B.k() : var0 
var6 =  method : B.m() : var0 
var7 =  method : C.test() : var0 
var8 =  method : C.test() : var0 
var9 =  method : B.k() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Adding sequence to active sequences of type class C
Sequence after execution: 
C var0 = new C();
// <NormalExecution object=object-of-type-C>;
int var1 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var2 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var3 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var4 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var5 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var6 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var7 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var8 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var9 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
<randoop.PrimValue, value=23 [var1]  : true
<randoop.PrimValue, value=23 [var2]  : true
<randoop.PrimValue, value=23 [var3]  : true
<randoop.PrimValue, value=23 [var4]  : true
<randoop.PrimValue, value=42 [var5]  : true
<randoop.PrimValue, value=23 [var6]  : true
<randoop.PrimValue, value=23 [var7]  : true
<randoop.PrimValue, value=23 [var8]  : true
<randoop.PrimValue, value=42 [var9]  : true

allSequences.size()=288
-------------------------------------------
randoop.util.Randomness: total calls to random: 1603
Selected statement: B.k()
Will query component set for objects of typeclass B
getActivesequencesThatYield: entering method, clazz=class B
getActivesequencesThatYield: returning 270 sequences.
components: 270
randoop.util.Randomness: total calls to random: 1604
randoop.util.Randomness: total calls to random: 1605
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 1606
Selected statement: A.k()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 17 sequences.
components: 17
randoop.util.Randomness: total calls to random: 1607
randoop.util.Randomness: total calls to random: 1608
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 1609
Selected statement: B.k()
Will query component set for objects of typeclass B
getActivesequencesThatYield: entering method, clazz=class B
getActivesequencesThatYield: returning 270 sequences.
components: 270
randoop.util.Randomness: total calls to random: 1610
randoop.util.Randomness: total calls to random: 1611
Successfully created new unique sequence:var0 =  cons : C.<init>() : 
var1 =  method : B.m() : var0 
var2 =  method : B.k() : var0 
var3 =  method : B.k() : var0 
var4 =  method : B.m() : var0 
var5 =  method : C.test() : var0 
var6 =  method : C.test() : var0 
var7 =  method : B.k() : var0 
var8 =  method : C.test() : var0 
var9 =  method : B.k() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Adding sequence to active sequences of type class C
Sequence after execution: 
C var0 = new C();
// <NormalExecution object=object-of-type-C>;
int var1 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var2 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var3 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var4 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var5 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var6 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var7 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var8 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var9 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
<randoop.PrimValue, value=23 [var1]  : true
<randoop.PrimValue, value=42 [var2]  : true
<randoop.PrimValue, value=42 [var3]  : true
<randoop.PrimValue, value=23 [var4]  : true
<randoop.PrimValue, value=23 [var5]  : true
<randoop.PrimValue, value=23 [var6]  : true
<randoop.PrimValue, value=42 [var7]  : true
<randoop.PrimValue, value=23 [var8]  : true
<randoop.PrimValue, value=42 [var9]  : true

allSequences.size()=289
-------------------------------------------
randoop.util.Randomness: total calls to random: 1612
Selected statement: C.test()
Will query component set for objects of typeclass C
getActivesequencesThatYield: entering method, clazz=class C
getActivesequencesThatYield: returning 269 sequences.
components: 269
randoop.util.Randomness: total calls to random: 1613
randoop.util.Randomness: total calls to random: 1614
Successfully created new unique sequence:var0 =  cons : C.<init>() : 
var1 =  method : B.m() : var0 
var2 =  method : B.k() : var0 
var3 =  method : B.k() : var0 
var4 =  method : B.m() : var0 
var5 =  method : B.m() : var0 
var6 =  method : C.test() : var0 
var7 =  method : B.m() : var0 
var8 =  method : B.m() : var0 
var9 =  method : C.test() : var0 
var10 =  method : B.k() : var0 
var11 =  method : C.test() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Adding sequence to active sequences of type class C
Sequence after execution: 
C var0 = new C();
// <NormalExecution object=object-of-type-C>;
int var1 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var2 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var3 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var4 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var5 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var6 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var7 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var8 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var9 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var10 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var11 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
<randoop.PrimValue, value=23 [var1]  : true
<randoop.PrimValue, value=42 [var2]  : true
<randoop.PrimValue, value=42 [var3]  : true
<randoop.PrimValue, value=23 [var4]  : true
<randoop.PrimValue, value=23 [var5]  : true
<randoop.PrimValue, value=23 [var6]  : true
<randoop.PrimValue, value=23 [var7]  : true
<randoop.PrimValue, value=23 [var8]  : true
<randoop.PrimValue, value=23 [var9]  : true
<randoop.PrimValue, value=42 [var10]  : true
<randoop.PrimValue, value=23 [var11]  : true

allSequences.size()=290
-------------------------------------------
randoop.util.Randomness: total calls to random: 1615
Selected statement: B.m()
Will query component set for objects of typeclass B
getActivesequencesThatYield: entering method, clazz=class B
getActivesequencesThatYield: returning 270 sequences.
components: 270
randoop.util.Randomness: total calls to random: 1616
randoop.util.Randomness: total calls to random: 1617
Successfully created new unique sequence:var0 =  cons : C.<init>() : 
var1 =  method : C.test() : var0 
var2 =  method : C.test() : var0 
var3 =  method : C.test() : var0 
var4 =  method : C.test() : var0 
var5 =  method : C.test() : var0 
var6 =  method : B.m() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Adding sequence to active sequences of type class C
Sequence after execution: 
C var0 = new C();
// <NormalExecution object=object-of-type-C>;
int var1 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var2 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var3 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var4 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var5 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var6 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
<randoop.PrimValue, value=23 [var1]  : true
<randoop.PrimValue, value=23 [var2]  : true
<randoop.PrimValue, value=23 [var3]  : true
<randoop.PrimValue, value=23 [var4]  : true
<randoop.PrimValue, value=23 [var5]  : true
<randoop.PrimValue, value=23 [var6]  : true

allSequences.size()=291
-------------------------------------------
randoop.util.Randomness: total calls to random: 1618
Selected statement: A.k()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 17 sequences.
components: 17
randoop.util.Randomness: total calls to random: 1619
randoop.util.Randomness: total calls to random: 1620
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 1621
Selected statement: C.test()
Will query component set for objects of typeclass C
getActivesequencesThatYield: entering method, clazz=class C
getActivesequencesThatYield: returning 271 sequences.
components: 271
randoop.util.Randomness: total calls to random: 1622
randoop.util.Randomness: total calls to random: 1623
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 1624
Selected statement: A.k()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 17 sequences.
components: 17
randoop.util.Randomness: total calls to random: 1625
randoop.util.Randomness: total calls to random: 1626
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 1627
Selected statement: A.k()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 17 sequences.
components: 17
randoop.util.Randomness: total calls to random: 1628
randoop.util.Randomness: total calls to random: 1629
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.k() : var0 
var2 =  method : A.k() : var0 
var3 =  method : A.k() : var0 
var4 =  method : A.k() : var0 
var5 =  method : A.k() : var0 
var6 =  method : A.k() : var0 
var7 =  method : A.k() : var0 
var8 =  method : A.k() : var0 
var9 =  method : A.k() : var0 
var10 =  method : A.k() : var0 
var11 =  method : A.k() : var0 
var12 =  method : A.k() : var0 
var13 =  method : A.k() : var0 
var14 =  method : A.k() : var0 
var15 =  method : A.k() : var0 
var16 =  method : A.k() : var0 
var17 =  method : A.k() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Making index 12 inactive (value is a primitive)
Making index 13 inactive (value is a primitive)
Making index 14 inactive (value is a primitive)
Making index 15 inactive (value is a primitive)
Making index 16 inactive (value is a primitive)
Making index 17 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
int var1 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var2 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var3 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var4 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var5 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var6 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var7 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var8 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var9 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var10 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var11 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var12 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var13 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var14 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var15 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var16 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var17 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
<randoop.PrimValue, value=23 [var1]  : true
<randoop.PrimValue, value=23 [var2]  : true
<randoop.PrimValue, value=23 [var3]  : true
<randoop.PrimValue, value=23 [var4]  : true
<randoop.PrimValue, value=23 [var5]  : true
<randoop.PrimValue, value=23 [var6]  : true
<randoop.PrimValue, value=23 [var7]  : true
<randoop.PrimValue, value=23 [var8]  : true
<randoop.PrimValue, value=23 [var9]  : true
<randoop.PrimValue, value=23 [var10]  : true
<randoop.PrimValue, value=23 [var11]  : true
<randoop.PrimValue, value=23 [var12]  : true
<randoop.PrimValue, value=23 [var13]  : true
<randoop.PrimValue, value=23 [var14]  : true
<randoop.PrimValue, value=23 [var15]  : true
<randoop.PrimValue, value=23 [var16]  : true
<randoop.PrimValue, value=23 [var17]  : true

allSequences.size()=292
-------------------------------------------
randoop.util.Randomness: total calls to random: 1630
Selected statement: C.test()
Will query component set for objects of typeclass C
getActivesequencesThatYield: entering method, clazz=class C
getActivesequencesThatYield: returning 271 sequences.
components: 271
randoop.util.Randomness: total calls to random: 1631
randoop.util.Randomness: total calls to random: 1632
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 1633
Selected statement: B.m()
Will query component set for objects of typeclass B
getActivesequencesThatYield: entering method, clazz=class B
getActivesequencesThatYield: returning 271 sequences.
components: 271
randoop.util.Randomness: total calls to random: 1634
randoop.util.Randomness: total calls to random: 1635
Successfully created new unique sequence:var0 =  cons : C.<init>() : 
var1 =  method : B.m() : var0 
var2 =  method : B.k() : var0 
var3 =  method : B.k() : var0 
var4 =  method : B.k() : var0 
var5 =  method : B.m() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Adding sequence to active sequences of type class C
Sequence after execution: 
C var0 = new C();
// <NormalExecution object=object-of-type-C>;
int var1 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var2 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var3 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var4 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var5 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
<randoop.PrimValue, value=23 [var1]  : true
<randoop.PrimValue, value=42 [var2]  : true
<randoop.PrimValue, value=42 [var3]  : true
<randoop.PrimValue, value=42 [var4]  : true
<randoop.PrimValue, value=23 [var5]  : true

allSequences.size()=293
-------------------------------------------
randoop.util.Randomness: total calls to random: 1636
Selected statement: A.k()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 18 sequences.
components: 18
randoop.util.Randomness: total calls to random: 1637
randoop.util.Randomness: total calls to random: 1638
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 1639
Selected statement: C.test()
Will query component set for objects of typeclass C
getActivesequencesThatYield: entering method, clazz=class C
getActivesequencesThatYield: returning 272 sequences.
components: 272
randoop.util.Randomness: total calls to random: 1640
randoop.util.Randomness: total calls to random: 1641
Successfully created new unique sequence:var0 =  cons : C.<init>() : 
var1 =  method : C.test() : var0 
var2 =  method : C.test() : var0 
var3 =  method : B.m() : var0 
var4 =  method : C.test() : var0 
var5 =  method : B.k() : var0 
var6 =  method : B.m() : var0 
var7 =  method : C.test() : var0 
var8 =  method : B.k() : var0 
var9 =  method : B.k() : var0 
var10 =  method : C.test() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Adding sequence to active sequences of type class C
Sequence after execution: 
C var0 = new C();
// <NormalExecution object=object-of-type-C>;
int var1 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var2 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var3 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var4 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var5 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var6 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var7 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var8 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var9 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var10 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
<randoop.PrimValue, value=23 [var1]  : true
<randoop.PrimValue, value=23 [var2]  : true
<randoop.PrimValue, value=23 [var3]  : true
<randoop.PrimValue, value=23 [var4]  : true
<randoop.PrimValue, value=42 [var5]  : true
<randoop.PrimValue, value=23 [var6]  : true
<randoop.PrimValue, value=23 [var7]  : true
<randoop.PrimValue, value=42 [var8]  : true
<randoop.PrimValue, value=42 [var9]  : true
<randoop.PrimValue, value=23 [var10]  : true

allSequences.size()=294
-------------------------------------------
randoop.util.Randomness: total calls to random: 1642
Selected statement: B.m()
Will query component set for objects of typeclass B
getActivesequencesThatYield: entering method, clazz=class B
getActivesequencesThatYield: returning 273 sequences.
components: 273
randoop.util.Randomness: total calls to random: 1643
randoop.util.Randomness: total calls to random: 1644
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 1645
Selected statement: B.k()
Will query component set for objects of typeclass B
getActivesequencesThatYield: entering method, clazz=class B
getActivesequencesThatYield: returning 275 sequences.
components: 275
randoop.util.Randomness: total calls to random: 1646
randoop.util.Randomness: total calls to random: 1647
Successfully created new unique sequence:var0 =  cons : C.<init>() : 
var1 =  method : B.m() : var0 
var2 =  method : B.k() : var0 
var3 =  method : C.test() : var0 
var4 =  method : B.k() : var0 
var5 =  method : B.m() : var0 
var6 =  method : C.test() : var0 
var7 =  method : B.m() : var0 
var8 =  method : B.k() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Adding sequence to active sequences of type class C
Sequence after execution: 
C var0 = new C();
// <NormalExecution object=object-of-type-C>;
int var1 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var2 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var3 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var4 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var5 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var6 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var7 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var8 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
<randoop.PrimValue, value=23 [var1]  : true
<randoop.PrimValue, value=42 [var2]  : true
<randoop.PrimValue, value=23 [var3]  : true
<randoop.PrimValue, value=42 [var4]  : true
<randoop.PrimValue, value=23 [var5]  : true
<randoop.PrimValue, value=23 [var6]  : true
<randoop.PrimValue, value=23 [var7]  : true
<randoop.PrimValue, value=42 [var8]  : true

allSequences.size()=295
-------------------------------------------
randoop.util.Randomness: total calls to random: 1648
Selected statement: A.k()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 18 sequences.
components: 18
randoop.util.Randomness: total calls to random: 1649
randoop.util.Randomness: total calls to random: 1650
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 1651
Selected statement: C.test()
Will query component set for objects of typeclass C
getActivesequencesThatYield: entering method, clazz=class C
getActivesequencesThatYield: returning 274 sequences.
components: 274
randoop.util.Randomness: total calls to random: 1652
randoop.util.Randomness: total calls to random: 1653
Successfully created new unique sequence:var0 =  cons : C.<init>() : 
var1 =  method : B.m() : var0 
var2 =  method : B.k() : var0 
var3 =  method : B.m() : var0 
var4 =  method : B.k() : var0 
var5 =  method : C.test() : var0 
var6 =  method : C.test() : var0 
var7 =  method : C.test() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Adding sequence to active sequences of type class C
Sequence after execution: 
C var0 = new C();
// <NormalExecution object=object-of-type-C>;
int var1 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var2 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var3 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var4 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var5 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var6 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var7 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
<randoop.PrimValue, value=23 [var1]  : true
<randoop.PrimValue, value=42 [var2]  : true
<randoop.PrimValue, value=23 [var3]  : true
<randoop.PrimValue, value=42 [var4]  : true
<randoop.PrimValue, value=23 [var5]  : true
<randoop.PrimValue, value=23 [var6]  : true
<randoop.PrimValue, value=23 [var7]  : true

allSequences.size()=296
-------------------------------------------
randoop.util.Randomness: total calls to random: 1654
Selected statement: B.m()
Will query component set for objects of typeclass B
getActivesequencesThatYield: entering method, clazz=class B
getActivesequencesThatYield: returning 275 sequences.
components: 275
randoop.util.Randomness: total calls to random: 1655
randoop.util.Randomness: total calls to random: 1656
Successfully created new unique sequence:var0 =  cons : C.<init>() : 
var1 =  method : C.test() : var0 
var2 =  method : C.test() : var0 
var3 =  method : B.m() : var0 
var4 =  method : C.test() : var0 
var5 =  method : B.k() : var0 
var6 =  method : C.test() : var0 
var7 =  method : C.test() : var0 
var8 =  method : B.m() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Adding sequence to active sequences of type class C
Sequence after execution: 
C var0 = new C();
// <NormalExecution object=object-of-type-C>;
int var1 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var2 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var3 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var4 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var5 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var6 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var7 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var8 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
<randoop.PrimValue, value=23 [var1]  : true
<randoop.PrimValue, value=23 [var2]  : true
<randoop.PrimValue, value=23 [var3]  : true
<randoop.PrimValue, value=23 [var4]  : true
<randoop.PrimValue, value=42 [var5]  : true
<randoop.PrimValue, value=23 [var6]  : true
<randoop.PrimValue, value=23 [var7]  : true
<randoop.PrimValue, value=23 [var8]  : true

allSequences.size()=297
-------------------------------------------
randoop.util.Randomness: total calls to random: 1657
Selected statement: B.k()
Will query component set for objects of typeclass B
getActivesequencesThatYield: entering method, clazz=class B
getActivesequencesThatYield: returning 278 sequences.
components: 278
randoop.util.Randomness: total calls to random: 1658
randoop.util.Randomness: total calls to random: 1659
Successfully created new unique sequence:var0 =  cons : C.<init>() : 
var1 =  method : C.test() : var0 
var2 =  method : C.test() : var0 
var3 =  method : C.test() : var0 
var4 =  method : B.m() : var0 
var5 =  method : C.test() : var0 
var6 =  method : C.test() : var0 
var7 =  method : B.k() : var0 
var8 =  method : C.test() : var0 
var9 =  method : B.k() : var0 
var10 =  method : B.m() : var0 
var11 =  method : B.k() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Adding sequence to active sequences of type class C
Sequence after execution: 
C var0 = new C();
// <NormalExecution object=object-of-type-C>;
int var1 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var2 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var3 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var4 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var5 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var6 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var7 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var8 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var9 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var10 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var11 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
<randoop.PrimValue, value=23 [var1]  : true
<randoop.PrimValue, value=23 [var2]  : true
<randoop.PrimValue, value=23 [var3]  : true
<randoop.PrimValue, value=23 [var4]  : true
<randoop.PrimValue, value=23 [var5]  : true
<randoop.PrimValue, value=23 [var6]  : true
<randoop.PrimValue, value=42 [var7]  : true
<randoop.PrimValue, value=23 [var8]  : true
<randoop.PrimValue, value=42 [var9]  : true
<randoop.PrimValue, value=23 [var10]  : true
<randoop.PrimValue, value=42 [var11]  : true

allSequences.size()=298
-------------------------------------------
randoop.util.Randomness: total calls to random: 1660
Selected statement: A.k()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 18 sequences.
components: 18
randoop.util.Randomness: total calls to random: 1661
randoop.util.Randomness: total calls to random: 1662
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 1663
Selected statement: A.k()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 18 sequences.
components: 18
randoop.util.Randomness: total calls to random: 1664
randoop.util.Randomness: total calls to random: 1665
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 1666
Selected statement: C.test()
Will query component set for objects of typeclass C
getActivesequencesThatYield: entering method, clazz=class C
getActivesequencesThatYield: returning 277 sequences.
components: 277
randoop.util.Randomness: total calls to random: 1667
randoop.util.Randomness: total calls to random: 1668
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 1669
Selected statement: B.m()
Will query component set for objects of typeclass B
getActivesequencesThatYield: entering method, clazz=class B
getActivesequencesThatYield: returning 277 sequences.
components: 277
randoop.util.Randomness: total calls to random: 1670
randoop.util.Randomness: total calls to random: 1671
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 1672
Selected statement: B.m()
Will query component set for objects of typeclass B
getActivesequencesThatYield: entering method, clazz=class B
getActivesequencesThatYield: returning 277 sequences.
components: 277
randoop.util.Randomness: total calls to random: 1673
randoop.util.Randomness: total calls to random: 1674
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 1675
Selected statement: B.k()
Will query component set for objects of typeclass B
getActivesequencesThatYield: entering method, clazz=class B
getActivesequencesThatYield: returning 279 sequences.
components: 279
randoop.util.Randomness: total calls to random: 1676
randoop.util.Randomness: total calls to random: 1677
Successfully created new unique sequence:var0 =  cons : C.<init>() : 
var1 =  method : B.m() : var0 
var2 =  method : B.k() : var0 
var3 =  method : B.m() : var0 
var4 =  method : B.k() : var0 
var5 =  method : C.test() : var0 
var6 =  method : B.m() : var0 
var7 =  method : C.test() : var0 
var8 =  method : B.k() : var0 
var9 =  method : B.m() : var0 
var10 =  method : B.k() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Adding sequence to active sequences of type class C
Sequence after execution: 
C var0 = new C();
// <NormalExecution object=object-of-type-C>;
int var1 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var2 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var3 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var4 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var5 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var6 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var7 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var8 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var9 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var10 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
<randoop.PrimValue, value=23 [var1]  : true
<randoop.PrimValue, value=42 [var2]  : true
<randoop.PrimValue, value=23 [var3]  : true
<randoop.PrimValue, value=42 [var4]  : true
<randoop.PrimValue, value=23 [var5]  : true
<randoop.PrimValue, value=23 [var6]  : true
<randoop.PrimValue, value=23 [var7]  : true
<randoop.PrimValue, value=42 [var8]  : true
<randoop.PrimValue, value=23 [var9]  : true
<randoop.PrimValue, value=42 [var10]  : true

allSequences.size()=299
-------------------------------------------
randoop.util.Randomness: total calls to random: 1678
Selected statement: A.k()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 18 sequences.
components: 18
randoop.util.Randomness: total calls to random: 1679
randoop.util.Randomness: total calls to random: 1680
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.k() : var0 
var2 =  method : A.k() : var0 
var3 =  method : A.k() : var0 
var4 =  method : A.k() : var0 
var5 =  method : A.k() : var0 
var6 =  method : A.k() : var0 
var7 =  method : A.k() : var0 
var8 =  method : A.k() : var0 
var9 =  method : A.k() : var0 
var10 =  method : A.k() : var0 
var11 =  method : A.k() : var0 
var12 =  method : A.k() : var0 
var13 =  method : A.k() : var0 
var14 =  method : A.k() : var0 
var15 =  method : A.k() : var0 
var16 =  method : A.k() : var0 
var17 =  method : A.k() : var0 
var18 =  method : A.k() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Making index 12 inactive (value is a primitive)
Making index 13 inactive (value is a primitive)
Making index 14 inactive (value is a primitive)
Making index 15 inactive (value is a primitive)
Making index 16 inactive (value is a primitive)
Making index 17 inactive (value is a primitive)
Making index 18 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
int var1 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var2 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var3 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var4 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var5 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var6 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var7 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var8 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var9 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var10 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var11 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var12 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var13 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var14 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var15 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var16 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var17 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var18 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
<randoop.PrimValue, value=23 [var1]  : true
<randoop.PrimValue, value=23 [var2]  : true
<randoop.PrimValue, value=23 [var3]  : true
<randoop.PrimValue, value=23 [var4]  : true
<randoop.PrimValue, value=23 [var5]  : true
<randoop.PrimValue, value=23 [var6]  : true
<randoop.PrimValue, value=23 [var7]  : true
<randoop.PrimValue, value=23 [var8]  : true
<randoop.PrimValue, value=23 [var9]  : true
<randoop.PrimValue, value=23 [var10]  : true
<randoop.PrimValue, value=23 [var11]  : true
<randoop.PrimValue, value=23 [var12]  : true
<randoop.PrimValue, value=23 [var13]  : true
<randoop.PrimValue, value=23 [var14]  : true
<randoop.PrimValue, value=23 [var15]  : true
<randoop.PrimValue, value=23 [var16]  : true
<randoop.PrimValue, value=23 [var17]  : true
<randoop.PrimValue, value=23 [var18]  : true

allSequences.size()=300
-------------------------------------------
randoop.util.Randomness: total calls to random: 1681
Selected statement: B.k()
Will query component set for objects of typeclass B
getActivesequencesThatYield: entering method, clazz=class B
getActivesequencesThatYield: returning 280 sequences.
components: 280
randoop.util.Randomness: total calls to random: 1682
randoop.util.Randomness: total calls to random: 1683
Successfully created new unique sequence:var0 =  cons : C.<init>() : 
var1 =  method : B.m() : var0 
var2 =  method : B.k() : var0 
var3 =  method : B.k() : var0 
var4 =  method : B.k() : var0 
var5 =  method : B.k() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Adding sequence to active sequences of type class C
Sequence after execution: 
C var0 = new C();
// <NormalExecution object=object-of-type-C>;
int var1 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var2 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var3 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var4 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var5 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
<randoop.PrimValue, value=23 [var1]  : true
<randoop.PrimValue, value=42 [var2]  : true
<randoop.PrimValue, value=42 [var3]  : true
<randoop.PrimValue, value=42 [var4]  : true
<randoop.PrimValue, value=42 [var5]  : true

allSequences.size()=301
-------------------------------------------
randoop.util.Randomness: total calls to random: 1684
Selected statement: B.k()
Will query component set for objects of typeclass B
getActivesequencesThatYield: entering method, clazz=class B
getActivesequencesThatYield: returning 281 sequences.
components: 281
randoop.util.Randomness: total calls to random: 1685
randoop.util.Randomness: total calls to random: 1686
Successfully created new unique sequence:var0 =  cons : C.<init>() : 
var1 =  method : B.m() : var0 
var2 =  method : B.k() : var0 
var3 =  method : B.m() : var0 
var4 =  method : B.k() : var0 
var5 =  method : C.test() : var0 
var6 =  method : B.m() : var0 
var7 =  method : B.m() : var0 
var8 =  method : B.k() : var0 
var9 =  method : B.k() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Adding sequence to active sequences of type class C
Sequence after execution: 
C var0 = new C();
// <NormalExecution object=object-of-type-C>;
int var1 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var2 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var3 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var4 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var5 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var6 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var7 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var8 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var9 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
<randoop.PrimValue, value=23 [var1]  : true
<randoop.PrimValue, value=42 [var2]  : true
<randoop.PrimValue, value=23 [var3]  : true
<randoop.PrimValue, value=42 [var4]  : true
<randoop.PrimValue, value=23 [var5]  : true
<randoop.PrimValue, value=23 [var6]  : true
<randoop.PrimValue, value=23 [var7]  : true
<randoop.PrimValue, value=42 [var8]  : true
<randoop.PrimValue, value=42 [var9]  : true

allSequences.size()=302
-------------------------------------------
randoop.util.Randomness: total calls to random: 1687
Selected statement: C.test()
Will query component set for objects of typeclass C
getActivesequencesThatYield: entering method, clazz=class C
getActivesequencesThatYield: returning 280 sequences.
components: 280
randoop.util.Randomness: total calls to random: 1688
randoop.util.Randomness: total calls to random: 1689
Successfully created new unique sequence:var0 =  cons : C.<init>() : 
var1 =  method : B.m() : var0 
var2 =  method : B.k() : var0 
var3 =  method : B.k() : var0 
var4 =  method : B.m() : var0 
var5 =  method : B.m() : var0 
var6 =  method : C.test() : var0 
var7 =  method : B.m() : var0 
var8 =  method : B.m() : var0 
var9 =  method : C.test() : var0 
var10 =  method : C.test() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Adding sequence to active sequences of type class C
Sequence after execution: 
C var0 = new C();
// <NormalExecution object=object-of-type-C>;
int var1 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var2 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var3 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var4 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var5 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var6 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var7 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var8 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var9 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var10 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
<randoop.PrimValue, value=23 [var1]  : true
<randoop.PrimValue, value=42 [var2]  : true
<randoop.PrimValue, value=42 [var3]  : true
<randoop.PrimValue, value=23 [var4]  : true
<randoop.PrimValue, value=23 [var5]  : true
<randoop.PrimValue, value=23 [var6]  : true
<randoop.PrimValue, value=23 [var7]  : true
<randoop.PrimValue, value=23 [var8]  : true
<randoop.PrimValue, value=23 [var9]  : true
<randoop.PrimValue, value=23 [var10]  : true

allSequences.size()=303
-------------------------------------------
randoop.util.Randomness: total calls to random: 1690
Selected statement: B.k()
Will query component set for objects of typeclass B
getActivesequencesThatYield: entering method, clazz=class B
getActivesequencesThatYield: returning 283 sequences.
components: 283
randoop.util.Randomness: total calls to random: 1691
randoop.util.Randomness: total calls to random: 1692
Successfully created new unique sequence:var0 =  cons : C.<init>() : 
var1 =  method : B.m() : var0 
var2 =  method : B.k() : var0 
var3 =  method : B.m() : var0 
var4 =  method : C.test() : var0 
var5 =  method : B.m() : var0 
var6 =  method : B.m() : var0 
var7 =  method : B.k() : var0 
var8 =  method : B.k() : var0 
var9 =  method : B.m() : var0 
var10 =  method : B.k() : var0 
var11 =  method : B.k() : var0 
var12 =  method : C.test() : var0 
var13 =  method : B.m() : var0 
var14 =  method : B.k() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Making index 12 inactive (value is a primitive)
Making index 13 inactive (value is a primitive)
Making index 14 inactive (value is a primitive)
Adding sequence to active sequences of type class C
Sequence after execution: 
C var0 = new C();
// <NormalExecution object=object-of-type-C>;
int var1 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var2 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var3 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var4 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var5 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var6 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var7 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var8 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var9 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var10 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var11 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var12 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var13 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var14 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
<randoop.PrimValue, value=23 [var1]  : true
<randoop.PrimValue, value=42 [var2]  : true
<randoop.PrimValue, value=23 [var3]  : true
<randoop.PrimValue, value=23 [var4]  : true
<randoop.PrimValue, value=23 [var5]  : true
<randoop.PrimValue, value=23 [var6]  : true
<randoop.PrimValue, value=42 [var7]  : true
<randoop.PrimValue, value=42 [var8]  : true
<randoop.PrimValue, value=23 [var9]  : true
<randoop.PrimValue, value=42 [var10]  : true
<randoop.PrimValue, value=42 [var11]  : true
<randoop.PrimValue, value=23 [var12]  : true
<randoop.PrimValue, value=23 [var13]  : true
<randoop.PrimValue, value=42 [var14]  : true

allSequences.size()=304
-------------------------------------------
randoop.util.Randomness: total calls to random: 1693
Selected statement: A.k()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 19 sequences.
components: 19
randoop.util.Randomness: total calls to random: 1694
randoop.util.Randomness: total calls to random: 1695
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 1696
Selected statement: C.test()
Will query component set for objects of typeclass C
getActivesequencesThatYield: entering method, clazz=class C
getActivesequencesThatYield: returning 282 sequences.
components: 282
randoop.util.Randomness: total calls to random: 1697
randoop.util.Randomness: total calls to random: 1698
Successfully created new unique sequence:var0 =  cons : C.<init>() : 
var1 =  method : C.test() : var0 
var2 =  method : C.test() : var0 
var3 =  method : B.m() : var0 
var4 =  method : C.test() : var0 
var5 =  method : B.k() : var0 
var6 =  method : C.test() : var0 
var7 =  method : C.test() : var0 
var8 =  method : C.test() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Adding sequence to active sequences of type class C
Sequence after execution: 
C var0 = new C();
// <NormalExecution object=object-of-type-C>;
int var1 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var2 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var3 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var4 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var5 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var6 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var7 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var8 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
<randoop.PrimValue, value=23 [var1]  : true
<randoop.PrimValue, value=23 [var2]  : true
<randoop.PrimValue, value=23 [var3]  : true
<randoop.PrimValue, value=23 [var4]  : true
<randoop.PrimValue, value=42 [var5]  : true
<randoop.PrimValue, value=23 [var6]  : true
<randoop.PrimValue, value=23 [var7]  : true
<randoop.PrimValue, value=23 [var8]  : true

allSequences.size()=305
-------------------------------------------
randoop.util.Randomness: total calls to random: 1699
Selected statement: C.test()
Will query component set for objects of typeclass C
getActivesequencesThatYield: entering method, clazz=class C
getActivesequencesThatYield: returning 283 sequences.
components: 283
randoop.util.Randomness: total calls to random: 1700
randoop.util.Randomness: total calls to random: 1701
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 1702
Selected statement: B.m()
Will query component set for objects of typeclass B
getActivesequencesThatYield: entering method, clazz=class B
getActivesequencesThatYield: returning 283 sequences.
components: 283
randoop.util.Randomness: total calls to random: 1703
randoop.util.Randomness: total calls to random: 1704
Successfully created new unique sequence:var0 =  cons : C.<init>() : 
var1 =  method : C.test() : var0 
var2 =  method : C.test() : var0 
var3 =  method : C.test() : var0 
var4 =  method : B.m() : var0 
var5 =  method : B.m() : var0 
var6 =  method : B.k() : var0 
var7 =  method : B.m() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Adding sequence to active sequences of type class C
Sequence after execution: 
C var0 = new C();
// <NormalExecution object=object-of-type-C>;
int var1 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var2 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var3 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var4 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var5 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var6 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var7 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
<randoop.PrimValue, value=23 [var1]  : true
<randoop.PrimValue, value=23 [var2]  : true
<randoop.PrimValue, value=23 [var3]  : true
<randoop.PrimValue, value=23 [var4]  : true
<randoop.PrimValue, value=23 [var5]  : true
<randoop.PrimValue, value=42 [var6]  : true
<randoop.PrimValue, value=23 [var7]  : true

allSequences.size()=306
-------------------------------------------
randoop.util.Randomness: total calls to random: 1705
Selected statement: C.test()
Will query component set for objects of typeclass C
getActivesequencesThatYield: entering method, clazz=class C
getActivesequencesThatYield: returning 284 sequences.
components: 284
randoop.util.Randomness: total calls to random: 1706
randoop.util.Randomness: total calls to random: 1707
Successfully created new unique sequence:var0 =  cons : C.<init>() : 
var1 =  method : C.test() : var0 
var2 =  method : C.test() : var0 
var3 =  method : B.m() : var0 
var4 =  method : C.test() : var0 
var5 =  method : B.k() : var0 
var6 =  method : C.test() : var0 
var7 =  method : C.test() : var0 
var8 =  method : B.m() : var0 
var9 =  method : C.test() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Adding sequence to active sequences of type class C
Sequence after execution: 
C var0 = new C();
// <NormalExecution object=object-of-type-C>;
int var1 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var2 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var3 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var4 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var5 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var6 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var7 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var8 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var9 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
<randoop.PrimValue, value=23 [var1]  : true
<randoop.PrimValue, value=23 [var2]  : true
<randoop.PrimValue, value=23 [var3]  : true
<randoop.PrimValue, value=23 [var4]  : true
<randoop.PrimValue, value=42 [var5]  : true
<randoop.PrimValue, value=23 [var6]  : true
<randoop.PrimValue, value=23 [var7]  : true
<randoop.PrimValue, value=23 [var8]  : true
<randoop.PrimValue, value=23 [var9]  : true

allSequences.size()=307
-------------------------------------------
randoop.util.Randomness: total calls to random: 1708
Selected statement: C.test()
Will query component set for objects of typeclass C
getActivesequencesThatYield: entering method, clazz=class C
getActivesequencesThatYield: returning 285 sequences.
components: 285
randoop.util.Randomness: total calls to random: 1709
randoop.util.Randomness: total calls to random: 1710
Successfully created new unique sequence:var0 =  cons : C.<init>() : 
var1 =  method : B.m() : var0 
var2 =  method : B.k() : var0 
var3 =  method : B.k() : var0 
var4 =  method : B.m() : var0 
var5 =  method : B.m() : var0 
var6 =  method : C.test() : var0 
var7 =  method : B.m() : var0 
var8 =  method : B.m() : var0 
var9 =  method : C.test() : var0 
var10 =  method : B.k() : var0 
var11 =  method : C.test() : var0 
var12 =  method : C.test() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Making index 12 inactive (value is a primitive)
Adding sequence to active sequences of type class C
Sequence after execution: 
C var0 = new C();
// <NormalExecution object=object-of-type-C>;
int var1 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var2 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var3 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var4 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var5 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var6 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var7 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var8 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var9 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var10 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var11 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var12 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
<randoop.PrimValue, value=23 [var1]  : true
<randoop.PrimValue, value=42 [var2]  : true
<randoop.PrimValue, value=42 [var3]  : true
<randoop.PrimValue, value=23 [var4]  : true
<randoop.PrimValue, value=23 [var5]  : true
<randoop.PrimValue, value=23 [var6]  : true
<randoop.PrimValue, value=23 [var7]  : true
<randoop.PrimValue, value=23 [var8]  : true
<randoop.PrimValue, value=23 [var9]  : true
<randoop.PrimValue, value=42 [var10]  : true
<randoop.PrimValue, value=23 [var11]  : true
<randoop.PrimValue, value=23 [var12]  : true

allSequences.size()=308
-------------------------------------------
randoop.util.Randomness: total calls to random: 1711
Selected statement: A.k()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 19 sequences.
components: 19
randoop.util.Randomness: total calls to random: 1712
randoop.util.Randomness: total calls to random: 1713
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 1714
Selected statement: B.m()
Will query component set for objects of typeclass B
getActivesequencesThatYield: entering method, clazz=class B
getActivesequencesThatYield: returning 286 sequences.
components: 286
randoop.util.Randomness: total calls to random: 1715
randoop.util.Randomness: total calls to random: 1716
Successfully created new unique sequence:var0 =  cons : C.<init>() : 
var1 =  method : C.test() : var0 
var2 =  method : C.test() : var0 
var3 =  method : B.m() : var0 
var4 =  method : C.test() : var0 
var5 =  method : B.k() : var0 
var6 =  method : B.k() : var0 
var7 =  method : C.test() : var0 
var8 =  method : C.test() : var0 
var9 =  method : C.test() : var0 
var10 =  method : C.test() : var0 
var11 =  method : B.m() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Adding sequence to active sequences of type class C
Sequence after execution: 
C var0 = new C();
// <NormalExecution object=object-of-type-C>;
int var1 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var2 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var3 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var4 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var5 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var6 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var7 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var8 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var9 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var10 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var11 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
<randoop.PrimValue, value=23 [var1]  : true
<randoop.PrimValue, value=23 [var2]  : true
<randoop.PrimValue, value=23 [var3]  : true
<randoop.PrimValue, value=23 [var4]  : true
<randoop.PrimValue, value=42 [var5]  : true
<randoop.PrimValue, value=42 [var6]  : true
<randoop.PrimValue, value=23 [var7]  : true
<randoop.PrimValue, value=23 [var8]  : true
<randoop.PrimValue, value=23 [var9]  : true
<randoop.PrimValue, value=23 [var10]  : true
<randoop.PrimValue, value=23 [var11]  : true

allSequences.size()=309
-------------------------------------------
randoop.util.Randomness: total calls to random: 1717
Selected statement: C.test()
Will query component set for objects of typeclass C
getActivesequencesThatYield: entering method, clazz=class C
getActivesequencesThatYield: returning 287 sequences.
components: 287
randoop.util.Randomness: total calls to random: 1718
randoop.util.Randomness: total calls to random: 1719
Successfully created new unique sequence:var0 =  cons : C.<init>() : 
var1 =  method : B.m() : var0 
var2 =  method : B.k() : var0 
var3 =  method : B.m() : var0 
var4 =  method : C.test() : var0 
var5 =  method : C.test() : var0 
var6 =  method : B.m() : var0 
var7 =  method : B.m() : var0 
var8 =  method : B.m() : var0 
var9 =  method : C.test() : var0 
var10 =  method : C.test() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Adding sequence to active sequences of type class C
Sequence after execution: 
C var0 = new C();
// <NormalExecution object=object-of-type-C>;
int var1 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var2 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var3 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var4 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var5 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var6 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var7 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var8 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var9 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var10 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
<randoop.PrimValue, value=23 [var1]  : true
<randoop.PrimValue, value=42 [var2]  : true
<randoop.PrimValue, value=23 [var3]  : true
<randoop.PrimValue, value=23 [var4]  : true
<randoop.PrimValue, value=23 [var5]  : true
<randoop.PrimValue, value=23 [var6]  : true
<randoop.PrimValue, value=23 [var7]  : true
<randoop.PrimValue, value=23 [var8]  : true
<randoop.PrimValue, value=23 [var9]  : true
<randoop.PrimValue, value=23 [var10]  : true

allSequences.size()=310
-------------------------------------------
randoop.util.Randomness: total calls to random: 1720
Selected statement: B.m()
Will query component set for objects of typeclass B
getActivesequencesThatYield: entering method, clazz=class B
getActivesequencesThatYield: returning 288 sequences.
components: 288
randoop.util.Randomness: total calls to random: 1721
randoop.util.Randomness: total calls to random: 1722
Successfully created new unique sequence:var0 =  cons : C.<init>() : 
var1 =  method : B.m() : var0 
var2 =  method : B.k() : var0 
var3 =  method : B.k() : var0 
var4 =  method : B.m() : var0 
var5 =  method : B.m() : var0 
var6 =  method : C.test() : var0 
var7 =  method : B.m() : var0 
var8 =  method : B.m() : var0 
var9 =  method : C.test() : var0 
var10 =  method : B.m() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Adding sequence to active sequences of type class C
Sequence after execution: 
C var0 = new C();
// <NormalExecution object=object-of-type-C>;
int var1 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var2 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var3 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var4 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var5 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var6 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var7 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var8 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var9 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var10 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
<randoop.PrimValue, value=23 [var1]  : true
<randoop.PrimValue, value=42 [var2]  : true
<randoop.PrimValue, value=42 [var3]  : true
<randoop.PrimValue, value=23 [var4]  : true
<randoop.PrimValue, value=23 [var5]  : true
<randoop.PrimValue, value=23 [var6]  : true
<randoop.PrimValue, value=23 [var7]  : true
<randoop.PrimValue, value=23 [var8]  : true
<randoop.PrimValue, value=23 [var9]  : true
<randoop.PrimValue, value=23 [var10]  : true

allSequences.size()=311
-------------------------------------------
randoop.util.Randomness: total calls to random: 1723
Selected statement: B.m()
Will query component set for objects of typeclass B
getActivesequencesThatYield: entering method, clazz=class B
getActivesequencesThatYield: returning 289 sequences.
components: 289
randoop.util.Randomness: total calls to random: 1724
randoop.util.Randomness: total calls to random: 1725
Successfully created new unique sequence:var0 =  cons : C.<init>() : 
var1 =  method : C.test() : var0 
var2 =  method : C.test() : var0 
var3 =  method : B.m() : var0 
var4 =  method : C.test() : var0 
var5 =  method : B.k() : var0 
var6 =  method : B.m() : var0 
var7 =  method : C.test() : var0 
var8 =  method : B.k() : var0 
var9 =  method : C.test() : var0 
var10 =  method : C.test() : var0 
var11 =  method : B.k() : var0 
var12 =  method : B.m() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Making index 12 inactive (value is a primitive)
Adding sequence to active sequences of type class C
Sequence after execution: 
C var0 = new C();
// <NormalExecution object=object-of-type-C>;
int var1 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var2 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var3 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var4 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var5 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var6 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var7 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var8 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var9 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var10 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var11 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var12 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
<randoop.PrimValue, value=23 [var1]  : true
<randoop.PrimValue, value=23 [var2]  : true
<randoop.PrimValue, value=23 [var3]  : true
<randoop.PrimValue, value=23 [var4]  : true
<randoop.PrimValue, value=42 [var5]  : true
<randoop.PrimValue, value=23 [var6]  : true
<randoop.PrimValue, value=23 [var7]  : true
<randoop.PrimValue, value=42 [var8]  : true
<randoop.PrimValue, value=23 [var9]  : true
<randoop.PrimValue, value=23 [var10]  : true
<randoop.PrimValue, value=42 [var11]  : true
<randoop.PrimValue, value=23 [var12]  : true

allSequences.size()=312
-------------------------------------------
randoop.util.Randomness: total calls to random: 1726
Selected statement: A.k()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 19 sequences.
components: 19
randoop.util.Randomness: total calls to random: 1727
randoop.util.Randomness: total calls to random: 1728
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 1729
Selected statement: B.m()
Will query component set for objects of typeclass B
getActivesequencesThatYield: entering method, clazz=class B
getActivesequencesThatYield: returning 290 sequences.
components: 290
randoop.util.Randomness: total calls to random: 1730
randoop.util.Randomness: total calls to random: 1731
Successfully created new unique sequence:var0 =  cons : C.<init>() : 
var1 =  method : B.m() : var0 
var2 =  method : B.k() : var0 
var3 =  method : B.m() : var0 
var4 =  method : B.m() : var0 
var5 =  method : B.m() : var0 
var6 =  method : B.k() : var0 
var7 =  method : B.m() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Adding sequence to active sequences of type class C
Sequence after execution: 
C var0 = new C();
// <NormalExecution object=object-of-type-C>;
int var1 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var2 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var3 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var4 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var5 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var6 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var7 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
<randoop.PrimValue, value=23 [var1]  : true
<randoop.PrimValue, value=42 [var2]  : true
<randoop.PrimValue, value=23 [var3]  : true
<randoop.PrimValue, value=23 [var4]  : true
<randoop.PrimValue, value=23 [var5]  : true
<randoop.PrimValue, value=42 [var6]  : true
<randoop.PrimValue, value=23 [var7]  : true

allSequences.size()=313
-------------------------------------------
randoop.util.Randomness: total calls to random: 1732
Selected statement: B.k()
Will query component set for objects of typeclass B
getActivesequencesThatYield: entering method, clazz=class B
getActivesequencesThatYield: returning 293 sequences.
components: 293
randoop.util.Randomness: total calls to random: 1733
randoop.util.Randomness: total calls to random: 1734
Successfully created new unique sequence:var0 =  cons : C.<init>() : 
var1 =  method : B.m() : var0 
var2 =  method : B.k() : var0 
var3 =  method : B.m() : var0 
var4 =  method : B.k() : var0 
var5 =  method : B.k() : var0 
var6 =  method : C.test() : var0 
var7 =  method : B.k() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Adding sequence to active sequences of type class C
Sequence after execution: 
C var0 = new C();
// <NormalExecution object=object-of-type-C>;
int var1 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var2 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var3 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var4 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var5 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var6 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var7 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
<randoop.PrimValue, value=23 [var1]  : true
<randoop.PrimValue, value=42 [var2]  : true
<randoop.PrimValue, value=23 [var3]  : true
<randoop.PrimValue, value=42 [var4]  : true
<randoop.PrimValue, value=42 [var5]  : true
<randoop.PrimValue, value=23 [var6]  : true
<randoop.PrimValue, value=42 [var7]  : true

allSequences.size()=314
-------------------------------------------
randoop.util.Randomness: total calls to random: 1735
Selected statement: A.k()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 19 sequences.
components: 19
randoop.util.Randomness: total calls to random: 1736
randoop.util.Randomness: total calls to random: 1737
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 1738
Selected statement: A.k()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 19 sequences.
components: 19
randoop.util.Randomness: total calls to random: 1739
randoop.util.Randomness: total calls to random: 1740
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 1741
Selected statement: A.k()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 19 sequences.
components: 19
randoop.util.Randomness: total calls to random: 1742
randoop.util.Randomness: total calls to random: 1743
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 1744
Selected statement: C.test()
Will query component set for objects of typeclass C
getActivesequencesThatYield: entering method, clazz=class C
getActivesequencesThatYield: returning 292 sequences.
components: 292
randoop.util.Randomness: total calls to random: 1745
randoop.util.Randomness: total calls to random: 1746
Successfully created new unique sequence:var0 =  cons : C.<init>() : 
var1 =  method : B.m() : var0 
var2 =  method : B.k() : var0 
var3 =  method : B.m() : var0 
var4 =  method : C.test() : var0 
var5 =  method : B.m() : var0 
var6 =  method : B.m() : var0 
var7 =  method : B.k() : var0 
var8 =  method : C.test() : var0 
var9 =  method : C.test() : var0 
var10 =  method : B.k() : var0 
var11 =  method : B.k() : var0 
var12 =  method : C.test() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Making index 12 inactive (value is a primitive)
Adding sequence to active sequences of type class C
Sequence after execution: 
C var0 = new C();
// <NormalExecution object=object-of-type-C>;
int var1 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var2 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var3 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var4 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var5 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var6 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var7 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var8 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var9 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var10 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var11 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var12 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
<randoop.PrimValue, value=23 [var1]  : true
<randoop.PrimValue, value=42 [var2]  : true
<randoop.PrimValue, value=23 [var3]  : true
<randoop.PrimValue, value=23 [var4]  : true
<randoop.PrimValue, value=23 [var5]  : true
<randoop.PrimValue, value=23 [var6]  : true
<randoop.PrimValue, value=42 [var7]  : true
<randoop.PrimValue, value=23 [var8]  : true
<randoop.PrimValue, value=23 [var9]  : true
<randoop.PrimValue, value=42 [var10]  : true
<randoop.PrimValue, value=42 [var11]  : true
<randoop.PrimValue, value=23 [var12]  : true

allSequences.size()=315
-------------------------------------------
randoop.util.Randomness: total calls to random: 1747
Selected statement: C.test()
Will query component set for objects of typeclass C
getActivesequencesThatYield: entering method, clazz=class C
getActivesequencesThatYield: returning 293 sequences.
components: 293
randoop.util.Randomness: total calls to random: 1748
randoop.util.Randomness: total calls to random: 1749
Successfully created new unique sequence:var0 =  cons : C.<init>() : 
var1 =  method : B.m() : var0 
var2 =  method : B.k() : var0 
var3 =  method : B.m() : var0 
var4 =  method : C.test() : var0 
var5 =  method : B.m() : var0 
var6 =  method : B.m() : var0 
var7 =  method : B.k() : var0 
var8 =  method : B.k() : var0 
var9 =  method : B.m() : var0 
var10 =  method : C.test() : var0 
var11 =  method : C.test() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Adding sequence to active sequences of type class C
Sequence after execution: 
C var0 = new C();
// <NormalExecution object=object-of-type-C>;
int var1 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var2 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var3 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var4 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var5 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var6 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var7 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var8 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var9 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var10 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var11 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
<randoop.PrimValue, value=23 [var1]  : true
<randoop.PrimValue, value=42 [var2]  : true
<randoop.PrimValue, value=23 [var3]  : true
<randoop.PrimValue, value=23 [var4]  : true
<randoop.PrimValue, value=23 [var5]  : true
<randoop.PrimValue, value=23 [var6]  : true
<randoop.PrimValue, value=42 [var7]  : true
<randoop.PrimValue, value=42 [var8]  : true
<randoop.PrimValue, value=23 [var9]  : true
<randoop.PrimValue, value=23 [var10]  : true
<randoop.PrimValue, value=23 [var11]  : true

allSequences.size()=316
-------------------------------------------
randoop.util.Randomness: total calls to random: 1750
Selected statement: B.k()
Will query component set for objects of typeclass B
getActivesequencesThatYield: entering method, clazz=class B
getActivesequencesThatYield: returning 296 sequences.
components: 296
randoop.util.Randomness: total calls to random: 1751
randoop.util.Randomness: total calls to random: 1752
Successfully created new unique sequence:var0 =  cons : C.<init>() : 
var1 =  method : B.m() : var0 
var2 =  method : B.k() : var0 
var3 =  method : B.m() : var0 
var4 =  method : C.test() : var0 
var5 =  method : B.m() : var0 
var6 =  method : B.m() : var0 
var7 =  method : B.k() : var0 
var8 =  method : C.test() : var0 
var9 =  method : B.k() : var0 
var10 =  method : B.k() : var0 
var11 =  method : C.test() : var0 
var12 =  method : B.k() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Making index 12 inactive (value is a primitive)
Adding sequence to active sequences of type class C
Sequence after execution: 
C var0 = new C();
// <NormalExecution object=object-of-type-C>;
int var1 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var2 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var3 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var4 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var5 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var6 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var7 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var8 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var9 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var10 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var11 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var12 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
<randoop.PrimValue, value=23 [var1]  : true
<randoop.PrimValue, value=42 [var2]  : true
<randoop.PrimValue, value=23 [var3]  : true
<randoop.PrimValue, value=23 [var4]  : true
<randoop.PrimValue, value=23 [var5]  : true
<randoop.PrimValue, value=23 [var6]  : true
<randoop.PrimValue, value=42 [var7]  : true
<randoop.PrimValue, value=23 [var8]  : true
<randoop.PrimValue, value=42 [var9]  : true
<randoop.PrimValue, value=42 [var10]  : true
<randoop.PrimValue, value=23 [var11]  : true
<randoop.PrimValue, value=42 [var12]  : true

allSequences.size()=317
-------------------------------------------
randoop.util.Randomness: total calls to random: 1753
Selected statement: A.k()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 19 sequences.
components: 19
randoop.util.Randomness: total calls to random: 1754
randoop.util.Randomness: total calls to random: 1755
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 1756
Selected statement: B.k()
Will query component set for objects of typeclass B
getActivesequencesThatYield: entering method, clazz=class B
getActivesequencesThatYield: returning 297 sequences.
components: 297
randoop.util.Randomness: total calls to random: 1757
randoop.util.Randomness: total calls to random: 1758
Successfully created new unique sequence:var0 =  cons : C.<init>() : 
var1 =  method : C.test() : var0 
var2 =  method : C.test() : var0 
var3 =  method : C.test() : var0 
var4 =  method : B.m() : var0 
var5 =  method : B.m() : var0 
var6 =  method : B.k() : var0 
var7 =  method : B.m() : var0 
var8 =  method : B.k() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Adding sequence to active sequences of type class C
Sequence after execution: 
C var0 = new C();
// <NormalExecution object=object-of-type-C>;
int var1 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var2 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var3 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var4 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var5 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var6 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var7 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var8 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
<randoop.PrimValue, value=23 [var1]  : true
<randoop.PrimValue, value=23 [var2]  : true
<randoop.PrimValue, value=23 [var3]  : true
<randoop.PrimValue, value=23 [var4]  : true
<randoop.PrimValue, value=23 [var5]  : true
<randoop.PrimValue, value=42 [var6]  : true
<randoop.PrimValue, value=23 [var7]  : true
<randoop.PrimValue, value=42 [var8]  : true

allSequences.size()=318
-------------------------------------------
randoop.util.Randomness: total calls to random: 1759
Selected statement: C.test()
Will query component set for objects of typeclass C
getActivesequencesThatYield: entering method, clazz=class C
getActivesequencesThatYield: returning 296 sequences.
components: 296
randoop.util.Randomness: total calls to random: 1760
randoop.util.Randomness: total calls to random: 1761
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 1762
Selected statement: B.m()
Will query component set for objects of typeclass B
getActivesequencesThatYield: entering method, clazz=class B
getActivesequencesThatYield: returning 296 sequences.
components: 296
randoop.util.Randomness: total calls to random: 1763
randoop.util.Randomness: total calls to random: 1764
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 1765
Selected statement: A.k()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 19 sequences.
components: 19
randoop.util.Randomness: total calls to random: 1766
randoop.util.Randomness: total calls to random: 1767
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 1768
Selected statement: B.k()
Will query component set for objects of typeclass B
getActivesequencesThatYield: entering method, clazz=class B
getActivesequencesThatYield: returning 298 sequences.
components: 298
randoop.util.Randomness: total calls to random: 1769
randoop.util.Randomness: total calls to random: 1770
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 1771
Selected statement: A.k()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 19 sequences.
components: 19
randoop.util.Randomness: total calls to random: 1772
randoop.util.Randomness: total calls to random: 1773
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 1774
Selected statement: B.k()
Will query component set for objects of typeclass B
getActivesequencesThatYield: entering method, clazz=class B
getActivesequencesThatYield: returning 298 sequences.
components: 298
randoop.util.Randomness: total calls to random: 1775
randoop.util.Randomness: total calls to random: 1776
Successfully created new unique sequence:var0 =  cons : C.<init>() : 
var1 =  method : B.m() : var0 
var2 =  method : B.k() : var0 
var3 =  method : C.test() : var0 
var4 =  method : C.test() : var0 
var5 =  method : B.m() : var0 
var6 =  method : B.m() : var0 
var7 =  method : B.k() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Adding sequence to active sequences of type class C
Sequence after execution: 
C var0 = new C();
// <NormalExecution object=object-of-type-C>;
int var1 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var2 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var3 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var4 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var5 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var6 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var7 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
<randoop.PrimValue, value=23 [var1]  : true
<randoop.PrimValue, value=42 [var2]  : true
<randoop.PrimValue, value=23 [var3]  : true
<randoop.PrimValue, value=23 [var4]  : true
<randoop.PrimValue, value=23 [var5]  : true
<randoop.PrimValue, value=23 [var6]  : true
<randoop.PrimValue, value=42 [var7]  : true

allSequences.size()=319
-------------------------------------------
randoop.util.Randomness: total calls to random: 1777
Selected statement: C.test()
Will query component set for objects of typeclass C
getActivesequencesThatYield: entering method, clazz=class C
getActivesequencesThatYield: returning 297 sequences.
components: 297
randoop.util.Randomness: total calls to random: 1778
randoop.util.Randomness: total calls to random: 1779
Successfully created new unique sequence:var0 =  cons : C.<init>() : 
var1 =  method : B.m() : var0 
var2 =  method : B.k() : var0 
var3 =  method : B.k() : var0 
var4 =  method : B.k() : var0 
var5 =  method : C.test() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Adding sequence to active sequences of type class C
Sequence after execution: 
C var0 = new C();
// <NormalExecution object=object-of-type-C>;
int var1 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var2 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var3 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var4 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var5 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
<randoop.PrimValue, value=23 [var1]  : true
<randoop.PrimValue, value=42 [var2]  : true
<randoop.PrimValue, value=42 [var3]  : true
<randoop.PrimValue, value=42 [var4]  : true
<randoop.PrimValue, value=23 [var5]  : true

allSequences.size()=320
-------------------------------------------
randoop.util.Randomness: total calls to random: 1780
Selected statement: B.k()
Will query component set for objects of typeclass B
getActivesequencesThatYield: entering method, clazz=class B
getActivesequencesThatYield: returning 300 sequences.
components: 300
randoop.util.Randomness: total calls to random: 1781
randoop.util.Randomness: total calls to random: 1782
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 1783
Selected statement: C.test()
Will query component set for objects of typeclass C
getActivesequencesThatYield: entering method, clazz=class C
getActivesequencesThatYield: returning 298 sequences.
components: 298
randoop.util.Randomness: total calls to random: 1784
randoop.util.Randomness: total calls to random: 1785
Successfully created new unique sequence:var0 =  cons : C.<init>() : 
var1 =  method : B.m() : var0 
var2 =  method : B.k() : var0 
var3 =  method : B.k() : var0 
var4 =  method : B.m() : var0 
var5 =  method : C.test() : var0 
var6 =  method : B.m() : var0 
var7 =  method : C.test() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Adding sequence to active sequences of type class C
Sequence after execution: 
C var0 = new C();
// <NormalExecution object=object-of-type-C>;
int var1 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var2 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var3 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var4 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var5 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var6 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var7 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
<randoop.PrimValue, value=23 [var1]  : true
<randoop.PrimValue, value=42 [var2]  : true
<randoop.PrimValue, value=42 [var3]  : true
<randoop.PrimValue, value=23 [var4]  : true
<randoop.PrimValue, value=23 [var5]  : true
<randoop.PrimValue, value=23 [var6]  : true
<randoop.PrimValue, value=23 [var7]  : true

allSequences.size()=321
-------------------------------------------
randoop.util.Randomness: total calls to random: 1786
Selected statement: C.test()
Will query component set for objects of typeclass C
getActivesequencesThatYield: entering method, clazz=class C
getActivesequencesThatYield: returning 299 sequences.
components: 299
randoop.util.Randomness: total calls to random: 1787
randoop.util.Randomness: total calls to random: 1788
Successfully created new unique sequence:var0 =  cons : C.<init>() : 
var1 =  method : C.test() : var0 
var2 =  method : C.test() : var0 
var3 =  method : B.m() : var0 
var4 =  method : C.test() : var0 
var5 =  method : B.k() : var0 
var6 =  method : B.m() : var0 
var7 =  method : C.test() : var0 
var8 =  method : B.k() : var0 
var9 =  method : C.test() : var0 
var10 =  method : B.k() : var0 
var11 =  method : C.test() : var0 
var12 =  method : C.test() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Making index 12 inactive (value is a primitive)
Adding sequence to active sequences of type class C
Sequence after execution: 
C var0 = new C();
// <NormalExecution object=object-of-type-C>;
int var1 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var2 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var3 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var4 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var5 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var6 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var7 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var8 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var9 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var10 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var11 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var12 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
<randoop.PrimValue, value=23 [var1]  : true
<randoop.PrimValue, value=23 [var2]  : true
<randoop.PrimValue, value=23 [var3]  : true
<randoop.PrimValue, value=23 [var4]  : true
<randoop.PrimValue, value=42 [var5]  : true
<randoop.PrimValue, value=23 [var6]  : true
<randoop.PrimValue, value=23 [var7]  : true
<randoop.PrimValue, value=42 [var8]  : true
<randoop.PrimValue, value=23 [var9]  : true
<randoop.PrimValue, value=42 [var10]  : true
<randoop.PrimValue, value=23 [var11]  : true
<randoop.PrimValue, value=23 [var12]  : true

allSequences.size()=322
-------------------------------------------
randoop.util.Randomness: total calls to random: 1789
Selected statement: A.k()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 19 sequences.
components: 19
randoop.util.Randomness: total calls to random: 1790
randoop.util.Randomness: total calls to random: 1791
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 1792
Selected statement: A.k()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 19 sequences.
components: 19
randoop.util.Randomness: total calls to random: 1793
randoop.util.Randomness: total calls to random: 1794
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 1795
Selected statement: B.k()
Will query component set for objects of typeclass B
getActivesequencesThatYield: entering method, clazz=class B
getActivesequencesThatYield: returning 302 sequences.
components: 302
randoop.util.Randomness: total calls to random: 1796
randoop.util.Randomness: total calls to random: 1797
Successfully created new unique sequence:var0 =  cons : C.<init>() : 
var1 =  method : C.test() : var0 
var2 =  method : C.test() : var0 
var3 =  method : B.m() : var0 
var4 =  method : C.test() : var0 
var5 =  method : C.test() : var0 
var6 =  method : B.m() : var0 
var7 =  method : C.test() : var0 
var8 =  method : B.k() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Adding sequence to active sequences of type class C
Sequence after execution: 
C var0 = new C();
// <NormalExecution object=object-of-type-C>;
int var1 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var2 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var3 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var4 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var5 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var6 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var7 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var8 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
<randoop.PrimValue, value=23 [var1]  : true
<randoop.PrimValue, value=23 [var2]  : true
<randoop.PrimValue, value=23 [var3]  : true
<randoop.PrimValue, value=23 [var4]  : true
<randoop.PrimValue, value=23 [var5]  : true
<randoop.PrimValue, value=23 [var6]  : true
<randoop.PrimValue, value=23 [var7]  : true
<randoop.PrimValue, value=42 [var8]  : true

allSequences.size()=323
-------------------------------------------
randoop.util.Randomness: total calls to random: 1798
Selected statement: B.k()
Will query component set for objects of typeclass B
getActivesequencesThatYield: entering method, clazz=class B
getActivesequencesThatYield: returning 303 sequences.
components: 303
randoop.util.Randomness: total calls to random: 1799
randoop.util.Randomness: total calls to random: 1800
Successfully created new unique sequence:var0 =  cons : C.<init>() : 
var1 =  method : B.k() : var0 
var2 =  method : B.k() : var0 
var3 =  method : B.k() : var0 
var4 =  method : C.test() : var0 
var5 =  method : B.k() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Adding sequence to active sequences of type class C
Sequence after execution: 
C var0 = new C();
// <NormalExecution object=object-of-type-C>;
int var1 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var2 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var3 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var4 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var5 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
<randoop.PrimValue, value=42 [var1]  : true
<randoop.PrimValue, value=42 [var2]  : true
<randoop.PrimValue, value=42 [var3]  : true
<randoop.PrimValue, value=23 [var4]  : true
<randoop.PrimValue, value=42 [var5]  : true

allSequences.size()=324
-------------------------------------------
randoop.util.Randomness: total calls to random: 1801
Selected statement: B.m()
Will query component set for objects of typeclass B
getActivesequencesThatYield: entering method, clazz=class B
getActivesequencesThatYield: returning 302 sequences.
components: 302
randoop.util.Randomness: total calls to random: 1802
randoop.util.Randomness: total calls to random: 1803
Successfully created new unique sequence:var0 =  cons : C.<init>() : 
var1 =  method : B.m() : var0 
var2 =  method : B.k() : var0 
var3 =  method : C.test() : var0 
var4 =  method : C.test() : var0 
var5 =  method : B.k() : var0 
var6 =  method : B.m() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Adding sequence to active sequences of type class C
Sequence after execution: 
C var0 = new C();
// <NormalExecution object=object-of-type-C>;
int var1 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var2 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var3 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var4 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var5 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var6 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
<randoop.PrimValue, value=23 [var1]  : true
<randoop.PrimValue, value=42 [var2]  : true
<randoop.PrimValue, value=23 [var3]  : true
<randoop.PrimValue, value=23 [var4]  : true
<randoop.PrimValue, value=42 [var5]  : true
<randoop.PrimValue, value=23 [var6]  : true

allSequences.size()=325
-------------------------------------------
randoop.util.Randomness: total calls to random: 1804
Selected statement: B.k()
Will query component set for objects of typeclass B
getActivesequencesThatYield: entering method, clazz=class B
getActivesequencesThatYield: returning 305 sequences.
components: 305
randoop.util.Randomness: total calls to random: 1805
randoop.util.Randomness: total calls to random: 1806
Successfully created new unique sequence:var0 =  cons : C.<init>() : 
var1 =  method : B.m() : var0 
var2 =  method : B.k() : var0 
var3 =  method : B.k() : var0 
var4 =  method : C.test() : var0 
var5 =  method : B.k() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Adding sequence to active sequences of type class C
Sequence after execution: 
C var0 = new C();
// <NormalExecution object=object-of-type-C>;
int var1 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var2 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var3 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var4 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var5 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
<randoop.PrimValue, value=23 [var1]  : true
<randoop.PrimValue, value=42 [var2]  : true
<randoop.PrimValue, value=42 [var3]  : true
<randoop.PrimValue, value=23 [var4]  : true
<randoop.PrimValue, value=42 [var5]  : true

allSequences.size()=326
-------------------------------------------
randoop.util.Randomness: total calls to random: 1807
Selected statement: B.m()
Will query component set for objects of typeclass B
getActivesequencesThatYield: entering method, clazz=class B
getActivesequencesThatYield: returning 304 sequences.
components: 304
randoop.util.Randomness: total calls to random: 1808
randoop.util.Randomness: total calls to random: 1809
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 1810
Selected statement: A.k()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 19 sequences.
components: 19
randoop.util.Randomness: total calls to random: 1811
randoop.util.Randomness: total calls to random: 1812
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 1813
Selected statement: B.k()
Will query component set for objects of typeclass B
getActivesequencesThatYield: entering method, clazz=class B
getActivesequencesThatYield: returning 306 sequences.
components: 306
randoop.util.Randomness: total calls to random: 1814
randoop.util.Randomness: total calls to random: 1815
Successfully created new unique sequence:var0 =  cons : C.<init>() : 
var1 =  method : B.m() : var0 
var2 =  method : B.k() : var0 
var3 =  method : B.k() : var0 
var4 =  method : B.m() : var0 
var5 =  method : C.test() : var0 
var6 =  method : B.m() : var0 
var7 =  method : C.test() : var0 
var8 =  method : B.k() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Adding sequence to active sequences of type class C
Sequence after execution: 
C var0 = new C();
// <NormalExecution object=object-of-type-C>;
int var1 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var2 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var3 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var4 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var5 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var6 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var7 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var8 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
<randoop.PrimValue, value=23 [var1]  : true
<randoop.PrimValue, value=42 [var2]  : true
<randoop.PrimValue, value=42 [var3]  : true
<randoop.PrimValue, value=23 [var4]  : true
<randoop.PrimValue, value=23 [var5]  : true
<randoop.PrimValue, value=23 [var6]  : true
<randoop.PrimValue, value=23 [var7]  : true
<randoop.PrimValue, value=42 [var8]  : true

allSequences.size()=327
-------------------------------------------
randoop.util.Randomness: total calls to random: 1816
Selected statement: C.test()
Will query component set for objects of typeclass C
getActivesequencesThatYield: entering method, clazz=class C
getActivesequencesThatYield: returning 305 sequences.
components: 305
randoop.util.Randomness: total calls to random: 1817
randoop.util.Randomness: total calls to random: 1818
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 1819
Selected statement: B.m()
Will query component set for objects of typeclass B
getActivesequencesThatYield: entering method, clazz=class B
getActivesequencesThatYield: returning 305 sequences.
components: 305
randoop.util.Randomness: total calls to random: 1820
randoop.util.Randomness: total calls to random: 1821
Successfully created new unique sequence:var0 =  cons : C.<init>() : 
var1 =  method : B.m() : var0 
var2 =  method : B.k() : var0 
var3 =  method : B.m() : var0 
var4 =  method : C.test() : var0 
var5 =  method : C.test() : var0 
var6 =  method : B.k() : var0 
var7 =  method : B.m() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Adding sequence to active sequences of type class C
Sequence after execution: 
C var0 = new C();
// <NormalExecution object=object-of-type-C>;
int var1 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var2 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var3 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var4 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var5 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var6 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var7 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
<randoop.PrimValue, value=23 [var1]  : true
<randoop.PrimValue, value=42 [var2]  : true
<randoop.PrimValue, value=23 [var3]  : true
<randoop.PrimValue, value=23 [var4]  : true
<randoop.PrimValue, value=23 [var5]  : true
<randoop.PrimValue, value=42 [var6]  : true
<randoop.PrimValue, value=23 [var7]  : true

allSequences.size()=328
-------------------------------------------
randoop.util.Randomness: total calls to random: 1822
Selected statement: B.m()
Will query component set for objects of typeclass B
getActivesequencesThatYield: entering method, clazz=class B
getActivesequencesThatYield: returning 306 sequences.
components: 306
randoop.util.Randomness: total calls to random: 1823
randoop.util.Randomness: total calls to random: 1824
Successfully created new unique sequence:var0 =  cons : C.<init>() : 
var1 =  method : B.m() : var0 
var2 =  method : B.k() : var0 
var3 =  method : B.m() : var0 
var4 =  method : B.m() : var0 
var5 =  method : B.m() : var0 
var6 =  method : B.k() : var0 
var7 =  method : C.test() : var0 
var8 =  method : C.test() : var0 
var9 =  method : B.m() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Adding sequence to active sequences of type class C
Sequence after execution: 
C var0 = new C();
// <NormalExecution object=object-of-type-C>;
int var1 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var2 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var3 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var4 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var5 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var6 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var7 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var8 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var9 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
<randoop.PrimValue, value=23 [var1]  : true
<randoop.PrimValue, value=42 [var2]  : true
<randoop.PrimValue, value=23 [var3]  : true
<randoop.PrimValue, value=23 [var4]  : true
<randoop.PrimValue, value=23 [var5]  : true
<randoop.PrimValue, value=42 [var6]  : true
<randoop.PrimValue, value=23 [var7]  : true
<randoop.PrimValue, value=23 [var8]  : true
<randoop.PrimValue, value=23 [var9]  : true

allSequences.size()=329
-------------------------------------------
randoop.util.Randomness: total calls to random: 1825
Selected statement: B.m()
Will query component set for objects of typeclass B
getActivesequencesThatYield: entering method, clazz=class B
getActivesequencesThatYield: returning 307 sequences.
components: 307
randoop.util.Randomness: total calls to random: 1826
randoop.util.Randomness: total calls to random: 1827
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 1828
Selected statement: C.test()
Will query component set for objects of typeclass C
getActivesequencesThatYield: entering method, clazz=class C
getActivesequencesThatYield: returning 307 sequences.
components: 307
randoop.util.Randomness: total calls to random: 1829
randoop.util.Randomness: total calls to random: 1830
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 1831
Selected statement: C.test()
Will query component set for objects of typeclass C
getActivesequencesThatYield: entering method, clazz=class C
getActivesequencesThatYield: returning 307 sequences.
components: 307
randoop.util.Randomness: total calls to random: 1832
randoop.util.Randomness: total calls to random: 1833
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 1834
Selected statement: B.m()
Will query component set for objects of typeclass B
getActivesequencesThatYield: entering method, clazz=class B
getActivesequencesThatYield: returning 307 sequences.
components: 307
randoop.util.Randomness: total calls to random: 1835
randoop.util.Randomness: total calls to random: 1836
Successfully created new unique sequence:var0 =  cons : C.<init>() : 
var1 =  method : B.k() : var0 
var2 =  method : B.k() : var0 
var3 =  method : B.k() : var0 
var4 =  method : B.m() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Adding sequence to active sequences of type class C
Sequence after execution: 
C var0 = new C();
// <NormalExecution object=object-of-type-C>;
int var1 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var2 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var3 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var4 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
<randoop.PrimValue, value=42 [var1]  : true
<randoop.PrimValue, value=42 [var2]  : true
<randoop.PrimValue, value=42 [var3]  : true
<randoop.PrimValue, value=23 [var4]  : true

allSequences.size()=330
-------------------------------------------
randoop.util.Randomness: total calls to random: 1837
Selected statement: B.m()
Will query component set for objects of typeclass B
getActivesequencesThatYield: entering method, clazz=class B
getActivesequencesThatYield: returning 308 sequences.
components: 308
randoop.util.Randomness: total calls to random: 1838
randoop.util.Randomness: total calls to random: 1839
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 1840
Selected statement: B.m()
Will query component set for objects of typeclass B
getActivesequencesThatYield: entering method, clazz=class B
getActivesequencesThatYield: returning 308 sequences.
components: 308
randoop.util.Randomness: total calls to random: 1841
randoop.util.Randomness: total calls to random: 1842
Successfully created new unique sequence:var0 =  cons : C.<init>() : 
var1 =  method : C.test() : var0 
var2 =  method : C.test() : var0 
var3 =  method : C.test() : var0 
var4 =  method : B.m() : var0 
var5 =  method : C.test() : var0 
var6 =  method : C.test() : var0 
var7 =  method : B.k() : var0 
var8 =  method : B.m() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Adding sequence to active sequences of type class C
Sequence after execution: 
C var0 = new C();
// <NormalExecution object=object-of-type-C>;
int var1 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var2 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var3 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var4 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var5 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var6 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var7 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var8 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
<randoop.PrimValue, value=23 [var1]  : true
<randoop.PrimValue, value=23 [var2]  : true
<randoop.PrimValue, value=23 [var3]  : true
<randoop.PrimValue, value=23 [var4]  : true
<randoop.PrimValue, value=23 [var5]  : true
<randoop.PrimValue, value=23 [var6]  : true
<randoop.PrimValue, value=42 [var7]  : true
<randoop.PrimValue, value=23 [var8]  : true

allSequences.size()=331
-------------------------------------------
randoop.util.Randomness: total calls to random: 1843
Selected statement: B.k()
Will query component set for objects of typeclass B
getActivesequencesThatYield: entering method, clazz=class B
getActivesequencesThatYield: returning 311 sequences.
components: 311
randoop.util.Randomness: total calls to random: 1844
randoop.util.Randomness: total calls to random: 1845
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 1846
Selected statement: B.k()
Will query component set for objects of typeclass B
getActivesequencesThatYield: entering method, clazz=class B
getActivesequencesThatYield: returning 311 sequences.
components: 311
randoop.util.Randomness: total calls to random: 1847
randoop.util.Randomness: total calls to random: 1848
Successfully created new unique sequence:var0 =  cons : C.<init>() : 
var1 =  method : C.test() : var0 
var2 =  method : C.test() : var0 
var3 =  method : C.test() : var0 
var4 =  method : B.m() : var0 
var5 =  method : B.m() : var0 
var6 =  method : C.test() : var0 
var7 =  method : C.test() : var0 
var8 =  method : B.k() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Adding sequence to active sequences of type class C
Sequence after execution: 
C var0 = new C();
// <NormalExecution object=object-of-type-C>;
int var1 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var2 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var3 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var4 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var5 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var6 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var7 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var8 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
<randoop.PrimValue, value=23 [var1]  : true
<randoop.PrimValue, value=23 [var2]  : true
<randoop.PrimValue, value=23 [var3]  : true
<randoop.PrimValue, value=23 [var4]  : true
<randoop.PrimValue, value=23 [var5]  : true
<randoop.PrimValue, value=23 [var6]  : true
<randoop.PrimValue, value=23 [var7]  : true
<randoop.PrimValue, value=42 [var8]  : true

allSequences.size()=332
-------------------------------------------
randoop.util.Randomness: total calls to random: 1849
Selected statement: B.k()
Will query component set for objects of typeclass B
getActivesequencesThatYield: entering method, clazz=class B
getActivesequencesThatYield: returning 312 sequences.
components: 312
randoop.util.Randomness: total calls to random: 1850
randoop.util.Randomness: total calls to random: 1851
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 1852
Selected statement: A.k()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 19 sequences.
components: 19
randoop.util.Randomness: total calls to random: 1853
randoop.util.Randomness: total calls to random: 1854
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 1855
Selected statement: B.k()
Will query component set for objects of typeclass B
getActivesequencesThatYield: entering method, clazz=class B
getActivesequencesThatYield: returning 312 sequences.
components: 312
randoop.util.Randomness: total calls to random: 1856
randoop.util.Randomness: total calls to random: 1857
Successfully created new unique sequence:var0 =  cons : C.<init>() : 
var1 =  method : B.m() : var0 
var2 =  method : B.k() : var0 
var3 =  method : B.m() : var0 
var4 =  method : B.m() : var0 
var5 =  method : B.m() : var0 
var6 =  method : B.k() : var0 
var7 =  method : B.m() : var0 
var8 =  method : B.k() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Adding sequence to active sequences of type class C
Sequence after execution: 
C var0 = new C();
// <NormalExecution object=object-of-type-C>;
int var1 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var2 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var3 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var4 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var5 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var6 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var7 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var8 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
<randoop.PrimValue, value=23 [var1]  : true
<randoop.PrimValue, value=42 [var2]  : true
<randoop.PrimValue, value=23 [var3]  : true
<randoop.PrimValue, value=23 [var4]  : true
<randoop.PrimValue, value=23 [var5]  : true
<randoop.PrimValue, value=42 [var6]  : true
<randoop.PrimValue, value=23 [var7]  : true
<randoop.PrimValue, value=42 [var8]  : true

allSequences.size()=333
-------------------------------------------
randoop.util.Randomness: total calls to random: 1858
Selected statement: A.k()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 19 sequences.
components: 19
randoop.util.Randomness: total calls to random: 1859
randoop.util.Randomness: total calls to random: 1860
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 1861
Selected statement: A.k()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 19 sequences.
components: 19
randoop.util.Randomness: total calls to random: 1862
randoop.util.Randomness: total calls to random: 1863
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 1864
Selected statement: B.k()
Will query component set for objects of typeclass B
getActivesequencesThatYield: entering method, clazz=class B
getActivesequencesThatYield: returning 313 sequences.
components: 313
randoop.util.Randomness: total calls to random: 1865
randoop.util.Randomness: total calls to random: 1866
Successfully created new unique sequence:var0 =  cons : C.<init>() : 
var1 =  method : B.k() : var0 
var2 =  method : B.k() : var0 
var3 =  method : B.k() : var0 
var4 =  method : B.m() : var0 
var5 =  method : B.k() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Adding sequence to active sequences of type class C
Sequence after execution: 
C var0 = new C();
// <NormalExecution object=object-of-type-C>;
int var1 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var2 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var3 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var4 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var5 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
<randoop.PrimValue, value=42 [var1]  : true
<randoop.PrimValue, value=42 [var2]  : true
<randoop.PrimValue, value=42 [var3]  : true
<randoop.PrimValue, value=23 [var4]  : true
<randoop.PrimValue, value=42 [var5]  : true

allSequences.size()=334
-------------------------------------------
randoop.util.Randomness: total calls to random: 1867
Selected statement: B.k()
Will query component set for objects of typeclass B
getActivesequencesThatYield: entering method, clazz=class B
getActivesequencesThatYield: returning 314 sequences.
components: 314
randoop.util.Randomness: total calls to random: 1868
randoop.util.Randomness: total calls to random: 1869
Successfully created new unique sequence:var0 =  cons : C.<init>() : 
var1 =  method : C.test() : var0 
var2 =  method : C.test() : var0 
var3 =  method : B.m() : var0 
var4 =  method : C.test() : var0 
var5 =  method : B.k() : var0 
var6 =  method : B.m() : var0 
var7 =  method : C.test() : var0 
var8 =  method : C.test() : var0 
var9 =  method : B.k() : var0 
var10 =  method : B.k() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Adding sequence to active sequences of type class C
Sequence after execution: 
C var0 = new C();
// <NormalExecution object=object-of-type-C>;
int var1 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var2 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var3 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var4 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var5 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var6 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var7 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var8 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var9 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var10 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
<randoop.PrimValue, value=23 [var1]  : true
<randoop.PrimValue, value=23 [var2]  : true
<randoop.PrimValue, value=23 [var3]  : true
<randoop.PrimValue, value=23 [var4]  : true
<randoop.PrimValue, value=42 [var5]  : true
<randoop.PrimValue, value=23 [var6]  : true
<randoop.PrimValue, value=23 [var7]  : true
<randoop.PrimValue, value=23 [var8]  : true
<randoop.PrimValue, value=42 [var9]  : true
<randoop.PrimValue, value=42 [var10]  : true

allSequences.size()=335
-------------------------------------------
randoop.util.Randomness: total calls to random: 1870
Selected statement: B.k()
Will query component set for objects of typeclass B
getActivesequencesThatYield: entering method, clazz=class B
getActivesequencesThatYield: returning 315 sequences.
components: 315
randoop.util.Randomness: total calls to random: 1871
randoop.util.Randomness: total calls to random: 1872
Successfully created new unique sequence:var0 =  cons : C.<init>() : 
var1 =  method : B.m() : var0 
var2 =  method : B.k() : var0 
var3 =  method : B.m() : var0 
var4 =  method : B.m() : var0 
var5 =  method : B.k() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Adding sequence to active sequences of type class C
Sequence after execution: 
C var0 = new C();
// <NormalExecution object=object-of-type-C>;
int var1 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var2 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var3 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var4 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var5 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
<randoop.PrimValue, value=23 [var1]  : true
<randoop.PrimValue, value=42 [var2]  : true
<randoop.PrimValue, value=23 [var3]  : true
<randoop.PrimValue, value=23 [var4]  : true
<randoop.PrimValue, value=42 [var5]  : true

allSequences.size()=336
-------------------------------------------
randoop.util.Randomness: total calls to random: 1873
Selected statement: A.k()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 19 sequences.
components: 19
randoop.util.Randomness: total calls to random: 1874
randoop.util.Randomness: total calls to random: 1875
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 1876
Selected statement: A.k()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 19 sequences.
components: 19
randoop.util.Randomness: total calls to random: 1877
randoop.util.Randomness: total calls to random: 1878
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 1879
Selected statement: B.k()
Will query component set for objects of typeclass B
getActivesequencesThatYield: entering method, clazz=class B
getActivesequencesThatYield: returning 316 sequences.
components: 316
randoop.util.Randomness: total calls to random: 1880
randoop.util.Randomness: total calls to random: 1881
Successfully created new unique sequence:var0 =  cons : C.<init>() : 
var1 =  method : B.m() : var0 
var2 =  method : B.k() : var0 
var3 =  method : B.m() : var0 
var4 =  method : B.m() : var0 
var5 =  method : B.m() : var0 
var6 =  method : B.k() : var0 
var7 =  method : C.test() : var0 
var8 =  method : C.test() : var0 
var9 =  method : B.k() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Adding sequence to active sequences of type class C
Sequence after execution: 
C var0 = new C();
// <NormalExecution object=object-of-type-C>;
int var1 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var2 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var3 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var4 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var5 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var6 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var7 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var8 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var9 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
<randoop.PrimValue, value=23 [var1]  : true
<randoop.PrimValue, value=42 [var2]  : true
<randoop.PrimValue, value=23 [var3]  : true
<randoop.PrimValue, value=23 [var4]  : true
<randoop.PrimValue, value=23 [var5]  : true
<randoop.PrimValue, value=42 [var6]  : true
<randoop.PrimValue, value=23 [var7]  : true
<randoop.PrimValue, value=23 [var8]  : true
<randoop.PrimValue, value=42 [var9]  : true

allSequences.size()=337
-------------------------------------------
randoop.util.Randomness: total calls to random: 1882
Selected statement: C.test()
Will query component set for objects of typeclass C
getActivesequencesThatYield: entering method, clazz=class C
getActivesequencesThatYield: returning 315 sequences.
components: 315
randoop.util.Randomness: total calls to random: 1883
randoop.util.Randomness: total calls to random: 1884
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 1885
Selected statement: C.test()
Will query component set for objects of typeclass C
getActivesequencesThatYield: entering method, clazz=class C
getActivesequencesThatYield: returning 315 sequences.
components: 315
randoop.util.Randomness: total calls to random: 1886
randoop.util.Randomness: total calls to random: 1887
Successfully created new unique sequence:var0 =  cons : C.<init>() : 
var1 =  method : B.m() : var0 
var2 =  method : B.k() : var0 
var3 =  method : B.k() : var0 
var4 =  method : B.m() : var0 
var5 =  method : B.k() : var0 
var6 =  method : C.test() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Adding sequence to active sequences of type class C
Sequence after execution: 
C var0 = new C();
// <NormalExecution object=object-of-type-C>;
int var1 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var2 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var3 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var4 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var5 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var6 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
<randoop.PrimValue, value=23 [var1]  : true
<randoop.PrimValue, value=42 [var2]  : true
<randoop.PrimValue, value=42 [var3]  : true
<randoop.PrimValue, value=23 [var4]  : true
<randoop.PrimValue, value=42 [var5]  : true
<randoop.PrimValue, value=23 [var6]  : true

allSequences.size()=338
-------------------------------------------
randoop.util.Randomness: total calls to random: 1888
Selected statement: B.m()
Will query component set for objects of typeclass B
getActivesequencesThatYield: entering method, clazz=class B
getActivesequencesThatYield: returning 316 sequences.
components: 316
randoop.util.Randomness: total calls to random: 1889
randoop.util.Randomness: total calls to random: 1890
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 1891
Selected statement: B.k()
Will query component set for objects of typeclass B
getActivesequencesThatYield: entering method, clazz=class B
getActivesequencesThatYield: returning 318 sequences.
components: 318
randoop.util.Randomness: total calls to random: 1892
randoop.util.Randomness: total calls to random: 1893
Successfully created new unique sequence:var0 =  cons : C.<init>() : 
var1 =  method : C.test() : var0 
var2 =  method : C.test() : var0 
var3 =  method : B.m() : var0 
var4 =  method : C.test() : var0 
var5 =  method : B.k() : var0 
var6 =  method : B.m() : var0 
var7 =  method : C.test() : var0 
var8 =  method : B.m() : var0 
var9 =  method : C.test() : var0 
var10 =  method : B.k() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Adding sequence to active sequences of type class C
Sequence after execution: 
C var0 = new C();
// <NormalExecution object=object-of-type-C>;
int var1 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var2 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var3 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var4 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var5 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var6 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var7 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var8 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var9 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var10 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
<randoop.PrimValue, value=23 [var1]  : true
<randoop.PrimValue, value=23 [var2]  : true
<randoop.PrimValue, value=23 [var3]  : true
<randoop.PrimValue, value=23 [var4]  : true
<randoop.PrimValue, value=42 [var5]  : true
<randoop.PrimValue, value=23 [var6]  : true
<randoop.PrimValue, value=23 [var7]  : true
<randoop.PrimValue, value=23 [var8]  : true
<randoop.PrimValue, value=23 [var9]  : true
<randoop.PrimValue, value=42 [var10]  : true

allSequences.size()=339
-------------------------------------------
randoop.util.Randomness: total calls to random: 1894
Selected statement: B.m()
Will query component set for objects of typeclass B
getActivesequencesThatYield: entering method, clazz=class B
getActivesequencesThatYield: returning 317 sequences.
components: 317
randoop.util.Randomness: total calls to random: 1895
randoop.util.Randomness: total calls to random: 1896
Successfully created new unique sequence:var0 =  cons : C.<init>() : 
var1 =  method : C.test() : var0 
var2 =  method : C.test() : var0 
var3 =  method : B.m() : var0 
var4 =  method : C.test() : var0 
var5 =  method : B.k() : var0 
var6 =  method : B.k() : var0 
var7 =  method : C.test() : var0 
var8 =  method : C.test() : var0 
var9 =  method : B.m() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Adding sequence to active sequences of type class C
Sequence after execution: 
C var0 = new C();
// <NormalExecution object=object-of-type-C>;
int var1 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var2 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var3 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var4 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var5 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var6 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var7 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var8 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var9 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
<randoop.PrimValue, value=23 [var1]  : true
<randoop.PrimValue, value=23 [var2]  : true
<randoop.PrimValue, value=23 [var3]  : true
<randoop.PrimValue, value=23 [var4]  : true
<randoop.PrimValue, value=42 [var5]  : true
<randoop.PrimValue, value=42 [var6]  : true
<randoop.PrimValue, value=23 [var7]  : true
<randoop.PrimValue, value=23 [var8]  : true
<randoop.PrimValue, value=23 [var9]  : true

allSequences.size()=340
-------------------------------------------
randoop.util.Randomness: total calls to random: 1897
Selected statement: B.m()
Will query component set for objects of typeclass B
getActivesequencesThatYield: entering method, clazz=class B
getActivesequencesThatYield: returning 318 sequences.
components: 318
randoop.util.Randomness: total calls to random: 1898
randoop.util.Randomness: total calls to random: 1899
Successfully created new unique sequence:var0 =  cons : C.<init>() : 
var1 =  method : C.test() : var0 
var2 =  method : C.test() : var0 
var3 =  method : B.m() : var0 
var4 =  method : C.test() : var0 
var5 =  method : B.k() : var0 
var6 =  method : B.k() : var0 
var7 =  method : C.test() : var0 
var8 =  method : C.test() : var0 
var9 =  method : B.k() : var0 
var10 =  method : B.m() : var0 
var11 =  method : B.m() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Adding sequence to active sequences of type class C
Sequence after execution: 
C var0 = new C();
// <NormalExecution object=object-of-type-C>;
int var1 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var2 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var3 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var4 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var5 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var6 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var7 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var8 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var9 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var10 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var11 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
<randoop.PrimValue, value=23 [var1]  : true
<randoop.PrimValue, value=23 [var2]  : true
<randoop.PrimValue, value=23 [var3]  : true
<randoop.PrimValue, value=23 [var4]  : true
<randoop.PrimValue, value=42 [var5]  : true
<randoop.PrimValue, value=42 [var6]  : true
<randoop.PrimValue, value=23 [var7]  : true
<randoop.PrimValue, value=23 [var8]  : true
<randoop.PrimValue, value=42 [var9]  : true
<randoop.PrimValue, value=23 [var10]  : true
<randoop.PrimValue, value=23 [var11]  : true

allSequences.size()=341
-------------------------------------------
randoop.util.Randomness: total calls to random: 1900
Selected statement: C.test()
Will query component set for objects of typeclass C
getActivesequencesThatYield: entering method, clazz=class C
getActivesequencesThatYield: returning 319 sequences.
components: 319
randoop.util.Randomness: total calls to random: 1901
randoop.util.Randomness: total calls to random: 1902
Successfully created new unique sequence:var0 =  cons : C.<init>() : 
var1 =  method : B.m() : var0 
var2 =  method : B.k() : var0 
var3 =  method : B.k() : var0 
var4 =  method : B.m() : var0 
var5 =  method : C.test() : var0 
var6 =  method : C.test() : var0 
var7 =  method : B.k() : var0 
var8 =  method : C.test() : var0 
var9 =  method : C.test() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Adding sequence to active sequences of type class C
Sequence after execution: 
C var0 = new C();
// <NormalExecution object=object-of-type-C>;
int var1 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var2 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var3 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var4 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var5 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var6 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var7 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var8 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var9 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
<randoop.PrimValue, value=23 [var1]  : true
<randoop.PrimValue, value=42 [var2]  : true
<randoop.PrimValue, value=42 [var3]  : true
<randoop.PrimValue, value=23 [var4]  : true
<randoop.PrimValue, value=23 [var5]  : true
<randoop.PrimValue, value=23 [var6]  : true
<randoop.PrimValue, value=42 [var7]  : true
<randoop.PrimValue, value=23 [var8]  : true
<randoop.PrimValue, value=23 [var9]  : true

allSequences.size()=342
-------------------------------------------
randoop.util.Randomness: total calls to random: 1903
Selected statement: A.k()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 19 sequences.
components: 19
randoop.util.Randomness: total calls to random: 1904
randoop.util.Randomness: total calls to random: 1905
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 1906
Selected statement: B.k()
Will query component set for objects of typeclass B
getActivesequencesThatYield: entering method, clazz=class B
getActivesequencesThatYield: returning 322 sequences.
components: 322
randoop.util.Randomness: total calls to random: 1907
randoop.util.Randomness: total calls to random: 1908
Successfully created new unique sequence:var0 =  cons : C.<init>() : 
var1 =  method : C.test() : var0 
var2 =  method : C.test() : var0 
var3 =  method : B.m() : var0 
var4 =  method : C.test() : var0 
var5 =  method : B.k() : var0 
var6 =  method : B.m() : var0 
var7 =  method : C.test() : var0 
var8 =  method : B.k() : var0 
var9 =  method : C.test() : var0 
var10 =  method : B.k() : var0 
var11 =  method : C.test() : var0 
var12 =  method : C.test() : var0 
var13 =  method : B.k() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Making index 12 inactive (value is a primitive)
Making index 13 inactive (value is a primitive)
Adding sequence to active sequences of type class C
Sequence after execution: 
C var0 = new C();
// <NormalExecution object=object-of-type-C>;
int var1 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var2 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var3 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var4 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var5 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var6 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var7 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var8 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var9 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var10 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var11 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var12 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var13 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
<randoop.PrimValue, value=23 [var1]  : true
<randoop.PrimValue, value=23 [var2]  : true
<randoop.PrimValue, value=23 [var3]  : true
<randoop.PrimValue, value=23 [var4]  : true
<randoop.PrimValue, value=42 [var5]  : true
<randoop.PrimValue, value=23 [var6]  : true
<randoop.PrimValue, value=23 [var7]  : true
<randoop.PrimValue, value=42 [var8]  : true
<randoop.PrimValue, value=23 [var9]  : true
<randoop.PrimValue, value=42 [var10]  : true
<randoop.PrimValue, value=23 [var11]  : true
<randoop.PrimValue, value=23 [var12]  : true
<randoop.PrimValue, value=42 [var13]  : true

allSequences.size()=343
-------------------------------------------
randoop.util.Randomness: total calls to random: 1909
Selected statement: A.k()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 19 sequences.
components: 19
randoop.util.Randomness: total calls to random: 1910
randoop.util.Randomness: total calls to random: 1911
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 1912
Selected statement: B.m()
Will query component set for objects of typeclass B
getActivesequencesThatYield: entering method, clazz=class B
getActivesequencesThatYield: returning 321 sequences.
components: 321
randoop.util.Randomness: total calls to random: 1913
randoop.util.Randomness: total calls to random: 1914
Successfully created new unique sequence:var0 =  cons : C.<init>() : 
var1 =  method : B.m() : var0 
var2 =  method : B.k() : var0 
var3 =  method : B.m() : var0 
var4 =  method : B.m() : var0 
var5 =  method : B.m() : var0 
var6 =  method : B.k() : var0 
var7 =  method : B.m() : var0 
var8 =  method : B.m() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Adding sequence to active sequences of type class C
Sequence after execution: 
C var0 = new C();
// <NormalExecution object=object-of-type-C>;
int var1 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var2 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var3 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var4 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var5 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var6 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var7 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var8 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
<randoop.PrimValue, value=23 [var1]  : true
<randoop.PrimValue, value=42 [var2]  : true
<randoop.PrimValue, value=23 [var3]  : true
<randoop.PrimValue, value=23 [var4]  : true
<randoop.PrimValue, value=23 [var5]  : true
<randoop.PrimValue, value=42 [var6]  : true
<randoop.PrimValue, value=23 [var7]  : true
<randoop.PrimValue, value=23 [var8]  : true

allSequences.size()=344
-------------------------------------------
randoop.util.Randomness: total calls to random: 1915
Selected statement: A.k()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 19 sequences.
components: 19
randoop.util.Randomness: total calls to random: 1916
randoop.util.Randomness: total calls to random: 1917
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 1918
Selected statement: A.k()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 19 sequences.
components: 19
randoop.util.Randomness: total calls to random: 1919
randoop.util.Randomness: total calls to random: 1920
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 1921
Selected statement: A.k()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 19 sequences.
components: 19
randoop.util.Randomness: total calls to random: 1922
randoop.util.Randomness: total calls to random: 1923
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 1924
Selected statement: C.test()
Will query component set for objects of typeclass C
getActivesequencesThatYield: entering method, clazz=class C
getActivesequencesThatYield: returning 322 sequences.
components: 322
randoop.util.Randomness: total calls to random: 1925
randoop.util.Randomness: total calls to random: 1926
Successfully created new unique sequence:var0 =  cons : C.<init>() : 
var1 =  method : B.m() : var0 
var2 =  method : B.k() : var0 
var3 =  method : B.k() : var0 
var4 =  method : B.k() : var0 
var5 =  method : B.k() : var0 
var6 =  method : C.test() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Adding sequence to active sequences of type class C
Sequence after execution: 
C var0 = new C();
// <NormalExecution object=object-of-type-C>;
int var1 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var2 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var3 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var4 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var5 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var6 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
<randoop.PrimValue, value=23 [var1]  : true
<randoop.PrimValue, value=42 [var2]  : true
<randoop.PrimValue, value=42 [var3]  : true
<randoop.PrimValue, value=42 [var4]  : true
<randoop.PrimValue, value=42 [var5]  : true
<randoop.PrimValue, value=23 [var6]  : true

allSequences.size()=345
-------------------------------------------
randoop.util.Randomness: total calls to random: 1927
Selected statement: B.k()
Will query component set for objects of typeclass B
getActivesequencesThatYield: entering method, clazz=class B
getActivesequencesThatYield: returning 325 sequences.
components: 325
randoop.util.Randomness: total calls to random: 1928
randoop.util.Randomness: total calls to random: 1929
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 1930
Selected statement: C.test()
Will query component set for objects of typeclass C
getActivesequencesThatYield: entering method, clazz=class C
getActivesequencesThatYield: returning 323 sequences.
components: 323
randoop.util.Randomness: total calls to random: 1931
randoop.util.Randomness: total calls to random: 1932
Successfully created new unique sequence:var0 =  cons : C.<init>() : 
var1 =  method : C.test() : var0 
var2 =  method : C.test() : var0 
var3 =  method : B.m() : var0 
var4 =  method : C.test() : var0 
var5 =  method : B.k() : var0 
var6 =  method : B.m() : var0 
var7 =  method : B.m() : var0 
var8 =  method : C.test() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Adding sequence to active sequences of type class C
Sequence after execution: 
C var0 = new C();
// <NormalExecution object=object-of-type-C>;
int var1 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var2 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var3 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var4 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var5 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var6 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var7 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var8 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
<randoop.PrimValue, value=23 [var1]  : true
<randoop.PrimValue, value=23 [var2]  : true
<randoop.PrimValue, value=23 [var3]  : true
<randoop.PrimValue, value=23 [var4]  : true
<randoop.PrimValue, value=42 [var5]  : true
<randoop.PrimValue, value=23 [var6]  : true
<randoop.PrimValue, value=23 [var7]  : true
<randoop.PrimValue, value=23 [var8]  : true

allSequences.size()=346
-------------------------------------------
randoop.util.Randomness: total calls to random: 1933
Selected statement: C.test()
Will query component set for objects of typeclass C
getActivesequencesThatYield: entering method, clazz=class C
getActivesequencesThatYield: returning 324 sequences.
components: 324
randoop.util.Randomness: total calls to random: 1934
randoop.util.Randomness: total calls to random: 1935
Successfully created new unique sequence:var0 =  cons : C.<init>() : 
var1 =  method : C.test() : var0 
var2 =  method : C.test() : var0 
var3 =  method : C.test() : var0 
var4 =  method : B.m() : var0 
var5 =  method : C.test() : var0 
var6 =  method : C.test() : var0 
var7 =  method : B.k() : var0 
var8 =  method : B.k() : var0 
var9 =  method : B.m() : var0 
var10 =  method : C.test() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Adding sequence to active sequences of type class C
Sequence after execution: 
C var0 = new C();
// <NormalExecution object=object-of-type-C>;
int var1 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var2 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var3 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var4 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var5 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var6 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var7 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var8 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var9 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var10 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
<randoop.PrimValue, value=23 [var1]  : true
<randoop.PrimValue, value=23 [var2]  : true
<randoop.PrimValue, value=23 [var3]  : true
<randoop.PrimValue, value=23 [var4]  : true
<randoop.PrimValue, value=23 [var5]  : true
<randoop.PrimValue, value=23 [var6]  : true
<randoop.PrimValue, value=42 [var7]  : true
<randoop.PrimValue, value=42 [var8]  : true
<randoop.PrimValue, value=23 [var9]  : true
<randoop.PrimValue, value=23 [var10]  : true

allSequences.size()=347
-------------------------------------------
randoop.util.Randomness: total calls to random: 1936
Selected statement: B.m()
Will query component set for objects of typeclass B
getActivesequencesThatYield: entering method, clazz=class B
getActivesequencesThatYield: returning 325 sequences.
components: 325
randoop.util.Randomness: total calls to random: 1937
randoop.util.Randomness: total calls to random: 1938
Successfully created new unique sequence:var0 =  cons : C.<init>() : 
var1 =  method : B.m() : var0 
var2 =  method : B.k() : var0 
var3 =  method : B.m() : var0 
var4 =  method : B.k() : var0 
var5 =  method : C.test() : var0 
var6 =  method : B.m() : var0 
var7 =  method : B.m() : var0 
var8 =  method : B.k() : var0 
var9 =  method : B.m() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Adding sequence to active sequences of type class C
Sequence after execution: 
C var0 = new C();
// <NormalExecution object=object-of-type-C>;
int var1 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var2 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var3 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var4 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var5 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var6 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var7 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var8 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var9 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
<randoop.PrimValue, value=23 [var1]  : true
<randoop.PrimValue, value=42 [var2]  : true
<randoop.PrimValue, value=23 [var3]  : true
<randoop.PrimValue, value=42 [var4]  : true
<randoop.PrimValue, value=23 [var5]  : true
<randoop.PrimValue, value=23 [var6]  : true
<randoop.PrimValue, value=23 [var7]  : true
<randoop.PrimValue, value=42 [var8]  : true
<randoop.PrimValue, value=23 [var9]  : true

allSequences.size()=348
-------------------------------------------
randoop.util.Randomness: total calls to random: 1939
Selected statement: C.test()
Will query component set for objects of typeclass C
getActivesequencesThatYield: entering method, clazz=class C
getActivesequencesThatYield: returning 326 sequences.
components: 326
randoop.util.Randomness: total calls to random: 1940
randoop.util.Randomness: total calls to random: 1941
Successfully created new unique sequence:var0 =  cons : C.<init>() : 
var1 =  method : B.m() : var0 
var2 =  method : B.k() : var0 
var3 =  method : B.k() : var0 
var4 =  method : B.m() : var0 
var5 =  method : C.test() : var0 
var6 =  method : B.m() : var0 
var7 =  method : C.test() : var0 
var8 =  method : B.k() : var0 
var9 =  method : C.test() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Adding sequence to active sequences of type class C
Sequence after execution: 
C var0 = new C();
// <NormalExecution object=object-of-type-C>;
int var1 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var2 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var3 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var4 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var5 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var6 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var7 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var8 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var9 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
<randoop.PrimValue, value=23 [var1]  : true
<randoop.PrimValue, value=42 [var2]  : true
<randoop.PrimValue, value=42 [var3]  : true
<randoop.PrimValue, value=23 [var4]  : true
<randoop.PrimValue, value=23 [var5]  : true
<randoop.PrimValue, value=23 [var6]  : true
<randoop.PrimValue, value=23 [var7]  : true
<randoop.PrimValue, value=42 [var8]  : true
<randoop.PrimValue, value=23 [var9]  : true

allSequences.size()=349
-------------------------------------------
randoop.util.Randomness: total calls to random: 1942
Selected statement: B.k()
Will query component set for objects of typeclass B
getActivesequencesThatYield: entering method, clazz=class B
getActivesequencesThatYield: returning 329 sequences.
components: 329
randoop.util.Randomness: total calls to random: 1943
randoop.util.Randomness: total calls to random: 1944
Successfully created new unique sequence:var0 =  cons : C.<init>() : 
var1 =  method : C.test() : var0 
var2 =  method : C.test() : var0 
var3 =  method : B.m() : var0 
var4 =  method : C.test() : var0 
var5 =  method : C.test() : var0 
var6 =  method : B.m() : var0 
var7 =  method : C.test() : var0 
var8 =  method : B.k() : var0 
var9 =  method : B.k() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Adding sequence to active sequences of type class C
Sequence after execution: 
C var0 = new C();
// <NormalExecution object=object-of-type-C>;
int var1 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var2 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var3 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var4 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var5 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var6 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var7 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var8 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var9 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
<randoop.PrimValue, value=23 [var1]  : true
<randoop.PrimValue, value=23 [var2]  : true
<randoop.PrimValue, value=23 [var3]  : true
<randoop.PrimValue, value=23 [var4]  : true
<randoop.PrimValue, value=23 [var5]  : true
<randoop.PrimValue, value=23 [var6]  : true
<randoop.PrimValue, value=23 [var7]  : true
<randoop.PrimValue, value=42 [var8]  : true
<randoop.PrimValue, value=42 [var9]  : true

allSequences.size()=350
-------------------------------------------
randoop.util.Randomness: total calls to random: 1945
Selected statement: C.test()
Will query component set for objects of typeclass C
getActivesequencesThatYield: entering method, clazz=class C
getActivesequencesThatYield: returning 328 sequences.
components: 328
randoop.util.Randomness: total calls to random: 1946
randoop.util.Randomness: total calls to random: 1947
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 1948
Selected statement: B.m()
Will query component set for objects of typeclass B
getActivesequencesThatYield: entering method, clazz=class B
getActivesequencesThatYield: returning 328 sequences.
components: 328
randoop.util.Randomness: total calls to random: 1949
randoop.util.Randomness: total calls to random: 1950
Successfully created new unique sequence:var0 =  cons : C.<init>() : 
var1 =  method : C.test() : var0 
var2 =  method : C.test() : var0 
var3 =  method : C.test() : var0 
var4 =  method : C.test() : var0 
var5 =  method : B.k() : var0 
var6 =  method : B.k() : var0 
var7 =  method : B.m() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Adding sequence to active sequences of type class C
Sequence after execution: 
C var0 = new C();
// <NormalExecution object=object-of-type-C>;
int var1 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var2 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var3 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var4 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var5 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var6 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var7 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
<randoop.PrimValue, value=23 [var1]  : true
<randoop.PrimValue, value=23 [var2]  : true
<randoop.PrimValue, value=23 [var3]  : true
<randoop.PrimValue, value=23 [var4]  : true
<randoop.PrimValue, value=42 [var5]  : true
<randoop.PrimValue, value=42 [var6]  : true
<randoop.PrimValue, value=23 [var7]  : true

allSequences.size()=351
-------------------------------------------
randoop.util.Randomness: total calls to random: 1951
Selected statement: B.k()
Will query component set for objects of typeclass B
getActivesequencesThatYield: entering method, clazz=class B
getActivesequencesThatYield: returning 331 sequences.
components: 331
randoop.util.Randomness: total calls to random: 1952
randoop.util.Randomness: total calls to random: 1953
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 1954
Selected statement: B.k()
Will query component set for objects of typeclass B
getActivesequencesThatYield: entering method, clazz=class B
getActivesequencesThatYield: returning 331 sequences.
components: 331
randoop.util.Randomness: total calls to random: 1955
randoop.util.Randomness: total calls to random: 1956
Successfully created new unique sequence:var0 =  cons : C.<init>() : 
var1 =  method : C.test() : var0 
var2 =  method : C.test() : var0 
var3 =  method : C.test() : var0 
var4 =  method : B.m() : var0 
var5 =  method : C.test() : var0 
var6 =  method : C.test() : var0 
var7 =  method : B.k() : var0 
var8 =  method : B.k() : var0 
var9 =  method : B.k() : var0 
var10 =  method : B.k() : var0 
var11 =  method : B.k() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Adding sequence to active sequences of type class C
Sequence after execution: 
C var0 = new C();
// <NormalExecution object=object-of-type-C>;
int var1 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var2 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var3 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var4 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var5 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var6 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var7 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var8 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var9 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var10 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var11 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
<randoop.PrimValue, value=23 [var1]  : true
<randoop.PrimValue, value=23 [var2]  : true
<randoop.PrimValue, value=23 [var3]  : true
<randoop.PrimValue, value=23 [var4]  : true
<randoop.PrimValue, value=23 [var5]  : true
<randoop.PrimValue, value=23 [var6]  : true
<randoop.PrimValue, value=42 [var7]  : true
<randoop.PrimValue, value=42 [var8]  : true
<randoop.PrimValue, value=42 [var9]  : true
<randoop.PrimValue, value=42 [var10]  : true
<randoop.PrimValue, value=42 [var11]  : true

allSequences.size()=352
-------------------------------------------
randoop.util.Randomness: total calls to random: 1957
Selected statement: C.test()
Will query component set for objects of typeclass C
getActivesequencesThatYield: entering method, clazz=class C
getActivesequencesThatYield: returning 330 sequences.
components: 330
randoop.util.Randomness: total calls to random: 1958
randoop.util.Randomness: total calls to random: 1959
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 1960
Selected statement: B.m()
Will query component set for objects of typeclass B
getActivesequencesThatYield: entering method, clazz=class B
getActivesequencesThatYield: returning 330 sequences.
components: 330
randoop.util.Randomness: total calls to random: 1961
randoop.util.Randomness: total calls to random: 1962
Successfully created new unique sequence:var0 =  cons : C.<init>() : 
var1 =  method : B.m() : var0 
var2 =  method : B.k() : var0 
var3 =  method : B.k() : var0 
var4 =  method : C.test() : var0 
var5 =  method : B.k() : var0 
var6 =  method : B.m() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Adding sequence to active sequences of type class C
Sequence after execution: 
C var0 = new C();
// <NormalExecution object=object-of-type-C>;
int var1 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var2 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var3 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var4 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var5 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var6 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
<randoop.PrimValue, value=23 [var1]  : true
<randoop.PrimValue, value=42 [var2]  : true
<randoop.PrimValue, value=42 [var3]  : true
<randoop.PrimValue, value=23 [var4]  : true
<randoop.PrimValue, value=42 [var5]  : true
<randoop.PrimValue, value=23 [var6]  : true

allSequences.size()=353
-------------------------------------------
randoop.util.Randomness: total calls to random: 1963
Selected statement: B.k()
Will query component set for objects of typeclass B
getActivesequencesThatYield: entering method, clazz=class B
getActivesequencesThatYield: returning 333 sequences.
components: 333
randoop.util.Randomness: total calls to random: 1964
randoop.util.Randomness: total calls to random: 1965
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 1966
Selected statement: B.k()
Will query component set for objects of typeclass B
getActivesequencesThatYield: entering method, clazz=class B
getActivesequencesThatYield: returning 333 sequences.
components: 333
randoop.util.Randomness: total calls to random: 1967
randoop.util.Randomness: total calls to random: 1968
Successfully created new unique sequence:var0 =  cons : C.<init>() : 
var1 =  method : C.test() : var0 
var2 =  method : C.test() : var0 
var3 =  method : B.m() : var0 
var4 =  method : C.test() : var0 
var5 =  method : B.m() : var0 
var6 =  method : B.m() : var0 
var7 =  method : B.k() : var0 
var8 =  method : B.k() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Adding sequence to active sequences of type class C
Sequence after execution: 
C var0 = new C();
// <NormalExecution object=object-of-type-C>;
int var1 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var2 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var3 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var4 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var5 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var6 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var7 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var8 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
<randoop.PrimValue, value=23 [var1]  : true
<randoop.PrimValue, value=23 [var2]  : true
<randoop.PrimValue, value=23 [var3]  : true
<randoop.PrimValue, value=23 [var4]  : true
<randoop.PrimValue, value=23 [var5]  : true
<randoop.PrimValue, value=23 [var6]  : true
<randoop.PrimValue, value=42 [var7]  : true
<randoop.PrimValue, value=42 [var8]  : true

allSequences.size()=354
-------------------------------------------
randoop.util.Randomness: total calls to random: 1969
Selected statement: B.k()
Will query component set for objects of typeclass B
getActivesequencesThatYield: entering method, clazz=class B
getActivesequencesThatYield: returning 334 sequences.
components: 334
randoop.util.Randomness: total calls to random: 1970
randoop.util.Randomness: total calls to random: 1971
Successfully created new unique sequence:var0 =  cons : C.<init>() : 
var1 =  method : C.test() : var0 
var2 =  method : C.test() : var0 
var3 =  method : B.m() : var0 
var4 =  method : C.test() : var0 
var5 =  method : B.k() : var0 
var6 =  method : B.m() : var0 
var7 =  method : C.test() : var0 
var8 =  method : B.k() : var0 
var9 =  method : C.test() : var0 
var10 =  method : B.k() : var0 
var11 =  method : C.test() : var0 
var12 =  method : B.k() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Making index 12 inactive (value is a primitive)
Adding sequence to active sequences of type class C
Sequence after execution: 
C var0 = new C();
// <NormalExecution object=object-of-type-C>;
int var1 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var2 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var3 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var4 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var5 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var6 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var7 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var8 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var9 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var10 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var11 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var12 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
<randoop.PrimValue, value=23 [var1]  : true
<randoop.PrimValue, value=23 [var2]  : true
<randoop.PrimValue, value=23 [var3]  : true
<randoop.PrimValue, value=23 [var4]  : true
<randoop.PrimValue, value=42 [var5]  : true
<randoop.PrimValue, value=23 [var6]  : true
<randoop.PrimValue, value=23 [var7]  : true
<randoop.PrimValue, value=42 [var8]  : true
<randoop.PrimValue, value=23 [var9]  : true
<randoop.PrimValue, value=42 [var10]  : true
<randoop.PrimValue, value=23 [var11]  : true
<randoop.PrimValue, value=42 [var12]  : true

allSequences.size()=355
-------------------------------------------
randoop.util.Randomness: total calls to random: 1972
Selected statement: A.k()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 19 sequences.
components: 19
randoop.util.Randomness: total calls to random: 1973
randoop.util.Randomness: total calls to random: 1974
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 1975
Selected statement: B.m()
Will query component set for objects of typeclass B
getActivesequencesThatYield: entering method, clazz=class B
getActivesequencesThatYield: returning 333 sequences.
components: 333
randoop.util.Randomness: total calls to random: 1976
randoop.util.Randomness: total calls to random: 1977
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 1978
Selected statement: B.k()
Will query component set for objects of typeclass B
getActivesequencesThatYield: entering method, clazz=class B
getActivesequencesThatYield: returning 335 sequences.
components: 335
randoop.util.Randomness: total calls to random: 1979
randoop.util.Randomness: total calls to random: 1980
Successfully created new unique sequence:var0 =  cons : C.<init>() : 
var1 =  method : C.test() : var0 
var2 =  method : C.test() : var0 
var3 =  method : B.m() : var0 
var4 =  method : C.test() : var0 
var5 =  method : B.k() : var0 
var6 =  method : B.m() : var0 
var7 =  method : C.test() : var0 
var8 =  method : C.test() : var0 
var9 =  method : B.m() : var0 
var10 =  method : C.test() : var0 
var11 =  method : B.m() : var0 
var12 =  method : B.k() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Making index 12 inactive (value is a primitive)
Adding sequence to active sequences of type class C
Sequence after execution: 
C var0 = new C();
// <NormalExecution object=object-of-type-C>;
int var1 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var2 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var3 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var4 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var5 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var6 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var7 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var8 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var9 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var10 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var11 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var12 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
<randoop.PrimValue, value=23 [var1]  : true
<randoop.PrimValue, value=23 [var2]  : true
<randoop.PrimValue, value=23 [var3]  : true
<randoop.PrimValue, value=23 [var4]  : true
<randoop.PrimValue, value=42 [var5]  : true
<randoop.PrimValue, value=23 [var6]  : true
<randoop.PrimValue, value=23 [var7]  : true
<randoop.PrimValue, value=23 [var8]  : true
<randoop.PrimValue, value=23 [var9]  : true
<randoop.PrimValue, value=23 [var10]  : true
<randoop.PrimValue, value=23 [var11]  : true
<randoop.PrimValue, value=42 [var12]  : true

allSequences.size()=356
-------------------------------------------
randoop.util.Randomness: total calls to random: 1981
Selected statement: C.test()
Will query component set for objects of typeclass C
getActivesequencesThatYield: entering method, clazz=class C
getActivesequencesThatYield: returning 334 sequences.
components: 334
randoop.util.Randomness: total calls to random: 1982
randoop.util.Randomness: total calls to random: 1983
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 1984
Selected statement: B.m()
Will query component set for objects of typeclass B
getActivesequencesThatYield: entering method, clazz=class B
getActivesequencesThatYield: returning 334 sequences.
components: 334
randoop.util.Randomness: total calls to random: 1985
randoop.util.Randomness: total calls to random: 1986
Successfully created new unique sequence:var0 =  cons : C.<init>() : 
var1 =  method : B.m() : var0 
var2 =  method : B.k() : var0 
var3 =  method : B.m() : var0 
var4 =  method : B.k() : var0 
var5 =  method : B.k() : var0 
var6 =  method : B.k() : var0 
var7 =  method : B.m() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Adding sequence to active sequences of type class C
Sequence after execution: 
C var0 = new C();
// <NormalExecution object=object-of-type-C>;
int var1 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var2 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var3 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var4 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var5 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var6 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var7 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
<randoop.PrimValue, value=23 [var1]  : true
<randoop.PrimValue, value=42 [var2]  : true
<randoop.PrimValue, value=23 [var3]  : true
<randoop.PrimValue, value=42 [var4]  : true
<randoop.PrimValue, value=42 [var5]  : true
<randoop.PrimValue, value=42 [var6]  : true
<randoop.PrimValue, value=23 [var7]  : true

allSequences.size()=357
-------------------------------------------
randoop.util.Randomness: total calls to random: 1987
Selected statement: A.k()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 19 sequences.
components: 19
randoop.util.Randomness: total calls to random: 1988
randoop.util.Randomness: total calls to random: 1989
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 1990
Selected statement: C.test()
Will query component set for objects of typeclass C
getActivesequencesThatYield: entering method, clazz=class C
getActivesequencesThatYield: returning 335 sequences.
components: 335
randoop.util.Randomness: total calls to random: 1991
randoop.util.Randomness: total calls to random: 1992
Successfully created new unique sequence:var0 =  cons : C.<init>() : 
var1 =  method : B.m() : var0 
var2 =  method : B.k() : var0 
var3 =  method : B.m() : var0 
var4 =  method : B.m() : var0 
var5 =  method : B.m() : var0 
var6 =  method : B.k() : var0 
var7 =  method : C.test() : var0 
var8 =  method : C.test() : var0 
var9 =  method : C.test() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Adding sequence to active sequences of type class C
Sequence after execution: 
C var0 = new C();
// <NormalExecution object=object-of-type-C>;
int var1 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var2 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var3 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var4 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var5 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var6 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var7 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var8 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var9 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
<randoop.PrimValue, value=23 [var1]  : true
<randoop.PrimValue, value=42 [var2]  : true
<randoop.PrimValue, value=23 [var3]  : true
<randoop.PrimValue, value=23 [var4]  : true
<randoop.PrimValue, value=23 [var5]  : true
<randoop.PrimValue, value=42 [var6]  : true
<randoop.PrimValue, value=23 [var7]  : true
<randoop.PrimValue, value=23 [var8]  : true
<randoop.PrimValue, value=23 [var9]  : true

allSequences.size()=358
-------------------------------------------
randoop.util.Randomness: total calls to random: 1993
Selected statement: C.test()
Will query component set for objects of typeclass C
getActivesequencesThatYield: entering method, clazz=class C
getActivesequencesThatYield: returning 336 sequences.
components: 336
randoop.util.Randomness: total calls to random: 1994
randoop.util.Randomness: total calls to random: 1995
Successfully created new unique sequence:var0 =  cons : C.<init>() : 
var1 =  method : B.m() : var0 
var2 =  method : B.k() : var0 
var3 =  method : C.test() : var0 
var4 =  method : C.test() : var0 
var5 =  method : C.test() : var0 
var6 =  method : C.test() : var0 
var7 =  method : B.k() : var0 
var8 =  method : C.test() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Adding sequence to active sequences of type class C
Sequence after execution: 
C var0 = new C();
// <NormalExecution object=object-of-type-C>;
int var1 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var2 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var3 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var4 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var5 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var6 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var7 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var8 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
<randoop.PrimValue, value=23 [var1]  : true
<randoop.PrimValue, value=42 [var2]  : true
<randoop.PrimValue, value=23 [var3]  : true
<randoop.PrimValue, value=23 [var4]  : true
<randoop.PrimValue, value=23 [var5]  : true
<randoop.PrimValue, value=23 [var6]  : true
<randoop.PrimValue, value=42 [var7]  : true
<randoop.PrimValue, value=23 [var8]  : true

allSequences.size()=359
-------------------------------------------
randoop.util.Randomness: total calls to random: 1996
Selected statement: B.m()
Will query component set for objects of typeclass B
getActivesequencesThatYield: entering method, clazz=class B
getActivesequencesThatYield: returning 337 sequences.
components: 337
randoop.util.Randomness: total calls to random: 1997
randoop.util.Randomness: total calls to random: 1998
Successfully created new unique sequence:var0 =  cons : C.<init>() : 
var1 =  method : B.m() : var0 
var2 =  method : B.k() : var0 
var3 =  method : B.k() : var0 
var4 =  method : B.m() : var0 
var5 =  method : B.k() : var0 
var6 =  method : B.m() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Adding sequence to active sequences of type class C
Sequence after execution: 
C var0 = new C();
// <NormalExecution object=object-of-type-C>;
int var1 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var2 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var3 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var4 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var5 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var6 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
<randoop.PrimValue, value=23 [var1]  : true
<randoop.PrimValue, value=42 [var2]  : true
<randoop.PrimValue, value=42 [var3]  : true
<randoop.PrimValue, value=23 [var4]  : true
<randoop.PrimValue, value=42 [var5]  : true
<randoop.PrimValue, value=23 [var6]  : true

allSequences.size()=360
-------------------------------------------
randoop.util.Randomness: total calls to random: 1999
Selected statement: B.m()
Will query component set for objects of typeclass B
getActivesequencesThatYield: entering method, clazz=class B
getActivesequencesThatYield: returning 338 sequences.
components: 338
randoop.util.Randomness: total calls to random: 2000
randoop.util.Randomness: total calls to random: 2001
Successfully created new unique sequence:var0 =  cons : C.<init>() : 
var1 =  method : C.test() : var0 
var2 =  method : C.test() : var0 
var3 =  method : B.m() : var0 
var4 =  method : C.test() : var0 
var5 =  method : B.k() : var0 
var6 =  method : C.test() : var0 
var7 =  method : B.k() : var0 
var8 =  method : B.m() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Adding sequence to active sequences of type class C
Sequence after execution: 
C var0 = new C();
// <NormalExecution object=object-of-type-C>;
int var1 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var2 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var3 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var4 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var5 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var6 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var7 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var8 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
<randoop.PrimValue, value=23 [var1]  : true
<randoop.PrimValue, value=23 [var2]  : true
<randoop.PrimValue, value=23 [var3]  : true
<randoop.PrimValue, value=23 [var4]  : true
<randoop.PrimValue, value=42 [var5]  : true
<randoop.PrimValue, value=23 [var6]  : true
<randoop.PrimValue, value=42 [var7]  : true
<randoop.PrimValue, value=23 [var8]  : true

allSequences.size()=361
-------------------------------------------
randoop.util.Randomness: total calls to random: 2002
Selected statement: B.m()
Will query component set for objects of typeclass B
getActivesequencesThatYield: entering method, clazz=class B
getActivesequencesThatYield: returning 339 sequences.
components: 339
randoop.util.Randomness: total calls to random: 2003
randoop.util.Randomness: total calls to random: 2004
Successfully created new unique sequence:var0 =  cons : C.<init>() : 
var1 =  method : C.test() : var0 
var2 =  method : C.test() : var0 
var3 =  method : C.test() : var0 
var4 =  method : B.m() : var0 
var5 =  method : C.test() : var0 
var6 =  method : C.test() : var0 
var7 =  method : B.k() : var0 
var8 =  method : C.test() : var0 
var9 =  method : B.k() : var0 
var10 =  method : B.m() : var0 
var11 =  method : B.k() : var0 
var12 =  method : B.m() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Making index 12 inactive (value is a primitive)
Adding sequence to active sequences of type class C
Sequence after execution: 
C var0 = new C();
// <NormalExecution object=object-of-type-C>;
int var1 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var2 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var3 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var4 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var5 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var6 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var7 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var8 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var9 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var10 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var11 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var12 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
<randoop.PrimValue, value=23 [var1]  : true
<randoop.PrimValue, value=23 [var2]  : true
<randoop.PrimValue, value=23 [var3]  : true
<randoop.PrimValue, value=23 [var4]  : true
<randoop.PrimValue, value=23 [var5]  : true
<randoop.PrimValue, value=23 [var6]  : true
<randoop.PrimValue, value=42 [var7]  : true
<randoop.PrimValue, value=23 [var8]  : true
<randoop.PrimValue, value=42 [var9]  : true
<randoop.PrimValue, value=23 [var10]  : true
<randoop.PrimValue, value=42 [var11]  : true
<randoop.PrimValue, value=23 [var12]  : true

allSequences.size()=362
-------------------------------------------
randoop.util.Randomness: total calls to random: 2005
Selected statement: B.k()
Will query component set for objects of typeclass B
getActivesequencesThatYield: entering method, clazz=class B
getActivesequencesThatYield: returning 342 sequences.
components: 342
randoop.util.Randomness: total calls to random: 2006
randoop.util.Randomness: total calls to random: 2007
Successfully created new unique sequence:var0 =  cons : C.<init>() : 
var1 =  method : B.m() : var0 
var2 =  method : B.k() : var0 
var3 =  method : B.m() : var0 
var4 =  method : C.test() : var0 
var5 =  method : B.k() : var0 
var6 =  method : B.k() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Adding sequence to active sequences of type class C
Sequence after execution: 
C var0 = new C();
// <NormalExecution object=object-of-type-C>;
int var1 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var2 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var3 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var4 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var5 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var6 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
<randoop.PrimValue, value=23 [var1]  : true
<randoop.PrimValue, value=42 [var2]  : true
<randoop.PrimValue, value=23 [var3]  : true
<randoop.PrimValue, value=23 [var4]  : true
<randoop.PrimValue, value=42 [var5]  : true
<randoop.PrimValue, value=42 [var6]  : true

allSequences.size()=363
-------------------------------------------
randoop.util.Randomness: total calls to random: 2008
Selected statement: B.m()
Will query component set for objects of typeclass B
getActivesequencesThatYield: entering method, clazz=class B
getActivesequencesThatYield: returning 341 sequences.
components: 341
randoop.util.Randomness: total calls to random: 2009
randoop.util.Randomness: total calls to random: 2010
Successfully created new unique sequence:var0 =  cons : C.<init>() : 
var1 =  method : C.test() : var0 
var2 =  method : C.test() : var0 
var3 =  method : B.m() : var0 
var4 =  method : C.test() : var0 
var5 =  method : C.test() : var0 
var6 =  method : C.test() : var0 
var7 =  method : B.k() : var0 
var8 =  method : C.test() : var0 
var9 =  method : B.k() : var0 
var10 =  method : B.m() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Adding sequence to active sequences of type class C
Sequence after execution: 
C var0 = new C();
// <NormalExecution object=object-of-type-C>;
int var1 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var2 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var3 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var4 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var5 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var6 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var7 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var8 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var9 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var10 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
<randoop.PrimValue, value=23 [var1]  : true
<randoop.PrimValue, value=23 [var2]  : true
<randoop.PrimValue, value=23 [var3]  : true
<randoop.PrimValue, value=23 [var4]  : true
<randoop.PrimValue, value=23 [var5]  : true
<randoop.PrimValue, value=23 [var6]  : true
<randoop.PrimValue, value=42 [var7]  : true
<randoop.PrimValue, value=23 [var8]  : true
<randoop.PrimValue, value=42 [var9]  : true
<randoop.PrimValue, value=23 [var10]  : true

allSequences.size()=364
-------------------------------------------
randoop.util.Randomness: total calls to random: 2011
Selected statement: A.k()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 19 sequences.
components: 19
randoop.util.Randomness: total calls to random: 2012
randoop.util.Randomness: total calls to random: 2013
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 2014
Selected statement: B.k()
Will query component set for objects of typeclass B
getActivesequencesThatYield: entering method, clazz=class B
getActivesequencesThatYield: returning 344 sequences.
components: 344
randoop.util.Randomness: total calls to random: 2015
randoop.util.Randomness: total calls to random: 2016
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 2017
Selected statement: B.k()
Will query component set for objects of typeclass B
getActivesequencesThatYield: entering method, clazz=class B
getActivesequencesThatYield: returning 344 sequences.
components: 344
randoop.util.Randomness: total calls to random: 2018
randoop.util.Randomness: total calls to random: 2019
Successfully created new unique sequence:var0 =  cons : C.<init>() : 
var1 =  method : C.test() : var0 
var2 =  method : C.test() : var0 
var3 =  method : B.m() : var0 
var4 =  method : C.test() : var0 
var5 =  method : B.k() : var0 
var6 =  method : B.k() : var0 
var7 =  method : C.test() : var0 
var8 =  method : B.m() : var0 
var9 =  method : B.k() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Adding sequence to active sequences of type class C
Sequence after execution: 
C var0 = new C();
// <NormalExecution object=object-of-type-C>;
int var1 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var2 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var3 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var4 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var5 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var6 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var7 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var8 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var9 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
<randoop.PrimValue, value=23 [var1]  : true
<randoop.PrimValue, value=23 [var2]  : true
<randoop.PrimValue, value=23 [var3]  : true
<randoop.PrimValue, value=23 [var4]  : true
<randoop.PrimValue, value=42 [var5]  : true
<randoop.PrimValue, value=42 [var6]  : true
<randoop.PrimValue, value=23 [var7]  : true
<randoop.PrimValue, value=23 [var8]  : true
<randoop.PrimValue, value=42 [var9]  : true

allSequences.size()=365
-------------------------------------------
randoop.util.Randomness: total calls to random: 2020
Selected statement: A.k()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 19 sequences.
components: 19
randoop.util.Randomness: total calls to random: 2021
randoop.util.Randomness: total calls to random: 2022
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 2023
Selected statement: B.k()
Will query component set for objects of typeclass B
getActivesequencesThatYield: entering method, clazz=class B
getActivesequencesThatYield: returning 345 sequences.
components: 345
randoop.util.Randomness: total calls to random: 2024
randoop.util.Randomness: total calls to random: 2025
Successfully created new unique sequence:var0 =  cons : C.<init>() : 
var1 =  method : C.test() : var0 
var2 =  method : C.test() : var0 
var3 =  method : C.test() : var0 
var4 =  method : B.m() : var0 
var5 =  method : B.m() : var0 
var6 =  method : C.test() : var0 
var7 =  method : B.m() : var0 
var8 =  method : B.k() : var0 
var9 =  method : B.k() : var0 
var10 =  method : B.m() : var0 
var11 =  method : B.k() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Adding sequence to active sequences of type class C
Sequence after execution: 
C var0 = new C();
// <NormalExecution object=object-of-type-C>;
int var1 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var2 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var3 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var4 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var5 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var6 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var7 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var8 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var9 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var10 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var11 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
<randoop.PrimValue, value=23 [var1]  : true
<randoop.PrimValue, value=23 [var2]  : true
<randoop.PrimValue, value=23 [var3]  : true
<randoop.PrimValue, value=23 [var4]  : true
<randoop.PrimValue, value=23 [var5]  : true
<randoop.PrimValue, value=23 [var6]  : true
<randoop.PrimValue, value=23 [var7]  : true
<randoop.PrimValue, value=42 [var8]  : true
<randoop.PrimValue, value=42 [var9]  : true
<randoop.PrimValue, value=23 [var10]  : true
<randoop.PrimValue, value=42 [var11]  : true

allSequences.size()=366
-------------------------------------------
randoop.util.Randomness: total calls to random: 2026
Selected statement: B.k()
Will query component set for objects of typeclass B
getActivesequencesThatYield: entering method, clazz=class B
getActivesequencesThatYield: returning 346 sequences.
components: 346
randoop.util.Randomness: total calls to random: 2027
randoop.util.Randomness: total calls to random: 2028
Successfully created new unique sequence:var0 =  cons : C.<init>() : 
var1 =  method : B.m() : var0 
var2 =  method : B.k() : var0 
var3 =  method : B.m() : var0 
var4 =  method : C.test() : var0 
var5 =  method : B.m() : var0 
var6 =  method : B.m() : var0 
var7 =  method : B.k() : var0 
var8 =  method : C.test() : var0 
var9 =  method : B.k() : var0 
var10 =  method : B.m() : var0 
var11 =  method : B.m() : var0 
var12 =  method : B.k() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Making index 12 inactive (value is a primitive)
Adding sequence to active sequences of type class C
Sequence after execution: 
C var0 = new C();
// <NormalExecution object=object-of-type-C>;
int var1 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var2 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var3 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var4 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var5 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var6 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var7 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var8 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var9 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var10 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var11 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var12 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
<randoop.PrimValue, value=23 [var1]  : true
<randoop.PrimValue, value=42 [var2]  : true
<randoop.PrimValue, value=23 [var3]  : true
<randoop.PrimValue, value=23 [var4]  : true
<randoop.PrimValue, value=23 [var5]  : true
<randoop.PrimValue, value=23 [var6]  : true
<randoop.PrimValue, value=42 [var7]  : true
<randoop.PrimValue, value=23 [var8]  : true
<randoop.PrimValue, value=42 [var9]  : true
<randoop.PrimValue, value=23 [var10]  : true
<randoop.PrimValue, value=23 [var11]  : true
<randoop.PrimValue, value=42 [var12]  : true

allSequences.size()=367
-------------------------------------------
randoop.util.Randomness: total calls to random: 2029
Selected statement: B.k()
Will query component set for objects of typeclass B
getActivesequencesThatYield: entering method, clazz=class B
getActivesequencesThatYield: returning 347 sequences.
components: 347
randoop.util.Randomness: total calls to random: 2030
randoop.util.Randomness: total calls to random: 2031
Successfully created new unique sequence:var0 =  cons : C.<init>() : 
var1 =  method : C.test() : var0 
var2 =  method : C.test() : var0 
var3 =  method : C.test() : var0 
var4 =  method : C.test() : var0 
var5 =  method : B.k() : var0 
var6 =  method : B.m() : var0 
var7 =  method : B.k() : var0 
var8 =  method : B.k() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Adding sequence to active sequences of type class C
Sequence after execution: 
C var0 = new C();
// <NormalExecution object=object-of-type-C>;
int var1 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var2 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var3 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var4 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var5 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var6 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var7 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var8 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
<randoop.PrimValue, value=23 [var1]  : true
<randoop.PrimValue, value=23 [var2]  : true
<randoop.PrimValue, value=23 [var3]  : true
<randoop.PrimValue, value=23 [var4]  : true
<randoop.PrimValue, value=42 [var5]  : true
<randoop.PrimValue, value=23 [var6]  : true
<randoop.PrimValue, value=42 [var7]  : true
<randoop.PrimValue, value=42 [var8]  : true

allSequences.size()=368
-------------------------------------------
randoop.util.Randomness: total calls to random: 2032
Selected statement: A.k()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 19 sequences.
components: 19
randoop.util.Randomness: total calls to random: 2033
randoop.util.Randomness: total calls to random: 2034
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 2035
Selected statement: B.m()
Will query component set for objects of typeclass B
getActivesequencesThatYield: entering method, clazz=class B
getActivesequencesThatYield: returning 346 sequences.
components: 346
randoop.util.Randomness: total calls to random: 2036
randoop.util.Randomness: total calls to random: 2037
Successfully created new unique sequence:var0 =  cons : C.<init>() : 
var1 =  method : C.test() : var0 
var2 =  method : C.test() : var0 
var3 =  method : B.m() : var0 
var4 =  method : C.test() : var0 
var5 =  method : B.k() : var0 
var6 =  method : B.m() : var0 
var7 =  method : C.test() : var0 
var8 =  method : B.k() : var0 
var9 =  method : B.m() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Adding sequence to active sequences of type class C
Sequence after execution: 
C var0 = new C();
// <NormalExecution object=object-of-type-C>;
int var1 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var2 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var3 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var4 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var5 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var6 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var7 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var8 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var9 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
<randoop.PrimValue, value=23 [var1]  : true
<randoop.PrimValue, value=23 [var2]  : true
<randoop.PrimValue, value=23 [var3]  : true
<randoop.PrimValue, value=23 [var4]  : true
<randoop.PrimValue, value=42 [var5]  : true
<randoop.PrimValue, value=23 [var6]  : true
<randoop.PrimValue, value=23 [var7]  : true
<randoop.PrimValue, value=42 [var8]  : true
<randoop.PrimValue, value=23 [var9]  : true

allSequences.size()=369
-------------------------------------------
randoop.util.Randomness: total calls to random: 2038
Selected statement: B.m()
Will query component set for objects of typeclass B
getActivesequencesThatYield: entering method, clazz=class B
getActivesequencesThatYield: returning 347 sequences.
components: 347
randoop.util.Randomness: total calls to random: 2039
randoop.util.Randomness: total calls to random: 2040
Successfully created new unique sequence:var0 =  cons : C.<init>() : 
var1 =  method : B.m() : var0 
var2 =  method : B.k() : var0 
var3 =  method : C.test() : var0 
var4 =  method : C.test() : var0 
var5 =  method : C.test() : var0 
var6 =  method : C.test() : var0 
var7 =  method : B.k() : var0 
var8 =  method : C.test() : var0 
var9 =  method : B.m() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Adding sequence to active sequences of type class C
Sequence after execution: 
C var0 = new C();
// <NormalExecution object=object-of-type-C>;
int var1 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var2 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var3 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var4 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var5 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var6 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var7 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var8 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var9 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
<randoop.PrimValue, value=23 [var1]  : true
<randoop.PrimValue, value=42 [var2]  : true
<randoop.PrimValue, value=23 [var3]  : true
<randoop.PrimValue, value=23 [var4]  : true
<randoop.PrimValue, value=23 [var5]  : true
<randoop.PrimValue, value=23 [var6]  : true
<randoop.PrimValue, value=42 [var7]  : true
<randoop.PrimValue, value=23 [var8]  : true
<randoop.PrimValue, value=23 [var9]  : true

allSequences.size()=370
-------------------------------------------
randoop.util.Randomness: total calls to random: 2041
Selected statement: B.k()
Will query component set for objects of typeclass B
getActivesequencesThatYield: entering method, clazz=class B
getActivesequencesThatYield: returning 350 sequences.
components: 350
randoop.util.Randomness: total calls to random: 2042
randoop.util.Randomness: total calls to random: 2043
Successfully created new unique sequence:var0 =  cons : C.<init>() : 
var1 =  method : C.test() : var0 
var2 =  method : C.test() : var0 
var3 =  method : B.m() : var0 
var4 =  method : B.m() : var0 
var5 =  method : B.m() : var0 
var6 =  method : B.m() : var0 
var7 =  method : B.k() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Adding sequence to active sequences of type class C
Sequence after execution: 
C var0 = new C();
// <NormalExecution object=object-of-type-C>;
int var1 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var2 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var3 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var4 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var5 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var6 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var7 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
<randoop.PrimValue, value=23 [var1]  : true
<randoop.PrimValue, value=23 [var2]  : true
<randoop.PrimValue, value=23 [var3]  : true
<randoop.PrimValue, value=23 [var4]  : true
<randoop.PrimValue, value=23 [var5]  : true
<randoop.PrimValue, value=23 [var6]  : true
<randoop.PrimValue, value=42 [var7]  : true

allSequences.size()=371
-------------------------------------------
randoop.util.Randomness: total calls to random: 2044
Selected statement: B.m()
Will query component set for objects of typeclass B
getActivesequencesThatYield: entering method, clazz=class B
getActivesequencesThatYield: returning 349 sequences.
components: 349
randoop.util.Randomness: total calls to random: 2045
randoop.util.Randomness: total calls to random: 2046
Successfully created new unique sequence:var0 =  cons : C.<init>() : 
var1 =  method : B.m() : var0 
var2 =  method : B.k() : var0 
var3 =  method : B.m() : var0 
var4 =  method : C.test() : var0 
var5 =  method : B.m() : var0 
var6 =  method : B.m() : var0 
var7 =  method : B.k() : var0 
var8 =  method : B.k() : var0 
var9 =  method : B.m() : var0 
var10 =  method : B.m() : var0 
var11 =  method : B.m() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Adding sequence to active sequences of type class C
Sequence after execution: 
C var0 = new C();
// <NormalExecution object=object-of-type-C>;
int var1 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var2 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var3 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var4 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var5 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var6 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var7 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var8 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var9 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var10 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var11 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
<randoop.PrimValue, value=23 [var1]  : true
<randoop.PrimValue, value=42 [var2]  : true
<randoop.PrimValue, value=23 [var3]  : true
<randoop.PrimValue, value=23 [var4]  : true
<randoop.PrimValue, value=23 [var5]  : true
<randoop.PrimValue, value=23 [var6]  : true
<randoop.PrimValue, value=42 [var7]  : true
<randoop.PrimValue, value=42 [var8]  : true
<randoop.PrimValue, value=23 [var9]  : true
<randoop.PrimValue, value=23 [var10]  : true
<randoop.PrimValue, value=23 [var11]  : true

allSequences.size()=372
-------------------------------------------
randoop.util.Randomness: total calls to random: 2047
Selected statement: C.test()
Will query component set for objects of typeclass C
getActivesequencesThatYield: entering method, clazz=class C
getActivesequencesThatYield: returning 350 sequences.
components: 350
randoop.util.Randomness: total calls to random: 2048
randoop.util.Randomness: total calls to random: 2049
Successfully created new unique sequence:var0 =  cons : C.<init>() : 
var1 =  method : C.test() : var0 
var2 =  method : C.test() : var0 
var3 =  method : B.m() : var0 
var4 =  method : C.test() : var0 
var5 =  method : B.k() : var0 
var6 =  method : B.k() : var0 
var7 =  method : C.test() : var0 
var8 =  method : B.m() : var0 
var9 =  method : B.k() : var0 
var10 =  method : C.test() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Adding sequence to active sequences of type class C
Sequence after execution: 
C var0 = new C();
// <NormalExecution object=object-of-type-C>;
int var1 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var2 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var3 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var4 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var5 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var6 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var7 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var8 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var9 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var10 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
<randoop.PrimValue, value=23 [var1]  : true
<randoop.PrimValue, value=23 [var2]  : true
<randoop.PrimValue, value=23 [var3]  : true
<randoop.PrimValue, value=23 [var4]  : true
<randoop.PrimValue, value=42 [var5]  : true
<randoop.PrimValue, value=42 [var6]  : true
<randoop.PrimValue, value=23 [var7]  : true
<randoop.PrimValue, value=23 [var8]  : true
<randoop.PrimValue, value=42 [var9]  : true
<randoop.PrimValue, value=23 [var10]  : true

allSequences.size()=373
-------------------------------------------
randoop.util.Randomness: total calls to random: 2050
Selected statement: B.k()
Will query component set for objects of typeclass B
getActivesequencesThatYield: entering method, clazz=class B
getActivesequencesThatYield: returning 353 sequences.
components: 353
randoop.util.Randomness: total calls to random: 2051
randoop.util.Randomness: total calls to random: 2052
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 2053
Selected statement: C.test()
Will query component set for objects of typeclass C
getActivesequencesThatYield: entering method, clazz=class C
getActivesequencesThatYield: returning 351 sequences.
components: 351
randoop.util.Randomness: total calls to random: 2054
randoop.util.Randomness: total calls to random: 2055
Successfully created new unique sequence:var0 =  cons : C.<init>() : 
var1 =  method : C.test() : var0 
var2 =  method : C.test() : var0 
var3 =  method : C.test() : var0 
var4 =  method : B.m() : var0 
var5 =  method : C.test() : var0 
var6 =  method : C.test() : var0 
var7 =  method : B.k() : var0 
var8 =  method : B.m() : var0 
var9 =  method : C.test() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Adding sequence to active sequences of type class C
Sequence after execution: 
C var0 = new C();
// <NormalExecution object=object-of-type-C>;
int var1 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var2 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var3 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var4 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var5 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var6 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var7 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var8 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var9 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
<randoop.PrimValue, value=23 [var1]  : true
<randoop.PrimValue, value=23 [var2]  : true
<randoop.PrimValue, value=23 [var3]  : true
<randoop.PrimValue, value=23 [var4]  : true
<randoop.PrimValue, value=23 [var5]  : true
<randoop.PrimValue, value=23 [var6]  : true
<randoop.PrimValue, value=42 [var7]  : true
<randoop.PrimValue, value=23 [var8]  : true
<randoop.PrimValue, value=23 [var9]  : true

allSequences.size()=374
-------------------------------------------
randoop.util.Randomness: total calls to random: 2056
Selected statement: C.test()
Will query component set for objects of typeclass C
getActivesequencesThatYield: entering method, clazz=class C
getActivesequencesThatYield: returning 352 sequences.
components: 352
randoop.util.Randomness: total calls to random: 2057
randoop.util.Randomness: total calls to random: 2058
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 2059
Selected statement: A.k()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 19 sequences.
components: 19
randoop.util.Randomness: total calls to random: 2060
randoop.util.Randomness: total calls to random: 2061
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 2062
Selected statement: A.k()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 19 sequences.
components: 19
randoop.util.Randomness: total calls to random: 2063
randoop.util.Randomness: total calls to random: 2064
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 2065
Selected statement: B.k()
Will query component set for objects of typeclass B
getActivesequencesThatYield: entering method, clazz=class B
getActivesequencesThatYield: returning 354 sequences.
components: 354
randoop.util.Randomness: total calls to random: 2066
randoop.util.Randomness: total calls to random: 2067
Successfully created new unique sequence:var0 =  cons : C.<init>() : 
var1 =  method : C.test() : var0 
var2 =  method : C.test() : var0 
var3 =  method : B.m() : var0 
var4 =  method : B.m() : var0 
var5 =  method : B.m() : var0 
var6 =  method : C.test() : var0 
var7 =  method : C.test() : var0 
var8 =  method : B.k() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Adding sequence to active sequences of type class C
Sequence after execution: 
C var0 = new C();
// <NormalExecution object=object-of-type-C>;
int var1 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var2 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var3 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var4 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var5 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var6 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var7 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var8 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
<randoop.PrimValue, value=23 [var1]  : true
<randoop.PrimValue, value=23 [var2]  : true
<randoop.PrimValue, value=23 [var3]  : true
<randoop.PrimValue, value=23 [var4]  : true
<randoop.PrimValue, value=23 [var5]  : true
<randoop.PrimValue, value=23 [var6]  : true
<randoop.PrimValue, value=23 [var7]  : true
<randoop.PrimValue, value=42 [var8]  : true

allSequences.size()=375
-------------------------------------------
randoop.util.Randomness: total calls to random: 2068
Selected statement: B.m()
Will query component set for objects of typeclass B
getActivesequencesThatYield: entering method, clazz=class B
getActivesequencesThatYield: returning 353 sequences.
components: 353
randoop.util.Randomness: total calls to random: 2069
randoop.util.Randomness: total calls to random: 2070
Successfully created new unique sequence:var0 =  cons : C.<init>() : 
var1 =  method : B.m() : var0 
var2 =  method : B.k() : var0 
var3 =  method : B.m() : var0 
var4 =  method : C.test() : var0 
var5 =  method : C.test() : var0 
var6 =  method : B.m() : var0 
var7 =  method : B.m() : var0 
var8 =  method : B.m() : var0 
var9 =  method : C.test() : var0 
var10 =  method : C.test() : var0 
var11 =  method : B.m() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Adding sequence to active sequences of type class C
Sequence after execution: 
C var0 = new C();
// <NormalExecution object=object-of-type-C>;
int var1 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var2 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var3 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var4 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var5 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var6 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var7 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var8 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var9 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var10 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var11 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
<randoop.PrimValue, value=23 [var1]  : true
<randoop.PrimValue, value=42 [var2]  : true
<randoop.PrimValue, value=23 [var3]  : true
<randoop.PrimValue, value=23 [var4]  : true
<randoop.PrimValue, value=23 [var5]  : true
<randoop.PrimValue, value=23 [var6]  : true
<randoop.PrimValue, value=23 [var7]  : true
<randoop.PrimValue, value=23 [var8]  : true
<randoop.PrimValue, value=23 [var9]  : true
<randoop.PrimValue, value=23 [var10]  : true
<randoop.PrimValue, value=23 [var11]  : true

allSequences.size()=376
-------------------------------------------
randoop.util.Randomness: total calls to random: 2071
Selected statement: B.k()
Will query component set for objects of typeclass B
getActivesequencesThatYield: entering method, clazz=class B
getActivesequencesThatYield: returning 356 sequences.
components: 356
randoop.util.Randomness: total calls to random: 2072
randoop.util.Randomness: total calls to random: 2073
Successfully created new unique sequence:var0 =  cons : C.<init>() : 
var1 =  method : B.m() : var0 
var2 =  method : B.k() : var0 
var3 =  method : B.m() : var0 
var4 =  method : C.test() : var0 
var5 =  method : C.test() : var0 
var6 =  method : B.k() : var0 
var7 =  method : C.test() : var0 
var8 =  method : C.test() : var0 
var9 =  method : B.k() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Adding sequence to active sequences of type class C
Sequence after execution: 
C var0 = new C();
// <NormalExecution object=object-of-type-C>;
int var1 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var2 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var3 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var4 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var5 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var6 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var7 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var8 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var9 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
<randoop.PrimValue, value=23 [var1]  : true
<randoop.PrimValue, value=42 [var2]  : true
<randoop.PrimValue, value=23 [var3]  : true
<randoop.PrimValue, value=23 [var4]  : true
<randoop.PrimValue, value=23 [var5]  : true
<randoop.PrimValue, value=42 [var6]  : true
<randoop.PrimValue, value=23 [var7]  : true
<randoop.PrimValue, value=23 [var8]  : true
<randoop.PrimValue, value=42 [var9]  : true

allSequences.size()=377
-------------------------------------------
randoop.util.Randomness: total calls to random: 2074
Selected statement: C.test()
Will query component set for objects of typeclass C
getActivesequencesThatYield: entering method, clazz=class C
getActivesequencesThatYield: returning 355 sequences.
components: 355
randoop.util.Randomness: total calls to random: 2075
randoop.util.Randomness: total calls to random: 2076
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 2077
Selected statement: B.k()
Will query component set for objects of typeclass B
getActivesequencesThatYield: entering method, clazz=class B
getActivesequencesThatYield: returning 357 sequences.
components: 357
randoop.util.Randomness: total calls to random: 2078
randoop.util.Randomness: total calls to random: 2079
Successfully created new unique sequence:var0 =  cons : C.<init>() : 
var1 =  method : B.m() : var0 
var2 =  method : B.k() : var0 
var3 =  method : B.m() : var0 
var4 =  method : B.m() : var0 
var5 =  method : B.k() : var0 
var6 =  method : B.k() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Adding sequence to active sequences of type class C
Sequence after execution: 
C var0 = new C();
// <NormalExecution object=object-of-type-C>;
int var1 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var2 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var3 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var4 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var5 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var6 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
<randoop.PrimValue, value=23 [var1]  : true
<randoop.PrimValue, value=42 [var2]  : true
<randoop.PrimValue, value=23 [var3]  : true
<randoop.PrimValue, value=23 [var4]  : true
<randoop.PrimValue, value=42 [var5]  : true
<randoop.PrimValue, value=42 [var6]  : true

allSequences.size()=378
-------------------------------------------
randoop.util.Randomness: total calls to random: 2080
Selected statement: C.test()
Will query component set for objects of typeclass C
getActivesequencesThatYield: entering method, clazz=class C
getActivesequencesThatYield: returning 356 sequences.
components: 356
randoop.util.Randomness: total calls to random: 2081
randoop.util.Randomness: total calls to random: 2082
Successfully created new unique sequence:var0 =  cons : C.<init>() : 
var1 =  method : C.test() : var0 
var2 =  method : C.test() : var0 
var3 =  method : B.m() : var0 
var4 =  method : B.m() : var0 
var5 =  method : B.m() : var0 
var6 =  method : B.m() : var0 
var7 =  method : C.test() : var0 
var8 =  method : C.test() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Adding sequence to active sequences of type class C
Sequence after execution: 
C var0 = new C();
// <NormalExecution object=object-of-type-C>;
int var1 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var2 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var3 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var4 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var5 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var6 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var7 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var8 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
<randoop.PrimValue, value=23 [var1]  : true
<randoop.PrimValue, value=23 [var2]  : true
<randoop.PrimValue, value=23 [var3]  : true
<randoop.PrimValue, value=23 [var4]  : true
<randoop.PrimValue, value=23 [var5]  : true
<randoop.PrimValue, value=23 [var6]  : true
<randoop.PrimValue, value=23 [var7]  : true
<randoop.PrimValue, value=23 [var8]  : true

allSequences.size()=379
-------------------------------------------
randoop.util.Randomness: total calls to random: 2083
Selected statement: A.k()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 19 sequences.
components: 19
randoop.util.Randomness: total calls to random: 2084
randoop.util.Randomness: total calls to random: 2085
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 2086
Selected statement: B.m()
Will query component set for objects of typeclass B
getActivesequencesThatYield: entering method, clazz=class B
getActivesequencesThatYield: returning 357 sequences.
components: 357
randoop.util.Randomness: total calls to random: 2087
randoop.util.Randomness: total calls to random: 2088
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 2089
Selected statement: B.m()
Will query component set for objects of typeclass B
getActivesequencesThatYield: entering method, clazz=class B
getActivesequencesThatYield: returning 357 sequences.
components: 357
randoop.util.Randomness: total calls to random: 2090
randoop.util.Randomness: total calls to random: 2091
Successfully created new unique sequence:var0 =  cons : C.<init>() : 
var1 =  method : C.test() : var0 
var2 =  method : C.test() : var0 
var3 =  method : B.m() : var0 
var4 =  method : B.m() : var0 
var5 =  method : B.m() : var0 
var6 =  method : B.k() : var0 
var7 =  method : C.test() : var0 
var8 =  method : B.m() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Adding sequence to active sequences of type class C
Sequence after execution: 
C var0 = new C();
// <NormalExecution object=object-of-type-C>;
int var1 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var2 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var3 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var4 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var5 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var6 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var7 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var8 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
<randoop.PrimValue, value=23 [var1]  : true
<randoop.PrimValue, value=23 [var2]  : true
<randoop.PrimValue, value=23 [var3]  : true
<randoop.PrimValue, value=23 [var4]  : true
<randoop.PrimValue, value=23 [var5]  : true
<randoop.PrimValue, value=42 [var6]  : true
<randoop.PrimValue, value=23 [var7]  : true
<randoop.PrimValue, value=23 [var8]  : true

allSequences.size()=380
-------------------------------------------
randoop.util.Randomness: total calls to random: 2092
Selected statement: A.k()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 19 sequences.
components: 19
randoop.util.Randomness: total calls to random: 2093
randoop.util.Randomness: total calls to random: 2094
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 2095
Selected statement: A.k()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 19 sequences.
components: 19
randoop.util.Randomness: total calls to random: 2096
randoop.util.Randomness: total calls to random: 2097
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 2098
Selected statement: A.k()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 19 sequences.
components: 19
randoop.util.Randomness: total calls to random: 2099
randoop.util.Randomness: total calls to random: 2100
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 2101
Selected statement: C.test()
Will query component set for objects of typeclass C
getActivesequencesThatYield: entering method, clazz=class C
getActivesequencesThatYield: returning 358 sequences.
components: 358
randoop.util.Randomness: total calls to random: 2102
randoop.util.Randomness: total calls to random: 2103
Successfully created new unique sequence:var0 =  cons : C.<init>() : 
var1 =  method : B.k() : var0 
var2 =  method : C.test() : var0 
var3 =  method : B.m() : var0 
var4 =  method : C.test() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Adding sequence to active sequences of type class C
Sequence after execution: 
C var0 = new C();
// <NormalExecution object=object-of-type-C>;
int var1 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var2 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var3 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var4 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
<randoop.PrimValue, value=42 [var1]  : true
<randoop.PrimValue, value=23 [var2]  : true
<randoop.PrimValue, value=23 [var3]  : true
<randoop.PrimValue, value=23 [var4]  : true

allSequences.size()=381
-------------------------------------------
randoop.util.Randomness: total calls to random: 2104
Selected statement: B.m()
Will query component set for objects of typeclass B
getActivesequencesThatYield: entering method, clazz=class B
getActivesequencesThatYield: returning 359 sequences.
components: 359
randoop.util.Randomness: total calls to random: 2105
randoop.util.Randomness: total calls to random: 2106
Successfully created new unique sequence:var0 =  cons : C.<init>() : 
var1 =  method : C.test() : var0 
var2 =  method : C.test() : var0 
var3 =  method : B.m() : var0 
var4 =  method : C.test() : var0 
var5 =  method : B.k() : var0 
var6 =  method : B.m() : var0 
var7 =  method : B.m() : var0 
var8 =  method : B.m() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Adding sequence to active sequences of type class C
Sequence after execution: 
C var0 = new C();
// <NormalExecution object=object-of-type-C>;
int var1 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var2 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var3 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var4 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var5 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var6 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var7 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var8 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
<randoop.PrimValue, value=23 [var1]  : true
<randoop.PrimValue, value=23 [var2]  : true
<randoop.PrimValue, value=23 [var3]  : true
<randoop.PrimValue, value=23 [var4]  : true
<randoop.PrimValue, value=42 [var5]  : true
<randoop.PrimValue, value=23 [var6]  : true
<randoop.PrimValue, value=23 [var7]  : true
<randoop.PrimValue, value=23 [var8]  : true

allSequences.size()=382
-------------------------------------------
randoop.util.Randomness: total calls to random: 2107
Selected statement: B.m()
Will query component set for objects of typeclass B
getActivesequencesThatYield: entering method, clazz=class B
getActivesequencesThatYield: returning 360 sequences.
components: 360
randoop.util.Randomness: total calls to random: 2108
randoop.util.Randomness: total calls to random: 2109
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 2110
Selected statement: A.k()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 19 sequences.
components: 19
randoop.util.Randomness: total calls to random: 2111
randoop.util.Randomness: total calls to random: 2112
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 2113
Selected statement: B.m()
Will query component set for objects of typeclass B
getActivesequencesThatYield: entering method, clazz=class B
getActivesequencesThatYield: returning 360 sequences.
components: 360
randoop.util.Randomness: total calls to random: 2114
randoop.util.Randomness: total calls to random: 2115
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 2116
Selected statement: A.k()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 19 sequences.
components: 19
randoop.util.Randomness: total calls to random: 2117
randoop.util.Randomness: total calls to random: 2118
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 2119
Selected statement: B.m()
Will query component set for objects of typeclass B
getActivesequencesThatYield: entering method, clazz=class B
getActivesequencesThatYield: returning 360 sequences.
components: 360
randoop.util.Randomness: total calls to random: 2120
randoop.util.Randomness: total calls to random: 2121
Successfully created new unique sequence:var0 =  cons : C.<init>() : 
var1 =  method : C.test() : var0 
var2 =  method : C.test() : var0 
var3 =  method : B.m() : var0 
var4 =  method : C.test() : var0 
var5 =  method : C.test() : var0 
var6 =  method : B.m() : var0 
var7 =  method : B.m() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Adding sequence to active sequences of type class C
Sequence after execution: 
C var0 = new C();
// <NormalExecution object=object-of-type-C>;
int var1 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var2 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var3 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var4 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var5 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var6 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var7 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
<randoop.PrimValue, value=23 [var1]  : true
<randoop.PrimValue, value=23 [var2]  : true
<randoop.PrimValue, value=23 [var3]  : true
<randoop.PrimValue, value=23 [var4]  : true
<randoop.PrimValue, value=23 [var5]  : true
<randoop.PrimValue, value=23 [var6]  : true
<randoop.PrimValue, value=23 [var7]  : true

allSequences.size()=383
-------------------------------------------
randoop.util.Randomness: total calls to random: 2122
Selected statement: B.k()
Will query component set for objects of typeclass B
getActivesequencesThatYield: entering method, clazz=class B
getActivesequencesThatYield: returning 363 sequences.
components: 363
randoop.util.Randomness: total calls to random: 2123
randoop.util.Randomness: total calls to random: 2124
Successfully created new unique sequence:var0 =  cons : C.<init>() : 
var1 =  method : B.m() : var0 
var2 =  method : B.k() : var0 
var3 =  method : B.m() : var0 
var4 =  method : B.k() : var0 
var5 =  method : C.test() : var0 
var6 =  method : B.m() : var0 
var7 =  method : C.test() : var0 
var8 =  method : B.m() : var0 
var9 =  method : B.k() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Adding sequence to active sequences of type class C
Sequence after execution: 
C var0 = new C();
// <NormalExecution object=object-of-type-C>;
int var1 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var2 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var3 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var4 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var5 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var6 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var7 = var0.test();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var8 = var0.m();
// <NormalExecution object=object-of-type-java.lang.Integer>;
int var9 = var0.k();
// <NormalExecution object=object-of-type-java.lang.Integer>;
<randoop.PrimValue, value=23 [var1]  : true
<randoop.PrimValue, value=42 [var2]  : true
<randoop.PrimValue, value=23 [var3]  : true
<randoop.PrimValue, value=42 [var4]  : true
<randoop.PrimValue, value=23 [var5]  : true
<randoop.PrimValue, value=23 [var6]  : true
<randoop.PrimValue, value=23 [var7]  : true
<randoop.PrimValue, value=23 [var8]  : true
<randoop.PrimValue, value=42 [var9]  : true

allSequences.size()=384
