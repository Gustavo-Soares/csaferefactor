Adding sequence to active sequences of type byte
Adding sequence to active sequences of type byte
Adding sequence to active sequences of type byte
Adding sequence to active sequences of type byte
Adding sequence to active sequences of type byte
Adding sequence to active sequences of type short
Adding sequence to active sequences of type short
Adding sequence to active sequences of type short
Adding sequence to active sequences of type short
Adding sequence to active sequences of type short
Adding sequence to active sequences of type int
Adding sequence to active sequences of type int
Adding sequence to active sequences of type int
Adding sequence to active sequences of type int
Adding sequence to active sequences of type int
Adding sequence to active sequences of type long
Adding sequence to active sequences of type long
Adding sequence to active sequences of type long
Adding sequence to active sequences of type long
Adding sequence to active sequences of type long
Adding sequence to active sequences of type float
Adding sequence to active sequences of type float
Adding sequence to active sequences of type float
Adding sequence to active sequences of type float
Adding sequence to active sequences of type float
Adding sequence to active sequences of type double
Adding sequence to active sequences of type double
Adding sequence to active sequences of type double
Adding sequence to active sequences of type double
Adding sequence to active sequences of type double
Adding sequence to active sequences of type char
Adding sequence to active sequences of type char
Adding sequence to active sequences of type char
Adding sequence to active sequences of type char
Adding sequence to active sequences of type boolean
Adding sequence to active sequences of type boolean
Adding sequence to active sequences of type class java.lang.String
Adding sequence to active sequences of type class java.lang.String
getActivesequencesThatYield: entering method, clazz=boolean
getActivesequencesThatYield: returning 2 sequences.
getActivesequencesThatYield: entering method, clazz=byte
getActivesequencesThatYield: returning 5 sequences.
getActivesequencesThatYield: entering method, clazz=char
getActivesequencesThatYield: returning 4 sequences.
getActivesequencesThatYield: entering method, clazz=double
getActivesequencesThatYield: returning 5 sequences.
getActivesequencesThatYield: entering method, clazz=float
getActivesequencesThatYield: returning 5 sequences.
getActivesequencesThatYield: entering method, clazz=int
getActivesequencesThatYield: returning 5 sequences.
getActivesequencesThatYield: entering method, clazz=long
getActivesequencesThatYield: returning 5 sequences.
getActivesequencesThatYield: entering method, clazz=short
getActivesequencesThatYield: returning 5 sequences.
getActivesequencesThatYield: entering method, clazz=class java.lang.String
getActivesequencesThatYield: returning 2 sequences.
Statements : 
java.lang.Object.<init>()
A.randomNumber()
A.<init>()
A.normal()
Initial sequences (seeds):
var0 =  prim : byte:-1 : 

var0 =  prim : byte:0 : 

var0 =  prim : byte:1 : 

var0 =  prim : byte:10 : 

var0 =  prim : byte:100 : 

var0 =  prim : short:-1 : 

var0 =  prim : short:0 : 

var0 =  prim : short:1 : 

var0 =  prim : short:10 : 

var0 =  prim : short:100 : 

var0 =  prim : int:-1 : 

var0 =  prim : int:0 : 

var0 =  prim : int:1 : 

var0 =  prim : int:10 : 

var0 =  prim : int:100 : 

var0 =  prim : long:-1 : 

var0 =  prim : long:0 : 

var0 =  prim : long:1 : 

var0 =  prim : long:10 : 

var0 =  prim : long:100 : 

var0 =  prim : float:-1.0 : 

var0 =  prim : float:0.0 : 

var0 =  prim : float:1.0 : 

var0 =  prim : float:10.0 : 

var0 =  prim : float:100.0 : 

var0 =  prim : double:-1.0 : 

var0 =  prim : double:0.0 : 

var0 =  prim : double:1.0 : 

var0 =  prim : double:10.0 : 

var0 =  prim : double:100.0 : 

var0 =  prim : char:23 : 

var0 =  prim : char:20 : 

var0 =  prim : char:34 : 

var0 =  prim : char:61 : 

var0 =  prim : boolean:true : 

var0 =  prim : boolean:false : 

var0 =  prim : java.lang.String:"" : 

var0 =  prim : java.lang.String:"hi!" : 

-------------------------------------------
randoop.util.Randomness: total calls to random: 1
Selected statement: A.<init>()
Successfully created new unique sequence:var0 =  cons : A.<init>() : 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;

allSequences.size()=1
-------------------------------------------
randoop.util.Randomness: total calls to random: 2
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 1 sequences.
components: 1
randoop.util.Randomness: total calls to random: 3
randoop.util.Randomness: total calls to random: 4
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.randomNumber() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=0 [var1]  : true

allSequences.size()=2
-------------------------------------------
randoop.util.Randomness: total calls to random: 5
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 2 sequences.
components: 2
randoop.util.Randomness: total calls to random: 6
randoop.util.Randomness: total calls to random: 7
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.normal() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=10 [var1]  : true

allSequences.size()=3
-------------------------------------------
randoop.util.Randomness: total calls to random: 8
Selected statement: java.lang.Object.<init>()
Successfully created new unique sequence:var0 =  cons : java.lang.Object.<init>() : 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Adding sequence to active sequences of type class java.lang.Object
Sequence after execution: 
java.lang.Object var0 = new java.lang.Object();
// <NormalExecution object=object-of-type-java.lang.Object>;

allSequences.size()=4
-------------------------------------------
randoop.util.Randomness: total calls to random: 9
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 3 sequences.
components: 3
randoop.util.Randomness: total calls to random: 10
randoop.util.Randomness: total calls to random: 11
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.normal() : var0 
var2 =  method : A.normal() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=10 [var1]  : true
<randoop.PrimValue, value=10 [var2]  : true

allSequences.size()=5
-------------------------------------------
randoop.util.Randomness: total calls to random: 12
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 4 sequences.
components: 4
randoop.util.Randomness: total calls to random: 13
randoop.util.Randomness: total calls to random: 14
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.randomNumber() : var0 
var2 =  method : A.randomNumber() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=0 [var1]  : true
<randoop.PrimValue, value=0 [var2]  : true

allSequences.size()=6
-------------------------------------------
randoop.util.Randomness: total calls to random: 15
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 5 sequences.
components: 5
randoop.util.Randomness: total calls to random: 16
randoop.util.Randomness: total calls to random: 17
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.randomNumber() : var0 
var2 =  method : A.randomNumber() : var0 
var3 =  method : A.normal() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=0 [var1]  : true
<randoop.PrimValue, value=0 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true

allSequences.size()=7
-------------------------------------------
randoop.util.Randomness: total calls to random: 18
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 6 sequences.
components: 6
randoop.util.Randomness: total calls to random: 19
randoop.util.Randomness: total calls to random: 20
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.randomNumber() : var0 
var2 =  method : A.randomNumber() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.randomNumber() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=0 [var1]  : true
<randoop.PrimValue, value=0 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true

allSequences.size()=8
-------------------------------------------
randoop.util.Randomness: total calls to random: 21
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 7 sequences.
components: 7
randoop.util.Randomness: total calls to random: 22
randoop.util.Randomness: total calls to random: 23
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.normal() : var0 
var2 =  method : A.normal() : var0 
var3 =  method : A.randomNumber() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=10 [var1]  : true
<randoop.PrimValue, value=10 [var2]  : true
<randoop.PrimValue, value=0 [var3]  : true

allSequences.size()=9
-------------------------------------------
randoop.util.Randomness: total calls to random: 24
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 8 sequences.
components: 8
randoop.util.Randomness: total calls to random: 25
randoop.util.Randomness: total calls to random: 26
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 27
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 8 sequences.
components: 8
randoop.util.Randomness: total calls to random: 28
randoop.util.Randomness: total calls to random: 29
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 30
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 8 sequences.
components: 8
randoop.util.Randomness: total calls to random: 31
randoop.util.Randomness: total calls to random: 32
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.normal() : var0 
var2 =  method : A.normal() : var0 
var3 =  method : A.randomNumber() : var0 
var4 =  method : A.randomNumber() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=10 [var1]  : true
<randoop.PrimValue, value=10 [var2]  : true
<randoop.PrimValue, value=0 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true

allSequences.size()=10
-------------------------------------------
randoop.util.Randomness: total calls to random: 33
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 9 sequences.
components: 9
randoop.util.Randomness: total calls to random: 34
randoop.util.Randomness: total calls to random: 35
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.normal() : var0 
var2 =  method : A.randomNumber() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=10 [var1]  : true
<randoop.PrimValue, value=0 [var2]  : true

allSequences.size()=11
-------------------------------------------
randoop.util.Randomness: total calls to random: 36
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 10 sequences.
components: 10
randoop.util.Randomness: total calls to random: 37
randoop.util.Randomness: total calls to random: 38
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 39
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 10 sequences.
components: 10
randoop.util.Randomness: total calls to random: 40
randoop.util.Randomness: total calls to random: 41
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.randomNumber() : var0 
var2 =  method : A.randomNumber() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.normal() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=0 [var1]  : true
<randoop.PrimValue, value=0 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=10 [var4]  : true

allSequences.size()=12
-------------------------------------------
randoop.util.Randomness: total calls to random: 42
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 11 sequences.
components: 11
randoop.util.Randomness: total calls to random: 43
randoop.util.Randomness: total calls to random: 44
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.randomNumber() : var0 
var2 =  method : A.normal() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=0 [var1]  : true
<randoop.PrimValue, value=10 [var2]  : true

allSequences.size()=13
-------------------------------------------
randoop.util.Randomness: total calls to random: 45
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 12 sequences.
components: 12
randoop.util.Randomness: total calls to random: 46
randoop.util.Randomness: total calls to random: 47
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.normal() : var0 
var2 =  method : A.normal() : var0 
var3 =  method : A.normal() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=10 [var1]  : true
<randoop.PrimValue, value=10 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true

allSequences.size()=14
-------------------------------------------
randoop.util.Randomness: total calls to random: 48
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 13 sequences.
components: 13
randoop.util.Randomness: total calls to random: 49
randoop.util.Randomness: total calls to random: 50
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.randomNumber() : var0 
var2 =  method : A.randomNumber() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.normal() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=0 [var1]  : true
<randoop.PrimValue, value=0 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=10 [var5]  : true

allSequences.size()=15
-------------------------------------------
randoop.util.Randomness: total calls to random: 51
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 14 sequences.
components: 14
randoop.util.Randomness: total calls to random: 52
randoop.util.Randomness: total calls to random: 53
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.randomNumber() : var0 
var2 =  method : A.randomNumber() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.normal() : var0 
var6 =  method : A.normal() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=0 [var1]  : true
<randoop.PrimValue, value=0 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=10 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true

allSequences.size()=16
-------------------------------------------
randoop.util.Randomness: total calls to random: 54
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 15 sequences.
components: 15
randoop.util.Randomness: total calls to random: 55
randoop.util.Randomness: total calls to random: 56
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.normal() : var0 
var2 =  method : A.normal() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.normal() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=10 [var1]  : true
<randoop.PrimValue, value=10 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=10 [var4]  : true

allSequences.size()=17
-------------------------------------------
randoop.util.Randomness: total calls to random: 57
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 16 sequences.
components: 16
randoop.util.Randomness: total calls to random: 58
randoop.util.Randomness: total calls to random: 59
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.normal() : var0 
var2 =  method : A.normal() : var0 
var3 =  method : A.randomNumber() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.randomNumber() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=10 [var1]  : true
<randoop.PrimValue, value=10 [var2]  : true
<randoop.PrimValue, value=0 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=0 [var5]  : true

allSequences.size()=18
-------------------------------------------
randoop.util.Randomness: total calls to random: 60
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 17 sequences.
components: 17
randoop.util.Randomness: total calls to random: 61
randoop.util.Randomness: total calls to random: 62
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.randomNumber() : var0 
var2 =  method : A.randomNumber() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.normal() : var0 
var6 =  method : A.randomNumber() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=0 [var1]  : true
<randoop.PrimValue, value=0 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=10 [var5]  : true
<randoop.PrimValue, value=0 [var6]  : true

allSequences.size()=19
-------------------------------------------
randoop.util.Randomness: total calls to random: 63
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 18 sequences.
components: 18
randoop.util.Randomness: total calls to random: 64
randoop.util.Randomness: total calls to random: 65
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 66
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 18 sequences.
components: 18
randoop.util.Randomness: total calls to random: 67
randoop.util.Randomness: total calls to random: 68
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 69
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 18 sequences.
components: 18
randoop.util.Randomness: total calls to random: 70
randoop.util.Randomness: total calls to random: 71
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 72
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 18 sequences.
components: 18
randoop.util.Randomness: total calls to random: 73
randoop.util.Randomness: total calls to random: 74
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.randomNumber() : var0 
var2 =  method : A.randomNumber() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.normal() : var0 
var6 =  method : A.randomNumber() : var0 
var7 =  method : A.normal() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=0 [var1]  : true
<randoop.PrimValue, value=0 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=10 [var5]  : true
<randoop.PrimValue, value=0 [var6]  : true
<randoop.PrimValue, value=10 [var7]  : true

allSequences.size()=20
-------------------------------------------
randoop.util.Randomness: total calls to random: 75
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 19 sequences.
components: 19
randoop.util.Randomness: total calls to random: 76
randoop.util.Randomness: total calls to random: 77
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.randomNumber() : var0 
var2 =  method : A.randomNumber() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.normal() : var0 
var6 =  method : A.normal() : var0 
var7 =  method : A.randomNumber() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=0 [var1]  : true
<randoop.PrimValue, value=0 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=10 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true
<randoop.PrimValue, value=0 [var7]  : true

allSequences.size()=21
-------------------------------------------
randoop.util.Randomness: total calls to random: 78
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 20 sequences.
components: 20
randoop.util.Randomness: total calls to random: 79
randoop.util.Randomness: total calls to random: 80
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.normal() : var0 
var2 =  method : A.normal() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.normal() : var0 
var5 =  method : A.normal() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=10 [var1]  : true
<randoop.PrimValue, value=10 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=10 [var4]  : true
<randoop.PrimValue, value=10 [var5]  : true

allSequences.size()=22
-------------------------------------------
randoop.util.Randomness: total calls to random: 81
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 21 sequences.
components: 21
randoop.util.Randomness: total calls to random: 82
randoop.util.Randomness: total calls to random: 83
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 84
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 21 sequences.
components: 21
randoop.util.Randomness: total calls to random: 85
randoop.util.Randomness: total calls to random: 86
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 87
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 21 sequences.
components: 21
randoop.util.Randomness: total calls to random: 88
randoop.util.Randomness: total calls to random: 89
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 90
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 21 sequences.
components: 21
randoop.util.Randomness: total calls to random: 91
randoop.util.Randomness: total calls to random: 92
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 93
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 21 sequences.
components: 21
randoop.util.Randomness: total calls to random: 94
randoop.util.Randomness: total calls to random: 95
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.normal() : var0 
var2 =  method : A.randomNumber() : var0 
var3 =  method : A.randomNumber() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=10 [var1]  : true
<randoop.PrimValue, value=0 [var2]  : true
<randoop.PrimValue, value=0 [var3]  : true

allSequences.size()=23
-------------------------------------------
randoop.util.Randomness: total calls to random: 96
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 22 sequences.
components: 22
randoop.util.Randomness: total calls to random: 97
randoop.util.Randomness: total calls to random: 98
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.normal() : var0 
var2 =  method : A.randomNumber() : var0 
var3 =  method : A.randomNumber() : var0 
var4 =  method : A.randomNumber() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=10 [var1]  : true
<randoop.PrimValue, value=0 [var2]  : true
<randoop.PrimValue, value=0 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true

allSequences.size()=24
-------------------------------------------
randoop.util.Randomness: total calls to random: 99
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 23 sequences.
components: 23
randoop.util.Randomness: total calls to random: 100
randoop.util.Randomness: total calls to random: 101
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 102
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 23 sequences.
components: 23
randoop.util.Randomness: total calls to random: 103
randoop.util.Randomness: total calls to random: 104
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.normal() : var0 
var2 =  method : A.normal() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.normal() : var0 
var5 =  method : A.randomNumber() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=10 [var1]  : true
<randoop.PrimValue, value=10 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=10 [var4]  : true
<randoop.PrimValue, value=0 [var5]  : true

allSequences.size()=25
-------------------------------------------
randoop.util.Randomness: total calls to random: 105
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 24 sequences.
components: 24
randoop.util.Randomness: total calls to random: 106
randoop.util.Randomness: total calls to random: 107
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.randomNumber() : var0 
var2 =  method : A.randomNumber() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.normal() : var0 
var6 =  method : A.normal() : var0 
var7 =  method : A.randomNumber() : var0 
var8 =  method : A.normal() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=0 [var1]  : true
<randoop.PrimValue, value=0 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=10 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true
<randoop.PrimValue, value=0 [var7]  : true
<randoop.PrimValue, value=10 [var8]  : true

allSequences.size()=26
-------------------------------------------
randoop.util.Randomness: total calls to random: 108
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 25 sequences.
components: 25
randoop.util.Randomness: total calls to random: 109
randoop.util.Randomness: total calls to random: 110
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 111
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 25 sequences.
components: 25
randoop.util.Randomness: total calls to random: 112
randoop.util.Randomness: total calls to random: 113
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 114
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 25 sequences.
components: 25
randoop.util.Randomness: total calls to random: 115
randoop.util.Randomness: total calls to random: 116
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.normal() : var0 
var2 =  method : A.randomNumber() : var0 
var3 =  method : A.randomNumber() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.normal() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=10 [var1]  : true
<randoop.PrimValue, value=0 [var2]  : true
<randoop.PrimValue, value=0 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=10 [var5]  : true

allSequences.size()=27
-------------------------------------------
randoop.util.Randomness: total calls to random: 117
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 26 sequences.
components: 26
randoop.util.Randomness: total calls to random: 118
randoop.util.Randomness: total calls to random: 119
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.normal() : var0 
var2 =  method : A.randomNumber() : var0 
var3 =  method : A.randomNumber() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.normal() : var0 
var6 =  method : A.normal() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=10 [var1]  : true
<randoop.PrimValue, value=0 [var2]  : true
<randoop.PrimValue, value=0 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=10 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true

allSequences.size()=28
-------------------------------------------
randoop.util.Randomness: total calls to random: 120
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 27 sequences.
components: 27
randoop.util.Randomness: total calls to random: 121
randoop.util.Randomness: total calls to random: 122
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 123
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 27 sequences.
components: 27
randoop.util.Randomness: total calls to random: 124
randoop.util.Randomness: total calls to random: 125
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.randomNumber() : var0 
var2 =  method : A.randomNumber() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.normal() : var0 
var5 =  method : A.normal() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=0 [var1]  : true
<randoop.PrimValue, value=0 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=10 [var4]  : true
<randoop.PrimValue, value=10 [var5]  : true

allSequences.size()=29
-------------------------------------------
randoop.util.Randomness: total calls to random: 126
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 28 sequences.
components: 28
randoop.util.Randomness: total calls to random: 127
randoop.util.Randomness: total calls to random: 128
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.randomNumber() : var0 
var2 =  method : A.randomNumber() : var0 
var3 =  method : A.randomNumber() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=0 [var1]  : true
<randoop.PrimValue, value=0 [var2]  : true
<randoop.PrimValue, value=0 [var3]  : true

allSequences.size()=30
-------------------------------------------
randoop.util.Randomness: total calls to random: 129
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 29 sequences.
components: 29
randoop.util.Randomness: total calls to random: 130
randoop.util.Randomness: total calls to random: 131
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.randomNumber() : var0 
var2 =  method : A.randomNumber() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.normal() : var0 
var6 =  method : A.normal() : var0 
var7 =  method : A.randomNumber() : var0 
var8 =  method : A.normal() : var0 
var9 =  method : A.randomNumber() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=0 [var1]  : true
<randoop.PrimValue, value=0 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=10 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true
<randoop.PrimValue, value=0 [var7]  : true
<randoop.PrimValue, value=10 [var8]  : true
<randoop.PrimValue, value=0 [var9]  : true

allSequences.size()=31
-------------------------------------------
randoop.util.Randomness: total calls to random: 132
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 30 sequences.
components: 30
randoop.util.Randomness: total calls to random: 133
randoop.util.Randomness: total calls to random: 134
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 135
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 30 sequences.
components: 30
randoop.util.Randomness: total calls to random: 136
randoop.util.Randomness: total calls to random: 137
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 138
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 30 sequences.
components: 30
randoop.util.Randomness: total calls to random: 139
randoop.util.Randomness: total calls to random: 140
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 141
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 30 sequences.
components: 30
randoop.util.Randomness: total calls to random: 142
randoop.util.Randomness: total calls to random: 143
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.randomNumber() : var0 
var2 =  method : A.normal() : var0 
var3 =  method : A.randomNumber() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=0 [var1]  : true
<randoop.PrimValue, value=10 [var2]  : true
<randoop.PrimValue, value=0 [var3]  : true

allSequences.size()=32
-------------------------------------------
randoop.util.Randomness: total calls to random: 144
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 31 sequences.
components: 31
randoop.util.Randomness: total calls to random: 145
randoop.util.Randomness: total calls to random: 146
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.normal() : var0 
var2 =  method : A.normal() : var0 
var3 =  method : A.randomNumber() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.randomNumber() : var0 
var6 =  method : A.normal() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=10 [var1]  : true
<randoop.PrimValue, value=10 [var2]  : true
<randoop.PrimValue, value=0 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=0 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true

allSequences.size()=33
-------------------------------------------
randoop.util.Randomness: total calls to random: 147
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 32 sequences.
components: 32
randoop.util.Randomness: total calls to random: 148
randoop.util.Randomness: total calls to random: 149
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 150
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 32 sequences.
components: 32
randoop.util.Randomness: total calls to random: 151
randoop.util.Randomness: total calls to random: 152
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.normal() : var0 
var2 =  method : A.normal() : var0 
var3 =  method : A.randomNumber() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.randomNumber() : var0 
var6 =  method : A.normal() : var0 
var7 =  method : A.randomNumber() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=10 [var1]  : true
<randoop.PrimValue, value=10 [var2]  : true
<randoop.PrimValue, value=0 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=0 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true
<randoop.PrimValue, value=0 [var7]  : true

allSequences.size()=34
-------------------------------------------
randoop.util.Randomness: total calls to random: 153
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 33 sequences.
components: 33
randoop.util.Randomness: total calls to random: 154
randoop.util.Randomness: total calls to random: 155
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.randomNumber() : var0 
var2 =  method : A.normal() : var0 
var3 =  method : A.normal() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=0 [var1]  : true
<randoop.PrimValue, value=10 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true

allSequences.size()=35
-------------------------------------------
randoop.util.Randomness: total calls to random: 156
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 34 sequences.
components: 34
randoop.util.Randomness: total calls to random: 157
randoop.util.Randomness: total calls to random: 158
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 159
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 34 sequences.
components: 34
randoop.util.Randomness: total calls to random: 160
randoop.util.Randomness: total calls to random: 161
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.randomNumber() : var0 
var2 =  method : A.randomNumber() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.normal() : var0 
var6 =  method : A.normal() : var0 
var7 =  method : A.randomNumber() : var0 
var8 =  method : A.randomNumber() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=0 [var1]  : true
<randoop.PrimValue, value=0 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=10 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true
<randoop.PrimValue, value=0 [var7]  : true
<randoop.PrimValue, value=0 [var8]  : true

allSequences.size()=36
-------------------------------------------
randoop.util.Randomness: total calls to random: 162
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 35 sequences.
components: 35
randoop.util.Randomness: total calls to random: 163
randoop.util.Randomness: total calls to random: 164
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.normal() : var0 
var2 =  method : A.normal() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.normal() : var0 
var5 =  method : A.randomNumber() : var0 
var6 =  method : A.normal() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=10 [var1]  : true
<randoop.PrimValue, value=10 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=10 [var4]  : true
<randoop.PrimValue, value=0 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true

allSequences.size()=37
-------------------------------------------
randoop.util.Randomness: total calls to random: 165
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 36 sequences.
components: 36
randoop.util.Randomness: total calls to random: 166
randoop.util.Randomness: total calls to random: 167
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.normal() : var0 
var2 =  method : A.normal() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.normal() : var0 
var5 =  method : A.randomNumber() : var0 
var6 =  method : A.normal() : var0 
var7 =  method : A.randomNumber() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=10 [var1]  : true
<randoop.PrimValue, value=10 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=10 [var4]  : true
<randoop.PrimValue, value=0 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true
<randoop.PrimValue, value=0 [var7]  : true

allSequences.size()=38
-------------------------------------------
randoop.util.Randomness: total calls to random: 168
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 37 sequences.
components: 37
randoop.util.Randomness: total calls to random: 169
randoop.util.Randomness: total calls to random: 170
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 171
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 37 sequences.
components: 37
randoop.util.Randomness: total calls to random: 172
randoop.util.Randomness: total calls to random: 173
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 174
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 37 sequences.
components: 37
randoop.util.Randomness: total calls to random: 175
randoop.util.Randomness: total calls to random: 176
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.normal() : var0 
var2 =  method : A.normal() : var0 
var3 =  method : A.randomNumber() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.normal() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=10 [var1]  : true
<randoop.PrimValue, value=10 [var2]  : true
<randoop.PrimValue, value=0 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=10 [var5]  : true

allSequences.size()=39
-------------------------------------------
randoop.util.Randomness: total calls to random: 177
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 38 sequences.
components: 38
randoop.util.Randomness: total calls to random: 178
randoop.util.Randomness: total calls to random: 179
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 180
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 38 sequences.
components: 38
randoop.util.Randomness: total calls to random: 181
randoop.util.Randomness: total calls to random: 182
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.randomNumber() : var0 
var2 =  method : A.randomNumber() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.normal() : var0 
var6 =  method : A.normal() : var0 
var7 =  method : A.randomNumber() : var0 
var8 =  method : A.normal() : var0 
var9 =  method : A.randomNumber() : var0 
var10 =  method : A.randomNumber() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var10 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=0 [var1]  : true
<randoop.PrimValue, value=0 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=10 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true
<randoop.PrimValue, value=0 [var7]  : true
<randoop.PrimValue, value=10 [var8]  : true
<randoop.PrimValue, value=0 [var9]  : true
<randoop.PrimValue, value=0 [var10]  : true

allSequences.size()=40
-------------------------------------------
randoop.util.Randomness: total calls to random: 183
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 39 sequences.
components: 39
randoop.util.Randomness: total calls to random: 184
randoop.util.Randomness: total calls to random: 185
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.normal() : var0 
var2 =  method : A.normal() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.normal() : var0 
var5 =  method : A.normal() : var0 
var6 =  method : A.randomNumber() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=10 [var1]  : true
<randoop.PrimValue, value=10 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=10 [var4]  : true
<randoop.PrimValue, value=10 [var5]  : true
<randoop.PrimValue, value=0 [var6]  : true

allSequences.size()=41
-------------------------------------------
randoop.util.Randomness: total calls to random: 186
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 40 sequences.
components: 40
randoop.util.Randomness: total calls to random: 187
randoop.util.Randomness: total calls to random: 188
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.randomNumber() : var0 
var2 =  method : A.randomNumber() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.normal() : var0 
var6 =  method : A.normal() : var0 
var7 =  method : A.randomNumber() : var0 
var8 =  method : A.normal() : var0 
var9 =  method : A.randomNumber() : var0 
var10 =  method : A.normal() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var10 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=0 [var1]  : true
<randoop.PrimValue, value=0 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=10 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true
<randoop.PrimValue, value=0 [var7]  : true
<randoop.PrimValue, value=10 [var8]  : true
<randoop.PrimValue, value=0 [var9]  : true
<randoop.PrimValue, value=10 [var10]  : true

allSequences.size()=42
-------------------------------------------
randoop.util.Randomness: total calls to random: 189
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 41 sequences.
components: 41
randoop.util.Randomness: total calls to random: 190
randoop.util.Randomness: total calls to random: 191
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.normal() : var0 
var2 =  method : A.normal() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.normal() : var0 
var5 =  method : A.randomNumber() : var0 
var6 =  method : A.normal() : var0 
var7 =  method : A.normal() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=10 [var1]  : true
<randoop.PrimValue, value=10 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=10 [var4]  : true
<randoop.PrimValue, value=0 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true
<randoop.PrimValue, value=10 [var7]  : true

allSequences.size()=43
-------------------------------------------
randoop.util.Randomness: total calls to random: 192
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 42 sequences.
components: 42
randoop.util.Randomness: total calls to random: 193
randoop.util.Randomness: total calls to random: 194
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 195
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 42 sequences.
components: 42
randoop.util.Randomness: total calls to random: 196
randoop.util.Randomness: total calls to random: 197
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 198
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 42 sequences.
components: 42
randoop.util.Randomness: total calls to random: 199
randoop.util.Randomness: total calls to random: 200
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.randomNumber() : var0 
var2 =  method : A.normal() : var0 
var3 =  method : A.randomNumber() : var0 
var4 =  method : A.randomNumber() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=0 [var1]  : true
<randoop.PrimValue, value=10 [var2]  : true
<randoop.PrimValue, value=0 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true

allSequences.size()=44
-------------------------------------------
randoop.util.Randomness: total calls to random: 201
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 43 sequences.
components: 43
randoop.util.Randomness: total calls to random: 202
randoop.util.Randomness: total calls to random: 203
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 204
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 43 sequences.
components: 43
randoop.util.Randomness: total calls to random: 205
randoop.util.Randomness: total calls to random: 206
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 207
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 43 sequences.
components: 43
randoop.util.Randomness: total calls to random: 208
randoop.util.Randomness: total calls to random: 209
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 210
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 43 sequences.
components: 43
randoop.util.Randomness: total calls to random: 211
randoop.util.Randomness: total calls to random: 212
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 213
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 43 sequences.
components: 43
randoop.util.Randomness: total calls to random: 214
randoop.util.Randomness: total calls to random: 215
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.normal() : var0 
var2 =  method : A.normal() : var0 
var3 =  method : A.randomNumber() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.randomNumber() : var0 
var6 =  method : A.normal() : var0 
var7 =  method : A.randomNumber() : var0 
var8 =  method : A.normal() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=10 [var1]  : true
<randoop.PrimValue, value=10 [var2]  : true
<randoop.PrimValue, value=0 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=0 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true
<randoop.PrimValue, value=0 [var7]  : true
<randoop.PrimValue, value=10 [var8]  : true

allSequences.size()=45
-------------------------------------------
randoop.util.Randomness: total calls to random: 216
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 44 sequences.
components: 44
randoop.util.Randomness: total calls to random: 217
randoop.util.Randomness: total calls to random: 218
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.randomNumber() : var0 
var2 =  method : A.randomNumber() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.normal() : var0 
var5 =  method : A.normal() : var0 
var6 =  method : A.randomNumber() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=0 [var1]  : true
<randoop.PrimValue, value=0 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=10 [var4]  : true
<randoop.PrimValue, value=10 [var5]  : true
<randoop.PrimValue, value=0 [var6]  : true

allSequences.size()=46
-------------------------------------------
randoop.util.Randomness: total calls to random: 219
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 45 sequences.
components: 45
randoop.util.Randomness: total calls to random: 220
randoop.util.Randomness: total calls to random: 221
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 222
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 45 sequences.
components: 45
randoop.util.Randomness: total calls to random: 223
randoop.util.Randomness: total calls to random: 224
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 225
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 45 sequences.
components: 45
randoop.util.Randomness: total calls to random: 226
randoop.util.Randomness: total calls to random: 227
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 228
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 45 sequences.
components: 45
randoop.util.Randomness: total calls to random: 229
randoop.util.Randomness: total calls to random: 230
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.randomNumber() : var0 
var2 =  method : A.randomNumber() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.normal() : var0 
var6 =  method : A.normal() : var0 
var7 =  method : A.randomNumber() : var0 
var8 =  method : A.randomNumber() : var0 
var9 =  method : A.randomNumber() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=0 [var1]  : true
<randoop.PrimValue, value=0 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=10 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true
<randoop.PrimValue, value=0 [var7]  : true
<randoop.PrimValue, value=0 [var8]  : true
<randoop.PrimValue, value=0 [var9]  : true

allSequences.size()=47
-------------------------------------------
randoop.util.Randomness: total calls to random: 231
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 46 sequences.
components: 46
randoop.util.Randomness: total calls to random: 232
randoop.util.Randomness: total calls to random: 233
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.randomNumber() : var0 
var2 =  method : A.randomNumber() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.randomNumber() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=0 [var1]  : true
<randoop.PrimValue, value=0 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=0 [var5]  : true

allSequences.size()=48
-------------------------------------------
randoop.util.Randomness: total calls to random: 234
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 47 sequences.
components: 47
randoop.util.Randomness: total calls to random: 235
randoop.util.Randomness: total calls to random: 236
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.normal() : var0 
var2 =  method : A.normal() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.randomNumber() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=10 [var1]  : true
<randoop.PrimValue, value=10 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true

allSequences.size()=49
-------------------------------------------
randoop.util.Randomness: total calls to random: 237
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 48 sequences.
components: 48
randoop.util.Randomness: total calls to random: 238
randoop.util.Randomness: total calls to random: 239
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 240
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 48 sequences.
components: 48
randoop.util.Randomness: total calls to random: 241
randoop.util.Randomness: total calls to random: 242
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 243
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 48 sequences.
components: 48
randoop.util.Randomness: total calls to random: 244
randoop.util.Randomness: total calls to random: 245
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.normal() : var0 
var2 =  method : A.randomNumber() : var0 
var3 =  method : A.randomNumber() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.normal() : var0 
var6 =  method : A.normal() : var0 
var7 =  method : A.normal() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=10 [var1]  : true
<randoop.PrimValue, value=0 [var2]  : true
<randoop.PrimValue, value=0 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=10 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true
<randoop.PrimValue, value=10 [var7]  : true

allSequences.size()=50
-------------------------------------------
randoop.util.Randomness: total calls to random: 246
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 49 sequences.
components: 49
randoop.util.Randomness: total calls to random: 247
randoop.util.Randomness: total calls to random: 248
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 249
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 49 sequences.
components: 49
randoop.util.Randomness: total calls to random: 250
randoop.util.Randomness: total calls to random: 251
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 252
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 49 sequences.
components: 49
randoop.util.Randomness: total calls to random: 253
randoop.util.Randomness: total calls to random: 254
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.normal() : var0 
var2 =  method : A.normal() : var0 
var3 =  method : A.randomNumber() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.randomNumber() : var0 
var6 =  method : A.normal() : var0 
var7 =  method : A.randomNumber() : var0 
var8 =  method : A.normal() : var0 
var9 =  method : A.normal() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=10 [var1]  : true
<randoop.PrimValue, value=10 [var2]  : true
<randoop.PrimValue, value=0 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=0 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true
<randoop.PrimValue, value=0 [var7]  : true
<randoop.PrimValue, value=10 [var8]  : true
<randoop.PrimValue, value=10 [var9]  : true

allSequences.size()=51
-------------------------------------------
randoop.util.Randomness: total calls to random: 255
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 50 sequences.
components: 50
randoop.util.Randomness: total calls to random: 256
randoop.util.Randomness: total calls to random: 257
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.randomNumber() : var0 
var2 =  method : A.randomNumber() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.normal() : var0 
var6 =  method : A.normal() : var0 
var7 =  method : A.randomNumber() : var0 
var8 =  method : A.normal() : var0 
var9 =  method : A.randomNumber() : var0 
var10 =  method : A.randomNumber() : var0 
var11 =  method : A.normal() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var10 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var11 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=0 [var1]  : true
<randoop.PrimValue, value=0 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=10 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true
<randoop.PrimValue, value=0 [var7]  : true
<randoop.PrimValue, value=10 [var8]  : true
<randoop.PrimValue, value=0 [var9]  : true
<randoop.PrimValue, value=0 [var10]  : true
<randoop.PrimValue, value=10 [var11]  : true

allSequences.size()=52
-------------------------------------------
randoop.util.Randomness: total calls to random: 258
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 51 sequences.
components: 51
randoop.util.Randomness: total calls to random: 259
randoop.util.Randomness: total calls to random: 260
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.normal() : var0 
var2 =  method : A.randomNumber() : var0 
var3 =  method : A.randomNumber() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.normal() : var0 
var6 =  method : A.randomNumber() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=10 [var1]  : true
<randoop.PrimValue, value=0 [var2]  : true
<randoop.PrimValue, value=0 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=10 [var5]  : true
<randoop.PrimValue, value=0 [var6]  : true

allSequences.size()=53
-------------------------------------------
randoop.util.Randomness: total calls to random: 261
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 52 sequences.
components: 52
randoop.util.Randomness: total calls to random: 262
randoop.util.Randomness: total calls to random: 263
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.randomNumber() : var0 
var2 =  method : A.randomNumber() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.normal() : var0 
var6 =  method : A.normal() : var0 
var7 =  method : A.randomNumber() : var0 
var8 =  method : A.normal() : var0 
var9 =  method : A.randomNumber() : var0 
var10 =  method : A.normal() : var0 
var11 =  method : A.normal() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var10 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var11 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=0 [var1]  : true
<randoop.PrimValue, value=0 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=10 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true
<randoop.PrimValue, value=0 [var7]  : true
<randoop.PrimValue, value=10 [var8]  : true
<randoop.PrimValue, value=0 [var9]  : true
<randoop.PrimValue, value=10 [var10]  : true
<randoop.PrimValue, value=10 [var11]  : true

allSequences.size()=54
-------------------------------------------
randoop.util.Randomness: total calls to random: 264
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 53 sequences.
components: 53
randoop.util.Randomness: total calls to random: 265
randoop.util.Randomness: total calls to random: 266
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 267
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 53 sequences.
components: 53
randoop.util.Randomness: total calls to random: 268
randoop.util.Randomness: total calls to random: 269
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.normal() : var0 
var2 =  method : A.normal() : var0 
var3 =  method : A.randomNumber() : var0 
var4 =  method : A.normal() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=10 [var1]  : true
<randoop.PrimValue, value=10 [var2]  : true
<randoop.PrimValue, value=0 [var3]  : true
<randoop.PrimValue, value=10 [var4]  : true

allSequences.size()=55
-------------------------------------------
randoop.util.Randomness: total calls to random: 270
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 54 sequences.
components: 54
randoop.util.Randomness: total calls to random: 271
randoop.util.Randomness: total calls to random: 272
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 273
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 54 sequences.
components: 54
randoop.util.Randomness: total calls to random: 274
randoop.util.Randomness: total calls to random: 275
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 276
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 54 sequences.
components: 54
randoop.util.Randomness: total calls to random: 277
randoop.util.Randomness: total calls to random: 278
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.randomNumber() : var0 
var2 =  method : A.randomNumber() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.normal() : var0 
var6 =  method : A.normal() : var0 
var7 =  method : A.randomNumber() : var0 
var8 =  method : A.normal() : var0 
var9 =  method : A.randomNumber() : var0 
var10 =  method : A.normal() : var0 
var11 =  method : A.normal() : var0 
var12 =  method : A.randomNumber() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Making index 12 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var10 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var11 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var12 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=0 [var1]  : true
<randoop.PrimValue, value=0 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=10 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true
<randoop.PrimValue, value=0 [var7]  : true
<randoop.PrimValue, value=10 [var8]  : true
<randoop.PrimValue, value=0 [var9]  : true
<randoop.PrimValue, value=10 [var10]  : true
<randoop.PrimValue, value=10 [var11]  : true
<randoop.PrimValue, value=0 [var12]  : true

allSequences.size()=56
-------------------------------------------
randoop.util.Randomness: total calls to random: 279
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 55 sequences.
components: 55
randoop.util.Randomness: total calls to random: 280
randoop.util.Randomness: total calls to random: 281
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 282
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 55 sequences.
components: 55
randoop.util.Randomness: total calls to random: 283
randoop.util.Randomness: total calls to random: 284
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.randomNumber() : var0 
var2 =  method : A.randomNumber() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.normal() : var0 
var6 =  method : A.normal() : var0 
var7 =  method : A.randomNumber() : var0 
var8 =  method : A.normal() : var0 
var9 =  method : A.randomNumber() : var0 
var10 =  method : A.randomNumber() : var0 
var11 =  method : A.normal() : var0 
var12 =  method : A.normal() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Making index 12 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var10 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var11 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var12 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=0 [var1]  : true
<randoop.PrimValue, value=0 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=10 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true
<randoop.PrimValue, value=0 [var7]  : true
<randoop.PrimValue, value=10 [var8]  : true
<randoop.PrimValue, value=0 [var9]  : true
<randoop.PrimValue, value=0 [var10]  : true
<randoop.PrimValue, value=10 [var11]  : true
<randoop.PrimValue, value=10 [var12]  : true

allSequences.size()=57
-------------------------------------------
randoop.util.Randomness: total calls to random: 285
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 56 sequences.
components: 56
randoop.util.Randomness: total calls to random: 286
randoop.util.Randomness: total calls to random: 287
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.randomNumber() : var0 
var2 =  method : A.randomNumber() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.normal() : var0 
var5 =  method : A.normal() : var0 
var6 =  method : A.randomNumber() : var0 
var7 =  method : A.normal() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=0 [var1]  : true
<randoop.PrimValue, value=0 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=10 [var4]  : true
<randoop.PrimValue, value=10 [var5]  : true
<randoop.PrimValue, value=0 [var6]  : true
<randoop.PrimValue, value=10 [var7]  : true

allSequences.size()=58
-------------------------------------------
randoop.util.Randomness: total calls to random: 288
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 57 sequences.
components: 57
randoop.util.Randomness: total calls to random: 289
randoop.util.Randomness: total calls to random: 290
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 291
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 57 sequences.
components: 57
randoop.util.Randomness: total calls to random: 292
randoop.util.Randomness: total calls to random: 293
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 294
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 57 sequences.
components: 57
randoop.util.Randomness: total calls to random: 295
randoop.util.Randomness: total calls to random: 296
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 297
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 57 sequences.
components: 57
randoop.util.Randomness: total calls to random: 298
randoop.util.Randomness: total calls to random: 299
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 300
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 57 sequences.
components: 57
randoop.util.Randomness: total calls to random: 301
randoop.util.Randomness: total calls to random: 302
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.randomNumber() : var0 
var2 =  method : A.randomNumber() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.randomNumber() : var0 
var6 =  method : A.randomNumber() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=0 [var1]  : true
<randoop.PrimValue, value=0 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=0 [var5]  : true
<randoop.PrimValue, value=0 [var6]  : true

allSequences.size()=59
-------------------------------------------
randoop.util.Randomness: total calls to random: 303
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 58 sequences.
components: 58
randoop.util.Randomness: total calls to random: 304
randoop.util.Randomness: total calls to random: 305
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 306
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 58 sequences.
components: 58
randoop.util.Randomness: total calls to random: 307
randoop.util.Randomness: total calls to random: 308
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.normal() : var0 
var2 =  method : A.randomNumber() : var0 
var3 =  method : A.randomNumber() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.normal() : var0 
var6 =  method : A.normal() : var0 
var7 =  method : A.normal() : var0 
var8 =  method : A.randomNumber() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=10 [var1]  : true
<randoop.PrimValue, value=0 [var2]  : true
<randoop.PrimValue, value=0 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=10 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true
<randoop.PrimValue, value=10 [var7]  : true
<randoop.PrimValue, value=0 [var8]  : true

allSequences.size()=60
-------------------------------------------
randoop.util.Randomness: total calls to random: 309
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 59 sequences.
components: 59
randoop.util.Randomness: total calls to random: 310
randoop.util.Randomness: total calls to random: 311
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.randomNumber() : var0 
var2 =  method : A.randomNumber() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.normal() : var0 
var6 =  method : A.normal() : var0 
var7 =  method : A.randomNumber() : var0 
var8 =  method : A.normal() : var0 
var9 =  method : A.randomNumber() : var0 
var10 =  method : A.randomNumber() : var0 
var11 =  method : A.normal() : var0 
var12 =  method : A.normal() : var0 
var13 =  method : A.randomNumber() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Making index 12 inactive (value is a primitive)
Making index 13 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var10 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var11 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var12 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var13 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=0 [var1]  : true
<randoop.PrimValue, value=0 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=10 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true
<randoop.PrimValue, value=0 [var7]  : true
<randoop.PrimValue, value=10 [var8]  : true
<randoop.PrimValue, value=0 [var9]  : true
<randoop.PrimValue, value=0 [var10]  : true
<randoop.PrimValue, value=10 [var11]  : true
<randoop.PrimValue, value=10 [var12]  : true
<randoop.PrimValue, value=0 [var13]  : true

allSequences.size()=61
-------------------------------------------
randoop.util.Randomness: total calls to random: 312
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 60 sequences.
components: 60
randoop.util.Randomness: total calls to random: 313
randoop.util.Randomness: total calls to random: 314
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.randomNumber() : var0 
var2 =  method : A.randomNumber() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.normal() : var0 
var6 =  method : A.normal() : var0 
var7 =  method : A.randomNumber() : var0 
var8 =  method : A.normal() : var0 
var9 =  method : A.randomNumber() : var0 
var10 =  method : A.randomNumber() : var0 
var11 =  method : A.normal() : var0 
var12 =  method : A.normal() : var0 
var13 =  method : A.randomNumber() : var0 
var14 =  method : A.randomNumber() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Making index 12 inactive (value is a primitive)
Making index 13 inactive (value is a primitive)
Making index 14 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var10 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var11 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var12 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var13 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var14 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=0 [var1]  : true
<randoop.PrimValue, value=0 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=10 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true
<randoop.PrimValue, value=0 [var7]  : true
<randoop.PrimValue, value=10 [var8]  : true
<randoop.PrimValue, value=0 [var9]  : true
<randoop.PrimValue, value=0 [var10]  : true
<randoop.PrimValue, value=10 [var11]  : true
<randoop.PrimValue, value=10 [var12]  : true
<randoop.PrimValue, value=0 [var13]  : true
<randoop.PrimValue, value=0 [var14]  : true

allSequences.size()=62
-------------------------------------------
randoop.util.Randomness: total calls to random: 315
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 61 sequences.
components: 61
randoop.util.Randomness: total calls to random: 316
randoop.util.Randomness: total calls to random: 317
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.normal() : var0 
var2 =  method : A.normal() : var0 
var3 =  method : A.randomNumber() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.randomNumber() : var0 
var6 =  method : A.normal() : var0 
var7 =  method : A.randomNumber() : var0 
var8 =  method : A.randomNumber() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=10 [var1]  : true
<randoop.PrimValue, value=10 [var2]  : true
<randoop.PrimValue, value=0 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=0 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true
<randoop.PrimValue, value=0 [var7]  : true
<randoop.PrimValue, value=0 [var8]  : true

allSequences.size()=63
-------------------------------------------
randoop.util.Randomness: total calls to random: 318
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 62 sequences.
components: 62
randoop.util.Randomness: total calls to random: 319
randoop.util.Randomness: total calls to random: 320
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.randomNumber() : var0 
var2 =  method : A.randomNumber() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.normal() : var0 
var6 =  method : A.normal() : var0 
var7 =  method : A.randomNumber() : var0 
var8 =  method : A.normal() : var0 
var9 =  method : A.randomNumber() : var0 
var10 =  method : A.normal() : var0 
var11 =  method : A.normal() : var0 
var12 =  method : A.randomNumber() : var0 
var13 =  method : A.randomNumber() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Making index 12 inactive (value is a primitive)
Making index 13 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var10 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var11 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var12 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var13 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=0 [var1]  : true
<randoop.PrimValue, value=0 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=10 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true
<randoop.PrimValue, value=0 [var7]  : true
<randoop.PrimValue, value=10 [var8]  : true
<randoop.PrimValue, value=0 [var9]  : true
<randoop.PrimValue, value=10 [var10]  : true
<randoop.PrimValue, value=10 [var11]  : true
<randoop.PrimValue, value=0 [var12]  : true
<randoop.PrimValue, value=0 [var13]  : true

allSequences.size()=64
-------------------------------------------
randoop.util.Randomness: total calls to random: 321
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 63 sequences.
components: 63
randoop.util.Randomness: total calls to random: 322
randoop.util.Randomness: total calls to random: 323
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 324
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 63 sequences.
components: 63
randoop.util.Randomness: total calls to random: 325
randoop.util.Randomness: total calls to random: 326
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.normal() : var0 
var2 =  method : A.normal() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.normal() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=10 [var1]  : true
<randoop.PrimValue, value=10 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=10 [var5]  : true

allSequences.size()=65
-------------------------------------------
randoop.util.Randomness: total calls to random: 327
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 64 sequences.
components: 64
randoop.util.Randomness: total calls to random: 328
randoop.util.Randomness: total calls to random: 329
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.normal() : var0 
var2 =  method : A.normal() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.randomNumber() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=10 [var1]  : true
<randoop.PrimValue, value=10 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=0 [var5]  : true

allSequences.size()=66
-------------------------------------------
randoop.util.Randomness: total calls to random: 330
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 65 sequences.
components: 65
randoop.util.Randomness: total calls to random: 331
randoop.util.Randomness: total calls to random: 332
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.randomNumber() : var0 
var2 =  method : A.randomNumber() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.normal() : var0 
var6 =  method : A.normal() : var0 
var7 =  method : A.randomNumber() : var0 
var8 =  method : A.normal() : var0 
var9 =  method : A.randomNumber() : var0 
var10 =  method : A.randomNumber() : var0 
var11 =  method : A.normal() : var0 
var12 =  method : A.normal() : var0 
var13 =  method : A.randomNumber() : var0 
var14 =  method : A.randomNumber() : var0 
var15 =  method : A.normal() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Making index 12 inactive (value is a primitive)
Making index 13 inactive (value is a primitive)
Making index 14 inactive (value is a primitive)
Making index 15 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var10 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var11 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var12 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var13 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var14 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var15 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=0 [var1]  : true
<randoop.PrimValue, value=0 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=10 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true
<randoop.PrimValue, value=0 [var7]  : true
<randoop.PrimValue, value=10 [var8]  : true
<randoop.PrimValue, value=0 [var9]  : true
<randoop.PrimValue, value=0 [var10]  : true
<randoop.PrimValue, value=10 [var11]  : true
<randoop.PrimValue, value=10 [var12]  : true
<randoop.PrimValue, value=0 [var13]  : true
<randoop.PrimValue, value=0 [var14]  : true
<randoop.PrimValue, value=10 [var15]  : true

allSequences.size()=67
-------------------------------------------
randoop.util.Randomness: total calls to random: 333
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 66 sequences.
components: 66
randoop.util.Randomness: total calls to random: 334
randoop.util.Randomness: total calls to random: 335
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.randomNumber() : var0 
var2 =  method : A.randomNumber() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.normal() : var0 
var6 =  method : A.normal() : var0 
var7 =  method : A.randomNumber() : var0 
var8 =  method : A.normal() : var0 
var9 =  method : A.randomNumber() : var0 
var10 =  method : A.normal() : var0 
var11 =  method : A.normal() : var0 
var12 =  method : A.randomNumber() : var0 
var13 =  method : A.randomNumber() : var0 
var14 =  method : A.randomNumber() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Making index 12 inactive (value is a primitive)
Making index 13 inactive (value is a primitive)
Making index 14 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var10 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var11 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var12 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var13 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var14 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=0 [var1]  : true
<randoop.PrimValue, value=0 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=10 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true
<randoop.PrimValue, value=0 [var7]  : true
<randoop.PrimValue, value=10 [var8]  : true
<randoop.PrimValue, value=0 [var9]  : true
<randoop.PrimValue, value=10 [var10]  : true
<randoop.PrimValue, value=10 [var11]  : true
<randoop.PrimValue, value=0 [var12]  : true
<randoop.PrimValue, value=0 [var13]  : true
<randoop.PrimValue, value=0 [var14]  : true

allSequences.size()=68
-------------------------------------------
randoop.util.Randomness: total calls to random: 336
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 67 sequences.
components: 67
randoop.util.Randomness: total calls to random: 337
randoop.util.Randomness: total calls to random: 338
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 339
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 67 sequences.
components: 67
randoop.util.Randomness: total calls to random: 340
randoop.util.Randomness: total calls to random: 341
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 342
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 67 sequences.
components: 67
randoop.util.Randomness: total calls to random: 343
randoop.util.Randomness: total calls to random: 344
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 345
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 67 sequences.
components: 67
randoop.util.Randomness: total calls to random: 346
randoop.util.Randomness: total calls to random: 347
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.normal() : var0 
var2 =  method : A.normal() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.randomNumber() : var0 
var6 =  method : A.randomNumber() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=10 [var1]  : true
<randoop.PrimValue, value=10 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=0 [var5]  : true
<randoop.PrimValue, value=0 [var6]  : true

allSequences.size()=69
-------------------------------------------
randoop.util.Randomness: total calls to random: 348
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 68 sequences.
components: 68
randoop.util.Randomness: total calls to random: 349
randoop.util.Randomness: total calls to random: 350
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.randomNumber() : var0 
var2 =  method : A.randomNumber() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.normal() : var0 
var6 =  method : A.normal() : var0 
var7 =  method : A.randomNumber() : var0 
var8 =  method : A.normal() : var0 
var9 =  method : A.randomNumber() : var0 
var10 =  method : A.randomNumber() : var0 
var11 =  method : A.normal() : var0 
var12 =  method : A.randomNumber() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Making index 12 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var10 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var11 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var12 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=0 [var1]  : true
<randoop.PrimValue, value=0 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=10 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true
<randoop.PrimValue, value=0 [var7]  : true
<randoop.PrimValue, value=10 [var8]  : true
<randoop.PrimValue, value=0 [var9]  : true
<randoop.PrimValue, value=0 [var10]  : true
<randoop.PrimValue, value=10 [var11]  : true
<randoop.PrimValue, value=0 [var12]  : true

allSequences.size()=70
-------------------------------------------
randoop.util.Randomness: total calls to random: 351
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 69 sequences.
components: 69
randoop.util.Randomness: total calls to random: 352
randoop.util.Randomness: total calls to random: 353
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 354
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 69 sequences.
components: 69
randoop.util.Randomness: total calls to random: 355
randoop.util.Randomness: total calls to random: 356
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 357
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 69 sequences.
components: 69
randoop.util.Randomness: total calls to random: 358
randoop.util.Randomness: total calls to random: 359
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.normal() : var0 
var2 =  method : A.randomNumber() : var0 
var3 =  method : A.randomNumber() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.randomNumber() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=10 [var1]  : true
<randoop.PrimValue, value=0 [var2]  : true
<randoop.PrimValue, value=0 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=0 [var5]  : true

allSequences.size()=71
-------------------------------------------
randoop.util.Randomness: total calls to random: 360
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 70 sequences.
components: 70
randoop.util.Randomness: total calls to random: 361
randoop.util.Randomness: total calls to random: 362
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 363
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 70 sequences.
components: 70
randoop.util.Randomness: total calls to random: 364
randoop.util.Randomness: total calls to random: 365
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 366
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 70 sequences.
components: 70
randoop.util.Randomness: total calls to random: 367
randoop.util.Randomness: total calls to random: 368
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 369
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 70 sequences.
components: 70
randoop.util.Randomness: total calls to random: 370
randoop.util.Randomness: total calls to random: 371
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 372
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 70 sequences.
components: 70
randoop.util.Randomness: total calls to random: 373
randoop.util.Randomness: total calls to random: 374
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 375
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 70 sequences.
components: 70
randoop.util.Randomness: total calls to random: 376
randoop.util.Randomness: total calls to random: 377
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.normal() : var0 
var2 =  method : A.randomNumber() : var0 
var3 =  method : A.normal() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=10 [var1]  : true
<randoop.PrimValue, value=0 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true

allSequences.size()=72
-------------------------------------------
randoop.util.Randomness: total calls to random: 378
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 71 sequences.
components: 71
randoop.util.Randomness: total calls to random: 379
randoop.util.Randomness: total calls to random: 380
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 381
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 71 sequences.
components: 71
randoop.util.Randomness: total calls to random: 382
randoop.util.Randomness: total calls to random: 383
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 384
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 71 sequences.
components: 71
randoop.util.Randomness: total calls to random: 385
randoop.util.Randomness: total calls to random: 386
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 387
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 71 sequences.
components: 71
randoop.util.Randomness: total calls to random: 388
randoop.util.Randomness: total calls to random: 389
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.normal() : var0 
var2 =  method : A.normal() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.randomNumber() : var0 
var6 =  method : A.randomNumber() : var0 
var7 =  method : A.normal() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=10 [var1]  : true
<randoop.PrimValue, value=10 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=0 [var5]  : true
<randoop.PrimValue, value=0 [var6]  : true
<randoop.PrimValue, value=10 [var7]  : true

allSequences.size()=73
-------------------------------------------
randoop.util.Randomness: total calls to random: 390
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 72 sequences.
components: 72
randoop.util.Randomness: total calls to random: 391
randoop.util.Randomness: total calls to random: 392
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.normal() : var0 
var2 =  method : A.normal() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.normal() : var0 
var6 =  method : A.normal() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=10 [var1]  : true
<randoop.PrimValue, value=10 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=10 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true

allSequences.size()=74
-------------------------------------------
randoop.util.Randomness: total calls to random: 393
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 73 sequences.
components: 73
randoop.util.Randomness: total calls to random: 394
randoop.util.Randomness: total calls to random: 395
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 396
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 73 sequences.
components: 73
randoop.util.Randomness: total calls to random: 397
randoop.util.Randomness: total calls to random: 398
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.normal() : var0 
var2 =  method : A.normal() : var0 
var3 =  method : A.randomNumber() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.randomNumber() : var0 
var6 =  method : A.normal() : var0 
var7 =  method : A.randomNumber() : var0 
var8 =  method : A.normal() : var0 
var9 =  method : A.normal() : var0 
var10 =  method : A.normal() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var10 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=10 [var1]  : true
<randoop.PrimValue, value=10 [var2]  : true
<randoop.PrimValue, value=0 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=0 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true
<randoop.PrimValue, value=0 [var7]  : true
<randoop.PrimValue, value=10 [var8]  : true
<randoop.PrimValue, value=10 [var9]  : true
<randoop.PrimValue, value=10 [var10]  : true

allSequences.size()=75
-------------------------------------------
randoop.util.Randomness: total calls to random: 399
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 74 sequences.
components: 74
randoop.util.Randomness: total calls to random: 400
randoop.util.Randomness: total calls to random: 401
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.randomNumber() : var0 
var2 =  method : A.randomNumber() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.normal() : var0 
var5 =  method : A.normal() : var0 
var6 =  method : A.randomNumber() : var0 
var7 =  method : A.normal() : var0 
var8 =  method : A.normal() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=0 [var1]  : true
<randoop.PrimValue, value=0 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=10 [var4]  : true
<randoop.PrimValue, value=10 [var5]  : true
<randoop.PrimValue, value=0 [var6]  : true
<randoop.PrimValue, value=10 [var7]  : true
<randoop.PrimValue, value=10 [var8]  : true

allSequences.size()=76
-------------------------------------------
randoop.util.Randomness: total calls to random: 402
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 75 sequences.
components: 75
randoop.util.Randomness: total calls to random: 403
randoop.util.Randomness: total calls to random: 404
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 405
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 75 sequences.
components: 75
randoop.util.Randomness: total calls to random: 406
randoop.util.Randomness: total calls to random: 407
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.randomNumber() : var0 
var2 =  method : A.normal() : var0 
var3 =  method : A.randomNumber() : var0 
var4 =  method : A.normal() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=0 [var1]  : true
<randoop.PrimValue, value=10 [var2]  : true
<randoop.PrimValue, value=0 [var3]  : true
<randoop.PrimValue, value=10 [var4]  : true

allSequences.size()=77
-------------------------------------------
randoop.util.Randomness: total calls to random: 408
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 76 sequences.
components: 76
randoop.util.Randomness: total calls to random: 409
randoop.util.Randomness: total calls to random: 410
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 411
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 76 sequences.
components: 76
randoop.util.Randomness: total calls to random: 412
randoop.util.Randomness: total calls to random: 413
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.normal() : var0 
var2 =  method : A.normal() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.normal() : var0 
var5 =  method : A.randomNumber() : var0 
var6 =  method : A.randomNumber() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=10 [var1]  : true
<randoop.PrimValue, value=10 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=10 [var4]  : true
<randoop.PrimValue, value=0 [var5]  : true
<randoop.PrimValue, value=0 [var6]  : true

allSequences.size()=78
-------------------------------------------
randoop.util.Randomness: total calls to random: 414
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 77 sequences.
components: 77
randoop.util.Randomness: total calls to random: 415
randoop.util.Randomness: total calls to random: 416
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.normal() : var0 
var2 =  method : A.randomNumber() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.randomNumber() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=10 [var1]  : true
<randoop.PrimValue, value=0 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true

allSequences.size()=79
-------------------------------------------
randoop.util.Randomness: total calls to random: 417
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 78 sequences.
components: 78
randoop.util.Randomness: total calls to random: 418
randoop.util.Randomness: total calls to random: 419
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 420
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 78 sequences.
components: 78
randoop.util.Randomness: total calls to random: 421
randoop.util.Randomness: total calls to random: 422
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 423
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 78 sequences.
components: 78
randoop.util.Randomness: total calls to random: 424
randoop.util.Randomness: total calls to random: 425
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.randomNumber() : var0 
var2 =  method : A.normal() : var0 
var3 =  method : A.randomNumber() : var0 
var4 =  method : A.normal() : var0 
var5 =  method : A.randomNumber() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=0 [var1]  : true
<randoop.PrimValue, value=10 [var2]  : true
<randoop.PrimValue, value=0 [var3]  : true
<randoop.PrimValue, value=10 [var4]  : true
<randoop.PrimValue, value=0 [var5]  : true

allSequences.size()=80
-------------------------------------------
randoop.util.Randomness: total calls to random: 426
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 79 sequences.
components: 79
randoop.util.Randomness: total calls to random: 427
randoop.util.Randomness: total calls to random: 428
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 429
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 79 sequences.
components: 79
randoop.util.Randomness: total calls to random: 430
randoop.util.Randomness: total calls to random: 431
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 432
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 79 sequences.
components: 79
randoop.util.Randomness: total calls to random: 433
randoop.util.Randomness: total calls to random: 434
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 435
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 79 sequences.
components: 79
randoop.util.Randomness: total calls to random: 436
randoop.util.Randomness: total calls to random: 437
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.randomNumber() : var0 
var2 =  method : A.randomNumber() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.normal() : var0 
var6 =  method : A.normal() : var0 
var7 =  method : A.randomNumber() : var0 
var8 =  method : A.normal() : var0 
var9 =  method : A.randomNumber() : var0 
var10 =  method : A.normal() : var0 
var11 =  method : A.normal() : var0 
var12 =  method : A.randomNumber() : var0 
var13 =  method : A.randomNumber() : var0 
var14 =  method : A.randomNumber() : var0 
var15 =  method : A.normal() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Making index 12 inactive (value is a primitive)
Making index 13 inactive (value is a primitive)
Making index 14 inactive (value is a primitive)
Making index 15 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var10 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var11 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var12 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var13 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var14 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var15 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=0 [var1]  : true
<randoop.PrimValue, value=0 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=10 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true
<randoop.PrimValue, value=0 [var7]  : true
<randoop.PrimValue, value=10 [var8]  : true
<randoop.PrimValue, value=0 [var9]  : true
<randoop.PrimValue, value=10 [var10]  : true
<randoop.PrimValue, value=10 [var11]  : true
<randoop.PrimValue, value=0 [var12]  : true
<randoop.PrimValue, value=0 [var13]  : true
<randoop.PrimValue, value=0 [var14]  : true
<randoop.PrimValue, value=10 [var15]  : true

allSequences.size()=81
-------------------------------------------
randoop.util.Randomness: total calls to random: 438
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 80 sequences.
components: 80
randoop.util.Randomness: total calls to random: 439
randoop.util.Randomness: total calls to random: 440
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 441
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 80 sequences.
components: 80
randoop.util.Randomness: total calls to random: 442
randoop.util.Randomness: total calls to random: 443
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.normal() : var0 
var2 =  method : A.normal() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.normal() : var0 
var5 =  method : A.randomNumber() : var0 
var6 =  method : A.normal() : var0 
var7 =  method : A.normal() : var0 
var8 =  method : A.randomNumber() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=10 [var1]  : true
<randoop.PrimValue, value=10 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=10 [var4]  : true
<randoop.PrimValue, value=0 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true
<randoop.PrimValue, value=10 [var7]  : true
<randoop.PrimValue, value=0 [var8]  : true

allSequences.size()=82
-------------------------------------------
randoop.util.Randomness: total calls to random: 444
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 81 sequences.
components: 81
randoop.util.Randomness: total calls to random: 445
randoop.util.Randomness: total calls to random: 446
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 447
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 81 sequences.
components: 81
randoop.util.Randomness: total calls to random: 448
randoop.util.Randomness: total calls to random: 449
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.normal() : var0 
var2 =  method : A.normal() : var0 
var3 =  method : A.randomNumber() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.randomNumber() : var0 
var6 =  method : A.normal() : var0 
var7 =  method : A.randomNumber() : var0 
var8 =  method : A.normal() : var0 
var9 =  method : A.normal() : var0 
var10 =  method : A.normal() : var0 
var11 =  method : A.normal() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var10 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var11 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=10 [var1]  : true
<randoop.PrimValue, value=10 [var2]  : true
<randoop.PrimValue, value=0 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=0 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true
<randoop.PrimValue, value=0 [var7]  : true
<randoop.PrimValue, value=10 [var8]  : true
<randoop.PrimValue, value=10 [var9]  : true
<randoop.PrimValue, value=10 [var10]  : true
<randoop.PrimValue, value=10 [var11]  : true

allSequences.size()=83
-------------------------------------------
randoop.util.Randomness: total calls to random: 450
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 82 sequences.
components: 82
randoop.util.Randomness: total calls to random: 451
randoop.util.Randomness: total calls to random: 452
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.normal() : var0 
var2 =  method : A.normal() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.normal() : var0 
var5 =  method : A.normal() : var0 
var6 =  method : A.normal() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=10 [var1]  : true
<randoop.PrimValue, value=10 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=10 [var4]  : true
<randoop.PrimValue, value=10 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true

allSequences.size()=84
-------------------------------------------
randoop.util.Randomness: total calls to random: 453
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 83 sequences.
components: 83
randoop.util.Randomness: total calls to random: 454
randoop.util.Randomness: total calls to random: 455
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 456
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 83 sequences.
components: 83
randoop.util.Randomness: total calls to random: 457
randoop.util.Randomness: total calls to random: 458
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 459
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 83 sequences.
components: 83
randoop.util.Randomness: total calls to random: 460
randoop.util.Randomness: total calls to random: 461
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.normal() : var0 
var2 =  method : A.normal() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.randomNumber() : var0 
var6 =  method : A.randomNumber() : var0 
var7 =  method : A.normal() : var0 
var8 =  method : A.randomNumber() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=10 [var1]  : true
<randoop.PrimValue, value=10 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=0 [var5]  : true
<randoop.PrimValue, value=0 [var6]  : true
<randoop.PrimValue, value=10 [var7]  : true
<randoop.PrimValue, value=0 [var8]  : true

allSequences.size()=85
-------------------------------------------
randoop.util.Randomness: total calls to random: 462
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 84 sequences.
components: 84
randoop.util.Randomness: total calls to random: 463
randoop.util.Randomness: total calls to random: 464
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 465
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 84 sequences.
components: 84
randoop.util.Randomness: total calls to random: 466
randoop.util.Randomness: total calls to random: 467
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.normal() : var0 
var2 =  method : A.normal() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.normal() : var0 
var5 =  method : A.randomNumber() : var0 
var6 =  method : A.normal() : var0 
var7 =  method : A.normal() : var0 
var8 =  method : A.normal() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=10 [var1]  : true
<randoop.PrimValue, value=10 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=10 [var4]  : true
<randoop.PrimValue, value=0 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true
<randoop.PrimValue, value=10 [var7]  : true
<randoop.PrimValue, value=10 [var8]  : true

allSequences.size()=86
-------------------------------------------
randoop.util.Randomness: total calls to random: 468
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 85 sequences.
components: 85
randoop.util.Randomness: total calls to random: 469
randoop.util.Randomness: total calls to random: 470
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 471
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 85 sequences.
components: 85
randoop.util.Randomness: total calls to random: 472
randoop.util.Randomness: total calls to random: 473
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 474
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 85 sequences.
components: 85
randoop.util.Randomness: total calls to random: 475
randoop.util.Randomness: total calls to random: 476
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.normal() : var0 
var2 =  method : A.randomNumber() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.randomNumber() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=10 [var1]  : true
<randoop.PrimValue, value=0 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=0 [var5]  : true

allSequences.size()=87
-------------------------------------------
randoop.util.Randomness: total calls to random: 477
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 86 sequences.
components: 86
randoop.util.Randomness: total calls to random: 478
randoop.util.Randomness: total calls to random: 479
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.randomNumber() : var0 
var2 =  method : A.randomNumber() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.normal() : var0 
var6 =  method : A.normal() : var0 
var7 =  method : A.randomNumber() : var0 
var8 =  method : A.normal() : var0 
var9 =  method : A.randomNumber() : var0 
var10 =  method : A.randomNumber() : var0 
var11 =  method : A.normal() : var0 
var12 =  method : A.normal() : var0 
var13 =  method : A.randomNumber() : var0 
var14 =  method : A.randomNumber() : var0 
var15 =  method : A.normal() : var0 
var16 =  method : A.randomNumber() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Making index 12 inactive (value is a primitive)
Making index 13 inactive (value is a primitive)
Making index 14 inactive (value is a primitive)
Making index 15 inactive (value is a primitive)
Making index 16 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var10 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var11 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var12 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var13 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var14 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var15 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var16 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=0 [var1]  : true
<randoop.PrimValue, value=0 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=10 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true
<randoop.PrimValue, value=0 [var7]  : true
<randoop.PrimValue, value=10 [var8]  : true
<randoop.PrimValue, value=0 [var9]  : true
<randoop.PrimValue, value=0 [var10]  : true
<randoop.PrimValue, value=10 [var11]  : true
<randoop.PrimValue, value=10 [var12]  : true
<randoop.PrimValue, value=0 [var13]  : true
<randoop.PrimValue, value=0 [var14]  : true
<randoop.PrimValue, value=10 [var15]  : true
<randoop.PrimValue, value=0 [var16]  : true

allSequences.size()=88
-------------------------------------------
randoop.util.Randomness: total calls to random: 480
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 87 sequences.
components: 87
randoop.util.Randomness: total calls to random: 481
randoop.util.Randomness: total calls to random: 482
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 483
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 87 sequences.
components: 87
randoop.util.Randomness: total calls to random: 484
randoop.util.Randomness: total calls to random: 485
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.normal() : var0 
var2 =  method : A.randomNumber() : var0 
var3 =  method : A.randomNumber() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.randomNumber() : var0 
var6 =  method : A.randomNumber() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=10 [var1]  : true
<randoop.PrimValue, value=0 [var2]  : true
<randoop.PrimValue, value=0 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=0 [var5]  : true
<randoop.PrimValue, value=0 [var6]  : true

allSequences.size()=89
-------------------------------------------
randoop.util.Randomness: total calls to random: 486
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 88 sequences.
components: 88
randoop.util.Randomness: total calls to random: 487
randoop.util.Randomness: total calls to random: 488
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.randomNumber() : var0 
var2 =  method : A.randomNumber() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.normal() : var0 
var6 =  method : A.normal() : var0 
var7 =  method : A.randomNumber() : var0 
var8 =  method : A.normal() : var0 
var9 =  method : A.randomNumber() : var0 
var10 =  method : A.normal() : var0 
var11 =  method : A.randomNumber() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var10 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var11 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=0 [var1]  : true
<randoop.PrimValue, value=0 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=10 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true
<randoop.PrimValue, value=0 [var7]  : true
<randoop.PrimValue, value=10 [var8]  : true
<randoop.PrimValue, value=0 [var9]  : true
<randoop.PrimValue, value=10 [var10]  : true
<randoop.PrimValue, value=0 [var11]  : true

allSequences.size()=90
-------------------------------------------
randoop.util.Randomness: total calls to random: 489
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 89 sequences.
components: 89
randoop.util.Randomness: total calls to random: 490
randoop.util.Randomness: total calls to random: 491
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 492
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 89 sequences.
components: 89
randoop.util.Randomness: total calls to random: 493
randoop.util.Randomness: total calls to random: 494
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.normal() : var0 
var2 =  method : A.normal() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.randomNumber() : var0 
var6 =  method : A.randomNumber() : var0 
var7 =  method : A.normal() : var0 
var8 =  method : A.randomNumber() : var0 
var9 =  method : A.normal() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=10 [var1]  : true
<randoop.PrimValue, value=10 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=0 [var5]  : true
<randoop.PrimValue, value=0 [var6]  : true
<randoop.PrimValue, value=10 [var7]  : true
<randoop.PrimValue, value=0 [var8]  : true
<randoop.PrimValue, value=10 [var9]  : true

allSequences.size()=91
-------------------------------------------
randoop.util.Randomness: total calls to random: 495
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 90 sequences.
components: 90
randoop.util.Randomness: total calls to random: 496
randoop.util.Randomness: total calls to random: 497
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.normal() : var0 
var2 =  method : A.normal() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.normal() : var0 
var5 =  method : A.normal() : var0 
var6 =  method : A.randomNumber() : var0 
var7 =  method : A.normal() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=10 [var1]  : true
<randoop.PrimValue, value=10 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=10 [var4]  : true
<randoop.PrimValue, value=10 [var5]  : true
<randoop.PrimValue, value=0 [var6]  : true
<randoop.PrimValue, value=10 [var7]  : true

allSequences.size()=92
-------------------------------------------
randoop.util.Randomness: total calls to random: 498
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 91 sequences.
components: 91
randoop.util.Randomness: total calls to random: 499
randoop.util.Randomness: total calls to random: 500
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.randomNumber() : var0 
var2 =  method : A.randomNumber() : var0 
var3 =  method : A.randomNumber() : var0 
var4 =  method : A.randomNumber() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=0 [var1]  : true
<randoop.PrimValue, value=0 [var2]  : true
<randoop.PrimValue, value=0 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true

allSequences.size()=93
-------------------------------------------
randoop.util.Randomness: total calls to random: 501
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 92 sequences.
components: 92
randoop.util.Randomness: total calls to random: 502
randoop.util.Randomness: total calls to random: 503
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.normal() : var0 
var2 =  method : A.normal() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.normal() : var0 
var6 =  method : A.randomNumber() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=10 [var1]  : true
<randoop.PrimValue, value=10 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=10 [var5]  : true
<randoop.PrimValue, value=0 [var6]  : true

allSequences.size()=94
-------------------------------------------
randoop.util.Randomness: total calls to random: 504
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 93 sequences.
components: 93
randoop.util.Randomness: total calls to random: 505
randoop.util.Randomness: total calls to random: 506
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 507
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 93 sequences.
components: 93
randoop.util.Randomness: total calls to random: 508
randoop.util.Randomness: total calls to random: 509
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 510
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 93 sequences.
components: 93
randoop.util.Randomness: total calls to random: 511
randoop.util.Randomness: total calls to random: 512
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.randomNumber() : var0 
var2 =  method : A.randomNumber() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.normal() : var0 
var6 =  method : A.normal() : var0 
var7 =  method : A.randomNumber() : var0 
var8 =  method : A.normal() : var0 
var9 =  method : A.randomNumber() : var0 
var10 =  method : A.randomNumber() : var0 
var11 =  method : A.normal() : var0 
var12 =  method : A.normal() : var0 
var13 =  method : A.randomNumber() : var0 
var14 =  method : A.randomNumber() : var0 
var15 =  method : A.normal() : var0 
var16 =  method : A.randomNumber() : var0 
var17 =  method : A.normal() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Making index 12 inactive (value is a primitive)
Making index 13 inactive (value is a primitive)
Making index 14 inactive (value is a primitive)
Making index 15 inactive (value is a primitive)
Making index 16 inactive (value is a primitive)
Making index 17 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var10 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var11 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var12 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var13 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var14 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var15 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var16 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var17 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=0 [var1]  : true
<randoop.PrimValue, value=0 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=10 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true
<randoop.PrimValue, value=0 [var7]  : true
<randoop.PrimValue, value=10 [var8]  : true
<randoop.PrimValue, value=0 [var9]  : true
<randoop.PrimValue, value=0 [var10]  : true
<randoop.PrimValue, value=10 [var11]  : true
<randoop.PrimValue, value=10 [var12]  : true
<randoop.PrimValue, value=0 [var13]  : true
<randoop.PrimValue, value=0 [var14]  : true
<randoop.PrimValue, value=10 [var15]  : true
<randoop.PrimValue, value=0 [var16]  : true
<randoop.PrimValue, value=10 [var17]  : true

allSequences.size()=95
-------------------------------------------
randoop.util.Randomness: total calls to random: 513
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 94 sequences.
components: 94
randoop.util.Randomness: total calls to random: 514
randoop.util.Randomness: total calls to random: 515
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.normal() : var0 
var2 =  method : A.normal() : var0 
var3 =  method : A.randomNumber() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.randomNumber() : var0 
var6 =  method : A.normal() : var0 
var7 =  method : A.randomNumber() : var0 
var8 =  method : A.normal() : var0 
var9 =  method : A.randomNumber() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=10 [var1]  : true
<randoop.PrimValue, value=10 [var2]  : true
<randoop.PrimValue, value=0 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=0 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true
<randoop.PrimValue, value=0 [var7]  : true
<randoop.PrimValue, value=10 [var8]  : true
<randoop.PrimValue, value=0 [var9]  : true

allSequences.size()=96
-------------------------------------------
randoop.util.Randomness: total calls to random: 516
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 95 sequences.
components: 95
randoop.util.Randomness: total calls to random: 517
randoop.util.Randomness: total calls to random: 518
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.normal() : var0 
var2 =  method : A.normal() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.randomNumber() : var0 
var6 =  method : A.randomNumber() : var0 
var7 =  method : A.normal() : var0 
var8 =  method : A.randomNumber() : var0 
var9 =  method : A.normal() : var0 
var10 =  method : A.randomNumber() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var10 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=10 [var1]  : true
<randoop.PrimValue, value=10 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=0 [var5]  : true
<randoop.PrimValue, value=0 [var6]  : true
<randoop.PrimValue, value=10 [var7]  : true
<randoop.PrimValue, value=0 [var8]  : true
<randoop.PrimValue, value=10 [var9]  : true
<randoop.PrimValue, value=0 [var10]  : true

allSequences.size()=97
-------------------------------------------
randoop.util.Randomness: total calls to random: 519
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 96 sequences.
components: 96
randoop.util.Randomness: total calls to random: 520
randoop.util.Randomness: total calls to random: 521
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 522
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 96 sequences.
components: 96
randoop.util.Randomness: total calls to random: 523
randoop.util.Randomness: total calls to random: 524
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 525
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 96 sequences.
components: 96
randoop.util.Randomness: total calls to random: 526
randoop.util.Randomness: total calls to random: 527
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.randomNumber() : var0 
var2 =  method : A.randomNumber() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.normal() : var0 
var6 =  method : A.normal() : var0 
var7 =  method : A.randomNumber() : var0 
var8 =  method : A.normal() : var0 
var9 =  method : A.randomNumber() : var0 
var10 =  method : A.normal() : var0 
var11 =  method : A.normal() : var0 
var12 =  method : A.randomNumber() : var0 
var13 =  method : A.randomNumber() : var0 
var14 =  method : A.randomNumber() : var0 
var15 =  method : A.normal() : var0 
var16 =  method : A.normal() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Making index 12 inactive (value is a primitive)
Making index 13 inactive (value is a primitive)
Making index 14 inactive (value is a primitive)
Making index 15 inactive (value is a primitive)
Making index 16 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var10 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var11 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var12 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var13 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var14 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var15 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var16 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=0 [var1]  : true
<randoop.PrimValue, value=0 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=10 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true
<randoop.PrimValue, value=0 [var7]  : true
<randoop.PrimValue, value=10 [var8]  : true
<randoop.PrimValue, value=0 [var9]  : true
<randoop.PrimValue, value=10 [var10]  : true
<randoop.PrimValue, value=10 [var11]  : true
<randoop.PrimValue, value=0 [var12]  : true
<randoop.PrimValue, value=0 [var13]  : true
<randoop.PrimValue, value=0 [var14]  : true
<randoop.PrimValue, value=10 [var15]  : true
<randoop.PrimValue, value=10 [var16]  : true

allSequences.size()=98
-------------------------------------------
randoop.util.Randomness: total calls to random: 528
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 97 sequences.
components: 97
randoop.util.Randomness: total calls to random: 529
randoop.util.Randomness: total calls to random: 530
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 531
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 97 sequences.
components: 97
randoop.util.Randomness: total calls to random: 532
randoop.util.Randomness: total calls to random: 533
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 534
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 97 sequences.
components: 97
randoop.util.Randomness: total calls to random: 535
randoop.util.Randomness: total calls to random: 536
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.randomNumber() : var0 
var2 =  method : A.normal() : var0 
var3 =  method : A.randomNumber() : var0 
var4 =  method : A.normal() : var0 
var5 =  method : A.normal() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=0 [var1]  : true
<randoop.PrimValue, value=10 [var2]  : true
<randoop.PrimValue, value=0 [var3]  : true
<randoop.PrimValue, value=10 [var4]  : true
<randoop.PrimValue, value=10 [var5]  : true

allSequences.size()=99
-------------------------------------------
randoop.util.Randomness: total calls to random: 537
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 98 sequences.
components: 98
randoop.util.Randomness: total calls to random: 538
randoop.util.Randomness: total calls to random: 539
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.normal() : var0 
var2 =  method : A.randomNumber() : var0 
var3 =  method : A.randomNumber() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.normal() : var0 
var6 =  method : A.randomNumber() : var0 
var7 =  method : A.randomNumber() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=10 [var1]  : true
<randoop.PrimValue, value=0 [var2]  : true
<randoop.PrimValue, value=0 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=10 [var5]  : true
<randoop.PrimValue, value=0 [var6]  : true
<randoop.PrimValue, value=0 [var7]  : true

allSequences.size()=100
-------------------------------------------
randoop.util.Randomness: total calls to random: 540
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 99 sequences.
components: 99
randoop.util.Randomness: total calls to random: 541
randoop.util.Randomness: total calls to random: 542
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 543
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 99 sequences.
components: 99
randoop.util.Randomness: total calls to random: 544
randoop.util.Randomness: total calls to random: 545
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.normal() : var0 
var2 =  method : A.normal() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.normal() : var0 
var5 =  method : A.randomNumber() : var0 
var6 =  method : A.normal() : var0 
var7 =  method : A.randomNumber() : var0 
var8 =  method : A.randomNumber() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=10 [var1]  : true
<randoop.PrimValue, value=10 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=10 [var4]  : true
<randoop.PrimValue, value=0 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true
<randoop.PrimValue, value=0 [var7]  : true
<randoop.PrimValue, value=0 [var8]  : true

allSequences.size()=101
-------------------------------------------
randoop.util.Randomness: total calls to random: 546
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 100 sequences.
components: 100
randoop.util.Randomness: total calls to random: 547
randoop.util.Randomness: total calls to random: 548
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 549
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 100 sequences.
components: 100
randoop.util.Randomness: total calls to random: 550
randoop.util.Randomness: total calls to random: 551
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.normal() : var0 
var2 =  method : A.normal() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.normal() : var0 
var5 =  method : A.randomNumber() : var0 
var6 =  method : A.normal() : var0 
var7 =  method : A.randomNumber() : var0 
var8 =  method : A.normal() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=10 [var1]  : true
<randoop.PrimValue, value=10 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=10 [var4]  : true
<randoop.PrimValue, value=0 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true
<randoop.PrimValue, value=0 [var7]  : true
<randoop.PrimValue, value=10 [var8]  : true

allSequences.size()=102
-------------------------------------------
randoop.util.Randomness: total calls to random: 552
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 101 sequences.
components: 101
randoop.util.Randomness: total calls to random: 553
randoop.util.Randomness: total calls to random: 554
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 555
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 101 sequences.
components: 101
randoop.util.Randomness: total calls to random: 556
randoop.util.Randomness: total calls to random: 557
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.normal() : var0 
var2 =  method : A.normal() : var0 
var3 =  method : A.randomNumber() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.randomNumber() : var0 
var6 =  method : A.normal() : var0 
var7 =  method : A.normal() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=10 [var1]  : true
<randoop.PrimValue, value=10 [var2]  : true
<randoop.PrimValue, value=0 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=0 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true
<randoop.PrimValue, value=10 [var7]  : true

allSequences.size()=103
-------------------------------------------
randoop.util.Randomness: total calls to random: 558
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 102 sequences.
components: 102
randoop.util.Randomness: total calls to random: 559
randoop.util.Randomness: total calls to random: 560
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 561
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 102 sequences.
components: 102
randoop.util.Randomness: total calls to random: 562
randoop.util.Randomness: total calls to random: 563
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 564
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 102 sequences.
components: 102
randoop.util.Randomness: total calls to random: 565
randoop.util.Randomness: total calls to random: 566
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 567
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 102 sequences.
components: 102
randoop.util.Randomness: total calls to random: 568
randoop.util.Randomness: total calls to random: 569
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.randomNumber() : var0 
var2 =  method : A.randomNumber() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.normal() : var0 
var6 =  method : A.normal() : var0 
var7 =  method : A.randomNumber() : var0 
var8 =  method : A.normal() : var0 
var9 =  method : A.randomNumber() : var0 
var10 =  method : A.normal() : var0 
var11 =  method : A.normal() : var0 
var12 =  method : A.randomNumber() : var0 
var13 =  method : A.randomNumber() : var0 
var14 =  method : A.randomNumber() : var0 
var15 =  method : A.normal() : var0 
var16 =  method : A.normal() : var0 
var17 =  method : A.randomNumber() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Making index 12 inactive (value is a primitive)
Making index 13 inactive (value is a primitive)
Making index 14 inactive (value is a primitive)
Making index 15 inactive (value is a primitive)
Making index 16 inactive (value is a primitive)
Making index 17 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var10 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var11 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var12 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var13 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var14 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var15 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var16 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var17 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=0 [var1]  : true
<randoop.PrimValue, value=0 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=10 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true
<randoop.PrimValue, value=0 [var7]  : true
<randoop.PrimValue, value=10 [var8]  : true
<randoop.PrimValue, value=0 [var9]  : true
<randoop.PrimValue, value=10 [var10]  : true
<randoop.PrimValue, value=10 [var11]  : true
<randoop.PrimValue, value=0 [var12]  : true
<randoop.PrimValue, value=0 [var13]  : true
<randoop.PrimValue, value=0 [var14]  : true
<randoop.PrimValue, value=10 [var15]  : true
<randoop.PrimValue, value=10 [var16]  : true
<randoop.PrimValue, value=0 [var17]  : true

allSequences.size()=104
-------------------------------------------
randoop.util.Randomness: total calls to random: 570
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 103 sequences.
components: 103
randoop.util.Randomness: total calls to random: 571
randoop.util.Randomness: total calls to random: 572
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 573
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 103 sequences.
components: 103
randoop.util.Randomness: total calls to random: 574
randoop.util.Randomness: total calls to random: 575
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 576
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 103 sequences.
components: 103
randoop.util.Randomness: total calls to random: 577
randoop.util.Randomness: total calls to random: 578
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.normal() : var0 
var2 =  method : A.randomNumber() : var0 
var3 =  method : A.randomNumber() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.normal() : var0 
var6 =  method : A.randomNumber() : var0 
var7 =  method : A.normal() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=10 [var1]  : true
<randoop.PrimValue, value=0 [var2]  : true
<randoop.PrimValue, value=0 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=10 [var5]  : true
<randoop.PrimValue, value=0 [var6]  : true
<randoop.PrimValue, value=10 [var7]  : true

allSequences.size()=105
-------------------------------------------
randoop.util.Randomness: total calls to random: 579
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 104 sequences.
components: 104
randoop.util.Randomness: total calls to random: 580
randoop.util.Randomness: total calls to random: 581
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.normal() : var0 
var2 =  method : A.normal() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.normal() : var0 
var5 =  method : A.randomNumber() : var0 
var6 =  method : A.normal() : var0 
var7 =  method : A.normal() : var0 
var8 =  method : A.normal() : var0 
var9 =  method : A.normal() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=10 [var1]  : true
<randoop.PrimValue, value=10 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=10 [var4]  : true
<randoop.PrimValue, value=0 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true
<randoop.PrimValue, value=10 [var7]  : true
<randoop.PrimValue, value=10 [var8]  : true
<randoop.PrimValue, value=10 [var9]  : true

allSequences.size()=106
-------------------------------------------
randoop.util.Randomness: total calls to random: 582
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 105 sequences.
components: 105
randoop.util.Randomness: total calls to random: 583
randoop.util.Randomness: total calls to random: 584
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 585
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 105 sequences.
components: 105
randoop.util.Randomness: total calls to random: 586
randoop.util.Randomness: total calls to random: 587
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 588
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 105 sequences.
components: 105
randoop.util.Randomness: total calls to random: 589
randoop.util.Randomness: total calls to random: 590
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 591
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 105 sequences.
components: 105
randoop.util.Randomness: total calls to random: 592
randoop.util.Randomness: total calls to random: 593
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.randomNumber() : var0 
var2 =  method : A.randomNumber() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.normal() : var0 
var6 =  method : A.randomNumber() : var0 
var7 =  method : A.normal() : var0 
var8 =  method : A.randomNumber() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=0 [var1]  : true
<randoop.PrimValue, value=0 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=10 [var5]  : true
<randoop.PrimValue, value=0 [var6]  : true
<randoop.PrimValue, value=10 [var7]  : true
<randoop.PrimValue, value=0 [var8]  : true

allSequences.size()=107
-------------------------------------------
randoop.util.Randomness: total calls to random: 594
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 106 sequences.
components: 106
randoop.util.Randomness: total calls to random: 595
randoop.util.Randomness: total calls to random: 596
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.randomNumber() : var0 
var2 =  method : A.randomNumber() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.normal() : var0 
var6 =  method : A.normal() : var0 
var7 =  method : A.randomNumber() : var0 
var8 =  method : A.randomNumber() : var0 
var9 =  method : A.randomNumber() : var0 
var10 =  method : A.randomNumber() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var10 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=0 [var1]  : true
<randoop.PrimValue, value=0 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=10 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true
<randoop.PrimValue, value=0 [var7]  : true
<randoop.PrimValue, value=0 [var8]  : true
<randoop.PrimValue, value=0 [var9]  : true
<randoop.PrimValue, value=0 [var10]  : true

allSequences.size()=108
-------------------------------------------
randoop.util.Randomness: total calls to random: 597
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 107 sequences.
components: 107
randoop.util.Randomness: total calls to random: 598
randoop.util.Randomness: total calls to random: 599
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 600
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 107 sequences.
components: 107
randoop.util.Randomness: total calls to random: 601
randoop.util.Randomness: total calls to random: 602
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.normal() : var0 
var2 =  method : A.normal() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.normal() : var0 
var5 =  method : A.randomNumber() : var0 
var6 =  method : A.normal() : var0 
var7 =  method : A.randomNumber() : var0 
var8 =  method : A.normal() : var0 
var9 =  method : A.normal() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=10 [var1]  : true
<randoop.PrimValue, value=10 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=10 [var4]  : true
<randoop.PrimValue, value=0 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true
<randoop.PrimValue, value=0 [var7]  : true
<randoop.PrimValue, value=10 [var8]  : true
<randoop.PrimValue, value=10 [var9]  : true

allSequences.size()=109
-------------------------------------------
randoop.util.Randomness: total calls to random: 603
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 108 sequences.
components: 108
randoop.util.Randomness: total calls to random: 604
randoop.util.Randomness: total calls to random: 605
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 606
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 108 sequences.
components: 108
randoop.util.Randomness: total calls to random: 607
randoop.util.Randomness: total calls to random: 608
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.normal() : var0 
var2 =  method : A.randomNumber() : var0 
var3 =  method : A.randomNumber() : var0 
var4 =  method : A.normal() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=10 [var1]  : true
<randoop.PrimValue, value=0 [var2]  : true
<randoop.PrimValue, value=0 [var3]  : true
<randoop.PrimValue, value=10 [var4]  : true

allSequences.size()=110
-------------------------------------------
randoop.util.Randomness: total calls to random: 609
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 109 sequences.
components: 109
randoop.util.Randomness: total calls to random: 610
randoop.util.Randomness: total calls to random: 611
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 612
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 109 sequences.
components: 109
randoop.util.Randomness: total calls to random: 613
randoop.util.Randomness: total calls to random: 614
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.normal() : var0 
var2 =  method : A.normal() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.normal() : var0 
var5 =  method : A.randomNumber() : var0 
var6 =  method : A.randomNumber() : var0 
var7 =  method : A.randomNumber() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=10 [var1]  : true
<randoop.PrimValue, value=10 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=10 [var4]  : true
<randoop.PrimValue, value=0 [var5]  : true
<randoop.PrimValue, value=0 [var6]  : true
<randoop.PrimValue, value=0 [var7]  : true

allSequences.size()=111
-------------------------------------------
randoop.util.Randomness: total calls to random: 615
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 110 sequences.
components: 110
randoop.util.Randomness: total calls to random: 616
randoop.util.Randomness: total calls to random: 617
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.randomNumber() : var0 
var2 =  method : A.randomNumber() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.normal() : var0 
var6 =  method : A.randomNumber() : var0 
var7 =  method : A.normal() : var0 
var8 =  method : A.randomNumber() : var0 
var9 =  method : A.normal() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=0 [var1]  : true
<randoop.PrimValue, value=0 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=10 [var5]  : true
<randoop.PrimValue, value=0 [var6]  : true
<randoop.PrimValue, value=10 [var7]  : true
<randoop.PrimValue, value=0 [var8]  : true
<randoop.PrimValue, value=10 [var9]  : true

allSequences.size()=112
-------------------------------------------
randoop.util.Randomness: total calls to random: 618
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 111 sequences.
components: 111
randoop.util.Randomness: total calls to random: 619
randoop.util.Randomness: total calls to random: 620
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 621
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 111 sequences.
components: 111
randoop.util.Randomness: total calls to random: 622
randoop.util.Randomness: total calls to random: 623
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 624
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 111 sequences.
components: 111
randoop.util.Randomness: total calls to random: 625
randoop.util.Randomness: total calls to random: 626
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.randomNumber() : var0 
var2 =  method : A.randomNumber() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.normal() : var0 
var6 =  method : A.normal() : var0 
var7 =  method : A.randomNumber() : var0 
var8 =  method : A.normal() : var0 
var9 =  method : A.randomNumber() : var0 
var10 =  method : A.normal() : var0 
var11 =  method : A.normal() : var0 
var12 =  method : A.randomNumber() : var0 
var13 =  method : A.randomNumber() : var0 
var14 =  method : A.randomNumber() : var0 
var15 =  method : A.normal() : var0 
var16 =  method : A.normal() : var0 
var17 =  method : A.randomNumber() : var0 
var18 =  method : A.randomNumber() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Making index 12 inactive (value is a primitive)
Making index 13 inactive (value is a primitive)
Making index 14 inactive (value is a primitive)
Making index 15 inactive (value is a primitive)
Making index 16 inactive (value is a primitive)
Making index 17 inactive (value is a primitive)
Making index 18 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var10 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var11 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var12 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var13 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var14 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var15 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var16 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var17 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var18 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=0 [var1]  : true
<randoop.PrimValue, value=0 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=10 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true
<randoop.PrimValue, value=0 [var7]  : true
<randoop.PrimValue, value=10 [var8]  : true
<randoop.PrimValue, value=0 [var9]  : true
<randoop.PrimValue, value=10 [var10]  : true
<randoop.PrimValue, value=10 [var11]  : true
<randoop.PrimValue, value=0 [var12]  : true
<randoop.PrimValue, value=0 [var13]  : true
<randoop.PrimValue, value=0 [var14]  : true
<randoop.PrimValue, value=10 [var15]  : true
<randoop.PrimValue, value=10 [var16]  : true
<randoop.PrimValue, value=0 [var17]  : true
<randoop.PrimValue, value=0 [var18]  : true

allSequences.size()=113
-------------------------------------------
randoop.util.Randomness: total calls to random: 627
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 112 sequences.
components: 112
randoop.util.Randomness: total calls to random: 628
randoop.util.Randomness: total calls to random: 629
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.normal() : var0 
var2 =  method : A.normal() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.normal() : var0 
var5 =  method : A.normal() : var0 
var6 =  method : A.randomNumber() : var0 
var7 =  method : A.randomNumber() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=10 [var1]  : true
<randoop.PrimValue, value=10 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=10 [var4]  : true
<randoop.PrimValue, value=10 [var5]  : true
<randoop.PrimValue, value=0 [var6]  : true
<randoop.PrimValue, value=0 [var7]  : true

allSequences.size()=114
-------------------------------------------
randoop.util.Randomness: total calls to random: 630
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 113 sequences.
components: 113
randoop.util.Randomness: total calls to random: 631
randoop.util.Randomness: total calls to random: 632
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 633
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 113 sequences.
components: 113
randoop.util.Randomness: total calls to random: 634
randoop.util.Randomness: total calls to random: 635
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 636
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 113 sequences.
components: 113
randoop.util.Randomness: total calls to random: 637
randoop.util.Randomness: total calls to random: 638
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.normal() : var0 
var2 =  method : A.normal() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.normal() : var0 
var5 =  method : A.normal() : var0 
var6 =  method : A.normal() : var0 
var7 =  method : A.normal() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=10 [var1]  : true
<randoop.PrimValue, value=10 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=10 [var4]  : true
<randoop.PrimValue, value=10 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true
<randoop.PrimValue, value=10 [var7]  : true

allSequences.size()=115
-------------------------------------------
randoop.util.Randomness: total calls to random: 639
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 114 sequences.
components: 114
randoop.util.Randomness: total calls to random: 640
randoop.util.Randomness: total calls to random: 641
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 642
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 114 sequences.
components: 114
randoop.util.Randomness: total calls to random: 643
randoop.util.Randomness: total calls to random: 644
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 645
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 114 sequences.
components: 114
randoop.util.Randomness: total calls to random: 646
randoop.util.Randomness: total calls to random: 647
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 648
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 114 sequences.
components: 114
randoop.util.Randomness: total calls to random: 649
randoop.util.Randomness: total calls to random: 650
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 651
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 114 sequences.
components: 114
randoop.util.Randomness: total calls to random: 652
randoop.util.Randomness: total calls to random: 653
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.normal() : var0 
var2 =  method : A.normal() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.randomNumber() : var0 
var6 =  method : A.randomNumber() : var0 
var7 =  method : A.normal() : var0 
var8 =  method : A.randomNumber() : var0 
var9 =  method : A.normal() : var0 
var10 =  method : A.normal() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var10 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=10 [var1]  : true
<randoop.PrimValue, value=10 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=0 [var5]  : true
<randoop.PrimValue, value=0 [var6]  : true
<randoop.PrimValue, value=10 [var7]  : true
<randoop.PrimValue, value=0 [var8]  : true
<randoop.PrimValue, value=10 [var9]  : true
<randoop.PrimValue, value=10 [var10]  : true

allSequences.size()=116
-------------------------------------------
randoop.util.Randomness: total calls to random: 654
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 115 sequences.
components: 115
randoop.util.Randomness: total calls to random: 655
randoop.util.Randomness: total calls to random: 656
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 657
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 115 sequences.
components: 115
randoop.util.Randomness: total calls to random: 658
randoop.util.Randomness: total calls to random: 659
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 660
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 115 sequences.
components: 115
randoop.util.Randomness: total calls to random: 661
randoop.util.Randomness: total calls to random: 662
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.normal() : var0 
var2 =  method : A.randomNumber() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.normal() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=10 [var1]  : true
<randoop.PrimValue, value=0 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=10 [var5]  : true

allSequences.size()=117
-------------------------------------------
randoop.util.Randomness: total calls to random: 663
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 116 sequences.
components: 116
randoop.util.Randomness: total calls to random: 664
randoop.util.Randomness: total calls to random: 665
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 666
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 116 sequences.
components: 116
randoop.util.Randomness: total calls to random: 667
randoop.util.Randomness: total calls to random: 668
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.randomNumber() : var0 
var2 =  method : A.randomNumber() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.normal() : var0 
var5 =  method : A.normal() : var0 
var6 =  method : A.randomNumber() : var0 
var7 =  method : A.normal() : var0 
var8 =  method : A.randomNumber() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=0 [var1]  : true
<randoop.PrimValue, value=0 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=10 [var4]  : true
<randoop.PrimValue, value=10 [var5]  : true
<randoop.PrimValue, value=0 [var6]  : true
<randoop.PrimValue, value=10 [var7]  : true
<randoop.PrimValue, value=0 [var8]  : true

allSequences.size()=118
-------------------------------------------
randoop.util.Randomness: total calls to random: 669
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 117 sequences.
components: 117
randoop.util.Randomness: total calls to random: 670
randoop.util.Randomness: total calls to random: 671
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 672
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 117 sequences.
components: 117
randoop.util.Randomness: total calls to random: 673
randoop.util.Randomness: total calls to random: 674
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.randomNumber() : var0 
var2 =  method : A.randomNumber() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.normal() : var0 
var5 =  method : A.normal() : var0 
var6 =  method : A.randomNumber() : var0 
var7 =  method : A.normal() : var0 
var8 =  method : A.randomNumber() : var0 
var9 =  method : A.randomNumber() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=0 [var1]  : true
<randoop.PrimValue, value=0 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=10 [var4]  : true
<randoop.PrimValue, value=10 [var5]  : true
<randoop.PrimValue, value=0 [var6]  : true
<randoop.PrimValue, value=10 [var7]  : true
<randoop.PrimValue, value=0 [var8]  : true
<randoop.PrimValue, value=0 [var9]  : true

allSequences.size()=119
-------------------------------------------
randoop.util.Randomness: total calls to random: 675
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 118 sequences.
components: 118
randoop.util.Randomness: total calls to random: 676
randoop.util.Randomness: total calls to random: 677
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 678
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 118 sequences.
components: 118
randoop.util.Randomness: total calls to random: 679
randoop.util.Randomness: total calls to random: 680
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 681
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 118 sequences.
components: 118
randoop.util.Randomness: total calls to random: 682
randoop.util.Randomness: total calls to random: 683
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.normal() : var0 
var2 =  method : A.randomNumber() : var0 
var3 =  method : A.randomNumber() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.randomNumber() : var0 
var6 =  method : A.randomNumber() : var0 
var7 =  method : A.randomNumber() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=10 [var1]  : true
<randoop.PrimValue, value=0 [var2]  : true
<randoop.PrimValue, value=0 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=0 [var5]  : true
<randoop.PrimValue, value=0 [var6]  : true
<randoop.PrimValue, value=0 [var7]  : true

allSequences.size()=120
-------------------------------------------
randoop.util.Randomness: total calls to random: 684
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 119 sequences.
components: 119
randoop.util.Randomness: total calls to random: 685
randoop.util.Randomness: total calls to random: 686
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 687
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 119 sequences.
components: 119
randoop.util.Randomness: total calls to random: 688
randoop.util.Randomness: total calls to random: 689
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.normal() : var0 
var2 =  method : A.normal() : var0 
var3 =  method : A.randomNumber() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.randomNumber() : var0 
var6 =  method : A.randomNumber() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=10 [var1]  : true
<randoop.PrimValue, value=10 [var2]  : true
<randoop.PrimValue, value=0 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=0 [var5]  : true
<randoop.PrimValue, value=0 [var6]  : true

allSequences.size()=121
-------------------------------------------
randoop.util.Randomness: total calls to random: 690
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 120 sequences.
components: 120
randoop.util.Randomness: total calls to random: 691
randoop.util.Randomness: total calls to random: 692
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.randomNumber() : var0 
var2 =  method : A.randomNumber() : var0 
var3 =  method : A.randomNumber() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.normal() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=0 [var1]  : true
<randoop.PrimValue, value=0 [var2]  : true
<randoop.PrimValue, value=0 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=10 [var5]  : true

allSequences.size()=122
-------------------------------------------
randoop.util.Randomness: total calls to random: 693
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 121 sequences.
components: 121
randoop.util.Randomness: total calls to random: 694
randoop.util.Randomness: total calls to random: 695
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.normal() : var0 
var2 =  method : A.normal() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.normal() : var0 
var5 =  method : A.randomNumber() : var0 
var6 =  method : A.normal() : var0 
var7 =  method : A.normal() : var0 
var8 =  method : A.normal() : var0 
var9 =  method : A.randomNumber() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=10 [var1]  : true
<randoop.PrimValue, value=10 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=10 [var4]  : true
<randoop.PrimValue, value=0 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true
<randoop.PrimValue, value=10 [var7]  : true
<randoop.PrimValue, value=10 [var8]  : true
<randoop.PrimValue, value=0 [var9]  : true

allSequences.size()=123
-------------------------------------------
randoop.util.Randomness: total calls to random: 696
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 122 sequences.
components: 122
randoop.util.Randomness: total calls to random: 697
randoop.util.Randomness: total calls to random: 698
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.normal() : var0 
var2 =  method : A.normal() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.randomNumber() : var0 
var6 =  method : A.randomNumber() : var0 
var7 =  method : A.normal() : var0 
var8 =  method : A.randomNumber() : var0 
var9 =  method : A.normal() : var0 
var10 =  method : A.normal() : var0 
var11 =  method : A.randomNumber() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var10 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var11 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=10 [var1]  : true
<randoop.PrimValue, value=10 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=0 [var5]  : true
<randoop.PrimValue, value=0 [var6]  : true
<randoop.PrimValue, value=10 [var7]  : true
<randoop.PrimValue, value=0 [var8]  : true
<randoop.PrimValue, value=10 [var9]  : true
<randoop.PrimValue, value=10 [var10]  : true
<randoop.PrimValue, value=0 [var11]  : true

allSequences.size()=124
-------------------------------------------
randoop.util.Randomness: total calls to random: 699
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 123 sequences.
components: 123
randoop.util.Randomness: total calls to random: 700
randoop.util.Randomness: total calls to random: 701
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 702
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 123 sequences.
components: 123
randoop.util.Randomness: total calls to random: 703
randoop.util.Randomness: total calls to random: 704
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 705
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 123 sequences.
components: 123
randoop.util.Randomness: total calls to random: 706
randoop.util.Randomness: total calls to random: 707
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 708
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 123 sequences.
components: 123
randoop.util.Randomness: total calls to random: 709
randoop.util.Randomness: total calls to random: 710
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.normal() : var0 
var2 =  method : A.normal() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.normal() : var0 
var5 =  method : A.randomNumber() : var0 
var6 =  method : A.normal() : var0 
var7 =  method : A.normal() : var0 
var8 =  method : A.randomNumber() : var0 
var9 =  method : A.randomNumber() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=10 [var1]  : true
<randoop.PrimValue, value=10 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=10 [var4]  : true
<randoop.PrimValue, value=0 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true
<randoop.PrimValue, value=10 [var7]  : true
<randoop.PrimValue, value=0 [var8]  : true
<randoop.PrimValue, value=0 [var9]  : true

allSequences.size()=125
-------------------------------------------
randoop.util.Randomness: total calls to random: 711
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 124 sequences.
components: 124
randoop.util.Randomness: total calls to random: 712
randoop.util.Randomness: total calls to random: 713
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 714
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 124 sequences.
components: 124
randoop.util.Randomness: total calls to random: 715
randoop.util.Randomness: total calls to random: 716
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.randomNumber() : var0 
var2 =  method : A.randomNumber() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.normal() : var0 
var5 =  method : A.normal() : var0 
var6 =  method : A.randomNumber() : var0 
var7 =  method : A.normal() : var0 
var8 =  method : A.normal() : var0 
var9 =  method : A.normal() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=0 [var1]  : true
<randoop.PrimValue, value=0 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=10 [var4]  : true
<randoop.PrimValue, value=10 [var5]  : true
<randoop.PrimValue, value=0 [var6]  : true
<randoop.PrimValue, value=10 [var7]  : true
<randoop.PrimValue, value=10 [var8]  : true
<randoop.PrimValue, value=10 [var9]  : true

allSequences.size()=126
-------------------------------------------
randoop.util.Randomness: total calls to random: 717
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 125 sequences.
components: 125
randoop.util.Randomness: total calls to random: 718
randoop.util.Randomness: total calls to random: 719
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.normal() : var0 
var2 =  method : A.normal() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.normal() : var0 
var5 =  method : A.randomNumber() : var0 
var6 =  method : A.randomNumber() : var0 
var7 =  method : A.randomNumber() : var0 
var8 =  method : A.randomNumber() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=10 [var1]  : true
<randoop.PrimValue, value=10 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=10 [var4]  : true
<randoop.PrimValue, value=0 [var5]  : true
<randoop.PrimValue, value=0 [var6]  : true
<randoop.PrimValue, value=0 [var7]  : true
<randoop.PrimValue, value=0 [var8]  : true

allSequences.size()=127
-------------------------------------------
randoop.util.Randomness: total calls to random: 720
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 126 sequences.
components: 126
randoop.util.Randomness: total calls to random: 721
randoop.util.Randomness: total calls to random: 722
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.randomNumber() : var0 
var2 =  method : A.randomNumber() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.normal() : var0 
var6 =  method : A.normal() : var0 
var7 =  method : A.randomNumber() : var0 
var8 =  method : A.normal() : var0 
var9 =  method : A.randomNumber() : var0 
var10 =  method : A.randomNumber() : var0 
var11 =  method : A.normal() : var0 
var12 =  method : A.normal() : var0 
var13 =  method : A.randomNumber() : var0 
var14 =  method : A.randomNumber() : var0 
var15 =  method : A.normal() : var0 
var16 =  method : A.randomNumber() : var0 
var17 =  method : A.normal() : var0 
var18 =  method : A.randomNumber() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Making index 12 inactive (value is a primitive)
Making index 13 inactive (value is a primitive)
Making index 14 inactive (value is a primitive)
Making index 15 inactive (value is a primitive)
Making index 16 inactive (value is a primitive)
Making index 17 inactive (value is a primitive)
Making index 18 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var10 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var11 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var12 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var13 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var14 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var15 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var16 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var17 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var18 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=0 [var1]  : true
<randoop.PrimValue, value=0 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=10 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true
<randoop.PrimValue, value=0 [var7]  : true
<randoop.PrimValue, value=10 [var8]  : true
<randoop.PrimValue, value=0 [var9]  : true
<randoop.PrimValue, value=0 [var10]  : true
<randoop.PrimValue, value=10 [var11]  : true
<randoop.PrimValue, value=10 [var12]  : true
<randoop.PrimValue, value=0 [var13]  : true
<randoop.PrimValue, value=0 [var14]  : true
<randoop.PrimValue, value=10 [var15]  : true
<randoop.PrimValue, value=0 [var16]  : true
<randoop.PrimValue, value=10 [var17]  : true
<randoop.PrimValue, value=0 [var18]  : true

allSequences.size()=128
-------------------------------------------
randoop.util.Randomness: total calls to random: 723
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 127 sequences.
components: 127
randoop.util.Randomness: total calls to random: 724
randoop.util.Randomness: total calls to random: 725
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 726
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 127 sequences.
components: 127
randoop.util.Randomness: total calls to random: 727
randoop.util.Randomness: total calls to random: 728
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 729
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 127 sequences.
components: 127
randoop.util.Randomness: total calls to random: 730
randoop.util.Randomness: total calls to random: 731
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 732
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 127 sequences.
components: 127
randoop.util.Randomness: total calls to random: 733
randoop.util.Randomness: total calls to random: 734
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.normal() : var0 
var2 =  method : A.normal() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.normal() : var0 
var5 =  method : A.normal() : var0 
var6 =  method : A.randomNumber() : var0 
var7 =  method : A.randomNumber() : var0 
var8 =  method : A.randomNumber() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=10 [var1]  : true
<randoop.PrimValue, value=10 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=10 [var4]  : true
<randoop.PrimValue, value=10 [var5]  : true
<randoop.PrimValue, value=0 [var6]  : true
<randoop.PrimValue, value=0 [var7]  : true
<randoop.PrimValue, value=0 [var8]  : true

allSequences.size()=129
-------------------------------------------
randoop.util.Randomness: total calls to random: 735
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 128 sequences.
components: 128
randoop.util.Randomness: total calls to random: 736
randoop.util.Randomness: total calls to random: 737
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 738
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 128 sequences.
components: 128
randoop.util.Randomness: total calls to random: 739
randoop.util.Randomness: total calls to random: 740
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.normal() : var0 
var2 =  method : A.normal() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.randomNumber() : var0 
var6 =  method : A.randomNumber() : var0 
var7 =  method : A.normal() : var0 
var8 =  method : A.randomNumber() : var0 
var9 =  method : A.randomNumber() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=10 [var1]  : true
<randoop.PrimValue, value=10 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=0 [var5]  : true
<randoop.PrimValue, value=0 [var6]  : true
<randoop.PrimValue, value=10 [var7]  : true
<randoop.PrimValue, value=0 [var8]  : true
<randoop.PrimValue, value=0 [var9]  : true

allSequences.size()=130
-------------------------------------------
randoop.util.Randomness: total calls to random: 741
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 129 sequences.
components: 129
randoop.util.Randomness: total calls to random: 742
randoop.util.Randomness: total calls to random: 743
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.randomNumber() : var0 
var2 =  method : A.randomNumber() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.normal() : var0 
var6 =  method : A.normal() : var0 
var7 =  method : A.randomNumber() : var0 
var8 =  method : A.normal() : var0 
var9 =  method : A.randomNumber() : var0 
var10 =  method : A.randomNumber() : var0 
var11 =  method : A.normal() : var0 
var12 =  method : A.normal() : var0 
var13 =  method : A.randomNumber() : var0 
var14 =  method : A.randomNumber() : var0 
var15 =  method : A.normal() : var0 
var16 =  method : A.normal() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Making index 12 inactive (value is a primitive)
Making index 13 inactive (value is a primitive)
Making index 14 inactive (value is a primitive)
Making index 15 inactive (value is a primitive)
Making index 16 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var10 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var11 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var12 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var13 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var14 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var15 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var16 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=0 [var1]  : true
<randoop.PrimValue, value=0 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=10 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true
<randoop.PrimValue, value=0 [var7]  : true
<randoop.PrimValue, value=10 [var8]  : true
<randoop.PrimValue, value=0 [var9]  : true
<randoop.PrimValue, value=0 [var10]  : true
<randoop.PrimValue, value=10 [var11]  : true
<randoop.PrimValue, value=10 [var12]  : true
<randoop.PrimValue, value=0 [var13]  : true
<randoop.PrimValue, value=0 [var14]  : true
<randoop.PrimValue, value=10 [var15]  : true
<randoop.PrimValue, value=10 [var16]  : true

allSequences.size()=131
-------------------------------------------
randoop.util.Randomness: total calls to random: 744
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 130 sequences.
components: 130
randoop.util.Randomness: total calls to random: 745
randoop.util.Randomness: total calls to random: 746
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 747
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 130 sequences.
components: 130
randoop.util.Randomness: total calls to random: 748
randoop.util.Randomness: total calls to random: 749
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.randomNumber() : var0 
var2 =  method : A.randomNumber() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.normal() : var0 
var6 =  method : A.normal() : var0 
var7 =  method : A.randomNumber() : var0 
var8 =  method : A.normal() : var0 
var9 =  method : A.randomNumber() : var0 
var10 =  method : A.randomNumber() : var0 
var11 =  method : A.normal() : var0 
var12 =  method : A.normal() : var0 
var13 =  method : A.randomNumber() : var0 
var14 =  method : A.randomNumber() : var0 
var15 =  method : A.normal() : var0 
var16 =  method : A.randomNumber() : var0 
var17 =  method : A.normal() : var0 
var18 =  method : A.randomNumber() : var0 
var19 =  method : A.normal() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Making index 12 inactive (value is a primitive)
Making index 13 inactive (value is a primitive)
Making index 14 inactive (value is a primitive)
Making index 15 inactive (value is a primitive)
Making index 16 inactive (value is a primitive)
Making index 17 inactive (value is a primitive)
Making index 18 inactive (value is a primitive)
Making index 19 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var10 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var11 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var12 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var13 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var14 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var15 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var16 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var17 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var18 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var19 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=0 [var1]  : true
<randoop.PrimValue, value=0 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=10 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true
<randoop.PrimValue, value=0 [var7]  : true
<randoop.PrimValue, value=10 [var8]  : true
<randoop.PrimValue, value=0 [var9]  : true
<randoop.PrimValue, value=0 [var10]  : true
<randoop.PrimValue, value=10 [var11]  : true
<randoop.PrimValue, value=10 [var12]  : true
<randoop.PrimValue, value=0 [var13]  : true
<randoop.PrimValue, value=0 [var14]  : true
<randoop.PrimValue, value=10 [var15]  : true
<randoop.PrimValue, value=0 [var16]  : true
<randoop.PrimValue, value=10 [var17]  : true
<randoop.PrimValue, value=0 [var18]  : true
<randoop.PrimValue, value=10 [var19]  : true

allSequences.size()=132
-------------------------------------------
randoop.util.Randomness: total calls to random: 750
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 131 sequences.
components: 131
randoop.util.Randomness: total calls to random: 751
randoop.util.Randomness: total calls to random: 752
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.randomNumber() : var0 
var2 =  method : A.randomNumber() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.normal() : var0 
var6 =  method : A.normal() : var0 
var7 =  method : A.randomNumber() : var0 
var8 =  method : A.randomNumber() : var0 
var9 =  method : A.randomNumber() : var0 
var10 =  method : A.randomNumber() : var0 
var11 =  method : A.normal() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var10 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var11 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=0 [var1]  : true
<randoop.PrimValue, value=0 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=10 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true
<randoop.PrimValue, value=0 [var7]  : true
<randoop.PrimValue, value=0 [var8]  : true
<randoop.PrimValue, value=0 [var9]  : true
<randoop.PrimValue, value=0 [var10]  : true
<randoop.PrimValue, value=10 [var11]  : true

allSequences.size()=133
-------------------------------------------
randoop.util.Randomness: total calls to random: 753
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 132 sequences.
components: 132
randoop.util.Randomness: total calls to random: 754
randoop.util.Randomness: total calls to random: 755
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.randomNumber() : var0 
var2 =  method : A.randomNumber() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.normal() : var0 
var6 =  method : A.normal() : var0 
var7 =  method : A.randomNumber() : var0 
var8 =  method : A.normal() : var0 
var9 =  method : A.randomNumber() : var0 
var10 =  method : A.normal() : var0 
var11 =  method : A.normal() : var0 
var12 =  method : A.randomNumber() : var0 
var13 =  method : A.randomNumber() : var0 
var14 =  method : A.randomNumber() : var0 
var15 =  method : A.normal() : var0 
var16 =  method : A.normal() : var0 
var17 =  method : A.randomNumber() : var0 
var18 =  method : A.randomNumber() : var0 
var19 =  method : A.randomNumber() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Making index 12 inactive (value is a primitive)
Making index 13 inactive (value is a primitive)
Making index 14 inactive (value is a primitive)
Making index 15 inactive (value is a primitive)
Making index 16 inactive (value is a primitive)
Making index 17 inactive (value is a primitive)
Making index 18 inactive (value is a primitive)
Making index 19 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var10 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var11 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var12 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var13 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var14 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var15 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var16 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var17 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var18 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var19 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=0 [var1]  : true
<randoop.PrimValue, value=0 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=10 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true
<randoop.PrimValue, value=0 [var7]  : true
<randoop.PrimValue, value=10 [var8]  : true
<randoop.PrimValue, value=0 [var9]  : true
<randoop.PrimValue, value=10 [var10]  : true
<randoop.PrimValue, value=10 [var11]  : true
<randoop.PrimValue, value=0 [var12]  : true
<randoop.PrimValue, value=0 [var13]  : true
<randoop.PrimValue, value=0 [var14]  : true
<randoop.PrimValue, value=10 [var15]  : true
<randoop.PrimValue, value=10 [var16]  : true
<randoop.PrimValue, value=0 [var17]  : true
<randoop.PrimValue, value=0 [var18]  : true
<randoop.PrimValue, value=0 [var19]  : true

allSequences.size()=134
-------------------------------------------
randoop.util.Randomness: total calls to random: 756
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 133 sequences.
components: 133
randoop.util.Randomness: total calls to random: 757
randoop.util.Randomness: total calls to random: 758
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 759
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 133 sequences.
components: 133
randoop.util.Randomness: total calls to random: 760
randoop.util.Randomness: total calls to random: 761
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.randomNumber() : var0 
var2 =  method : A.randomNumber() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.normal() : var0 
var6 =  method : A.normal() : var0 
var7 =  method : A.randomNumber() : var0 
var8 =  method : A.normal() : var0 
var9 =  method : A.normal() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=0 [var1]  : true
<randoop.PrimValue, value=0 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=10 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true
<randoop.PrimValue, value=0 [var7]  : true
<randoop.PrimValue, value=10 [var8]  : true
<randoop.PrimValue, value=10 [var9]  : true

allSequences.size()=135
-------------------------------------------
randoop.util.Randomness: total calls to random: 762
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 134 sequences.
components: 134
randoop.util.Randomness: total calls to random: 763
randoop.util.Randomness: total calls to random: 764
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 765
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 134 sequences.
components: 134
randoop.util.Randomness: total calls to random: 766
randoop.util.Randomness: total calls to random: 767
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 768
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 134 sequences.
components: 134
randoop.util.Randomness: total calls to random: 769
randoop.util.Randomness: total calls to random: 770
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.randomNumber() : var0 
var2 =  method : A.randomNumber() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.normal() : var0 
var6 =  method : A.normal() : var0 
var7 =  method : A.randomNumber() : var0 
var8 =  method : A.normal() : var0 
var9 =  method : A.randomNumber() : var0 
var10 =  method : A.randomNumber() : var0 
var11 =  method : A.normal() : var0 
var12 =  method : A.normal() : var0 
var13 =  method : A.normal() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Making index 12 inactive (value is a primitive)
Making index 13 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var10 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var11 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var12 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var13 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=0 [var1]  : true
<randoop.PrimValue, value=0 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=10 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true
<randoop.PrimValue, value=0 [var7]  : true
<randoop.PrimValue, value=10 [var8]  : true
<randoop.PrimValue, value=0 [var9]  : true
<randoop.PrimValue, value=0 [var10]  : true
<randoop.PrimValue, value=10 [var11]  : true
<randoop.PrimValue, value=10 [var12]  : true
<randoop.PrimValue, value=10 [var13]  : true

allSequences.size()=136
-------------------------------------------
randoop.util.Randomness: total calls to random: 771
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 135 sequences.
components: 135
randoop.util.Randomness: total calls to random: 772
randoop.util.Randomness: total calls to random: 773
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.normal() : var0 
var2 =  method : A.randomNumber() : var0 
var3 =  method : A.randomNumber() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.normal() : var0 
var6 =  method : A.normal() : var0 
var7 =  method : A.normal() : var0 
var8 =  method : A.randomNumber() : var0 
var9 =  method : A.normal() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=10 [var1]  : true
<randoop.PrimValue, value=0 [var2]  : true
<randoop.PrimValue, value=0 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=10 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true
<randoop.PrimValue, value=10 [var7]  : true
<randoop.PrimValue, value=0 [var8]  : true
<randoop.PrimValue, value=10 [var9]  : true

allSequences.size()=137
-------------------------------------------
randoop.util.Randomness: total calls to random: 774
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 136 sequences.
components: 136
randoop.util.Randomness: total calls to random: 775
randoop.util.Randomness: total calls to random: 776
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.normal() : var0 
var2 =  method : A.normal() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.normal() : var0 
var5 =  method : A.randomNumber() : var0 
var6 =  method : A.normal() : var0 
var7 =  method : A.normal() : var0 
var8 =  method : A.randomNumber() : var0 
var9 =  method : A.randomNumber() : var0 
var10 =  method : A.normal() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var10 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=10 [var1]  : true
<randoop.PrimValue, value=10 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=10 [var4]  : true
<randoop.PrimValue, value=0 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true
<randoop.PrimValue, value=10 [var7]  : true
<randoop.PrimValue, value=0 [var8]  : true
<randoop.PrimValue, value=0 [var9]  : true
<randoop.PrimValue, value=10 [var10]  : true

allSequences.size()=138
-------------------------------------------
randoop.util.Randomness: total calls to random: 777
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 137 sequences.
components: 137
randoop.util.Randomness: total calls to random: 778
randoop.util.Randomness: total calls to random: 779
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 780
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 137 sequences.
components: 137
randoop.util.Randomness: total calls to random: 781
randoop.util.Randomness: total calls to random: 782
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 783
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 137 sequences.
components: 137
randoop.util.Randomness: total calls to random: 784
randoop.util.Randomness: total calls to random: 785
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 786
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 137 sequences.
components: 137
randoop.util.Randomness: total calls to random: 787
randoop.util.Randomness: total calls to random: 788
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.normal() : var0 
var2 =  method : A.normal() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.normal() : var0 
var5 =  method : A.randomNumber() : var0 
var6 =  method : A.normal() : var0 
var7 =  method : A.randomNumber() : var0 
var8 =  method : A.normal() : var0 
var9 =  method : A.normal() : var0 
var10 =  method : A.randomNumber() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var10 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=10 [var1]  : true
<randoop.PrimValue, value=10 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=10 [var4]  : true
<randoop.PrimValue, value=0 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true
<randoop.PrimValue, value=0 [var7]  : true
<randoop.PrimValue, value=10 [var8]  : true
<randoop.PrimValue, value=10 [var9]  : true
<randoop.PrimValue, value=0 [var10]  : true

allSequences.size()=139
-------------------------------------------
randoop.util.Randomness: total calls to random: 789
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 138 sequences.
components: 138
randoop.util.Randomness: total calls to random: 790
randoop.util.Randomness: total calls to random: 791
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.randomNumber() : var0 
var2 =  method : A.randomNumber() : var0 
var3 =  method : A.randomNumber() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.randomNumber() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=0 [var1]  : true
<randoop.PrimValue, value=0 [var2]  : true
<randoop.PrimValue, value=0 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=0 [var5]  : true

allSequences.size()=140
-------------------------------------------
randoop.util.Randomness: total calls to random: 792
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 139 sequences.
components: 139
randoop.util.Randomness: total calls to random: 793
randoop.util.Randomness: total calls to random: 794
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 795
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 139 sequences.
components: 139
randoop.util.Randomness: total calls to random: 796
randoop.util.Randomness: total calls to random: 797
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 798
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 139 sequences.
components: 139
randoop.util.Randomness: total calls to random: 799
randoop.util.Randomness: total calls to random: 800
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.normal() : var0 
var2 =  method : A.randomNumber() : var0 
var3 =  method : A.randomNumber() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.randomNumber() : var0 
var6 =  method : A.normal() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=10 [var1]  : true
<randoop.PrimValue, value=0 [var2]  : true
<randoop.PrimValue, value=0 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=0 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true

allSequences.size()=141
-------------------------------------------
randoop.util.Randomness: total calls to random: 801
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 140 sequences.
components: 140
randoop.util.Randomness: total calls to random: 802
randoop.util.Randomness: total calls to random: 803
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 804
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 140 sequences.
components: 140
randoop.util.Randomness: total calls to random: 805
randoop.util.Randomness: total calls to random: 806
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.normal() : var0 
var2 =  method : A.normal() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.normal() : var0 
var5 =  method : A.randomNumber() : var0 
var6 =  method : A.normal() : var0 
var7 =  method : A.normal() : var0 
var8 =  method : A.normal() : var0 
var9 =  method : A.randomNumber() : var0 
var10 =  method : A.randomNumber() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var10 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=10 [var1]  : true
<randoop.PrimValue, value=10 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=10 [var4]  : true
<randoop.PrimValue, value=0 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true
<randoop.PrimValue, value=10 [var7]  : true
<randoop.PrimValue, value=10 [var8]  : true
<randoop.PrimValue, value=0 [var9]  : true
<randoop.PrimValue, value=0 [var10]  : true

allSequences.size()=142
-------------------------------------------
randoop.util.Randomness: total calls to random: 807
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 141 sequences.
components: 141
randoop.util.Randomness: total calls to random: 808
randoop.util.Randomness: total calls to random: 809
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 810
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 141 sequences.
components: 141
randoop.util.Randomness: total calls to random: 811
randoop.util.Randomness: total calls to random: 812
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 813
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 141 sequences.
components: 141
randoop.util.Randomness: total calls to random: 814
randoop.util.Randomness: total calls to random: 815
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 816
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 141 sequences.
components: 141
randoop.util.Randomness: total calls to random: 817
randoop.util.Randomness: total calls to random: 818
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.normal() : var0 
var2 =  method : A.normal() : var0 
var3 =  method : A.randomNumber() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.randomNumber() : var0 
var6 =  method : A.normal() : var0 
var7 =  method : A.randomNumber() : var0 
var8 =  method : A.normal() : var0 
var9 =  method : A.normal() : var0 
var10 =  method : A.normal() : var0 
var11 =  method : A.randomNumber() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var10 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var11 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=10 [var1]  : true
<randoop.PrimValue, value=10 [var2]  : true
<randoop.PrimValue, value=0 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=0 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true
<randoop.PrimValue, value=0 [var7]  : true
<randoop.PrimValue, value=10 [var8]  : true
<randoop.PrimValue, value=10 [var9]  : true
<randoop.PrimValue, value=10 [var10]  : true
<randoop.PrimValue, value=0 [var11]  : true

allSequences.size()=143
-------------------------------------------
randoop.util.Randomness: total calls to random: 819
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 142 sequences.
components: 142
randoop.util.Randomness: total calls to random: 820
randoop.util.Randomness: total calls to random: 821
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.normal() : var0 
var2 =  method : A.randomNumber() : var0 
var3 =  method : A.randomNumber() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.randomNumber() : var0 
var6 =  method : A.randomNumber() : var0 
var7 =  method : A.randomNumber() : var0 
var8 =  method : A.randomNumber() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=10 [var1]  : true
<randoop.PrimValue, value=0 [var2]  : true
<randoop.PrimValue, value=0 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=0 [var5]  : true
<randoop.PrimValue, value=0 [var6]  : true
<randoop.PrimValue, value=0 [var7]  : true
<randoop.PrimValue, value=0 [var8]  : true

allSequences.size()=144
-------------------------------------------
randoop.util.Randomness: total calls to random: 822
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 143 sequences.
components: 143
randoop.util.Randomness: total calls to random: 823
randoop.util.Randomness: total calls to random: 824
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.randomNumber() : var0 
var2 =  method : A.randomNumber() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.normal() : var0 
var5 =  method : A.normal() : var0 
var6 =  method : A.randomNumber() : var0 
var7 =  method : A.normal() : var0 
var8 =  method : A.normal() : var0 
var9 =  method : A.normal() : var0 
var10 =  method : A.randomNumber() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var10 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=0 [var1]  : true
<randoop.PrimValue, value=0 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=10 [var4]  : true
<randoop.PrimValue, value=10 [var5]  : true
<randoop.PrimValue, value=0 [var6]  : true
<randoop.PrimValue, value=10 [var7]  : true
<randoop.PrimValue, value=10 [var8]  : true
<randoop.PrimValue, value=10 [var9]  : true
<randoop.PrimValue, value=0 [var10]  : true

allSequences.size()=145
-------------------------------------------
randoop.util.Randomness: total calls to random: 825
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 144 sequences.
components: 144
randoop.util.Randomness: total calls to random: 826
randoop.util.Randomness: total calls to random: 827
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 828
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 144 sequences.
components: 144
randoop.util.Randomness: total calls to random: 829
randoop.util.Randomness: total calls to random: 830
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 831
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 144 sequences.
components: 144
randoop.util.Randomness: total calls to random: 832
randoop.util.Randomness: total calls to random: 833
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.normal() : var0 
var2 =  method : A.normal() : var0 
var3 =  method : A.randomNumber() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.randomNumber() : var0 
var6 =  method : A.normal() : var0 
var7 =  method : A.randomNumber() : var0 
var8 =  method : A.normal() : var0 
var9 =  method : A.normal() : var0 
var10 =  method : A.normal() : var0 
var11 =  method : A.randomNumber() : var0 
var12 =  method : A.randomNumber() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Making index 12 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var10 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var11 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var12 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=10 [var1]  : true
<randoop.PrimValue, value=10 [var2]  : true
<randoop.PrimValue, value=0 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=0 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true
<randoop.PrimValue, value=0 [var7]  : true
<randoop.PrimValue, value=10 [var8]  : true
<randoop.PrimValue, value=10 [var9]  : true
<randoop.PrimValue, value=10 [var10]  : true
<randoop.PrimValue, value=0 [var11]  : true
<randoop.PrimValue, value=0 [var12]  : true

allSequences.size()=146
-------------------------------------------
randoop.util.Randomness: total calls to random: 834
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 145 sequences.
components: 145
randoop.util.Randomness: total calls to random: 835
randoop.util.Randomness: total calls to random: 836
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 837
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 145 sequences.
components: 145
randoop.util.Randomness: total calls to random: 838
randoop.util.Randomness: total calls to random: 839
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 840
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 145 sequences.
components: 145
randoop.util.Randomness: total calls to random: 841
randoop.util.Randomness: total calls to random: 842
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.randomNumber() : var0 
var2 =  method : A.randomNumber() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.normal() : var0 
var6 =  method : A.normal() : var0 
var7 =  method : A.randomNumber() : var0 
var8 =  method : A.randomNumber() : var0 
var9 =  method : A.randomNumber() : var0 
var10 =  method : A.randomNumber() : var0 
var11 =  method : A.normal() : var0 
var12 =  method : A.randomNumber() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Making index 12 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var10 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var11 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var12 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=0 [var1]  : true
<randoop.PrimValue, value=0 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=10 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true
<randoop.PrimValue, value=0 [var7]  : true
<randoop.PrimValue, value=0 [var8]  : true
<randoop.PrimValue, value=0 [var9]  : true
<randoop.PrimValue, value=0 [var10]  : true
<randoop.PrimValue, value=10 [var11]  : true
<randoop.PrimValue, value=0 [var12]  : true

allSequences.size()=147
-------------------------------------------
randoop.util.Randomness: total calls to random: 843
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 146 sequences.
components: 146
randoop.util.Randomness: total calls to random: 844
randoop.util.Randomness: total calls to random: 845
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.randomNumber() : var0 
var2 =  method : A.normal() : var0 
var3 =  method : A.randomNumber() : var0 
var4 =  method : A.normal() : var0 
var5 =  method : A.normal() : var0 
var6 =  method : A.randomNumber() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=0 [var1]  : true
<randoop.PrimValue, value=10 [var2]  : true
<randoop.PrimValue, value=0 [var3]  : true
<randoop.PrimValue, value=10 [var4]  : true
<randoop.PrimValue, value=10 [var5]  : true
<randoop.PrimValue, value=0 [var6]  : true

allSequences.size()=148
-------------------------------------------
randoop.util.Randomness: total calls to random: 846
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 147 sequences.
components: 147
randoop.util.Randomness: total calls to random: 847
randoop.util.Randomness: total calls to random: 848
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 849
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 147 sequences.
components: 147
randoop.util.Randomness: total calls to random: 850
randoop.util.Randomness: total calls to random: 851
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 852
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 147 sequences.
components: 147
randoop.util.Randomness: total calls to random: 853
randoop.util.Randomness: total calls to random: 854
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.randomNumber() : var0 
var2 =  method : A.randomNumber() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.normal() : var0 
var6 =  method : A.randomNumber() : var0 
var7 =  method : A.randomNumber() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=0 [var1]  : true
<randoop.PrimValue, value=0 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=10 [var5]  : true
<randoop.PrimValue, value=0 [var6]  : true
<randoop.PrimValue, value=0 [var7]  : true

allSequences.size()=149
-------------------------------------------
randoop.util.Randomness: total calls to random: 855
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 148 sequences.
components: 148
randoop.util.Randomness: total calls to random: 856
randoop.util.Randomness: total calls to random: 857
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.randomNumber() : var0 
var2 =  method : A.randomNumber() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.normal() : var0 
var6 =  method : A.normal() : var0 
var7 =  method : A.randomNumber() : var0 
var8 =  method : A.normal() : var0 
var9 =  method : A.randomNumber() : var0 
var10 =  method : A.normal() : var0 
var11 =  method : A.normal() : var0 
var12 =  method : A.randomNumber() : var0 
var13 =  method : A.randomNumber() : var0 
var14 =  method : A.randomNumber() : var0 
var15 =  method : A.normal() : var0 
var16 =  method : A.normal() : var0 
var17 =  method : A.randomNumber() : var0 
var18 =  method : A.randomNumber() : var0 
var19 =  method : A.randomNumber() : var0 
var20 =  method : A.normal() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Making index 12 inactive (value is a primitive)
Making index 13 inactive (value is a primitive)
Making index 14 inactive (value is a primitive)
Making index 15 inactive (value is a primitive)
Making index 16 inactive (value is a primitive)
Making index 17 inactive (value is a primitive)
Making index 18 inactive (value is a primitive)
Making index 19 inactive (value is a primitive)
Making index 20 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var10 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var11 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var12 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var13 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var14 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var15 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var16 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var17 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var18 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var19 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var20 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=0 [var1]  : true
<randoop.PrimValue, value=0 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=10 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true
<randoop.PrimValue, value=0 [var7]  : true
<randoop.PrimValue, value=10 [var8]  : true
<randoop.PrimValue, value=0 [var9]  : true
<randoop.PrimValue, value=10 [var10]  : true
<randoop.PrimValue, value=10 [var11]  : true
<randoop.PrimValue, value=0 [var12]  : true
<randoop.PrimValue, value=0 [var13]  : true
<randoop.PrimValue, value=0 [var14]  : true
<randoop.PrimValue, value=10 [var15]  : true
<randoop.PrimValue, value=10 [var16]  : true
<randoop.PrimValue, value=0 [var17]  : true
<randoop.PrimValue, value=0 [var18]  : true
<randoop.PrimValue, value=0 [var19]  : true
<randoop.PrimValue, value=10 [var20]  : true

allSequences.size()=150
-------------------------------------------
randoop.util.Randomness: total calls to random: 858
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 149 sequences.
components: 149
randoop.util.Randomness: total calls to random: 859
randoop.util.Randomness: total calls to random: 860
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 861
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 149 sequences.
components: 149
randoop.util.Randomness: total calls to random: 862
randoop.util.Randomness: total calls to random: 863
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.randomNumber() : var0 
var2 =  method : A.randomNumber() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.normal() : var0 
var6 =  method : A.normal() : var0 
var7 =  method : A.randomNumber() : var0 
var8 =  method : A.normal() : var0 
var9 =  method : A.normal() : var0 
var10 =  method : A.normal() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var10 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=0 [var1]  : true
<randoop.PrimValue, value=0 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=10 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true
<randoop.PrimValue, value=0 [var7]  : true
<randoop.PrimValue, value=10 [var8]  : true
<randoop.PrimValue, value=10 [var9]  : true
<randoop.PrimValue, value=10 [var10]  : true

allSequences.size()=151
-------------------------------------------
randoop.util.Randomness: total calls to random: 864
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 150 sequences.
components: 150
randoop.util.Randomness: total calls to random: 865
randoop.util.Randomness: total calls to random: 866
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.normal() : var0 
var2 =  method : A.randomNumber() : var0 
var3 =  method : A.randomNumber() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.normal() : var0 
var6 =  method : A.normal() : var0 
var7 =  method : A.normal() : var0 
var8 =  method : A.randomNumber() : var0 
var9 =  method : A.normal() : var0 
var10 =  method : A.randomNumber() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var10 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=10 [var1]  : true
<randoop.PrimValue, value=0 [var2]  : true
<randoop.PrimValue, value=0 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=10 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true
<randoop.PrimValue, value=10 [var7]  : true
<randoop.PrimValue, value=0 [var8]  : true
<randoop.PrimValue, value=10 [var9]  : true
<randoop.PrimValue, value=0 [var10]  : true

allSequences.size()=152
-------------------------------------------
randoop.util.Randomness: total calls to random: 867
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 151 sequences.
components: 151
randoop.util.Randomness: total calls to random: 868
randoop.util.Randomness: total calls to random: 869
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 870
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 151 sequences.
components: 151
randoop.util.Randomness: total calls to random: 871
randoop.util.Randomness: total calls to random: 872
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.randomNumber() : var0 
var2 =  method : A.randomNumber() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.normal() : var0 
var6 =  method : A.normal() : var0 
var7 =  method : A.randomNumber() : var0 
var8 =  method : A.normal() : var0 
var9 =  method : A.randomNumber() : var0 
var10 =  method : A.randomNumber() : var0 
var11 =  method : A.normal() : var0 
var12 =  method : A.normal() : var0 
var13 =  method : A.randomNumber() : var0 
var14 =  method : A.randomNumber() : var0 
var15 =  method : A.normal() : var0 
var16 =  method : A.randomNumber() : var0 
var17 =  method : A.normal() : var0 
var18 =  method : A.randomNumber() : var0 
var19 =  method : A.normal() : var0 
var20 =  method : A.normal() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Making index 12 inactive (value is a primitive)
Making index 13 inactive (value is a primitive)
Making index 14 inactive (value is a primitive)
Making index 15 inactive (value is a primitive)
Making index 16 inactive (value is a primitive)
Making index 17 inactive (value is a primitive)
Making index 18 inactive (value is a primitive)
Making index 19 inactive (value is a primitive)
Making index 20 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var10 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var11 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var12 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var13 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var14 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var15 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var16 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var17 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var18 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var19 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var20 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=0 [var1]  : true
<randoop.PrimValue, value=0 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=10 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true
<randoop.PrimValue, value=0 [var7]  : true
<randoop.PrimValue, value=10 [var8]  : true
<randoop.PrimValue, value=0 [var9]  : true
<randoop.PrimValue, value=0 [var10]  : true
<randoop.PrimValue, value=10 [var11]  : true
<randoop.PrimValue, value=10 [var12]  : true
<randoop.PrimValue, value=0 [var13]  : true
<randoop.PrimValue, value=0 [var14]  : true
<randoop.PrimValue, value=10 [var15]  : true
<randoop.PrimValue, value=0 [var16]  : true
<randoop.PrimValue, value=10 [var17]  : true
<randoop.PrimValue, value=0 [var18]  : true
<randoop.PrimValue, value=10 [var19]  : true
<randoop.PrimValue, value=10 [var20]  : true

allSequences.size()=153
-------------------------------------------
randoop.util.Randomness: total calls to random: 873
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 152 sequences.
components: 152
randoop.util.Randomness: total calls to random: 874
randoop.util.Randomness: total calls to random: 875
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 876
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 152 sequences.
components: 152
randoop.util.Randomness: total calls to random: 877
randoop.util.Randomness: total calls to random: 878
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.randomNumber() : var0 
var2 =  method : A.randomNumber() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.normal() : var0 
var6 =  method : A.normal() : var0 
var7 =  method : A.randomNumber() : var0 
var8 =  method : A.normal() : var0 
var9 =  method : A.randomNumber() : var0 
var10 =  method : A.normal() : var0 
var11 =  method : A.normal() : var0 
var12 =  method : A.randomNumber() : var0 
var13 =  method : A.randomNumber() : var0 
var14 =  method : A.randomNumber() : var0 
var15 =  method : A.normal() : var0 
var16 =  method : A.normal() : var0 
var17 =  method : A.randomNumber() : var0 
var18 =  method : A.randomNumber() : var0 
var19 =  method : A.randomNumber() : var0 
var20 =  method : A.normal() : var0 
var21 =  method : A.randomNumber() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Making index 12 inactive (value is a primitive)
Making index 13 inactive (value is a primitive)
Making index 14 inactive (value is a primitive)
Making index 15 inactive (value is a primitive)
Making index 16 inactive (value is a primitive)
Making index 17 inactive (value is a primitive)
Making index 18 inactive (value is a primitive)
Making index 19 inactive (value is a primitive)
Making index 20 inactive (value is a primitive)
Making index 21 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var10 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var11 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var12 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var13 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var14 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var15 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var16 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var17 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var18 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var19 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var20 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var21 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=0 [var1]  : true
<randoop.PrimValue, value=0 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=10 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true
<randoop.PrimValue, value=0 [var7]  : true
<randoop.PrimValue, value=10 [var8]  : true
<randoop.PrimValue, value=0 [var9]  : true
<randoop.PrimValue, value=10 [var10]  : true
<randoop.PrimValue, value=10 [var11]  : true
<randoop.PrimValue, value=0 [var12]  : true
<randoop.PrimValue, value=0 [var13]  : true
<randoop.PrimValue, value=0 [var14]  : true
<randoop.PrimValue, value=10 [var15]  : true
<randoop.PrimValue, value=10 [var16]  : true
<randoop.PrimValue, value=0 [var17]  : true
<randoop.PrimValue, value=0 [var18]  : true
<randoop.PrimValue, value=0 [var19]  : true
<randoop.PrimValue, value=10 [var20]  : true
<randoop.PrimValue, value=0 [var21]  : true

allSequences.size()=154
-------------------------------------------
randoop.util.Randomness: total calls to random: 879
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 153 sequences.
components: 153
randoop.util.Randomness: total calls to random: 880
randoop.util.Randomness: total calls to random: 881
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.randomNumber() : var0 
var2 =  method : A.normal() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.randomNumber() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=0 [var1]  : true
<randoop.PrimValue, value=10 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true

allSequences.size()=155
-------------------------------------------
randoop.util.Randomness: total calls to random: 882
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 154 sequences.
components: 154
randoop.util.Randomness: total calls to random: 883
randoop.util.Randomness: total calls to random: 884
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 885
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 154 sequences.
components: 154
randoop.util.Randomness: total calls to random: 886
randoop.util.Randomness: total calls to random: 887
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.randomNumber() : var0 
var2 =  method : A.randomNumber() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.normal() : var0 
var6 =  method : A.normal() : var0 
var7 =  method : A.randomNumber() : var0 
var8 =  method : A.normal() : var0 
var9 =  method : A.randomNumber() : var0 
var10 =  method : A.normal() : var0 
var11 =  method : A.normal() : var0 
var12 =  method : A.randomNumber() : var0 
var13 =  method : A.randomNumber() : var0 
var14 =  method : A.randomNumber() : var0 
var15 =  method : A.randomNumber() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Making index 12 inactive (value is a primitive)
Making index 13 inactive (value is a primitive)
Making index 14 inactive (value is a primitive)
Making index 15 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var10 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var11 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var12 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var13 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var14 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var15 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=0 [var1]  : true
<randoop.PrimValue, value=0 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=10 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true
<randoop.PrimValue, value=0 [var7]  : true
<randoop.PrimValue, value=10 [var8]  : true
<randoop.PrimValue, value=0 [var9]  : true
<randoop.PrimValue, value=10 [var10]  : true
<randoop.PrimValue, value=10 [var11]  : true
<randoop.PrimValue, value=0 [var12]  : true
<randoop.PrimValue, value=0 [var13]  : true
<randoop.PrimValue, value=0 [var14]  : true
<randoop.PrimValue, value=0 [var15]  : true

allSequences.size()=156
-------------------------------------------
randoop.util.Randomness: total calls to random: 888
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 155 sequences.
components: 155
randoop.util.Randomness: total calls to random: 889
randoop.util.Randomness: total calls to random: 890
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 891
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 155 sequences.
components: 155
randoop.util.Randomness: total calls to random: 892
randoop.util.Randomness: total calls to random: 893
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 894
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 155 sequences.
components: 155
randoop.util.Randomness: total calls to random: 895
randoop.util.Randomness: total calls to random: 896
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 897
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 155 sequences.
components: 155
randoop.util.Randomness: total calls to random: 898
randoop.util.Randomness: total calls to random: 899
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 900
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 155 sequences.
components: 155
randoop.util.Randomness: total calls to random: 901
randoop.util.Randomness: total calls to random: 902
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.normal() : var0 
var2 =  method : A.randomNumber() : var0 
var3 =  method : A.randomNumber() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.randomNumber() : var0 
var6 =  method : A.randomNumber() : var0 
var7 =  method : A.normal() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=10 [var1]  : true
<randoop.PrimValue, value=0 [var2]  : true
<randoop.PrimValue, value=0 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=0 [var5]  : true
<randoop.PrimValue, value=0 [var6]  : true
<randoop.PrimValue, value=10 [var7]  : true

allSequences.size()=157
-------------------------------------------
randoop.util.Randomness: total calls to random: 903
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 156 sequences.
components: 156
randoop.util.Randomness: total calls to random: 904
randoop.util.Randomness: total calls to random: 905
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 906
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 156 sequences.
components: 156
randoop.util.Randomness: total calls to random: 907
randoop.util.Randomness: total calls to random: 908
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.normal() : var0 
var2 =  method : A.normal() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.normal() : var0 
var6 =  method : A.normal() : var0 
var7 =  method : A.normal() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=10 [var1]  : true
<randoop.PrimValue, value=10 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=10 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true
<randoop.PrimValue, value=10 [var7]  : true

allSequences.size()=158
-------------------------------------------
randoop.util.Randomness: total calls to random: 909
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 157 sequences.
components: 157
randoop.util.Randomness: total calls to random: 910
randoop.util.Randomness: total calls to random: 911
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 912
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 157 sequences.
components: 157
randoop.util.Randomness: total calls to random: 913
randoop.util.Randomness: total calls to random: 914
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.normal() : var0 
var2 =  method : A.normal() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.normal() : var0 
var5 =  method : A.randomNumber() : var0 
var6 =  method : A.normal() : var0 
var7 =  method : A.normal() : var0 
var8 =  method : A.randomNumber() : var0 
var9 =  method : A.randomNumber() : var0 
var10 =  method : A.normal() : var0 
var11 =  method : A.randomNumber() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var10 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var11 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=10 [var1]  : true
<randoop.PrimValue, value=10 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=10 [var4]  : true
<randoop.PrimValue, value=0 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true
<randoop.PrimValue, value=10 [var7]  : true
<randoop.PrimValue, value=0 [var8]  : true
<randoop.PrimValue, value=0 [var9]  : true
<randoop.PrimValue, value=10 [var10]  : true
<randoop.PrimValue, value=0 [var11]  : true

allSequences.size()=159
-------------------------------------------
randoop.util.Randomness: total calls to random: 915
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 158 sequences.
components: 158
randoop.util.Randomness: total calls to random: 916
randoop.util.Randomness: total calls to random: 917
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 918
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 158 sequences.
components: 158
randoop.util.Randomness: total calls to random: 919
randoop.util.Randomness: total calls to random: 920
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 921
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 158 sequences.
components: 158
randoop.util.Randomness: total calls to random: 922
randoop.util.Randomness: total calls to random: 923
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 924
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 158 sequences.
components: 158
randoop.util.Randomness: total calls to random: 925
randoop.util.Randomness: total calls to random: 926
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.normal() : var0 
var2 =  method : A.normal() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.randomNumber() : var0 
var6 =  method : A.normal() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=10 [var1]  : true
<randoop.PrimValue, value=10 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=0 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true

allSequences.size()=160
-------------------------------------------
randoop.util.Randomness: total calls to random: 927
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 159 sequences.
components: 159
randoop.util.Randomness: total calls to random: 928
randoop.util.Randomness: total calls to random: 929
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 930
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 159 sequences.
components: 159
randoop.util.Randomness: total calls to random: 931
randoop.util.Randomness: total calls to random: 932
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 933
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 159 sequences.
components: 159
randoop.util.Randomness: total calls to random: 934
randoop.util.Randomness: total calls to random: 935
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.randomNumber() : var0 
var2 =  method : A.randomNumber() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.normal() : var0 
var5 =  method : A.normal() : var0 
var6 =  method : A.randomNumber() : var0 
var7 =  method : A.normal() : var0 
var8 =  method : A.normal() : var0 
var9 =  method : A.normal() : var0 
var10 =  method : A.normal() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var10 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=0 [var1]  : true
<randoop.PrimValue, value=0 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=10 [var4]  : true
<randoop.PrimValue, value=10 [var5]  : true
<randoop.PrimValue, value=0 [var6]  : true
<randoop.PrimValue, value=10 [var7]  : true
<randoop.PrimValue, value=10 [var8]  : true
<randoop.PrimValue, value=10 [var9]  : true
<randoop.PrimValue, value=10 [var10]  : true

allSequences.size()=161
-------------------------------------------
randoop.util.Randomness: total calls to random: 936
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 160 sequences.
components: 160
randoop.util.Randomness: total calls to random: 937
randoop.util.Randomness: total calls to random: 938
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 939
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 160 sequences.
components: 160
randoop.util.Randomness: total calls to random: 940
randoop.util.Randomness: total calls to random: 941
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 942
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 160 sequences.
components: 160
randoop.util.Randomness: total calls to random: 943
randoop.util.Randomness: total calls to random: 944
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.normal() : var0 
var2 =  method : A.randomNumber() : var0 
var3 =  method : A.randomNumber() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.normal() : var0 
var6 =  method : A.normal() : var0 
var7 =  method : A.normal() : var0 
var8 =  method : A.randomNumber() : var0 
var9 =  method : A.normal() : var0 
var10 =  method : A.randomNumber() : var0 
var11 =  method : A.randomNumber() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var10 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var11 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=10 [var1]  : true
<randoop.PrimValue, value=0 [var2]  : true
<randoop.PrimValue, value=0 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=10 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true
<randoop.PrimValue, value=10 [var7]  : true
<randoop.PrimValue, value=0 [var8]  : true
<randoop.PrimValue, value=10 [var9]  : true
<randoop.PrimValue, value=0 [var10]  : true
<randoop.PrimValue, value=0 [var11]  : true

allSequences.size()=162
-------------------------------------------
randoop.util.Randomness: total calls to random: 945
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 161 sequences.
components: 161
randoop.util.Randomness: total calls to random: 946
randoop.util.Randomness: total calls to random: 947
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 948
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 161 sequences.
components: 161
randoop.util.Randomness: total calls to random: 949
randoop.util.Randomness: total calls to random: 950
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 951
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 161 sequences.
components: 161
randoop.util.Randomness: total calls to random: 952
randoop.util.Randomness: total calls to random: 953
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 954
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 161 sequences.
components: 161
randoop.util.Randomness: total calls to random: 955
randoop.util.Randomness: total calls to random: 956
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.randomNumber() : var0 
var2 =  method : A.randomNumber() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.normal() : var0 
var6 =  method : A.normal() : var0 
var7 =  method : A.randomNumber() : var0 
var8 =  method : A.normal() : var0 
var9 =  method : A.randomNumber() : var0 
var10 =  method : A.normal() : var0 
var11 =  method : A.normal() : var0 
var12 =  method : A.randomNumber() : var0 
var13 =  method : A.randomNumber() : var0 
var14 =  method : A.normal() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Making index 12 inactive (value is a primitive)
Making index 13 inactive (value is a primitive)
Making index 14 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var10 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var11 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var12 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var13 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var14 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=0 [var1]  : true
<randoop.PrimValue, value=0 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=10 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true
<randoop.PrimValue, value=0 [var7]  : true
<randoop.PrimValue, value=10 [var8]  : true
<randoop.PrimValue, value=0 [var9]  : true
<randoop.PrimValue, value=10 [var10]  : true
<randoop.PrimValue, value=10 [var11]  : true
<randoop.PrimValue, value=0 [var12]  : true
<randoop.PrimValue, value=0 [var13]  : true
<randoop.PrimValue, value=10 [var14]  : true

allSequences.size()=163
-------------------------------------------
randoop.util.Randomness: total calls to random: 957
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 162 sequences.
components: 162
randoop.util.Randomness: total calls to random: 958
randoop.util.Randomness: total calls to random: 959
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.randomNumber() : var0 
var2 =  method : A.randomNumber() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.normal() : var0 
var5 =  method : A.normal() : var0 
var6 =  method : A.randomNumber() : var0 
var7 =  method : A.normal() : var0 
var8 =  method : A.normal() : var0 
var9 =  method : A.normal() : var0 
var10 =  method : A.randomNumber() : var0 
var11 =  method : A.normal() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var10 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var11 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=0 [var1]  : true
<randoop.PrimValue, value=0 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=10 [var4]  : true
<randoop.PrimValue, value=10 [var5]  : true
<randoop.PrimValue, value=0 [var6]  : true
<randoop.PrimValue, value=10 [var7]  : true
<randoop.PrimValue, value=10 [var8]  : true
<randoop.PrimValue, value=10 [var9]  : true
<randoop.PrimValue, value=0 [var10]  : true
<randoop.PrimValue, value=10 [var11]  : true

allSequences.size()=164
-------------------------------------------
randoop.util.Randomness: total calls to random: 960
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 163 sequences.
components: 163
randoop.util.Randomness: total calls to random: 961
randoop.util.Randomness: total calls to random: 962
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 963
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 163 sequences.
components: 163
randoop.util.Randomness: total calls to random: 964
randoop.util.Randomness: total calls to random: 965
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 966
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 163 sequences.
components: 163
randoop.util.Randomness: total calls to random: 967
randoop.util.Randomness: total calls to random: 968
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 969
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 163 sequences.
components: 163
randoop.util.Randomness: total calls to random: 970
randoop.util.Randomness: total calls to random: 971
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.normal() : var0 
var2 =  method : A.normal() : var0 
var3 =  method : A.randomNumber() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.randomNumber() : var0 
var6 =  method : A.normal() : var0 
var7 =  method : A.randomNumber() : var0 
var8 =  method : A.normal() : var0 
var9 =  method : A.normal() : var0 
var10 =  method : A.normal() : var0 
var11 =  method : A.normal() : var0 
var12 =  method : A.randomNumber() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Making index 12 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var10 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var11 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var12 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=10 [var1]  : true
<randoop.PrimValue, value=10 [var2]  : true
<randoop.PrimValue, value=0 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=0 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true
<randoop.PrimValue, value=0 [var7]  : true
<randoop.PrimValue, value=10 [var8]  : true
<randoop.PrimValue, value=10 [var9]  : true
<randoop.PrimValue, value=10 [var10]  : true
<randoop.PrimValue, value=10 [var11]  : true
<randoop.PrimValue, value=0 [var12]  : true

allSequences.size()=165
-------------------------------------------
randoop.util.Randomness: total calls to random: 972
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 164 sequences.
components: 164
randoop.util.Randomness: total calls to random: 973
randoop.util.Randomness: total calls to random: 974
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 975
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 164 sequences.
components: 164
randoop.util.Randomness: total calls to random: 976
randoop.util.Randomness: total calls to random: 977
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.randomNumber() : var0 
var2 =  method : A.randomNumber() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.normal() : var0 
var5 =  method : A.normal() : var0 
var6 =  method : A.randomNumber() : var0 
var7 =  method : A.normal() : var0 
var8 =  method : A.normal() : var0 
var9 =  method : A.normal() : var0 
var10 =  method : A.randomNumber() : var0 
var11 =  method : A.normal() : var0 
var12 =  method : A.randomNumber() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Making index 12 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var10 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var11 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var12 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=0 [var1]  : true
<randoop.PrimValue, value=0 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=10 [var4]  : true
<randoop.PrimValue, value=10 [var5]  : true
<randoop.PrimValue, value=0 [var6]  : true
<randoop.PrimValue, value=10 [var7]  : true
<randoop.PrimValue, value=10 [var8]  : true
<randoop.PrimValue, value=10 [var9]  : true
<randoop.PrimValue, value=0 [var10]  : true
<randoop.PrimValue, value=10 [var11]  : true
<randoop.PrimValue, value=0 [var12]  : true

allSequences.size()=166
-------------------------------------------
randoop.util.Randomness: total calls to random: 978
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 165 sequences.
components: 165
randoop.util.Randomness: total calls to random: 979
randoop.util.Randomness: total calls to random: 980
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 981
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 165 sequences.
components: 165
randoop.util.Randomness: total calls to random: 982
randoop.util.Randomness: total calls to random: 983
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 984
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 165 sequences.
components: 165
randoop.util.Randomness: total calls to random: 985
randoop.util.Randomness: total calls to random: 986
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 987
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 165 sequences.
components: 165
randoop.util.Randomness: total calls to random: 988
randoop.util.Randomness: total calls to random: 989
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 990
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 165 sequences.
components: 165
randoop.util.Randomness: total calls to random: 991
randoop.util.Randomness: total calls to random: 992
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 993
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 165 sequences.
components: 165
randoop.util.Randomness: total calls to random: 994
randoop.util.Randomness: total calls to random: 995
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.randomNumber() : var0 
var2 =  method : A.randomNumber() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.normal() : var0 
var6 =  method : A.normal() : var0 
var7 =  method : A.randomNumber() : var0 
var8 =  method : A.normal() : var0 
var9 =  method : A.randomNumber() : var0 
var10 =  method : A.randomNumber() : var0 
var11 =  method : A.normal() : var0 
var12 =  method : A.normal() : var0 
var13 =  method : A.randomNumber() : var0 
var14 =  method : A.randomNumber() : var0 
var15 =  method : A.normal() : var0 
var16 =  method : A.normal() : var0 
var17 =  method : A.randomNumber() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Making index 12 inactive (value is a primitive)
Making index 13 inactive (value is a primitive)
Making index 14 inactive (value is a primitive)
Making index 15 inactive (value is a primitive)
Making index 16 inactive (value is a primitive)
Making index 17 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var10 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var11 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var12 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var13 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var14 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var15 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var16 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var17 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=0 [var1]  : true
<randoop.PrimValue, value=0 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=10 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true
<randoop.PrimValue, value=0 [var7]  : true
<randoop.PrimValue, value=10 [var8]  : true
<randoop.PrimValue, value=0 [var9]  : true
<randoop.PrimValue, value=0 [var10]  : true
<randoop.PrimValue, value=10 [var11]  : true
<randoop.PrimValue, value=10 [var12]  : true
<randoop.PrimValue, value=0 [var13]  : true
<randoop.PrimValue, value=0 [var14]  : true
<randoop.PrimValue, value=10 [var15]  : true
<randoop.PrimValue, value=10 [var16]  : true
<randoop.PrimValue, value=0 [var17]  : true

allSequences.size()=167
-------------------------------------------
randoop.util.Randomness: total calls to random: 996
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 166 sequences.
components: 166
randoop.util.Randomness: total calls to random: 997
randoop.util.Randomness: total calls to random: 998
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.normal() : var0 
var2 =  method : A.randomNumber() : var0 
var3 =  method : A.randomNumber() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.normal() : var0 
var6 =  method : A.randomNumber() : var0 
var7 =  method : A.normal() : var0 
var8 =  method : A.normal() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=10 [var1]  : true
<randoop.PrimValue, value=0 [var2]  : true
<randoop.PrimValue, value=0 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=10 [var5]  : true
<randoop.PrimValue, value=0 [var6]  : true
<randoop.PrimValue, value=10 [var7]  : true
<randoop.PrimValue, value=10 [var8]  : true

allSequences.size()=168
-------------------------------------------
randoop.util.Randomness: total calls to random: 999
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 167 sequences.
components: 167
randoop.util.Randomness: total calls to random: 1000
randoop.util.Randomness: total calls to random: 1001
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.randomNumber() : var0 
var2 =  method : A.randomNumber() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.normal() : var0 
var5 =  method : A.normal() : var0 
var6 =  method : A.randomNumber() : var0 
var7 =  method : A.randomNumber() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=0 [var1]  : true
<randoop.PrimValue, value=0 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=10 [var4]  : true
<randoop.PrimValue, value=10 [var5]  : true
<randoop.PrimValue, value=0 [var6]  : true
<randoop.PrimValue, value=0 [var7]  : true

allSequences.size()=169
-------------------------------------------
randoop.util.Randomness: total calls to random: 1002
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 168 sequences.
components: 168
randoop.util.Randomness: total calls to random: 1003
randoop.util.Randomness: total calls to random: 1004
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 1005
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 168 sequences.
components: 168
randoop.util.Randomness: total calls to random: 1006
randoop.util.Randomness: total calls to random: 1007
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.randomNumber() : var0 
var2 =  method : A.randomNumber() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.normal() : var0 
var6 =  method : A.normal() : var0 
var7 =  method : A.randomNumber() : var0 
var8 =  method : A.normal() : var0 
var9 =  method : A.randomNumber() : var0 
var10 =  method : A.normal() : var0 
var11 =  method : A.normal() : var0 
var12 =  method : A.randomNumber() : var0 
var13 =  method : A.randomNumber() : var0 
var14 =  method : A.normal() : var0 
var15 =  method : A.randomNumber() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Making index 12 inactive (value is a primitive)
Making index 13 inactive (value is a primitive)
Making index 14 inactive (value is a primitive)
Making index 15 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var10 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var11 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var12 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var13 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var14 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var15 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=0 [var1]  : true
<randoop.PrimValue, value=0 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=10 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true
<randoop.PrimValue, value=0 [var7]  : true
<randoop.PrimValue, value=10 [var8]  : true
<randoop.PrimValue, value=0 [var9]  : true
<randoop.PrimValue, value=10 [var10]  : true
<randoop.PrimValue, value=10 [var11]  : true
<randoop.PrimValue, value=0 [var12]  : true
<randoop.PrimValue, value=0 [var13]  : true
<randoop.PrimValue, value=10 [var14]  : true
<randoop.PrimValue, value=0 [var15]  : true

allSequences.size()=170
-------------------------------------------
randoop.util.Randomness: total calls to random: 1008
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 169 sequences.
components: 169
randoop.util.Randomness: total calls to random: 1009
randoop.util.Randomness: total calls to random: 1010
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.normal() : var0 
var2 =  method : A.normal() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.randomNumber() : var0 
var6 =  method : A.randomNumber() : var0 
var7 =  method : A.normal() : var0 
var8 =  method : A.randomNumber() : var0 
var9 =  method : A.normal() : var0 
var10 =  method : A.randomNumber() : var0 
var11 =  method : A.normal() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var10 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var11 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=10 [var1]  : true
<randoop.PrimValue, value=10 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=0 [var5]  : true
<randoop.PrimValue, value=0 [var6]  : true
<randoop.PrimValue, value=10 [var7]  : true
<randoop.PrimValue, value=0 [var8]  : true
<randoop.PrimValue, value=10 [var9]  : true
<randoop.PrimValue, value=0 [var10]  : true
<randoop.PrimValue, value=10 [var11]  : true

allSequences.size()=171
-------------------------------------------
randoop.util.Randomness: total calls to random: 1011
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 170 sequences.
components: 170
randoop.util.Randomness: total calls to random: 1012
randoop.util.Randomness: total calls to random: 1013
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 1014
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 170 sequences.
components: 170
randoop.util.Randomness: total calls to random: 1015
randoop.util.Randomness: total calls to random: 1016
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 1017
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 170 sequences.
components: 170
randoop.util.Randomness: total calls to random: 1018
randoop.util.Randomness: total calls to random: 1019
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.randomNumber() : var0 
var2 =  method : A.randomNumber() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.normal() : var0 
var5 =  method : A.normal() : var0 
var6 =  method : A.normal() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=0 [var1]  : true
<randoop.PrimValue, value=0 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=10 [var4]  : true
<randoop.PrimValue, value=10 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true

allSequences.size()=172
-------------------------------------------
randoop.util.Randomness: total calls to random: 1020
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 171 sequences.
components: 171
randoop.util.Randomness: total calls to random: 1021
randoop.util.Randomness: total calls to random: 1022
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 1023
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 171 sequences.
components: 171
randoop.util.Randomness: total calls to random: 1024
randoop.util.Randomness: total calls to random: 1025
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 1026
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 171 sequences.
components: 171
randoop.util.Randomness: total calls to random: 1027
randoop.util.Randomness: total calls to random: 1028
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.normal() : var0 
var2 =  method : A.normal() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.normal() : var0 
var6 =  method : A.normal() : var0 
var7 =  method : A.randomNumber() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=10 [var1]  : true
<randoop.PrimValue, value=10 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=10 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true
<randoop.PrimValue, value=0 [var7]  : true

allSequences.size()=173
-------------------------------------------
randoop.util.Randomness: total calls to random: 1029
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 172 sequences.
components: 172
randoop.util.Randomness: total calls to random: 1030
randoop.util.Randomness: total calls to random: 1031
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 1032
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 172 sequences.
components: 172
randoop.util.Randomness: total calls to random: 1033
randoop.util.Randomness: total calls to random: 1034
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.normal() : var0 
var2 =  method : A.normal() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.normal() : var0 
var5 =  method : A.randomNumber() : var0 
var6 =  method : A.normal() : var0 
var7 =  method : A.randomNumber() : var0 
var8 =  method : A.normal() : var0 
var9 =  method : A.normal() : var0 
var10 =  method : A.randomNumber() : var0 
var11 =  method : A.randomNumber() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var10 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var11 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=10 [var1]  : true
<randoop.PrimValue, value=10 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=10 [var4]  : true
<randoop.PrimValue, value=0 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true
<randoop.PrimValue, value=0 [var7]  : true
<randoop.PrimValue, value=10 [var8]  : true
<randoop.PrimValue, value=10 [var9]  : true
<randoop.PrimValue, value=0 [var10]  : true
<randoop.PrimValue, value=0 [var11]  : true

allSequences.size()=174
-------------------------------------------
randoop.util.Randomness: total calls to random: 1035
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 173 sequences.
components: 173
randoop.util.Randomness: total calls to random: 1036
randoop.util.Randomness: total calls to random: 1037
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 1038
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 173 sequences.
components: 173
randoop.util.Randomness: total calls to random: 1039
randoop.util.Randomness: total calls to random: 1040
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 1041
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 173 sequences.
components: 173
randoop.util.Randomness: total calls to random: 1042
randoop.util.Randomness: total calls to random: 1043
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.randomNumber() : var0 
var2 =  method : A.randomNumber() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.normal() : var0 
var5 =  method : A.normal() : var0 
var6 =  method : A.randomNumber() : var0 
var7 =  method : A.normal() : var0 
var8 =  method : A.normal() : var0 
var9 =  method : A.normal() : var0 
var10 =  method : A.normal() : var0 
var11 =  method : A.randomNumber() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var10 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var11 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=0 [var1]  : true
<randoop.PrimValue, value=0 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=10 [var4]  : true
<randoop.PrimValue, value=10 [var5]  : true
<randoop.PrimValue, value=0 [var6]  : true
<randoop.PrimValue, value=10 [var7]  : true
<randoop.PrimValue, value=10 [var8]  : true
<randoop.PrimValue, value=10 [var9]  : true
<randoop.PrimValue, value=10 [var10]  : true
<randoop.PrimValue, value=0 [var11]  : true

allSequences.size()=175
-------------------------------------------
randoop.util.Randomness: total calls to random: 1044
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 174 sequences.
components: 174
randoop.util.Randomness: total calls to random: 1045
randoop.util.Randomness: total calls to random: 1046
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 1047
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 174 sequences.
components: 174
randoop.util.Randomness: total calls to random: 1048
randoop.util.Randomness: total calls to random: 1049
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 1050
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 174 sequences.
components: 174
randoop.util.Randomness: total calls to random: 1051
randoop.util.Randomness: total calls to random: 1052
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 1053
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 174 sequences.
components: 174
randoop.util.Randomness: total calls to random: 1054
randoop.util.Randomness: total calls to random: 1055
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 1056
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 174 sequences.
components: 174
randoop.util.Randomness: total calls to random: 1057
randoop.util.Randomness: total calls to random: 1058
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.normal() : var0 
var2 =  method : A.randomNumber() : var0 
var3 =  method : A.randomNumber() : var0 
var4 =  method : A.normal() : var0 
var5 =  method : A.randomNumber() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=10 [var1]  : true
<randoop.PrimValue, value=0 [var2]  : true
<randoop.PrimValue, value=0 [var3]  : true
<randoop.PrimValue, value=10 [var4]  : true
<randoop.PrimValue, value=0 [var5]  : true

allSequences.size()=176
-------------------------------------------
randoop.util.Randomness: total calls to random: 1059
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 175 sequences.
components: 175
randoop.util.Randomness: total calls to random: 1060
randoop.util.Randomness: total calls to random: 1061
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.randomNumber() : var0 
var2 =  method : A.randomNumber() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.normal() : var0 
var6 =  method : A.normal() : var0 
var7 =  method : A.randomNumber() : var0 
var8 =  method : A.normal() : var0 
var9 =  method : A.randomNumber() : var0 
var10 =  method : A.normal() : var0 
var11 =  method : A.normal() : var0 
var12 =  method : A.randomNumber() : var0 
var13 =  method : A.randomNumber() : var0 
var14 =  method : A.randomNumber() : var0 
var15 =  method : A.normal() : var0 
var16 =  method : A.normal() : var0 
var17 =  method : A.randomNumber() : var0 
var18 =  method : A.randomNumber() : var0 
var19 =  method : A.normal() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Making index 12 inactive (value is a primitive)
Making index 13 inactive (value is a primitive)
Making index 14 inactive (value is a primitive)
Making index 15 inactive (value is a primitive)
Making index 16 inactive (value is a primitive)
Making index 17 inactive (value is a primitive)
Making index 18 inactive (value is a primitive)
Making index 19 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var10 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var11 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var12 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var13 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var14 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var15 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var16 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var17 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var18 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var19 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=0 [var1]  : true
<randoop.PrimValue, value=0 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=10 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true
<randoop.PrimValue, value=0 [var7]  : true
<randoop.PrimValue, value=10 [var8]  : true
<randoop.PrimValue, value=0 [var9]  : true
<randoop.PrimValue, value=10 [var10]  : true
<randoop.PrimValue, value=10 [var11]  : true
<randoop.PrimValue, value=0 [var12]  : true
<randoop.PrimValue, value=0 [var13]  : true
<randoop.PrimValue, value=0 [var14]  : true
<randoop.PrimValue, value=10 [var15]  : true
<randoop.PrimValue, value=10 [var16]  : true
<randoop.PrimValue, value=0 [var17]  : true
<randoop.PrimValue, value=0 [var18]  : true
<randoop.PrimValue, value=10 [var19]  : true

allSequences.size()=177
-------------------------------------------
randoop.util.Randomness: total calls to random: 1062
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 176 sequences.
components: 176
randoop.util.Randomness: total calls to random: 1063
randoop.util.Randomness: total calls to random: 1064
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.randomNumber() : var0 
var2 =  method : A.normal() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.normal() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=0 [var1]  : true
<randoop.PrimValue, value=10 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=10 [var5]  : true

allSequences.size()=178
-------------------------------------------
randoop.util.Randomness: total calls to random: 1065
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 177 sequences.
components: 177
randoop.util.Randomness: total calls to random: 1066
randoop.util.Randomness: total calls to random: 1067
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.randomNumber() : var0 
var2 =  method : A.randomNumber() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.normal() : var0 
var6 =  method : A.normal() : var0 
var7 =  method : A.randomNumber() : var0 
var8 =  method : A.normal() : var0 
var9 =  method : A.randomNumber() : var0 
var10 =  method : A.normal() : var0 
var11 =  method : A.normal() : var0 
var12 =  method : A.randomNumber() : var0 
var13 =  method : A.randomNumber() : var0 
var14 =  method : A.normal() : var0 
var15 =  method : A.randomNumber() : var0 
var16 =  method : A.normal() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Making index 12 inactive (value is a primitive)
Making index 13 inactive (value is a primitive)
Making index 14 inactive (value is a primitive)
Making index 15 inactive (value is a primitive)
Making index 16 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var10 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var11 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var12 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var13 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var14 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var15 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var16 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=0 [var1]  : true
<randoop.PrimValue, value=0 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=10 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true
<randoop.PrimValue, value=0 [var7]  : true
<randoop.PrimValue, value=10 [var8]  : true
<randoop.PrimValue, value=0 [var9]  : true
<randoop.PrimValue, value=10 [var10]  : true
<randoop.PrimValue, value=10 [var11]  : true
<randoop.PrimValue, value=0 [var12]  : true
<randoop.PrimValue, value=0 [var13]  : true
<randoop.PrimValue, value=10 [var14]  : true
<randoop.PrimValue, value=0 [var15]  : true
<randoop.PrimValue, value=10 [var16]  : true

allSequences.size()=179
-------------------------------------------
randoop.util.Randomness: total calls to random: 1068
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 178 sequences.
components: 178
randoop.util.Randomness: total calls to random: 1069
randoop.util.Randomness: total calls to random: 1070
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.normal() : var0 
var2 =  method : A.normal() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.normal() : var0 
var5 =  method : A.randomNumber() : var0 
var6 =  method : A.randomNumber() : var0 
var7 =  method : A.normal() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=10 [var1]  : true
<randoop.PrimValue, value=10 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=10 [var4]  : true
<randoop.PrimValue, value=0 [var5]  : true
<randoop.PrimValue, value=0 [var6]  : true
<randoop.PrimValue, value=10 [var7]  : true

allSequences.size()=180
-------------------------------------------
randoop.util.Randomness: total calls to random: 1071
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 179 sequences.
components: 179
randoop.util.Randomness: total calls to random: 1072
randoop.util.Randomness: total calls to random: 1073
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.randomNumber() : var0 
var2 =  method : A.randomNumber() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.normal() : var0 
var5 =  method : A.normal() : var0 
var6 =  method : A.randomNumber() : var0 
var7 =  method : A.normal() : var0 
var8 =  method : A.normal() : var0 
var9 =  method : A.normal() : var0 
var10 =  method : A.normal() : var0 
var11 =  method : A.randomNumber() : var0 
var12 =  method : A.normal() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Making index 12 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var10 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var11 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var12 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=0 [var1]  : true
<randoop.PrimValue, value=0 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=10 [var4]  : true
<randoop.PrimValue, value=10 [var5]  : true
<randoop.PrimValue, value=0 [var6]  : true
<randoop.PrimValue, value=10 [var7]  : true
<randoop.PrimValue, value=10 [var8]  : true
<randoop.PrimValue, value=10 [var9]  : true
<randoop.PrimValue, value=10 [var10]  : true
<randoop.PrimValue, value=0 [var11]  : true
<randoop.PrimValue, value=10 [var12]  : true

allSequences.size()=181
-------------------------------------------
randoop.util.Randomness: total calls to random: 1074
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 180 sequences.
components: 180
randoop.util.Randomness: total calls to random: 1075
randoop.util.Randomness: total calls to random: 1076
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 1077
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 180 sequences.
components: 180
randoop.util.Randomness: total calls to random: 1078
randoop.util.Randomness: total calls to random: 1079
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.normal() : var0 
var2 =  method : A.normal() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.normal() : var0 
var6 =  method : A.normal() : var0 
var7 =  method : A.normal() : var0 
var8 =  method : A.randomNumber() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=10 [var1]  : true
<randoop.PrimValue, value=10 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=10 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true
<randoop.PrimValue, value=10 [var7]  : true
<randoop.PrimValue, value=0 [var8]  : true

allSequences.size()=182
-------------------------------------------
randoop.util.Randomness: total calls to random: 1080
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 181 sequences.
components: 181
randoop.util.Randomness: total calls to random: 1081
randoop.util.Randomness: total calls to random: 1082
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.normal() : var0 
var2 =  method : A.normal() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.normal() : var0 
var5 =  method : A.randomNumber() : var0 
var6 =  method : A.randomNumber() : var0 
var7 =  method : A.randomNumber() : var0 
var8 =  method : A.randomNumber() : var0 
var9 =  method : A.normal() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=10 [var1]  : true
<randoop.PrimValue, value=10 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=10 [var4]  : true
<randoop.PrimValue, value=0 [var5]  : true
<randoop.PrimValue, value=0 [var6]  : true
<randoop.PrimValue, value=0 [var7]  : true
<randoop.PrimValue, value=0 [var8]  : true
<randoop.PrimValue, value=10 [var9]  : true

allSequences.size()=183
-------------------------------------------
randoop.util.Randomness: total calls to random: 1083
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 182 sequences.
components: 182
randoop.util.Randomness: total calls to random: 1084
randoop.util.Randomness: total calls to random: 1085
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.normal() : var0 
var2 =  method : A.randomNumber() : var0 
var3 =  method : A.randomNumber() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.normal() : var0 
var6 =  method : A.normal() : var0 
var7 =  method : A.normal() : var0 
var8 =  method : A.randomNumber() : var0 
var9 =  method : A.randomNumber() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=10 [var1]  : true
<randoop.PrimValue, value=0 [var2]  : true
<randoop.PrimValue, value=0 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=10 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true
<randoop.PrimValue, value=10 [var7]  : true
<randoop.PrimValue, value=0 [var8]  : true
<randoop.PrimValue, value=0 [var9]  : true

allSequences.size()=184
-------------------------------------------
randoop.util.Randomness: total calls to random: 1086
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 183 sequences.
components: 183
randoop.util.Randomness: total calls to random: 1087
randoop.util.Randomness: total calls to random: 1088
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.normal() : var0 
var2 =  method : A.normal() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.normal() : var0 
var5 =  method : A.normal() : var0 
var6 =  method : A.randomNumber() : var0 
var7 =  method : A.randomNumber() : var0 
var8 =  method : A.randomNumber() : var0 
var9 =  method : A.normal() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=10 [var1]  : true
<randoop.PrimValue, value=10 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=10 [var4]  : true
<randoop.PrimValue, value=10 [var5]  : true
<randoop.PrimValue, value=0 [var6]  : true
<randoop.PrimValue, value=0 [var7]  : true
<randoop.PrimValue, value=0 [var8]  : true
<randoop.PrimValue, value=10 [var9]  : true

allSequences.size()=185
-------------------------------------------
randoop.util.Randomness: total calls to random: 1089
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 184 sequences.
components: 184
randoop.util.Randomness: total calls to random: 1090
randoop.util.Randomness: total calls to random: 1091
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 1092
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 184 sequences.
components: 184
randoop.util.Randomness: total calls to random: 1093
randoop.util.Randomness: total calls to random: 1094
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.randomNumber() : var0 
var2 =  method : A.randomNumber() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.normal() : var0 
var6 =  method : A.normal() : var0 
var7 =  method : A.randomNumber() : var0 
var8 =  method : A.randomNumber() : var0 
var9 =  method : A.randomNumber() : var0 
var10 =  method : A.normal() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var10 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=0 [var1]  : true
<randoop.PrimValue, value=0 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=10 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true
<randoop.PrimValue, value=0 [var7]  : true
<randoop.PrimValue, value=0 [var8]  : true
<randoop.PrimValue, value=0 [var9]  : true
<randoop.PrimValue, value=10 [var10]  : true

allSequences.size()=186
-------------------------------------------
randoop.util.Randomness: total calls to random: 1095
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 185 sequences.
components: 185
randoop.util.Randomness: total calls to random: 1096
randoop.util.Randomness: total calls to random: 1097
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 1098
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 185 sequences.
components: 185
randoop.util.Randomness: total calls to random: 1099
randoop.util.Randomness: total calls to random: 1100
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.normal() : var0 
var2 =  method : A.normal() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.normal() : var0 
var5 =  method : A.randomNumber() : var0 
var6 =  method : A.normal() : var0 
var7 =  method : A.randomNumber() : var0 
var8 =  method : A.normal() : var0 
var9 =  method : A.normal() : var0 
var10 =  method : A.randomNumber() : var0 
var11 =  method : A.randomNumber() : var0 
var12 =  method : A.normal() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Making index 12 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var10 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var11 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var12 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=10 [var1]  : true
<randoop.PrimValue, value=10 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=10 [var4]  : true
<randoop.PrimValue, value=0 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true
<randoop.PrimValue, value=0 [var7]  : true
<randoop.PrimValue, value=10 [var8]  : true
<randoop.PrimValue, value=10 [var9]  : true
<randoop.PrimValue, value=0 [var10]  : true
<randoop.PrimValue, value=0 [var11]  : true
<randoop.PrimValue, value=10 [var12]  : true

allSequences.size()=187
-------------------------------------------
randoop.util.Randomness: total calls to random: 1101
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 186 sequences.
components: 186
randoop.util.Randomness: total calls to random: 1102
randoop.util.Randomness: total calls to random: 1103
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.normal() : var0 
var2 =  method : A.normal() : var0 
var3 =  method : A.randomNumber() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.randomNumber() : var0 
var6 =  method : A.normal() : var0 
var7 =  method : A.randomNumber() : var0 
var8 =  method : A.normal() : var0 
var9 =  method : A.normal() : var0 
var10 =  method : A.normal() : var0 
var11 =  method : A.normal() : var0 
var12 =  method : A.randomNumber() : var0 
var13 =  method : A.randomNumber() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Making index 12 inactive (value is a primitive)
Making index 13 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var10 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var11 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var12 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var13 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=10 [var1]  : true
<randoop.PrimValue, value=10 [var2]  : true
<randoop.PrimValue, value=0 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=0 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true
<randoop.PrimValue, value=0 [var7]  : true
<randoop.PrimValue, value=10 [var8]  : true
<randoop.PrimValue, value=10 [var9]  : true
<randoop.PrimValue, value=10 [var10]  : true
<randoop.PrimValue, value=10 [var11]  : true
<randoop.PrimValue, value=0 [var12]  : true
<randoop.PrimValue, value=0 [var13]  : true

allSequences.size()=188
-------------------------------------------
randoop.util.Randomness: total calls to random: 1104
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 187 sequences.
components: 187
randoop.util.Randomness: total calls to random: 1105
randoop.util.Randomness: total calls to random: 1106
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.randomNumber() : var0 
var2 =  method : A.randomNumber() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.normal() : var0 
var5 =  method : A.normal() : var0 
var6 =  method : A.randomNumber() : var0 
var7 =  method : A.normal() : var0 
var8 =  method : A.normal() : var0 
var9 =  method : A.normal() : var0 
var10 =  method : A.randomNumber() : var0 
var11 =  method : A.normal() : var0 
var12 =  method : A.randomNumber() : var0 
var13 =  method : A.randomNumber() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Making index 12 inactive (value is a primitive)
Making index 13 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var10 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var11 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var12 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var13 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=0 [var1]  : true
<randoop.PrimValue, value=0 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=10 [var4]  : true
<randoop.PrimValue, value=10 [var5]  : true
<randoop.PrimValue, value=0 [var6]  : true
<randoop.PrimValue, value=10 [var7]  : true
<randoop.PrimValue, value=10 [var8]  : true
<randoop.PrimValue, value=10 [var9]  : true
<randoop.PrimValue, value=0 [var10]  : true
<randoop.PrimValue, value=10 [var11]  : true
<randoop.PrimValue, value=0 [var12]  : true
<randoop.PrimValue, value=0 [var13]  : true

allSequences.size()=189
-------------------------------------------
randoop.util.Randomness: total calls to random: 1107
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 188 sequences.
components: 188
randoop.util.Randomness: total calls to random: 1108
randoop.util.Randomness: total calls to random: 1109
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.normal() : var0 
var2 =  method : A.normal() : var0 
var3 =  method : A.randomNumber() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.randomNumber() : var0 
var6 =  method : A.normal() : var0 
var7 =  method : A.randomNumber() : var0 
var8 =  method : A.randomNumber() : var0 
var9 =  method : A.normal() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=10 [var1]  : true
<randoop.PrimValue, value=10 [var2]  : true
<randoop.PrimValue, value=0 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=0 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true
<randoop.PrimValue, value=0 [var7]  : true
<randoop.PrimValue, value=0 [var8]  : true
<randoop.PrimValue, value=10 [var9]  : true

allSequences.size()=190
-------------------------------------------
randoop.util.Randomness: total calls to random: 1110
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 189 sequences.
components: 189
randoop.util.Randomness: total calls to random: 1111
randoop.util.Randomness: total calls to random: 1112
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 1113
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 189 sequences.
components: 189
randoop.util.Randomness: total calls to random: 1114
randoop.util.Randomness: total calls to random: 1115
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 1116
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 189 sequences.
components: 189
randoop.util.Randomness: total calls to random: 1117
randoop.util.Randomness: total calls to random: 1118
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 1119
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 189 sequences.
components: 189
randoop.util.Randomness: total calls to random: 1120
randoop.util.Randomness: total calls to random: 1121
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.normal() : var0 
var2 =  method : A.normal() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.normal() : var0 
var5 =  method : A.randomNumber() : var0 
var6 =  method : A.normal() : var0 
var7 =  method : A.normal() : var0 
var8 =  method : A.normal() : var0 
var9 =  method : A.randomNumber() : var0 
var10 =  method : A.randomNumber() : var0 
var11 =  method : A.randomNumber() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var10 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var11 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=10 [var1]  : true
<randoop.PrimValue, value=10 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=10 [var4]  : true
<randoop.PrimValue, value=0 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true
<randoop.PrimValue, value=10 [var7]  : true
<randoop.PrimValue, value=10 [var8]  : true
<randoop.PrimValue, value=0 [var9]  : true
<randoop.PrimValue, value=0 [var10]  : true
<randoop.PrimValue, value=0 [var11]  : true

allSequences.size()=191
-------------------------------------------
randoop.util.Randomness: total calls to random: 1122
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 190 sequences.
components: 190
randoop.util.Randomness: total calls to random: 1123
randoop.util.Randomness: total calls to random: 1124
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 1125
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 190 sequences.
components: 190
randoop.util.Randomness: total calls to random: 1126
randoop.util.Randomness: total calls to random: 1127
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 1128
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 190 sequences.
components: 190
randoop.util.Randomness: total calls to random: 1129
randoop.util.Randomness: total calls to random: 1130
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.randomNumber() : var0 
var2 =  method : A.randomNumber() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.normal() : var0 
var6 =  method : A.normal() : var0 
var7 =  method : A.randomNumber() : var0 
var8 =  method : A.normal() : var0 
var9 =  method : A.randomNumber() : var0 
var10 =  method : A.normal() : var0 
var11 =  method : A.normal() : var0 
var12 =  method : A.randomNumber() : var0 
var13 =  method : A.randomNumber() : var0 
var14 =  method : A.normal() : var0 
var15 =  method : A.randomNumber() : var0 
var16 =  method : A.normal() : var0 
var17 =  method : A.randomNumber() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Making index 12 inactive (value is a primitive)
Making index 13 inactive (value is a primitive)
Making index 14 inactive (value is a primitive)
Making index 15 inactive (value is a primitive)
Making index 16 inactive (value is a primitive)
Making index 17 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var10 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var11 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var12 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var13 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var14 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var15 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var16 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var17 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=0 [var1]  : true
<randoop.PrimValue, value=0 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=10 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true
<randoop.PrimValue, value=0 [var7]  : true
<randoop.PrimValue, value=10 [var8]  : true
<randoop.PrimValue, value=0 [var9]  : true
<randoop.PrimValue, value=10 [var10]  : true
<randoop.PrimValue, value=10 [var11]  : true
<randoop.PrimValue, value=0 [var12]  : true
<randoop.PrimValue, value=0 [var13]  : true
<randoop.PrimValue, value=10 [var14]  : true
<randoop.PrimValue, value=0 [var15]  : true
<randoop.PrimValue, value=10 [var16]  : true
<randoop.PrimValue, value=0 [var17]  : true

allSequences.size()=192
-------------------------------------------
randoop.util.Randomness: total calls to random: 1131
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 191 sequences.
components: 191
randoop.util.Randomness: total calls to random: 1132
randoop.util.Randomness: total calls to random: 1133
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.normal() : var0 
var2 =  method : A.randomNumber() : var0 
var3 =  method : A.randomNumber() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.normal() : var0 
var6 =  method : A.normal() : var0 
var7 =  method : A.normal() : var0 
var8 =  method : A.randomNumber() : var0 
var9 =  method : A.randomNumber() : var0 
var10 =  method : A.normal() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var10 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=10 [var1]  : true
<randoop.PrimValue, value=0 [var2]  : true
<randoop.PrimValue, value=0 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=10 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true
<randoop.PrimValue, value=10 [var7]  : true
<randoop.PrimValue, value=0 [var8]  : true
<randoop.PrimValue, value=0 [var9]  : true
<randoop.PrimValue, value=10 [var10]  : true

allSequences.size()=193
-------------------------------------------
randoop.util.Randomness: total calls to random: 1134
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 192 sequences.
components: 192
randoop.util.Randomness: total calls to random: 1135
randoop.util.Randomness: total calls to random: 1136
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.randomNumber() : var0 
var2 =  method : A.randomNumber() : var0 
var3 =  method : A.randomNumber() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.normal() : var0 
var6 =  method : A.normal() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=0 [var1]  : true
<randoop.PrimValue, value=0 [var2]  : true
<randoop.PrimValue, value=0 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=10 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true

allSequences.size()=194
-------------------------------------------
randoop.util.Randomness: total calls to random: 1137
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 193 sequences.
components: 193
randoop.util.Randomness: total calls to random: 1138
randoop.util.Randomness: total calls to random: 1139
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 1140
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 193 sequences.
components: 193
randoop.util.Randomness: total calls to random: 1141
randoop.util.Randomness: total calls to random: 1142
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.normal() : var0 
var2 =  method : A.normal() : var0 
var3 =  method : A.randomNumber() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.randomNumber() : var0 
var6 =  method : A.normal() : var0 
var7 =  method : A.randomNumber() : var0 
var8 =  method : A.randomNumber() : var0 
var9 =  method : A.normal() : var0 
var10 =  method : A.randomNumber() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var10 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=10 [var1]  : true
<randoop.PrimValue, value=10 [var2]  : true
<randoop.PrimValue, value=0 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=0 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true
<randoop.PrimValue, value=0 [var7]  : true
<randoop.PrimValue, value=0 [var8]  : true
<randoop.PrimValue, value=10 [var9]  : true
<randoop.PrimValue, value=0 [var10]  : true

allSequences.size()=195
-------------------------------------------
randoop.util.Randomness: total calls to random: 1143
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 194 sequences.
components: 194
randoop.util.Randomness: total calls to random: 1144
randoop.util.Randomness: total calls to random: 1145
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.normal() : var0 
var2 =  method : A.normal() : var0 
var3 =  method : A.randomNumber() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.normal() : var0 
var6 =  method : A.normal() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=10 [var1]  : true
<randoop.PrimValue, value=10 [var2]  : true
<randoop.PrimValue, value=0 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=10 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true

allSequences.size()=196
-------------------------------------------
randoop.util.Randomness: total calls to random: 1146
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 195 sequences.
components: 195
randoop.util.Randomness: total calls to random: 1147
randoop.util.Randomness: total calls to random: 1148
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.normal() : var0 
var2 =  method : A.normal() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.normal() : var0 
var5 =  method : A.normal() : var0 
var6 =  method : A.normal() : var0 
var7 =  method : A.randomNumber() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=10 [var1]  : true
<randoop.PrimValue, value=10 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=10 [var4]  : true
<randoop.PrimValue, value=10 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true
<randoop.PrimValue, value=0 [var7]  : true

allSequences.size()=197
-------------------------------------------
randoop.util.Randomness: total calls to random: 1149
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 196 sequences.
components: 196
randoop.util.Randomness: total calls to random: 1150
randoop.util.Randomness: total calls to random: 1151
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.normal() : var0 
var2 =  method : A.randomNumber() : var0 
var3 =  method : A.randomNumber() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.normal() : var0 
var6 =  method : A.normal() : var0 
var7 =  method : A.normal() : var0 
var8 =  method : A.randomNumber() : var0 
var9 =  method : A.randomNumber() : var0 
var10 =  method : A.normal() : var0 
var11 =  method : A.normal() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var10 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var11 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=10 [var1]  : true
<randoop.PrimValue, value=0 [var2]  : true
<randoop.PrimValue, value=0 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=10 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true
<randoop.PrimValue, value=10 [var7]  : true
<randoop.PrimValue, value=0 [var8]  : true
<randoop.PrimValue, value=0 [var9]  : true
<randoop.PrimValue, value=10 [var10]  : true
<randoop.PrimValue, value=10 [var11]  : true

allSequences.size()=198
-------------------------------------------
randoop.util.Randomness: total calls to random: 1152
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 197 sequences.
components: 197
randoop.util.Randomness: total calls to random: 1153
randoop.util.Randomness: total calls to random: 1154
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.normal() : var0 
var2 =  method : A.normal() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.normal() : var0 
var5 =  method : A.randomNumber() : var0 
var6 =  method : A.randomNumber() : var0 
var7 =  method : A.randomNumber() : var0 
var8 =  method : A.randomNumber() : var0 
var9 =  method : A.normal() : var0 
var10 =  method : A.normal() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var10 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=10 [var1]  : true
<randoop.PrimValue, value=10 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=10 [var4]  : true
<randoop.PrimValue, value=0 [var5]  : true
<randoop.PrimValue, value=0 [var6]  : true
<randoop.PrimValue, value=0 [var7]  : true
<randoop.PrimValue, value=0 [var8]  : true
<randoop.PrimValue, value=10 [var9]  : true
<randoop.PrimValue, value=10 [var10]  : true

allSequences.size()=199
-------------------------------------------
randoop.util.Randomness: total calls to random: 1155
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 198 sequences.
components: 198
randoop.util.Randomness: total calls to random: 1156
randoop.util.Randomness: total calls to random: 1157
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.randomNumber() : var0 
var2 =  method : A.randomNumber() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.normal() : var0 
var5 =  method : A.normal() : var0 
var6 =  method : A.normal() : var0 
var7 =  method : A.normal() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=0 [var1]  : true
<randoop.PrimValue, value=0 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=10 [var4]  : true
<randoop.PrimValue, value=10 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true
<randoop.PrimValue, value=10 [var7]  : true

allSequences.size()=200
-------------------------------------------
randoop.util.Randomness: total calls to random: 1158
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 199 sequences.
components: 199
randoop.util.Randomness: total calls to random: 1159
randoop.util.Randomness: total calls to random: 1160
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 1161
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 199 sequences.
components: 199
randoop.util.Randomness: total calls to random: 1162
randoop.util.Randomness: total calls to random: 1163
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.normal() : var0 
var2 =  method : A.randomNumber() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.normal() : var0 
var6 =  method : A.randomNumber() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=10 [var1]  : true
<randoop.PrimValue, value=0 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=10 [var5]  : true
<randoop.PrimValue, value=0 [var6]  : true

allSequences.size()=201
-------------------------------------------
randoop.util.Randomness: total calls to random: 1164
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 200 sequences.
components: 200
randoop.util.Randomness: total calls to random: 1165
randoop.util.Randomness: total calls to random: 1166
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 1167
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 200 sequences.
components: 200
randoop.util.Randomness: total calls to random: 1168
randoop.util.Randomness: total calls to random: 1169
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.normal() : var0 
var2 =  method : A.normal() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.normal() : var0 
var5 =  method : A.randomNumber() : var0 
var6 =  method : A.normal() : var0 
var7 =  method : A.normal() : var0 
var8 =  method : A.randomNumber() : var0 
var9 =  method : A.randomNumber() : var0 
var10 =  method : A.normal() : var0 
var11 =  method : A.normal() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var10 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var11 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=10 [var1]  : true
<randoop.PrimValue, value=10 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=10 [var4]  : true
<randoop.PrimValue, value=0 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true
<randoop.PrimValue, value=10 [var7]  : true
<randoop.PrimValue, value=0 [var8]  : true
<randoop.PrimValue, value=0 [var9]  : true
<randoop.PrimValue, value=10 [var10]  : true
<randoop.PrimValue, value=10 [var11]  : true

allSequences.size()=202
-------------------------------------------
randoop.util.Randomness: total calls to random: 1170
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 201 sequences.
components: 201
randoop.util.Randomness: total calls to random: 1171
randoop.util.Randomness: total calls to random: 1172
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 1173
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 201 sequences.
components: 201
randoop.util.Randomness: total calls to random: 1174
randoop.util.Randomness: total calls to random: 1175
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.normal() : var0 
var2 =  method : A.randomNumber() : var0 
var3 =  method : A.randomNumber() : var0 
var4 =  method : A.normal() : var0 
var5 =  method : A.randomNumber() : var0 
var6 =  method : A.randomNumber() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=10 [var1]  : true
<randoop.PrimValue, value=0 [var2]  : true
<randoop.PrimValue, value=0 [var3]  : true
<randoop.PrimValue, value=10 [var4]  : true
<randoop.PrimValue, value=0 [var5]  : true
<randoop.PrimValue, value=0 [var6]  : true

allSequences.size()=203
-------------------------------------------
randoop.util.Randomness: total calls to random: 1176
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 202 sequences.
components: 202
randoop.util.Randomness: total calls to random: 1177
randoop.util.Randomness: total calls to random: 1178
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 1179
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 202 sequences.
components: 202
randoop.util.Randomness: total calls to random: 1180
randoop.util.Randomness: total calls to random: 1181
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 1182
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 202 sequences.
components: 202
randoop.util.Randomness: total calls to random: 1183
randoop.util.Randomness: total calls to random: 1184
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 1185
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 202 sequences.
components: 202
randoop.util.Randomness: total calls to random: 1186
randoop.util.Randomness: total calls to random: 1187
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 1188
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 202 sequences.
components: 202
randoop.util.Randomness: total calls to random: 1189
randoop.util.Randomness: total calls to random: 1190
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 1191
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 202 sequences.
components: 202
randoop.util.Randomness: total calls to random: 1192
randoop.util.Randomness: total calls to random: 1193
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.randomNumber() : var0 
var2 =  method : A.randomNumber() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.normal() : var0 
var6 =  method : A.normal() : var0 
var7 =  method : A.randomNumber() : var0 
var8 =  method : A.normal() : var0 
var9 =  method : A.randomNumber() : var0 
var10 =  method : A.normal() : var0 
var11 =  method : A.normal() : var0 
var12 =  method : A.randomNumber() : var0 
var13 =  method : A.randomNumber() : var0 
var14 =  method : A.normal() : var0 
var15 =  method : A.randomNumber() : var0 
var16 =  method : A.normal() : var0 
var17 =  method : A.randomNumber() : var0 
var18 =  method : A.normal() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Making index 12 inactive (value is a primitive)
Making index 13 inactive (value is a primitive)
Making index 14 inactive (value is a primitive)
Making index 15 inactive (value is a primitive)
Making index 16 inactive (value is a primitive)
Making index 17 inactive (value is a primitive)
Making index 18 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var10 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var11 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var12 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var13 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var14 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var15 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var16 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var17 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var18 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=0 [var1]  : true
<randoop.PrimValue, value=0 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=10 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true
<randoop.PrimValue, value=0 [var7]  : true
<randoop.PrimValue, value=10 [var8]  : true
<randoop.PrimValue, value=0 [var9]  : true
<randoop.PrimValue, value=10 [var10]  : true
<randoop.PrimValue, value=10 [var11]  : true
<randoop.PrimValue, value=0 [var12]  : true
<randoop.PrimValue, value=0 [var13]  : true
<randoop.PrimValue, value=10 [var14]  : true
<randoop.PrimValue, value=0 [var15]  : true
<randoop.PrimValue, value=10 [var16]  : true
<randoop.PrimValue, value=0 [var17]  : true
<randoop.PrimValue, value=10 [var18]  : true

allSequences.size()=204
-------------------------------------------
randoop.util.Randomness: total calls to random: 1194
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 203 sequences.
components: 203
randoop.util.Randomness: total calls to random: 1195
randoop.util.Randomness: total calls to random: 1196
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 1197
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 203 sequences.
components: 203
randoop.util.Randomness: total calls to random: 1198
randoop.util.Randomness: total calls to random: 1199
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 1200
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 203 sequences.
components: 203
randoop.util.Randomness: total calls to random: 1201
randoop.util.Randomness: total calls to random: 1202
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.randomNumber() : var0 
var2 =  method : A.randomNumber() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.normal() : var0 
var6 =  method : A.normal() : var0 
var7 =  method : A.normal() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=0 [var1]  : true
<randoop.PrimValue, value=0 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=10 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true
<randoop.PrimValue, value=10 [var7]  : true

allSequences.size()=205
-------------------------------------------
randoop.util.Randomness: total calls to random: 1203
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 204 sequences.
components: 204
randoop.util.Randomness: total calls to random: 1204
randoop.util.Randomness: total calls to random: 1205
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.normal() : var0 
var2 =  method : A.normal() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.normal() : var0 
var6 =  method : A.normal() : var0 
var7 =  method : A.randomNumber() : var0 
var8 =  method : A.randomNumber() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=10 [var1]  : true
<randoop.PrimValue, value=10 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=10 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true
<randoop.PrimValue, value=0 [var7]  : true
<randoop.PrimValue, value=0 [var8]  : true

allSequences.size()=206
-------------------------------------------
randoop.util.Randomness: total calls to random: 1206
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 205 sequences.
components: 205
randoop.util.Randomness: total calls to random: 1207
randoop.util.Randomness: total calls to random: 1208
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 1209
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 205 sequences.
components: 205
randoop.util.Randomness: total calls to random: 1210
randoop.util.Randomness: total calls to random: 1211
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 1212
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 205 sequences.
components: 205
randoop.util.Randomness: total calls to random: 1213
randoop.util.Randomness: total calls to random: 1214
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 1215
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 205 sequences.
components: 205
randoop.util.Randomness: total calls to random: 1216
randoop.util.Randomness: total calls to random: 1217
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.randomNumber() : var0 
var2 =  method : A.randomNumber() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.normal() : var0 
var5 =  method : A.normal() : var0 
var6 =  method : A.normal() : var0 
var7 =  method : A.randomNumber() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=0 [var1]  : true
<randoop.PrimValue, value=0 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=10 [var4]  : true
<randoop.PrimValue, value=10 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true
<randoop.PrimValue, value=0 [var7]  : true

allSequences.size()=207
-------------------------------------------
randoop.util.Randomness: total calls to random: 1218
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 206 sequences.
components: 206
randoop.util.Randomness: total calls to random: 1219
randoop.util.Randomness: total calls to random: 1220
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.normal() : var0 
var2 =  method : A.normal() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.normal() : var0 
var5 =  method : A.randomNumber() : var0 
var6 =  method : A.randomNumber() : var0 
var7 =  method : A.normal() : var0 
var8 =  method : A.randomNumber() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=10 [var1]  : true
<randoop.PrimValue, value=10 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=10 [var4]  : true
<randoop.PrimValue, value=0 [var5]  : true
<randoop.PrimValue, value=0 [var6]  : true
<randoop.PrimValue, value=10 [var7]  : true
<randoop.PrimValue, value=0 [var8]  : true

allSequences.size()=208
-------------------------------------------
randoop.util.Randomness: total calls to random: 1221
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 207 sequences.
components: 207
randoop.util.Randomness: total calls to random: 1222
randoop.util.Randomness: total calls to random: 1223
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 1224
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 207 sequences.
components: 207
randoop.util.Randomness: total calls to random: 1225
randoop.util.Randomness: total calls to random: 1226
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 1227
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 207 sequences.
components: 207
randoop.util.Randomness: total calls to random: 1228
randoop.util.Randomness: total calls to random: 1229
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 1230
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 207 sequences.
components: 207
randoop.util.Randomness: total calls to random: 1231
randoop.util.Randomness: total calls to random: 1232
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 1233
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 207 sequences.
components: 207
randoop.util.Randomness: total calls to random: 1234
randoop.util.Randomness: total calls to random: 1235
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.normal() : var0 
var2 =  method : A.normal() : var0 
var3 =  method : A.randomNumber() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.randomNumber() : var0 
var6 =  method : A.normal() : var0 
var7 =  method : A.randomNumber() : var0 
var8 =  method : A.normal() : var0 
var9 =  method : A.randomNumber() : var0 
var10 =  method : A.randomNumber() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var10 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=10 [var1]  : true
<randoop.PrimValue, value=10 [var2]  : true
<randoop.PrimValue, value=0 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=0 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true
<randoop.PrimValue, value=0 [var7]  : true
<randoop.PrimValue, value=10 [var8]  : true
<randoop.PrimValue, value=0 [var9]  : true
<randoop.PrimValue, value=0 [var10]  : true

allSequences.size()=209
-------------------------------------------
randoop.util.Randomness: total calls to random: 1236
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 208 sequences.
components: 208
randoop.util.Randomness: total calls to random: 1237
randoop.util.Randomness: total calls to random: 1238
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 1239
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 208 sequences.
components: 208
randoop.util.Randomness: total calls to random: 1240
randoop.util.Randomness: total calls to random: 1241
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 1242
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 208 sequences.
components: 208
randoop.util.Randomness: total calls to random: 1243
randoop.util.Randomness: total calls to random: 1244
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 1245
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 208 sequences.
components: 208
randoop.util.Randomness: total calls to random: 1246
randoop.util.Randomness: total calls to random: 1247
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 1248
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 208 sequences.
components: 208
randoop.util.Randomness: total calls to random: 1249
randoop.util.Randomness: total calls to random: 1250
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.normal() : var0 
var2 =  method : A.normal() : var0 
var3 =  method : A.randomNumber() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.randomNumber() : var0 
var6 =  method : A.normal() : var0 
var7 =  method : A.randomNumber() : var0 
var8 =  method : A.randomNumber() : var0 
var9 =  method : A.randomNumber() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=10 [var1]  : true
<randoop.PrimValue, value=10 [var2]  : true
<randoop.PrimValue, value=0 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=0 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true
<randoop.PrimValue, value=0 [var7]  : true
<randoop.PrimValue, value=0 [var8]  : true
<randoop.PrimValue, value=0 [var9]  : true

allSequences.size()=210
-------------------------------------------
randoop.util.Randomness: total calls to random: 1251
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 209 sequences.
components: 209
randoop.util.Randomness: total calls to random: 1252
randoop.util.Randomness: total calls to random: 1253
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 1254
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 209 sequences.
components: 209
randoop.util.Randomness: total calls to random: 1255
randoop.util.Randomness: total calls to random: 1256
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 1257
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 209 sequences.
components: 209
randoop.util.Randomness: total calls to random: 1258
randoop.util.Randomness: total calls to random: 1259
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.normal() : var0 
var2 =  method : A.normal() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.normal() : var0 
var6 =  method : A.normal() : var0 
var7 =  method : A.randomNumber() : var0 
var8 =  method : A.normal() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=10 [var1]  : true
<randoop.PrimValue, value=10 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=10 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true
<randoop.PrimValue, value=0 [var7]  : true
<randoop.PrimValue, value=10 [var8]  : true

allSequences.size()=211
-------------------------------------------
randoop.util.Randomness: total calls to random: 1260
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 210 sequences.
components: 210
randoop.util.Randomness: total calls to random: 1261
randoop.util.Randomness: total calls to random: 1262
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.randomNumber() : var0 
var2 =  method : A.randomNumber() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.normal() : var0 
var6 =  method : A.normal() : var0 
var7 =  method : A.randomNumber() : var0 
var8 =  method : A.randomNumber() : var0 
var9 =  method : A.randomNumber() : var0 
var10 =  method : A.randomNumber() : var0 
var11 =  method : A.normal() : var0 
var12 =  method : A.normal() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Making index 12 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var10 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var11 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var12 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=0 [var1]  : true
<randoop.PrimValue, value=0 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=10 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true
<randoop.PrimValue, value=0 [var7]  : true
<randoop.PrimValue, value=0 [var8]  : true
<randoop.PrimValue, value=0 [var9]  : true
<randoop.PrimValue, value=0 [var10]  : true
<randoop.PrimValue, value=10 [var11]  : true
<randoop.PrimValue, value=10 [var12]  : true

allSequences.size()=212
-------------------------------------------
randoop.util.Randomness: total calls to random: 1263
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 211 sequences.
components: 211
randoop.util.Randomness: total calls to random: 1264
randoop.util.Randomness: total calls to random: 1265
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 1266
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 211 sequences.
components: 211
randoop.util.Randomness: total calls to random: 1267
randoop.util.Randomness: total calls to random: 1268
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 1269
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 211 sequences.
components: 211
randoop.util.Randomness: total calls to random: 1270
randoop.util.Randomness: total calls to random: 1271
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.normal() : var0 
var2 =  method : A.normal() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.normal() : var0 
var5 =  method : A.normal() : var0 
var6 =  method : A.normal() : var0 
var7 =  method : A.randomNumber() : var0 
var8 =  method : A.randomNumber() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=10 [var1]  : true
<randoop.PrimValue, value=10 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=10 [var4]  : true
<randoop.PrimValue, value=10 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true
<randoop.PrimValue, value=0 [var7]  : true
<randoop.PrimValue, value=0 [var8]  : true

allSequences.size()=213
-------------------------------------------
randoop.util.Randomness: total calls to random: 1272
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 212 sequences.
components: 212
randoop.util.Randomness: total calls to random: 1273
randoop.util.Randomness: total calls to random: 1274
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 1275
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 212 sequences.
components: 212
randoop.util.Randomness: total calls to random: 1276
randoop.util.Randomness: total calls to random: 1277
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.randomNumber() : var0 
var2 =  method : A.randomNumber() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.normal() : var0 
var5 =  method : A.normal() : var0 
var6 =  method : A.normal() : var0 
var7 =  method : A.randomNumber() : var0 
var8 =  method : A.randomNumber() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=0 [var1]  : true
<randoop.PrimValue, value=0 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=10 [var4]  : true
<randoop.PrimValue, value=10 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true
<randoop.PrimValue, value=0 [var7]  : true
<randoop.PrimValue, value=0 [var8]  : true

allSequences.size()=214
-------------------------------------------
randoop.util.Randomness: total calls to random: 1278
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 213 sequences.
components: 213
randoop.util.Randomness: total calls to random: 1279
randoop.util.Randomness: total calls to random: 1280
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 1281
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 213 sequences.
components: 213
randoop.util.Randomness: total calls to random: 1282
randoop.util.Randomness: total calls to random: 1283
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.randomNumber() : var0 
var2 =  method : A.randomNumber() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.normal() : var0 
var5 =  method : A.normal() : var0 
var6 =  method : A.normal() : var0 
var7 =  method : A.randomNumber() : var0 
var8 =  method : A.randomNumber() : var0 
var9 =  method : A.normal() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=0 [var1]  : true
<randoop.PrimValue, value=0 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=10 [var4]  : true
<randoop.PrimValue, value=10 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true
<randoop.PrimValue, value=0 [var7]  : true
<randoop.PrimValue, value=0 [var8]  : true
<randoop.PrimValue, value=10 [var9]  : true

allSequences.size()=215
-------------------------------------------
randoop.util.Randomness: total calls to random: 1284
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 214 sequences.
components: 214
randoop.util.Randomness: total calls to random: 1285
randoop.util.Randomness: total calls to random: 1286
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 1287
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 214 sequences.
components: 214
randoop.util.Randomness: total calls to random: 1288
randoop.util.Randomness: total calls to random: 1289
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.randomNumber() : var0 
var2 =  method : A.randomNumber() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.normal() : var0 
var6 =  method : A.normal() : var0 
var7 =  method : A.randomNumber() : var0 
var8 =  method : A.normal() : var0 
var9 =  method : A.randomNumber() : var0 
var10 =  method : A.normal() : var0 
var11 =  method : A.normal() : var0 
var12 =  method : A.randomNumber() : var0 
var13 =  method : A.randomNumber() : var0 
var14 =  method : A.randomNumber() : var0 
var15 =  method : A.normal() : var0 
var16 =  method : A.normal() : var0 
var17 =  method : A.randomNumber() : var0 
var18 =  method : A.randomNumber() : var0 
var19 =  method : A.randomNumber() : var0 
var20 =  method : A.normal() : var0 
var21 =  method : A.randomNumber() : var0 
var22 =  method : A.normal() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Making index 12 inactive (value is a primitive)
Making index 13 inactive (value is a primitive)
Making index 14 inactive (value is a primitive)
Making index 15 inactive (value is a primitive)
Making index 16 inactive (value is a primitive)
Making index 17 inactive (value is a primitive)
Making index 18 inactive (value is a primitive)
Making index 19 inactive (value is a primitive)
Making index 20 inactive (value is a primitive)
Making index 21 inactive (value is a primitive)
Making index 22 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var10 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var11 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var12 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var13 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var14 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var15 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var16 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var17 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var18 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var19 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var20 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var21 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var22 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=0 [var1]  : true
<randoop.PrimValue, value=0 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=10 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true
<randoop.PrimValue, value=0 [var7]  : true
<randoop.PrimValue, value=10 [var8]  : true
<randoop.PrimValue, value=0 [var9]  : true
<randoop.PrimValue, value=10 [var10]  : true
<randoop.PrimValue, value=10 [var11]  : true
<randoop.PrimValue, value=0 [var12]  : true
<randoop.PrimValue, value=0 [var13]  : true
<randoop.PrimValue, value=0 [var14]  : true
<randoop.PrimValue, value=10 [var15]  : true
<randoop.PrimValue, value=10 [var16]  : true
<randoop.PrimValue, value=0 [var17]  : true
<randoop.PrimValue, value=0 [var18]  : true
<randoop.PrimValue, value=0 [var19]  : true
<randoop.PrimValue, value=10 [var20]  : true
<randoop.PrimValue, value=0 [var21]  : true
<randoop.PrimValue, value=10 [var22]  : true

allSequences.size()=216
-------------------------------------------
randoop.util.Randomness: total calls to random: 1290
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 215 sequences.
components: 215
randoop.util.Randomness: total calls to random: 1291
randoop.util.Randomness: total calls to random: 1292
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.randomNumber() : var0 
var2 =  method : A.randomNumber() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.normal() : var0 
var6 =  method : A.normal() : var0 
var7 =  method : A.randomNumber() : var0 
var8 =  method : A.normal() : var0 
var9 =  method : A.randomNumber() : var0 
var10 =  method : A.randomNumber() : var0 
var11 =  method : A.normal() : var0 
var12 =  method : A.normal() : var0 
var13 =  method : A.randomNumber() : var0 
var14 =  method : A.randomNumber() : var0 
var15 =  method : A.normal() : var0 
var16 =  method : A.randomNumber() : var0 
var17 =  method : A.normal() : var0 
var18 =  method : A.randomNumber() : var0 
var19 =  method : A.normal() : var0 
var20 =  method : A.normal() : var0 
var21 =  method : A.randomNumber() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Making index 12 inactive (value is a primitive)
Making index 13 inactive (value is a primitive)
Making index 14 inactive (value is a primitive)
Making index 15 inactive (value is a primitive)
Making index 16 inactive (value is a primitive)
Making index 17 inactive (value is a primitive)
Making index 18 inactive (value is a primitive)
Making index 19 inactive (value is a primitive)
Making index 20 inactive (value is a primitive)
Making index 21 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var10 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var11 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var12 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var13 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var14 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var15 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var16 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var17 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var18 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var19 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var20 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var21 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=0 [var1]  : true
<randoop.PrimValue, value=0 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=10 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true
<randoop.PrimValue, value=0 [var7]  : true
<randoop.PrimValue, value=10 [var8]  : true
<randoop.PrimValue, value=0 [var9]  : true
<randoop.PrimValue, value=0 [var10]  : true
<randoop.PrimValue, value=10 [var11]  : true
<randoop.PrimValue, value=10 [var12]  : true
<randoop.PrimValue, value=0 [var13]  : true
<randoop.PrimValue, value=0 [var14]  : true
<randoop.PrimValue, value=10 [var15]  : true
<randoop.PrimValue, value=0 [var16]  : true
<randoop.PrimValue, value=10 [var17]  : true
<randoop.PrimValue, value=0 [var18]  : true
<randoop.PrimValue, value=10 [var19]  : true
<randoop.PrimValue, value=10 [var20]  : true
<randoop.PrimValue, value=0 [var21]  : true

allSequences.size()=217
-------------------------------------------
randoop.util.Randomness: total calls to random: 1293
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 216 sequences.
components: 216
randoop.util.Randomness: total calls to random: 1294
randoop.util.Randomness: total calls to random: 1295
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.randomNumber() : var0 
var2 =  method : A.randomNumber() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.normal() : var0 
var5 =  method : A.normal() : var0 
var6 =  method : A.randomNumber() : var0 
var7 =  method : A.normal() : var0 
var8 =  method : A.normal() : var0 
var9 =  method : A.normal() : var0 
var10 =  method : A.normal() : var0 
var11 =  method : A.normal() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var10 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var11 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=0 [var1]  : true
<randoop.PrimValue, value=0 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=10 [var4]  : true
<randoop.PrimValue, value=10 [var5]  : true
<randoop.PrimValue, value=0 [var6]  : true
<randoop.PrimValue, value=10 [var7]  : true
<randoop.PrimValue, value=10 [var8]  : true
<randoop.PrimValue, value=10 [var9]  : true
<randoop.PrimValue, value=10 [var10]  : true
<randoop.PrimValue, value=10 [var11]  : true

allSequences.size()=218
-------------------------------------------
randoop.util.Randomness: total calls to random: 1296
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 217 sequences.
components: 217
randoop.util.Randomness: total calls to random: 1297
randoop.util.Randomness: total calls to random: 1298
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.randomNumber() : var0 
var2 =  method : A.randomNumber() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.normal() : var0 
var6 =  method : A.normal() : var0 
var7 =  method : A.randomNumber() : var0 
var8 =  method : A.randomNumber() : var0 
var9 =  method : A.randomNumber() : var0 
var10 =  method : A.randomNumber() : var0 
var11 =  method : A.randomNumber() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var10 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var11 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=0 [var1]  : true
<randoop.PrimValue, value=0 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=10 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true
<randoop.PrimValue, value=0 [var7]  : true
<randoop.PrimValue, value=0 [var8]  : true
<randoop.PrimValue, value=0 [var9]  : true
<randoop.PrimValue, value=0 [var10]  : true
<randoop.PrimValue, value=0 [var11]  : true

allSequences.size()=219
-------------------------------------------
randoop.util.Randomness: total calls to random: 1299
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 218 sequences.
components: 218
randoop.util.Randomness: total calls to random: 1300
randoop.util.Randomness: total calls to random: 1301
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.randomNumber() : var0 
var2 =  method : A.randomNumber() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.normal() : var0 
var5 =  method : A.normal() : var0 
var6 =  method : A.normal() : var0 
var7 =  method : A.normal() : var0 
var8 =  method : A.normal() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=0 [var1]  : true
<randoop.PrimValue, value=0 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=10 [var4]  : true
<randoop.PrimValue, value=10 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true
<randoop.PrimValue, value=10 [var7]  : true
<randoop.PrimValue, value=10 [var8]  : true

allSequences.size()=220
-------------------------------------------
randoop.util.Randomness: total calls to random: 1302
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 219 sequences.
components: 219
randoop.util.Randomness: total calls to random: 1303
randoop.util.Randomness: total calls to random: 1304
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.normal() : var0 
var2 =  method : A.normal() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.normal() : var0 
var5 =  method : A.normal() : var0 
var6 =  method : A.randomNumber() : var0 
var7 =  method : A.normal() : var0 
var8 =  method : A.normal() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=10 [var1]  : true
<randoop.PrimValue, value=10 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=10 [var4]  : true
<randoop.PrimValue, value=10 [var5]  : true
<randoop.PrimValue, value=0 [var6]  : true
<randoop.PrimValue, value=10 [var7]  : true
<randoop.PrimValue, value=10 [var8]  : true

allSequences.size()=221
-------------------------------------------
randoop.util.Randomness: total calls to random: 1305
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 220 sequences.
components: 220
randoop.util.Randomness: total calls to random: 1306
randoop.util.Randomness: total calls to random: 1307
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.normal() : var0 
var2 =  method : A.normal() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.normal() : var0 
var5 =  method : A.randomNumber() : var0 
var6 =  method : A.randomNumber() : var0 
var7 =  method : A.randomNumber() : var0 
var8 =  method : A.randomNumber() : var0 
var9 =  method : A.normal() : var0 
var10 =  method : A.randomNumber() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var10 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=10 [var1]  : true
<randoop.PrimValue, value=10 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=10 [var4]  : true
<randoop.PrimValue, value=0 [var5]  : true
<randoop.PrimValue, value=0 [var6]  : true
<randoop.PrimValue, value=0 [var7]  : true
<randoop.PrimValue, value=0 [var8]  : true
<randoop.PrimValue, value=10 [var9]  : true
<randoop.PrimValue, value=0 [var10]  : true

allSequences.size()=222
-------------------------------------------
randoop.util.Randomness: total calls to random: 1308
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 221 sequences.
components: 221
randoop.util.Randomness: total calls to random: 1309
randoop.util.Randomness: total calls to random: 1310
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 1311
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 221 sequences.
components: 221
randoop.util.Randomness: total calls to random: 1312
randoop.util.Randomness: total calls to random: 1313
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 1314
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 221 sequences.
components: 221
randoop.util.Randomness: total calls to random: 1315
randoop.util.Randomness: total calls to random: 1316
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.normal() : var0 
var2 =  method : A.normal() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.normal() : var0 
var5 =  method : A.randomNumber() : var0 
var6 =  method : A.normal() : var0 
var7 =  method : A.normal() : var0 
var8 =  method : A.normal() : var0 
var9 =  method : A.randomNumber() : var0 
var10 =  method : A.randomNumber() : var0 
var11 =  method : A.randomNumber() : var0 
var12 =  method : A.normal() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Making index 12 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var10 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var11 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var12 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=10 [var1]  : true
<randoop.PrimValue, value=10 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=10 [var4]  : true
<randoop.PrimValue, value=0 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true
<randoop.PrimValue, value=10 [var7]  : true
<randoop.PrimValue, value=10 [var8]  : true
<randoop.PrimValue, value=0 [var9]  : true
<randoop.PrimValue, value=0 [var10]  : true
<randoop.PrimValue, value=0 [var11]  : true
<randoop.PrimValue, value=10 [var12]  : true

allSequences.size()=223
-------------------------------------------
randoop.util.Randomness: total calls to random: 1317
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 222 sequences.
components: 222
randoop.util.Randomness: total calls to random: 1318
randoop.util.Randomness: total calls to random: 1319
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.normal() : var0 
var2 =  method : A.normal() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.normal() : var0 
var5 =  method : A.normal() : var0 
var6 =  method : A.normal() : var0 
var7 =  method : A.normal() : var0 
var8 =  method : A.randomNumber() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=10 [var1]  : true
<randoop.PrimValue, value=10 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=10 [var4]  : true
<randoop.PrimValue, value=10 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true
<randoop.PrimValue, value=10 [var7]  : true
<randoop.PrimValue, value=0 [var8]  : true

allSequences.size()=224
-------------------------------------------
randoop.util.Randomness: total calls to random: 1320
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 223 sequences.
components: 223
randoop.util.Randomness: total calls to random: 1321
randoop.util.Randomness: total calls to random: 1322
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 1323
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 223 sequences.
components: 223
randoop.util.Randomness: total calls to random: 1324
randoop.util.Randomness: total calls to random: 1325
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.normal() : var0 
var2 =  method : A.randomNumber() : var0 
var3 =  method : A.randomNumber() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.normal() : var0 
var6 =  method : A.randomNumber() : var0 
var7 =  method : A.normal() : var0 
var8 =  method : A.normal() : var0 
var9 =  method : A.randomNumber() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=10 [var1]  : true
<randoop.PrimValue, value=0 [var2]  : true
<randoop.PrimValue, value=0 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=10 [var5]  : true
<randoop.PrimValue, value=0 [var6]  : true
<randoop.PrimValue, value=10 [var7]  : true
<randoop.PrimValue, value=10 [var8]  : true
<randoop.PrimValue, value=0 [var9]  : true

allSequences.size()=225
-------------------------------------------
randoop.util.Randomness: total calls to random: 1326
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 224 sequences.
components: 224
randoop.util.Randomness: total calls to random: 1327
randoop.util.Randomness: total calls to random: 1328
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.randomNumber() : var0 
var2 =  method : A.randomNumber() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.normal() : var0 
var5 =  method : A.normal() : var0 
var6 =  method : A.randomNumber() : var0 
var7 =  method : A.normal() : var0 
var8 =  method : A.normal() : var0 
var9 =  method : A.normal() : var0 
var10 =  method : A.normal() : var0 
var11 =  method : A.randomNumber() : var0 
var12 =  method : A.randomNumber() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Making index 12 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var10 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var11 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var12 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=0 [var1]  : true
<randoop.PrimValue, value=0 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=10 [var4]  : true
<randoop.PrimValue, value=10 [var5]  : true
<randoop.PrimValue, value=0 [var6]  : true
<randoop.PrimValue, value=10 [var7]  : true
<randoop.PrimValue, value=10 [var8]  : true
<randoop.PrimValue, value=10 [var9]  : true
<randoop.PrimValue, value=10 [var10]  : true
<randoop.PrimValue, value=0 [var11]  : true
<randoop.PrimValue, value=0 [var12]  : true

allSequences.size()=226
-------------------------------------------
randoop.util.Randomness: total calls to random: 1329
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 225 sequences.
components: 225
randoop.util.Randomness: total calls to random: 1330
randoop.util.Randomness: total calls to random: 1331
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.randomNumber() : var0 
var2 =  method : A.randomNumber() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.normal() : var0 
var6 =  method : A.normal() : var0 
var7 =  method : A.randomNumber() : var0 
var8 =  method : A.normal() : var0 
var9 =  method : A.randomNumber() : var0 
var10 =  method : A.normal() : var0 
var11 =  method : A.normal() : var0 
var12 =  method : A.randomNumber() : var0 
var13 =  method : A.randomNumber() : var0 
var14 =  method : A.randomNumber() : var0 
var15 =  method : A.normal() : var0 
var16 =  method : A.normal() : var0 
var17 =  method : A.randomNumber() : var0 
var18 =  method : A.randomNumber() : var0 
var19 =  method : A.randomNumber() : var0 
var20 =  method : A.randomNumber() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Making index 12 inactive (value is a primitive)
Making index 13 inactive (value is a primitive)
Making index 14 inactive (value is a primitive)
Making index 15 inactive (value is a primitive)
Making index 16 inactive (value is a primitive)
Making index 17 inactive (value is a primitive)
Making index 18 inactive (value is a primitive)
Making index 19 inactive (value is a primitive)
Making index 20 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var10 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var11 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var12 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var13 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var14 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var15 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var16 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var17 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var18 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var19 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var20 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=0 [var1]  : true
<randoop.PrimValue, value=0 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=10 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true
<randoop.PrimValue, value=0 [var7]  : true
<randoop.PrimValue, value=10 [var8]  : true
<randoop.PrimValue, value=0 [var9]  : true
<randoop.PrimValue, value=10 [var10]  : true
<randoop.PrimValue, value=10 [var11]  : true
<randoop.PrimValue, value=0 [var12]  : true
<randoop.PrimValue, value=0 [var13]  : true
<randoop.PrimValue, value=0 [var14]  : true
<randoop.PrimValue, value=10 [var15]  : true
<randoop.PrimValue, value=10 [var16]  : true
<randoop.PrimValue, value=0 [var17]  : true
<randoop.PrimValue, value=0 [var18]  : true
<randoop.PrimValue, value=0 [var19]  : true
<randoop.PrimValue, value=0 [var20]  : true

allSequences.size()=227
-------------------------------------------
randoop.util.Randomness: total calls to random: 1332
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 226 sequences.
components: 226
randoop.util.Randomness: total calls to random: 1333
randoop.util.Randomness: total calls to random: 1334
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.normal() : var0 
var2 =  method : A.normal() : var0 
var3 =  method : A.randomNumber() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.randomNumber() : var0 
var6 =  method : A.normal() : var0 
var7 =  method : A.randomNumber() : var0 
var8 =  method : A.normal() : var0 
var9 =  method : A.normal() : var0 
var10 =  method : A.normal() : var0 
var11 =  method : A.randomNumber() : var0 
var12 =  method : A.randomNumber() : var0 
var13 =  method : A.normal() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Making index 12 inactive (value is a primitive)
Making index 13 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var10 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var11 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var12 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var13 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=10 [var1]  : true
<randoop.PrimValue, value=10 [var2]  : true
<randoop.PrimValue, value=0 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=0 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true
<randoop.PrimValue, value=0 [var7]  : true
<randoop.PrimValue, value=10 [var8]  : true
<randoop.PrimValue, value=10 [var9]  : true
<randoop.PrimValue, value=10 [var10]  : true
<randoop.PrimValue, value=0 [var11]  : true
<randoop.PrimValue, value=0 [var12]  : true
<randoop.PrimValue, value=10 [var13]  : true

allSequences.size()=228
-------------------------------------------
randoop.util.Randomness: total calls to random: 1335
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 227 sequences.
components: 227
randoop.util.Randomness: total calls to random: 1336
randoop.util.Randomness: total calls to random: 1337
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.randomNumber() : var0 
var2 =  method : A.randomNumber() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.normal() : var0 
var6 =  method : A.normal() : var0 
var7 =  method : A.randomNumber() : var0 
var8 =  method : A.normal() : var0 
var9 =  method : A.randomNumber() : var0 
var10 =  method : A.randomNumber() : var0 
var11 =  method : A.normal() : var0 
var12 =  method : A.normal() : var0 
var13 =  method : A.randomNumber() : var0 
var14 =  method : A.randomNumber() : var0 
var15 =  method : A.normal() : var0 
var16 =  method : A.randomNumber() : var0 
var17 =  method : A.normal() : var0 
var18 =  method : A.randomNumber() : var0 
var19 =  method : A.normal() : var0 
var20 =  method : A.normal() : var0 
var21 =  method : A.normal() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Making index 12 inactive (value is a primitive)
Making index 13 inactive (value is a primitive)
Making index 14 inactive (value is a primitive)
Making index 15 inactive (value is a primitive)
Making index 16 inactive (value is a primitive)
Making index 17 inactive (value is a primitive)
Making index 18 inactive (value is a primitive)
Making index 19 inactive (value is a primitive)
Making index 20 inactive (value is a primitive)
Making index 21 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var10 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var11 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var12 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var13 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var14 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var15 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var16 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var17 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var18 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var19 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var20 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var21 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=0 [var1]  : true
<randoop.PrimValue, value=0 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=10 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true
<randoop.PrimValue, value=0 [var7]  : true
<randoop.PrimValue, value=10 [var8]  : true
<randoop.PrimValue, value=0 [var9]  : true
<randoop.PrimValue, value=0 [var10]  : true
<randoop.PrimValue, value=10 [var11]  : true
<randoop.PrimValue, value=10 [var12]  : true
<randoop.PrimValue, value=0 [var13]  : true
<randoop.PrimValue, value=0 [var14]  : true
<randoop.PrimValue, value=10 [var15]  : true
<randoop.PrimValue, value=0 [var16]  : true
<randoop.PrimValue, value=10 [var17]  : true
<randoop.PrimValue, value=0 [var18]  : true
<randoop.PrimValue, value=10 [var19]  : true
<randoop.PrimValue, value=10 [var20]  : true
<randoop.PrimValue, value=10 [var21]  : true

allSequences.size()=229
-------------------------------------------
randoop.util.Randomness: total calls to random: 1338
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 228 sequences.
components: 228
randoop.util.Randomness: total calls to random: 1339
randoop.util.Randomness: total calls to random: 1340
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.normal() : var0 
var2 =  method : A.normal() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.normal() : var0 
var5 =  method : A.randomNumber() : var0 
var6 =  method : A.normal() : var0 
var7 =  method : A.normal() : var0 
var8 =  method : A.normal() : var0 
var9 =  method : A.normal() : var0 
var10 =  method : A.normal() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var10 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=10 [var1]  : true
<randoop.PrimValue, value=10 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=10 [var4]  : true
<randoop.PrimValue, value=0 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true
<randoop.PrimValue, value=10 [var7]  : true
<randoop.PrimValue, value=10 [var8]  : true
<randoop.PrimValue, value=10 [var9]  : true
<randoop.PrimValue, value=10 [var10]  : true

allSequences.size()=230
-------------------------------------------
randoop.util.Randomness: total calls to random: 1341
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 229 sequences.
components: 229
randoop.util.Randomness: total calls to random: 1342
randoop.util.Randomness: total calls to random: 1343
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.randomNumber() : var0 
var2 =  method : A.randomNumber() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.normal() : var0 
var6 =  method : A.normal() : var0 
var7 =  method : A.randomNumber() : var0 
var8 =  method : A.normal() : var0 
var9 =  method : A.randomNumber() : var0 
var10 =  method : A.normal() : var0 
var11 =  method : A.normal() : var0 
var12 =  method : A.randomNumber() : var0 
var13 =  method : A.randomNumber() : var0 
var14 =  method : A.randomNumber() : var0 
var15 =  method : A.normal() : var0 
var16 =  method : A.normal() : var0 
var17 =  method : A.randomNumber() : var0 
var18 =  method : A.randomNumber() : var0 
var19 =  method : A.randomNumber() : var0 
var20 =  method : A.normal() : var0 
var21 =  method : A.randomNumber() : var0 
var22 =  method : A.randomNumber() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Making index 12 inactive (value is a primitive)
Making index 13 inactive (value is a primitive)
Making index 14 inactive (value is a primitive)
Making index 15 inactive (value is a primitive)
Making index 16 inactive (value is a primitive)
Making index 17 inactive (value is a primitive)
Making index 18 inactive (value is a primitive)
Making index 19 inactive (value is a primitive)
Making index 20 inactive (value is a primitive)
Making index 21 inactive (value is a primitive)
Making index 22 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var10 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var11 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var12 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var13 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var14 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var15 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var16 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var17 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var18 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var19 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var20 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var21 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var22 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=0 [var1]  : true
<randoop.PrimValue, value=0 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=10 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true
<randoop.PrimValue, value=0 [var7]  : true
<randoop.PrimValue, value=10 [var8]  : true
<randoop.PrimValue, value=0 [var9]  : true
<randoop.PrimValue, value=10 [var10]  : true
<randoop.PrimValue, value=10 [var11]  : true
<randoop.PrimValue, value=0 [var12]  : true
<randoop.PrimValue, value=0 [var13]  : true
<randoop.PrimValue, value=0 [var14]  : true
<randoop.PrimValue, value=10 [var15]  : true
<randoop.PrimValue, value=10 [var16]  : true
<randoop.PrimValue, value=0 [var17]  : true
<randoop.PrimValue, value=0 [var18]  : true
<randoop.PrimValue, value=0 [var19]  : true
<randoop.PrimValue, value=10 [var20]  : true
<randoop.PrimValue, value=0 [var21]  : true
<randoop.PrimValue, value=0 [var22]  : true

allSequences.size()=231
-------------------------------------------
randoop.util.Randomness: total calls to random: 1344
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 230 sequences.
components: 230
randoop.util.Randomness: total calls to random: 1345
randoop.util.Randomness: total calls to random: 1346
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.randomNumber() : var0 
var2 =  method : A.randomNumber() : var0 
var3 =  method : A.randomNumber() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.randomNumber() : var0 
var6 =  method : A.normal() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=0 [var1]  : true
<randoop.PrimValue, value=0 [var2]  : true
<randoop.PrimValue, value=0 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=0 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true

allSequences.size()=232
-------------------------------------------
randoop.util.Randomness: total calls to random: 1347
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 231 sequences.
components: 231
randoop.util.Randomness: total calls to random: 1348
randoop.util.Randomness: total calls to random: 1349
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 1350
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 231 sequences.
components: 231
randoop.util.Randomness: total calls to random: 1351
randoop.util.Randomness: total calls to random: 1352
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.normal() : var0 
var2 =  method : A.normal() : var0 
var3 =  method : A.randomNumber() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.randomNumber() : var0 
var6 =  method : A.normal() : var0 
var7 =  method : A.randomNumber() : var0 
var8 =  method : A.randomNumber() : var0 
var9 =  method : A.randomNumber() : var0 
var10 =  method : A.randomNumber() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var10 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=10 [var1]  : true
<randoop.PrimValue, value=10 [var2]  : true
<randoop.PrimValue, value=0 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=0 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true
<randoop.PrimValue, value=0 [var7]  : true
<randoop.PrimValue, value=0 [var8]  : true
<randoop.PrimValue, value=0 [var9]  : true
<randoop.PrimValue, value=0 [var10]  : true

allSequences.size()=233
-------------------------------------------
randoop.util.Randomness: total calls to random: 1353
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 232 sequences.
components: 232
randoop.util.Randomness: total calls to random: 1354
randoop.util.Randomness: total calls to random: 1355
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.normal() : var0 
var2 =  method : A.normal() : var0 
var3 =  method : A.randomNumber() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.randomNumber() : var0 
var6 =  method : A.normal() : var0 
var7 =  method : A.randomNumber() : var0 
var8 =  method : A.normal() : var0 
var9 =  method : A.normal() : var0 
var10 =  method : A.normal() : var0 
var11 =  method : A.randomNumber() : var0 
var12 =  method : A.randomNumber() : var0 
var13 =  method : A.normal() : var0 
var14 =  method : A.normal() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Making index 12 inactive (value is a primitive)
Making index 13 inactive (value is a primitive)
Making index 14 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var10 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var11 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var12 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var13 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var14 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=10 [var1]  : true
<randoop.PrimValue, value=10 [var2]  : true
<randoop.PrimValue, value=0 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=0 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true
<randoop.PrimValue, value=0 [var7]  : true
<randoop.PrimValue, value=10 [var8]  : true
<randoop.PrimValue, value=10 [var9]  : true
<randoop.PrimValue, value=10 [var10]  : true
<randoop.PrimValue, value=0 [var11]  : true
<randoop.PrimValue, value=0 [var12]  : true
<randoop.PrimValue, value=10 [var13]  : true
<randoop.PrimValue, value=10 [var14]  : true

allSequences.size()=234
-------------------------------------------
randoop.util.Randomness: total calls to random: 1356
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 233 sequences.
components: 233
randoop.util.Randomness: total calls to random: 1357
randoop.util.Randomness: total calls to random: 1358
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.randomNumber() : var0 
var2 =  method : A.randomNumber() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.normal() : var0 
var6 =  method : A.randomNumber() : var0 
var7 =  method : A.normal() : var0 
var8 =  method : A.randomNumber() : var0 
var9 =  method : A.normal() : var0 
var10 =  method : A.randomNumber() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var10 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=0 [var1]  : true
<randoop.PrimValue, value=0 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=10 [var5]  : true
<randoop.PrimValue, value=0 [var6]  : true
<randoop.PrimValue, value=10 [var7]  : true
<randoop.PrimValue, value=0 [var8]  : true
<randoop.PrimValue, value=10 [var9]  : true
<randoop.PrimValue, value=0 [var10]  : true

allSequences.size()=235
-------------------------------------------
randoop.util.Randomness: total calls to random: 1359
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 234 sequences.
components: 234
randoop.util.Randomness: total calls to random: 1360
randoop.util.Randomness: total calls to random: 1361
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 1362
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 234 sequences.
components: 234
randoop.util.Randomness: total calls to random: 1363
randoop.util.Randomness: total calls to random: 1364
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.randomNumber() : var0 
var2 =  method : A.randomNumber() : var0 
var3 =  method : A.randomNumber() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.normal() : var0 
var6 =  method : A.normal() : var0 
var7 =  method : A.randomNumber() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=0 [var1]  : true
<randoop.PrimValue, value=0 [var2]  : true
<randoop.PrimValue, value=0 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=10 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true
<randoop.PrimValue, value=0 [var7]  : true

allSequences.size()=236
-------------------------------------------
randoop.util.Randomness: total calls to random: 1365
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 235 sequences.
components: 235
randoop.util.Randomness: total calls to random: 1366
randoop.util.Randomness: total calls to random: 1367
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 1368
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 235 sequences.
components: 235
randoop.util.Randomness: total calls to random: 1369
randoop.util.Randomness: total calls to random: 1370
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 1371
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 235 sequences.
components: 235
randoop.util.Randomness: total calls to random: 1372
randoop.util.Randomness: total calls to random: 1373
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.normal() : var0 
var2 =  method : A.randomNumber() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.normal() : var0 
var6 =  method : A.randomNumber() : var0 
var7 =  method : A.normal() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=10 [var1]  : true
<randoop.PrimValue, value=0 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=10 [var5]  : true
<randoop.PrimValue, value=0 [var6]  : true
<randoop.PrimValue, value=10 [var7]  : true

allSequences.size()=237
-------------------------------------------
randoop.util.Randomness: total calls to random: 1374
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 236 sequences.
components: 236
randoop.util.Randomness: total calls to random: 1375
randoop.util.Randomness: total calls to random: 1376
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 1377
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 236 sequences.
components: 236
randoop.util.Randomness: total calls to random: 1378
randoop.util.Randomness: total calls to random: 1379
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.randomNumber() : var0 
var2 =  method : A.randomNumber() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.normal() : var0 
var6 =  method : A.normal() : var0 
var7 =  method : A.randomNumber() : var0 
var8 =  method : A.normal() : var0 
var9 =  method : A.randomNumber() : var0 
var10 =  method : A.randomNumber() : var0 
var11 =  method : A.normal() : var0 
var12 =  method : A.randomNumber() : var0 
var13 =  method : A.normal() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Making index 12 inactive (value is a primitive)
Making index 13 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var10 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var11 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var12 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var13 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=0 [var1]  : true
<randoop.PrimValue, value=0 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=10 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true
<randoop.PrimValue, value=0 [var7]  : true
<randoop.PrimValue, value=10 [var8]  : true
<randoop.PrimValue, value=0 [var9]  : true
<randoop.PrimValue, value=0 [var10]  : true
<randoop.PrimValue, value=10 [var11]  : true
<randoop.PrimValue, value=0 [var12]  : true
<randoop.PrimValue, value=10 [var13]  : true

allSequences.size()=238
-------------------------------------------
randoop.util.Randomness: total calls to random: 1380
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 237 sequences.
components: 237
randoop.util.Randomness: total calls to random: 1381
randoop.util.Randomness: total calls to random: 1382
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 1383
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 237 sequences.
components: 237
randoop.util.Randomness: total calls to random: 1384
randoop.util.Randomness: total calls to random: 1385
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.normal() : var0 
var2 =  method : A.normal() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.normal() : var0 
var5 =  method : A.randomNumber() : var0 
var6 =  method : A.normal() : var0 
var7 =  method : A.normal() : var0 
var8 =  method : A.normal() : var0 
var9 =  method : A.randomNumber() : var0 
var10 =  method : A.randomNumber() : var0 
var11 =  method : A.randomNumber() : var0 
var12 =  method : A.randomNumber() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Making index 12 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var10 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var11 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var12 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=10 [var1]  : true
<randoop.PrimValue, value=10 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=10 [var4]  : true
<randoop.PrimValue, value=0 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true
<randoop.PrimValue, value=10 [var7]  : true
<randoop.PrimValue, value=10 [var8]  : true
<randoop.PrimValue, value=0 [var9]  : true
<randoop.PrimValue, value=0 [var10]  : true
<randoop.PrimValue, value=0 [var11]  : true
<randoop.PrimValue, value=0 [var12]  : true

allSequences.size()=239
-------------------------------------------
randoop.util.Randomness: total calls to random: 1386
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 238 sequences.
components: 238
randoop.util.Randomness: total calls to random: 1387
randoop.util.Randomness: total calls to random: 1388
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 1389
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 238 sequences.
components: 238
randoop.util.Randomness: total calls to random: 1390
randoop.util.Randomness: total calls to random: 1391
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.normal() : var0 
var2 =  method : A.normal() : var0 
var3 =  method : A.randomNumber() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.randomNumber() : var0 
var6 =  method : A.normal() : var0 
var7 =  method : A.randomNumber() : var0 
var8 =  method : A.normal() : var0 
var9 =  method : A.randomNumber() : var0 
var10 =  method : A.randomNumber() : var0 
var11 =  method : A.randomNumber() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var10 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var11 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=10 [var1]  : true
<randoop.PrimValue, value=10 [var2]  : true
<randoop.PrimValue, value=0 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=0 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true
<randoop.PrimValue, value=0 [var7]  : true
<randoop.PrimValue, value=10 [var8]  : true
<randoop.PrimValue, value=0 [var9]  : true
<randoop.PrimValue, value=0 [var10]  : true
<randoop.PrimValue, value=0 [var11]  : true

allSequences.size()=240
-------------------------------------------
randoop.util.Randomness: total calls to random: 1392
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 239 sequences.
components: 239
randoop.util.Randomness: total calls to random: 1393
randoop.util.Randomness: total calls to random: 1394
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.randomNumber() : var0 
var2 =  method : A.randomNumber() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.normal() : var0 
var5 =  method : A.normal() : var0 
var6 =  method : A.normal() : var0 
var7 =  method : A.randomNumber() : var0 
var8 =  method : A.normal() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=0 [var1]  : true
<randoop.PrimValue, value=0 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=10 [var4]  : true
<randoop.PrimValue, value=10 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true
<randoop.PrimValue, value=0 [var7]  : true
<randoop.PrimValue, value=10 [var8]  : true

allSequences.size()=241
-------------------------------------------
randoop.util.Randomness: total calls to random: 1395
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 240 sequences.
components: 240
randoop.util.Randomness: total calls to random: 1396
randoop.util.Randomness: total calls to random: 1397
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.normal() : var0 
var2 =  method : A.randomNumber() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.randomNumber() : var0 
var6 =  method : A.randomNumber() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=10 [var1]  : true
<randoop.PrimValue, value=0 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=0 [var5]  : true
<randoop.PrimValue, value=0 [var6]  : true

allSequences.size()=242
-------------------------------------------
randoop.util.Randomness: total calls to random: 1398
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 241 sequences.
components: 241
randoop.util.Randomness: total calls to random: 1399
randoop.util.Randomness: total calls to random: 1400
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 1401
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 241 sequences.
components: 241
randoop.util.Randomness: total calls to random: 1402
randoop.util.Randomness: total calls to random: 1403
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.randomNumber() : var0 
var2 =  method : A.randomNumber() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.normal() : var0 
var6 =  method : A.normal() : var0 
var7 =  method : A.randomNumber() : var0 
var8 =  method : A.normal() : var0 
var9 =  method : A.randomNumber() : var0 
var10 =  method : A.normal() : var0 
var11 =  method : A.normal() : var0 
var12 =  method : A.randomNumber() : var0 
var13 =  method : A.randomNumber() : var0 
var14 =  method : A.normal() : var0 
var15 =  method : A.randomNumber() : var0 
var16 =  method : A.randomNumber() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Making index 12 inactive (value is a primitive)
Making index 13 inactive (value is a primitive)
Making index 14 inactive (value is a primitive)
Making index 15 inactive (value is a primitive)
Making index 16 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var10 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var11 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var12 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var13 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var14 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var15 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var16 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=0 [var1]  : true
<randoop.PrimValue, value=0 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=10 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true
<randoop.PrimValue, value=0 [var7]  : true
<randoop.PrimValue, value=10 [var8]  : true
<randoop.PrimValue, value=0 [var9]  : true
<randoop.PrimValue, value=10 [var10]  : true
<randoop.PrimValue, value=10 [var11]  : true
<randoop.PrimValue, value=0 [var12]  : true
<randoop.PrimValue, value=0 [var13]  : true
<randoop.PrimValue, value=10 [var14]  : true
<randoop.PrimValue, value=0 [var15]  : true
<randoop.PrimValue, value=0 [var16]  : true

allSequences.size()=243
-------------------------------------------
randoop.util.Randomness: total calls to random: 1404
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 242 sequences.
components: 242
randoop.util.Randomness: total calls to random: 1405
randoop.util.Randomness: total calls to random: 1406
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.randomNumber() : var0 
var2 =  method : A.randomNumber() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.normal() : var0 
var6 =  method : A.randomNumber() : var0 
var7 =  method : A.normal() : var0 
var8 =  method : A.randomNumber() : var0 
var9 =  method : A.normal() : var0 
var10 =  method : A.randomNumber() : var0 
var11 =  method : A.normal() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var10 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var11 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=0 [var1]  : true
<randoop.PrimValue, value=0 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=10 [var5]  : true
<randoop.PrimValue, value=0 [var6]  : true
<randoop.PrimValue, value=10 [var7]  : true
<randoop.PrimValue, value=0 [var8]  : true
<randoop.PrimValue, value=10 [var9]  : true
<randoop.PrimValue, value=0 [var10]  : true
<randoop.PrimValue, value=10 [var11]  : true

allSequences.size()=244
-------------------------------------------
randoop.util.Randomness: total calls to random: 1407
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 243 sequences.
components: 243
randoop.util.Randomness: total calls to random: 1408
randoop.util.Randomness: total calls to random: 1409
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 1410
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 243 sequences.
components: 243
randoop.util.Randomness: total calls to random: 1411
randoop.util.Randomness: total calls to random: 1412
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 1413
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 243 sequences.
components: 243
randoop.util.Randomness: total calls to random: 1414
randoop.util.Randomness: total calls to random: 1415
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.normal() : var0 
var2 =  method : A.normal() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.randomNumber() : var0 
var6 =  method : A.randomNumber() : var0 
var7 =  method : A.normal() : var0 
var8 =  method : A.randomNumber() : var0 
var9 =  method : A.normal() : var0 
var10 =  method : A.randomNumber() : var0 
var11 =  method : A.normal() : var0 
var12 =  method : A.normal() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Making index 12 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var10 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var11 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var12 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=10 [var1]  : true
<randoop.PrimValue, value=10 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=0 [var5]  : true
<randoop.PrimValue, value=0 [var6]  : true
<randoop.PrimValue, value=10 [var7]  : true
<randoop.PrimValue, value=0 [var8]  : true
<randoop.PrimValue, value=10 [var9]  : true
<randoop.PrimValue, value=0 [var10]  : true
<randoop.PrimValue, value=10 [var11]  : true
<randoop.PrimValue, value=10 [var12]  : true

allSequences.size()=245
-------------------------------------------
randoop.util.Randomness: total calls to random: 1416
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 244 sequences.
components: 244
randoop.util.Randomness: total calls to random: 1417
randoop.util.Randomness: total calls to random: 1418
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 1419
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 244 sequences.
components: 244
randoop.util.Randomness: total calls to random: 1420
randoop.util.Randomness: total calls to random: 1421
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 1422
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 244 sequences.
components: 244
randoop.util.Randomness: total calls to random: 1423
randoop.util.Randomness: total calls to random: 1424
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 1425
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 244 sequences.
components: 244
randoop.util.Randomness: total calls to random: 1426
randoop.util.Randomness: total calls to random: 1427
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 1428
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 244 sequences.
components: 244
randoop.util.Randomness: total calls to random: 1429
randoop.util.Randomness: total calls to random: 1430
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.randomNumber() : var0 
var2 =  method : A.randomNumber() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.normal() : var0 
var6 =  method : A.normal() : var0 
var7 =  method : A.randomNumber() : var0 
var8 =  method : A.normal() : var0 
var9 =  method : A.randomNumber() : var0 
var10 =  method : A.normal() : var0 
var11 =  method : A.normal() : var0 
var12 =  method : A.randomNumber() : var0 
var13 =  method : A.randomNumber() : var0 
var14 =  method : A.randomNumber() : var0 
var15 =  method : A.normal() : var0 
var16 =  method : A.normal() : var0 
var17 =  method : A.randomNumber() : var0 
var18 =  method : A.randomNumber() : var0 
var19 =  method : A.normal() : var0 
var20 =  method : A.randomNumber() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Making index 12 inactive (value is a primitive)
Making index 13 inactive (value is a primitive)
Making index 14 inactive (value is a primitive)
Making index 15 inactive (value is a primitive)
Making index 16 inactive (value is a primitive)
Making index 17 inactive (value is a primitive)
Making index 18 inactive (value is a primitive)
Making index 19 inactive (value is a primitive)
Making index 20 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var10 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var11 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var12 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var13 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var14 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var15 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var16 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var17 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var18 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var19 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var20 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=0 [var1]  : true
<randoop.PrimValue, value=0 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=10 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true
<randoop.PrimValue, value=0 [var7]  : true
<randoop.PrimValue, value=10 [var8]  : true
<randoop.PrimValue, value=0 [var9]  : true
<randoop.PrimValue, value=10 [var10]  : true
<randoop.PrimValue, value=10 [var11]  : true
<randoop.PrimValue, value=0 [var12]  : true
<randoop.PrimValue, value=0 [var13]  : true
<randoop.PrimValue, value=0 [var14]  : true
<randoop.PrimValue, value=10 [var15]  : true
<randoop.PrimValue, value=10 [var16]  : true
<randoop.PrimValue, value=0 [var17]  : true
<randoop.PrimValue, value=0 [var18]  : true
<randoop.PrimValue, value=10 [var19]  : true
<randoop.PrimValue, value=0 [var20]  : true

allSequences.size()=246
-------------------------------------------
randoop.util.Randomness: total calls to random: 1431
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 245 sequences.
components: 245
randoop.util.Randomness: total calls to random: 1432
randoop.util.Randomness: total calls to random: 1433
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.normal() : var0 
var2 =  method : A.normal() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.normal() : var0 
var5 =  method : A.normal() : var0 
var6 =  method : A.randomNumber() : var0 
var7 =  method : A.normal() : var0 
var8 =  method : A.normal() : var0 
var9 =  method : A.normal() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=10 [var1]  : true
<randoop.PrimValue, value=10 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=10 [var4]  : true
<randoop.PrimValue, value=10 [var5]  : true
<randoop.PrimValue, value=0 [var6]  : true
<randoop.PrimValue, value=10 [var7]  : true
<randoop.PrimValue, value=10 [var8]  : true
<randoop.PrimValue, value=10 [var9]  : true

allSequences.size()=247
-------------------------------------------
randoop.util.Randomness: total calls to random: 1434
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 246 sequences.
components: 246
randoop.util.Randomness: total calls to random: 1435
randoop.util.Randomness: total calls to random: 1436
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.normal() : var0 
var2 =  method : A.normal() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.normal() : var0 
var5 =  method : A.randomNumber() : var0 
var6 =  method : A.normal() : var0 
var7 =  method : A.randomNumber() : var0 
var8 =  method : A.normal() : var0 
var9 =  method : A.randomNumber() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=10 [var1]  : true
<randoop.PrimValue, value=10 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=10 [var4]  : true
<randoop.PrimValue, value=0 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true
<randoop.PrimValue, value=0 [var7]  : true
<randoop.PrimValue, value=10 [var8]  : true
<randoop.PrimValue, value=0 [var9]  : true

allSequences.size()=248
-------------------------------------------
randoop.util.Randomness: total calls to random: 1437
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 247 sequences.
components: 247
randoop.util.Randomness: total calls to random: 1438
randoop.util.Randomness: total calls to random: 1439
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 1440
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 247 sequences.
components: 247
randoop.util.Randomness: total calls to random: 1441
randoop.util.Randomness: total calls to random: 1442
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.normal() : var0 
var2 =  method : A.normal() : var0 
var3 =  method : A.randomNumber() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.randomNumber() : var0 
var6 =  method : A.normal() : var0 
var7 =  method : A.randomNumber() : var0 
var8 =  method : A.normal() : var0 
var9 =  method : A.normal() : var0 
var10 =  method : A.normal() : var0 
var11 =  method : A.normal() : var0 
var12 =  method : A.randomNumber() : var0 
var13 =  method : A.randomNumber() : var0 
var14 =  method : A.normal() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Making index 12 inactive (value is a primitive)
Making index 13 inactive (value is a primitive)
Making index 14 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var10 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var11 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var12 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var13 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var14 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=10 [var1]  : true
<randoop.PrimValue, value=10 [var2]  : true
<randoop.PrimValue, value=0 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=0 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true
<randoop.PrimValue, value=0 [var7]  : true
<randoop.PrimValue, value=10 [var8]  : true
<randoop.PrimValue, value=10 [var9]  : true
<randoop.PrimValue, value=10 [var10]  : true
<randoop.PrimValue, value=10 [var11]  : true
<randoop.PrimValue, value=0 [var12]  : true
<randoop.PrimValue, value=0 [var13]  : true
<randoop.PrimValue, value=10 [var14]  : true

allSequences.size()=249
-------------------------------------------
randoop.util.Randomness: total calls to random: 1443
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 248 sequences.
components: 248
randoop.util.Randomness: total calls to random: 1444
randoop.util.Randomness: total calls to random: 1445
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 1446
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 248 sequences.
components: 248
randoop.util.Randomness: total calls to random: 1447
randoop.util.Randomness: total calls to random: 1448
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 1449
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 248 sequences.
components: 248
randoop.util.Randomness: total calls to random: 1450
randoop.util.Randomness: total calls to random: 1451
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.randomNumber() : var0 
var2 =  method : A.randomNumber() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.normal() : var0 
var6 =  method : A.normal() : var0 
var7 =  method : A.randomNumber() : var0 
var8 =  method : A.normal() : var0 
var9 =  method : A.randomNumber() : var0 
var10 =  method : A.normal() : var0 
var11 =  method : A.normal() : var0 
var12 =  method : A.randomNumber() : var0 
var13 =  method : A.normal() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Making index 12 inactive (value is a primitive)
Making index 13 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var10 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var11 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var12 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var13 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=0 [var1]  : true
<randoop.PrimValue, value=0 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=10 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true
<randoop.PrimValue, value=0 [var7]  : true
<randoop.PrimValue, value=10 [var8]  : true
<randoop.PrimValue, value=0 [var9]  : true
<randoop.PrimValue, value=10 [var10]  : true
<randoop.PrimValue, value=10 [var11]  : true
<randoop.PrimValue, value=0 [var12]  : true
<randoop.PrimValue, value=10 [var13]  : true

allSequences.size()=250
-------------------------------------------
randoop.util.Randomness: total calls to random: 1452
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 249 sequences.
components: 249
randoop.util.Randomness: total calls to random: 1453
randoop.util.Randomness: total calls to random: 1454
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 1455
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 249 sequences.
components: 249
randoop.util.Randomness: total calls to random: 1456
randoop.util.Randomness: total calls to random: 1457
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.randomNumber() : var0 
var2 =  method : A.randomNumber() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.normal() : var0 
var6 =  method : A.normal() : var0 
var7 =  method : A.normal() : var0 
var8 =  method : A.normal() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=0 [var1]  : true
<randoop.PrimValue, value=0 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=10 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true
<randoop.PrimValue, value=10 [var7]  : true
<randoop.PrimValue, value=10 [var8]  : true

allSequences.size()=251
-------------------------------------------
randoop.util.Randomness: total calls to random: 1458
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 250 sequences.
components: 250
randoop.util.Randomness: total calls to random: 1459
randoop.util.Randomness: total calls to random: 1460
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 1461
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 250 sequences.
components: 250
randoop.util.Randomness: total calls to random: 1462
randoop.util.Randomness: total calls to random: 1463
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 1464
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 250 sequences.
components: 250
randoop.util.Randomness: total calls to random: 1465
randoop.util.Randomness: total calls to random: 1466
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 1467
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 250 sequences.
components: 250
randoop.util.Randomness: total calls to random: 1468
randoop.util.Randomness: total calls to random: 1469
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 1470
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 250 sequences.
components: 250
randoop.util.Randomness: total calls to random: 1471
randoop.util.Randomness: total calls to random: 1472
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 1473
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 250 sequences.
components: 250
randoop.util.Randomness: total calls to random: 1474
randoop.util.Randomness: total calls to random: 1475
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 1476
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 250 sequences.
components: 250
randoop.util.Randomness: total calls to random: 1477
randoop.util.Randomness: total calls to random: 1478
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 1479
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 250 sequences.
components: 250
randoop.util.Randomness: total calls to random: 1480
randoop.util.Randomness: total calls to random: 1481
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.normal() : var0 
var2 =  method : A.randomNumber() : var0 
var3 =  method : A.randomNumber() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.randomNumber() : var0 
var6 =  method : A.randomNumber() : var0 
var7 =  method : A.randomNumber() : var0 
var8 =  method : A.normal() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=10 [var1]  : true
<randoop.PrimValue, value=0 [var2]  : true
<randoop.PrimValue, value=0 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=0 [var5]  : true
<randoop.PrimValue, value=0 [var6]  : true
<randoop.PrimValue, value=0 [var7]  : true
<randoop.PrimValue, value=10 [var8]  : true

allSequences.size()=252
-------------------------------------------
randoop.util.Randomness: total calls to random: 1482
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 251 sequences.
components: 251
randoop.util.Randomness: total calls to random: 1483
randoop.util.Randomness: total calls to random: 1484
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.normal() : var0 
var2 =  method : A.normal() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.randomNumber() : var0 
var6 =  method : A.randomNumber() : var0 
var7 =  method : A.normal() : var0 
var8 =  method : A.randomNumber() : var0 
var9 =  method : A.normal() : var0 
var10 =  method : A.randomNumber() : var0 
var11 =  method : A.randomNumber() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var10 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var11 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=10 [var1]  : true
<randoop.PrimValue, value=10 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=0 [var5]  : true
<randoop.PrimValue, value=0 [var6]  : true
<randoop.PrimValue, value=10 [var7]  : true
<randoop.PrimValue, value=0 [var8]  : true
<randoop.PrimValue, value=10 [var9]  : true
<randoop.PrimValue, value=0 [var10]  : true
<randoop.PrimValue, value=0 [var11]  : true

allSequences.size()=253
-------------------------------------------
randoop.util.Randomness: total calls to random: 1485
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 252 sequences.
components: 252
randoop.util.Randomness: total calls to random: 1486
randoop.util.Randomness: total calls to random: 1487
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.normal() : var0 
var2 =  method : A.normal() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.normal() : var0 
var5 =  method : A.randomNumber() : var0 
var6 =  method : A.randomNumber() : var0 
var7 =  method : A.randomNumber() : var0 
var8 =  method : A.randomNumber() : var0 
var9 =  method : A.normal() : var0 
var10 =  method : A.randomNumber() : var0 
var11 =  method : A.randomNumber() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var10 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var11 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=10 [var1]  : true
<randoop.PrimValue, value=10 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=10 [var4]  : true
<randoop.PrimValue, value=0 [var5]  : true
<randoop.PrimValue, value=0 [var6]  : true
<randoop.PrimValue, value=0 [var7]  : true
<randoop.PrimValue, value=0 [var8]  : true
<randoop.PrimValue, value=10 [var9]  : true
<randoop.PrimValue, value=0 [var10]  : true
<randoop.PrimValue, value=0 [var11]  : true

allSequences.size()=254
-------------------------------------------
randoop.util.Randomness: total calls to random: 1488
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 253 sequences.
components: 253
randoop.util.Randomness: total calls to random: 1489
randoop.util.Randomness: total calls to random: 1490
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 1491
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 253 sequences.
components: 253
randoop.util.Randomness: total calls to random: 1492
randoop.util.Randomness: total calls to random: 1493
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.normal() : var0 
var2 =  method : A.normal() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.normal() : var0 
var5 =  method : A.randomNumber() : var0 
var6 =  method : A.normal() : var0 
var7 =  method : A.normal() : var0 
var8 =  method : A.normal() : var0 
var9 =  method : A.randomNumber() : var0 
var10 =  method : A.normal() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var10 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=10 [var1]  : true
<randoop.PrimValue, value=10 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=10 [var4]  : true
<randoop.PrimValue, value=0 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true
<randoop.PrimValue, value=10 [var7]  : true
<randoop.PrimValue, value=10 [var8]  : true
<randoop.PrimValue, value=0 [var9]  : true
<randoop.PrimValue, value=10 [var10]  : true

allSequences.size()=255
-------------------------------------------
randoop.util.Randomness: total calls to random: 1494
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 254 sequences.
components: 254
randoop.util.Randomness: total calls to random: 1495
randoop.util.Randomness: total calls to random: 1496
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.normal() : var0 
var2 =  method : A.randomNumber() : var0 
var3 =  method : A.randomNumber() : var0 
var4 =  method : A.normal() : var0 
var5 =  method : A.randomNumber() : var0 
var6 =  method : A.normal() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=10 [var1]  : true
<randoop.PrimValue, value=0 [var2]  : true
<randoop.PrimValue, value=0 [var3]  : true
<randoop.PrimValue, value=10 [var4]  : true
<randoop.PrimValue, value=0 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true

allSequences.size()=256
-------------------------------------------
randoop.util.Randomness: total calls to random: 1497
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 255 sequences.
components: 255
randoop.util.Randomness: total calls to random: 1498
randoop.util.Randomness: total calls to random: 1499
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 1500
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 255 sequences.
components: 255
randoop.util.Randomness: total calls to random: 1501
randoop.util.Randomness: total calls to random: 1502
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.normal() : var0 
var2 =  method : A.randomNumber() : var0 
var3 =  method : A.randomNumber() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.normal() : var0 
var6 =  method : A.normal() : var0 
var7 =  method : A.normal() : var0 
var8 =  method : A.randomNumber() : var0 
var9 =  method : A.normal() : var0 
var10 =  method : A.randomNumber() : var0 
var11 =  method : A.normal() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var10 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var11 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=10 [var1]  : true
<randoop.PrimValue, value=0 [var2]  : true
<randoop.PrimValue, value=0 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=10 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true
<randoop.PrimValue, value=10 [var7]  : true
<randoop.PrimValue, value=0 [var8]  : true
<randoop.PrimValue, value=10 [var9]  : true
<randoop.PrimValue, value=0 [var10]  : true
<randoop.PrimValue, value=10 [var11]  : true

allSequences.size()=257
-------------------------------------------
randoop.util.Randomness: total calls to random: 1503
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 256 sequences.
components: 256
randoop.util.Randomness: total calls to random: 1504
randoop.util.Randomness: total calls to random: 1505
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 1506
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 256 sequences.
components: 256
randoop.util.Randomness: total calls to random: 1507
randoop.util.Randomness: total calls to random: 1508
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.normal() : var0 
var2 =  method : A.normal() : var0 
var3 =  method : A.randomNumber() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.randomNumber() : var0 
var6 =  method : A.normal() : var0 
var7 =  method : A.randomNumber() : var0 
var8 =  method : A.normal() : var0 
var9 =  method : A.normal() : var0 
var10 =  method : A.normal() : var0 
var11 =  method : A.randomNumber() : var0 
var12 =  method : A.randomNumber() : var0 
var13 =  method : A.randomNumber() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Making index 12 inactive (value is a primitive)
Making index 13 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var10 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var11 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var12 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var13 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=10 [var1]  : true
<randoop.PrimValue, value=10 [var2]  : true
<randoop.PrimValue, value=0 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=0 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true
<randoop.PrimValue, value=0 [var7]  : true
<randoop.PrimValue, value=10 [var8]  : true
<randoop.PrimValue, value=10 [var9]  : true
<randoop.PrimValue, value=10 [var10]  : true
<randoop.PrimValue, value=0 [var11]  : true
<randoop.PrimValue, value=0 [var12]  : true
<randoop.PrimValue, value=0 [var13]  : true

allSequences.size()=258
-------------------------------------------
randoop.util.Randomness: total calls to random: 1509
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 257 sequences.
components: 257
randoop.util.Randomness: total calls to random: 1510
randoop.util.Randomness: total calls to random: 1511
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 1512
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 257 sequences.
components: 257
randoop.util.Randomness: total calls to random: 1513
randoop.util.Randomness: total calls to random: 1514
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 1515
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 257 sequences.
components: 257
randoop.util.Randomness: total calls to random: 1516
randoop.util.Randomness: total calls to random: 1517
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.randomNumber() : var0 
var2 =  method : A.randomNumber() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.normal() : var0 
var5 =  method : A.normal() : var0 
var6 =  method : A.randomNumber() : var0 
var7 =  method : A.normal() : var0 
var8 =  method : A.normal() : var0 
var9 =  method : A.normal() : var0 
var10 =  method : A.normal() : var0 
var11 =  method : A.randomNumber() : var0 
var12 =  method : A.randomNumber() : var0 
var13 =  method : A.randomNumber() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Making index 12 inactive (value is a primitive)
Making index 13 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var10 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var11 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var12 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var13 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=0 [var1]  : true
<randoop.PrimValue, value=0 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=10 [var4]  : true
<randoop.PrimValue, value=10 [var5]  : true
<randoop.PrimValue, value=0 [var6]  : true
<randoop.PrimValue, value=10 [var7]  : true
<randoop.PrimValue, value=10 [var8]  : true
<randoop.PrimValue, value=10 [var9]  : true
<randoop.PrimValue, value=10 [var10]  : true
<randoop.PrimValue, value=0 [var11]  : true
<randoop.PrimValue, value=0 [var12]  : true
<randoop.PrimValue, value=0 [var13]  : true

allSequences.size()=259
-------------------------------------------
randoop.util.Randomness: total calls to random: 1518
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 258 sequences.
components: 258
randoop.util.Randomness: total calls to random: 1519
randoop.util.Randomness: total calls to random: 1520
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 1521
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 258 sequences.
components: 258
randoop.util.Randomness: total calls to random: 1522
randoop.util.Randomness: total calls to random: 1523
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.randomNumber() : var0 
var2 =  method : A.randomNumber() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.normal() : var0 
var6 =  method : A.normal() : var0 
var7 =  method : A.randomNumber() : var0 
var8 =  method : A.normal() : var0 
var9 =  method : A.normal() : var0 
var10 =  method : A.normal() : var0 
var11 =  method : A.randomNumber() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var10 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var11 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=0 [var1]  : true
<randoop.PrimValue, value=0 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=10 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true
<randoop.PrimValue, value=0 [var7]  : true
<randoop.PrimValue, value=10 [var8]  : true
<randoop.PrimValue, value=10 [var9]  : true
<randoop.PrimValue, value=10 [var10]  : true
<randoop.PrimValue, value=0 [var11]  : true

allSequences.size()=260
-------------------------------------------
randoop.util.Randomness: total calls to random: 1524
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 259 sequences.
components: 259
randoop.util.Randomness: total calls to random: 1525
randoop.util.Randomness: total calls to random: 1526
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.randomNumber() : var0 
var2 =  method : A.normal() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.randomNumber() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=0 [var1]  : true
<randoop.PrimValue, value=10 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=0 [var5]  : true

allSequences.size()=261
-------------------------------------------
randoop.util.Randomness: total calls to random: 1527
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 260 sequences.
components: 260
randoop.util.Randomness: total calls to random: 1528
randoop.util.Randomness: total calls to random: 1529
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.randomNumber() : var0 
var2 =  method : A.randomNumber() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.normal() : var0 
var6 =  method : A.normal() : var0 
var7 =  method : A.randomNumber() : var0 
var8 =  method : A.normal() : var0 
var9 =  method : A.randomNumber() : var0 
var10 =  method : A.normal() : var0 
var11 =  method : A.normal() : var0 
var12 =  method : A.randomNumber() : var0 
var13 =  method : A.randomNumber() : var0 
var14 =  method : A.randomNumber() : var0 
var15 =  method : A.normal() : var0 
var16 =  method : A.normal() : var0 
var17 =  method : A.randomNumber() : var0 
var18 =  method : A.randomNumber() : var0 
var19 =  method : A.randomNumber() : var0 
var20 =  method : A.normal() : var0 
var21 =  method : A.randomNumber() : var0 
var22 =  method : A.normal() : var0 
var23 =  method : A.normal() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Making index 12 inactive (value is a primitive)
Making index 13 inactive (value is a primitive)
Making index 14 inactive (value is a primitive)
Making index 15 inactive (value is a primitive)
Making index 16 inactive (value is a primitive)
Making index 17 inactive (value is a primitive)
Making index 18 inactive (value is a primitive)
Making index 19 inactive (value is a primitive)
Making index 20 inactive (value is a primitive)
Making index 21 inactive (value is a primitive)
Making index 22 inactive (value is a primitive)
Making index 23 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var10 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var11 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var12 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var13 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var14 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var15 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var16 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var17 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var18 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var19 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var20 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var21 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var22 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var23 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=0 [var1]  : true
<randoop.PrimValue, value=0 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=10 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true
<randoop.PrimValue, value=0 [var7]  : true
<randoop.PrimValue, value=10 [var8]  : true
<randoop.PrimValue, value=0 [var9]  : true
<randoop.PrimValue, value=10 [var10]  : true
<randoop.PrimValue, value=10 [var11]  : true
<randoop.PrimValue, value=0 [var12]  : true
<randoop.PrimValue, value=0 [var13]  : true
<randoop.PrimValue, value=0 [var14]  : true
<randoop.PrimValue, value=10 [var15]  : true
<randoop.PrimValue, value=10 [var16]  : true
<randoop.PrimValue, value=0 [var17]  : true
<randoop.PrimValue, value=0 [var18]  : true
<randoop.PrimValue, value=0 [var19]  : true
<randoop.PrimValue, value=10 [var20]  : true
<randoop.PrimValue, value=0 [var21]  : true
<randoop.PrimValue, value=10 [var22]  : true
<randoop.PrimValue, value=10 [var23]  : true

allSequences.size()=262
-------------------------------------------
randoop.util.Randomness: total calls to random: 1530
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 261 sequences.
components: 261
randoop.util.Randomness: total calls to random: 1531
randoop.util.Randomness: total calls to random: 1532
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.normal() : var0 
var2 =  method : A.normal() : var0 
var3 =  method : A.randomNumber() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.randomNumber() : var0 
var6 =  method : A.randomNumber() : var0 
var7 =  method : A.randomNumber() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=10 [var1]  : true
<randoop.PrimValue, value=10 [var2]  : true
<randoop.PrimValue, value=0 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=0 [var5]  : true
<randoop.PrimValue, value=0 [var6]  : true
<randoop.PrimValue, value=0 [var7]  : true

allSequences.size()=263
-------------------------------------------
randoop.util.Randomness: total calls to random: 1533
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 262 sequences.
components: 262
randoop.util.Randomness: total calls to random: 1534
randoop.util.Randomness: total calls to random: 1535
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 1536
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 262 sequences.
components: 262
randoop.util.Randomness: total calls to random: 1537
randoop.util.Randomness: total calls to random: 1538
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.randomNumber() : var0 
var2 =  method : A.normal() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.randomNumber() : var0 
var6 =  method : A.normal() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=0 [var1]  : true
<randoop.PrimValue, value=10 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=0 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true

allSequences.size()=264
-------------------------------------------
randoop.util.Randomness: total calls to random: 1539
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 263 sequences.
components: 263
randoop.util.Randomness: total calls to random: 1540
randoop.util.Randomness: total calls to random: 1541
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 1542
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 263 sequences.
components: 263
randoop.util.Randomness: total calls to random: 1543
randoop.util.Randomness: total calls to random: 1544
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.normal() : var0 
var2 =  method : A.normal() : var0 
var3 =  method : A.randomNumber() : var0 
var4 =  method : A.normal() : var0 
var5 =  method : A.randomNumber() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=10 [var1]  : true
<randoop.PrimValue, value=10 [var2]  : true
<randoop.PrimValue, value=0 [var3]  : true
<randoop.PrimValue, value=10 [var4]  : true
<randoop.PrimValue, value=0 [var5]  : true

allSequences.size()=265
-------------------------------------------
randoop.util.Randomness: total calls to random: 1545
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 264 sequences.
components: 264
randoop.util.Randomness: total calls to random: 1546
randoop.util.Randomness: total calls to random: 1547
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.randomNumber() : var0 
var2 =  method : A.randomNumber() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.normal() : var0 
var5 =  method : A.normal() : var0 
var6 =  method : A.normal() : var0 
var7 =  method : A.normal() : var0 
var8 =  method : A.normal() : var0 
var9 =  method : A.normal() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=0 [var1]  : true
<randoop.PrimValue, value=0 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=10 [var4]  : true
<randoop.PrimValue, value=10 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true
<randoop.PrimValue, value=10 [var7]  : true
<randoop.PrimValue, value=10 [var8]  : true
<randoop.PrimValue, value=10 [var9]  : true

allSequences.size()=266
-------------------------------------------
randoop.util.Randomness: total calls to random: 1548
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 265 sequences.
components: 265
randoop.util.Randomness: total calls to random: 1549
randoop.util.Randomness: total calls to random: 1550
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 1551
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 265 sequences.
components: 265
randoop.util.Randomness: total calls to random: 1552
randoop.util.Randomness: total calls to random: 1553
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.normal() : var0 
var2 =  method : A.normal() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.randomNumber() : var0 
var6 =  method : A.randomNumber() : var0 
var7 =  method : A.randomNumber() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=10 [var1]  : true
<randoop.PrimValue, value=10 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=0 [var5]  : true
<randoop.PrimValue, value=0 [var6]  : true
<randoop.PrimValue, value=0 [var7]  : true

allSequences.size()=267
-------------------------------------------
randoop.util.Randomness: total calls to random: 1554
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 266 sequences.
components: 266
randoop.util.Randomness: total calls to random: 1555
randoop.util.Randomness: total calls to random: 1556
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 1557
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 266 sequences.
components: 266
randoop.util.Randomness: total calls to random: 1558
randoop.util.Randomness: total calls to random: 1559
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 1560
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 266 sequences.
components: 266
randoop.util.Randomness: total calls to random: 1561
randoop.util.Randomness: total calls to random: 1562
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.normal() : var0 
var2 =  method : A.normal() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.normal() : var0 
var5 =  method : A.randomNumber() : var0 
var6 =  method : A.randomNumber() : var0 
var7 =  method : A.normal() : var0 
var8 =  method : A.normal() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=10 [var1]  : true
<randoop.PrimValue, value=10 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=10 [var4]  : true
<randoop.PrimValue, value=0 [var5]  : true
<randoop.PrimValue, value=0 [var6]  : true
<randoop.PrimValue, value=10 [var7]  : true
<randoop.PrimValue, value=10 [var8]  : true

allSequences.size()=268
-------------------------------------------
randoop.util.Randomness: total calls to random: 1563
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 267 sequences.
components: 267
randoop.util.Randomness: total calls to random: 1564
randoop.util.Randomness: total calls to random: 1565
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 1566
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 267 sequences.
components: 267
randoop.util.Randomness: total calls to random: 1567
randoop.util.Randomness: total calls to random: 1568
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 1569
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 267 sequences.
components: 267
randoop.util.Randomness: total calls to random: 1570
randoop.util.Randomness: total calls to random: 1571
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 1572
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 267 sequences.
components: 267
randoop.util.Randomness: total calls to random: 1573
randoop.util.Randomness: total calls to random: 1574
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.normal() : var0 
var2 =  method : A.randomNumber() : var0 
var3 =  method : A.randomNumber() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.normal() : var0 
var6 =  method : A.normal() : var0 
var7 =  method : A.normal() : var0 
var8 =  method : A.randomNumber() : var0 
var9 =  method : A.randomNumber() : var0 
var10 =  method : A.randomNumber() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var10 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=10 [var1]  : true
<randoop.PrimValue, value=0 [var2]  : true
<randoop.PrimValue, value=0 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=10 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true
<randoop.PrimValue, value=10 [var7]  : true
<randoop.PrimValue, value=0 [var8]  : true
<randoop.PrimValue, value=0 [var9]  : true
<randoop.PrimValue, value=0 [var10]  : true

allSequences.size()=269
-------------------------------------------
randoop.util.Randomness: total calls to random: 1575
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 268 sequences.
components: 268
randoop.util.Randomness: total calls to random: 1576
randoop.util.Randomness: total calls to random: 1577
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 1578
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 268 sequences.
components: 268
randoop.util.Randomness: total calls to random: 1579
randoop.util.Randomness: total calls to random: 1580
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.randomNumber() : var0 
var2 =  method : A.randomNumber() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.normal() : var0 
var6 =  method : A.normal() : var0 
var7 =  method : A.randomNumber() : var0 
var8 =  method : A.normal() : var0 
var9 =  method : A.randomNumber() : var0 
var10 =  method : A.normal() : var0 
var11 =  method : A.normal() : var0 
var12 =  method : A.randomNumber() : var0 
var13 =  method : A.randomNumber() : var0 
var14 =  method : A.randomNumber() : var0 
var15 =  method : A.randomNumber() : var0 
var16 =  method : A.randomNumber() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Making index 12 inactive (value is a primitive)
Making index 13 inactive (value is a primitive)
Making index 14 inactive (value is a primitive)
Making index 15 inactive (value is a primitive)
Making index 16 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var10 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var11 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var12 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var13 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var14 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var15 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var16 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=0 [var1]  : true
<randoop.PrimValue, value=0 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=10 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true
<randoop.PrimValue, value=0 [var7]  : true
<randoop.PrimValue, value=10 [var8]  : true
<randoop.PrimValue, value=0 [var9]  : true
<randoop.PrimValue, value=10 [var10]  : true
<randoop.PrimValue, value=10 [var11]  : true
<randoop.PrimValue, value=0 [var12]  : true
<randoop.PrimValue, value=0 [var13]  : true
<randoop.PrimValue, value=0 [var14]  : true
<randoop.PrimValue, value=0 [var15]  : true
<randoop.PrimValue, value=0 [var16]  : true

allSequences.size()=270
-------------------------------------------
randoop.util.Randomness: total calls to random: 1581
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 269 sequences.
components: 269
randoop.util.Randomness: total calls to random: 1582
randoop.util.Randomness: total calls to random: 1583
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 1584
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 269 sequences.
components: 269
randoop.util.Randomness: total calls to random: 1585
randoop.util.Randomness: total calls to random: 1586
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 1587
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 269 sequences.
components: 269
randoop.util.Randomness: total calls to random: 1588
randoop.util.Randomness: total calls to random: 1589
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 1590
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 269 sequences.
components: 269
randoop.util.Randomness: total calls to random: 1591
randoop.util.Randomness: total calls to random: 1592
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.normal() : var0 
var2 =  method : A.normal() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.randomNumber() : var0 
var6 =  method : A.randomNumber() : var0 
var7 =  method : A.normal() : var0 
var8 =  method : A.randomNumber() : var0 
var9 =  method : A.randomNumber() : var0 
var10 =  method : A.randomNumber() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var10 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=10 [var1]  : true
<randoop.PrimValue, value=10 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=0 [var5]  : true
<randoop.PrimValue, value=0 [var6]  : true
<randoop.PrimValue, value=10 [var7]  : true
<randoop.PrimValue, value=0 [var8]  : true
<randoop.PrimValue, value=0 [var9]  : true
<randoop.PrimValue, value=0 [var10]  : true

allSequences.size()=271
-------------------------------------------
randoop.util.Randomness: total calls to random: 1593
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 270 sequences.
components: 270
randoop.util.Randomness: total calls to random: 1594
randoop.util.Randomness: total calls to random: 1595
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 1596
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 270 sequences.
components: 270
randoop.util.Randomness: total calls to random: 1597
randoop.util.Randomness: total calls to random: 1598
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 1599
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 270 sequences.
components: 270
randoop.util.Randomness: total calls to random: 1600
randoop.util.Randomness: total calls to random: 1601
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 1602
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 270 sequences.
components: 270
randoop.util.Randomness: total calls to random: 1603
randoop.util.Randomness: total calls to random: 1604
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 1605
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 270 sequences.
components: 270
randoop.util.Randomness: total calls to random: 1606
randoop.util.Randomness: total calls to random: 1607
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 1608
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 270 sequences.
components: 270
randoop.util.Randomness: total calls to random: 1609
randoop.util.Randomness: total calls to random: 1610
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 1611
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 270 sequences.
components: 270
randoop.util.Randomness: total calls to random: 1612
randoop.util.Randomness: total calls to random: 1613
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 1614
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 270 sequences.
components: 270
randoop.util.Randomness: total calls to random: 1615
randoop.util.Randomness: total calls to random: 1616
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.randomNumber() : var0 
var2 =  method : A.randomNumber() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.normal() : var0 
var6 =  method : A.normal() : var0 
var7 =  method : A.randomNumber() : var0 
var8 =  method : A.randomNumber() : var0 
var9 =  method : A.randomNumber() : var0 
var10 =  method : A.randomNumber() : var0 
var11 =  method : A.randomNumber() : var0 
var12 =  method : A.normal() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Making index 12 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var10 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var11 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var12 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=0 [var1]  : true
<randoop.PrimValue, value=0 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=10 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true
<randoop.PrimValue, value=0 [var7]  : true
<randoop.PrimValue, value=0 [var8]  : true
<randoop.PrimValue, value=0 [var9]  : true
<randoop.PrimValue, value=0 [var10]  : true
<randoop.PrimValue, value=0 [var11]  : true
<randoop.PrimValue, value=10 [var12]  : true

allSequences.size()=272
-------------------------------------------
randoop.util.Randomness: total calls to random: 1617
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 271 sequences.
components: 271
randoop.util.Randomness: total calls to random: 1618
randoop.util.Randomness: total calls to random: 1619
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 1620
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 271 sequences.
components: 271
randoop.util.Randomness: total calls to random: 1621
randoop.util.Randomness: total calls to random: 1622
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.normal() : var0 
var2 =  method : A.randomNumber() : var0 
var3 =  method : A.randomNumber() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.normal() : var0 
var6 =  method : A.normal() : var0 
var7 =  method : A.normal() : var0 
var8 =  method : A.randomNumber() : var0 
var9 =  method : A.randomNumber() : var0 
var10 =  method : A.randomNumber() : var0 
var11 =  method : A.normal() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var10 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var11 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=10 [var1]  : true
<randoop.PrimValue, value=0 [var2]  : true
<randoop.PrimValue, value=0 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=10 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true
<randoop.PrimValue, value=10 [var7]  : true
<randoop.PrimValue, value=0 [var8]  : true
<randoop.PrimValue, value=0 [var9]  : true
<randoop.PrimValue, value=0 [var10]  : true
<randoop.PrimValue, value=10 [var11]  : true

allSequences.size()=273
-------------------------------------------
randoop.util.Randomness: total calls to random: 1623
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 272 sequences.
components: 272
randoop.util.Randomness: total calls to random: 1624
randoop.util.Randomness: total calls to random: 1625
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.randomNumber() : var0 
var2 =  method : A.normal() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.normal() : var0 
var6 =  method : A.normal() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=0 [var1]  : true
<randoop.PrimValue, value=10 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=10 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true

allSequences.size()=274
-------------------------------------------
randoop.util.Randomness: total calls to random: 1626
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 273 sequences.
components: 273
randoop.util.Randomness: total calls to random: 1627
randoop.util.Randomness: total calls to random: 1628
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 1629
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 273 sequences.
components: 273
randoop.util.Randomness: total calls to random: 1630
randoop.util.Randomness: total calls to random: 1631
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 1632
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 273 sequences.
components: 273
randoop.util.Randomness: total calls to random: 1633
randoop.util.Randomness: total calls to random: 1634
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 1635
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 273 sequences.
components: 273
randoop.util.Randomness: total calls to random: 1636
randoop.util.Randomness: total calls to random: 1637
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 1638
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 273 sequences.
components: 273
randoop.util.Randomness: total calls to random: 1639
randoop.util.Randomness: total calls to random: 1640
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.normal() : var0 
var2 =  method : A.normal() : var0 
var3 =  method : A.randomNumber() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.randomNumber() : var0 
var6 =  method : A.normal() : var0 
var7 =  method : A.normal() : var0 
var8 =  method : A.normal() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=10 [var1]  : true
<randoop.PrimValue, value=10 [var2]  : true
<randoop.PrimValue, value=0 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=0 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true
<randoop.PrimValue, value=10 [var7]  : true
<randoop.PrimValue, value=10 [var8]  : true

allSequences.size()=275
-------------------------------------------
randoop.util.Randomness: total calls to random: 1641
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 274 sequences.
components: 274
randoop.util.Randomness: total calls to random: 1642
randoop.util.Randomness: total calls to random: 1643
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.normal() : var0 
var2 =  method : A.randomNumber() : var0 
var3 =  method : A.randomNumber() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.normal() : var0 
var6 =  method : A.normal() : var0 
var7 =  method : A.normal() : var0 
var8 =  method : A.randomNumber() : var0 
var9 =  method : A.normal() : var0 
var10 =  method : A.randomNumber() : var0 
var11 =  method : A.randomNumber() : var0 
var12 =  method : A.randomNumber() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Making index 12 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var10 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var11 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var12 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=10 [var1]  : true
<randoop.PrimValue, value=0 [var2]  : true
<randoop.PrimValue, value=0 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=10 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true
<randoop.PrimValue, value=10 [var7]  : true
<randoop.PrimValue, value=0 [var8]  : true
<randoop.PrimValue, value=10 [var9]  : true
<randoop.PrimValue, value=0 [var10]  : true
<randoop.PrimValue, value=0 [var11]  : true
<randoop.PrimValue, value=0 [var12]  : true

allSequences.size()=276
-------------------------------------------
randoop.util.Randomness: total calls to random: 1644
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 275 sequences.
components: 275
randoop.util.Randomness: total calls to random: 1645
randoop.util.Randomness: total calls to random: 1646
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 1647
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 275 sequences.
components: 275
randoop.util.Randomness: total calls to random: 1648
randoop.util.Randomness: total calls to random: 1649
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 1650
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 275 sequences.
components: 275
randoop.util.Randomness: total calls to random: 1651
randoop.util.Randomness: total calls to random: 1652
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.normal() : var0 
var2 =  method : A.randomNumber() : var0 
var3 =  method : A.randomNumber() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.normal() : var0 
var6 =  method : A.normal() : var0 
var7 =  method : A.normal() : var0 
var8 =  method : A.randomNumber() : var0 
var9 =  method : A.normal() : var0 
var10 =  method : A.randomNumber() : var0 
var11 =  method : A.randomNumber() : var0 
var12 =  method : A.randomNumber() : var0 
var13 =  method : A.randomNumber() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Making index 12 inactive (value is a primitive)
Making index 13 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var10 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var11 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var12 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var13 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=10 [var1]  : true
<randoop.PrimValue, value=0 [var2]  : true
<randoop.PrimValue, value=0 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=10 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true
<randoop.PrimValue, value=10 [var7]  : true
<randoop.PrimValue, value=0 [var8]  : true
<randoop.PrimValue, value=10 [var9]  : true
<randoop.PrimValue, value=0 [var10]  : true
<randoop.PrimValue, value=0 [var11]  : true
<randoop.PrimValue, value=0 [var12]  : true
<randoop.PrimValue, value=0 [var13]  : true

allSequences.size()=277
-------------------------------------------
randoop.util.Randomness: total calls to random: 1653
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 276 sequences.
components: 276
randoop.util.Randomness: total calls to random: 1654
randoop.util.Randomness: total calls to random: 1655
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.randomNumber() : var0 
var2 =  method : A.randomNumber() : var0 
var3 =  method : A.randomNumber() : var0 
var4 =  method : A.normal() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=0 [var1]  : true
<randoop.PrimValue, value=0 [var2]  : true
<randoop.PrimValue, value=0 [var3]  : true
<randoop.PrimValue, value=10 [var4]  : true

allSequences.size()=278
-------------------------------------------
randoop.util.Randomness: total calls to random: 1656
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 277 sequences.
components: 277
randoop.util.Randomness: total calls to random: 1657
randoop.util.Randomness: total calls to random: 1658
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 1659
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 277 sequences.
components: 277
randoop.util.Randomness: total calls to random: 1660
randoop.util.Randomness: total calls to random: 1661
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.normal() : var0 
var2 =  method : A.normal() : var0 
var3 =  method : A.randomNumber() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.normal() : var0 
var6 =  method : A.randomNumber() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=10 [var1]  : true
<randoop.PrimValue, value=10 [var2]  : true
<randoop.PrimValue, value=0 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=10 [var5]  : true
<randoop.PrimValue, value=0 [var6]  : true

allSequences.size()=279
-------------------------------------------
randoop.util.Randomness: total calls to random: 1662
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 278 sequences.
components: 278
randoop.util.Randomness: total calls to random: 1663
randoop.util.Randomness: total calls to random: 1664
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.normal() : var0 
var2 =  method : A.normal() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.normal() : var0 
var5 =  method : A.normal() : var0 
var6 =  method : A.randomNumber() : var0 
var7 =  method : A.randomNumber() : var0 
var8 =  method : A.randomNumber() : var0 
var9 =  method : A.normal() : var0 
var10 =  method : A.normal() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var10 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=10 [var1]  : true
<randoop.PrimValue, value=10 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=10 [var4]  : true
<randoop.PrimValue, value=10 [var5]  : true
<randoop.PrimValue, value=0 [var6]  : true
<randoop.PrimValue, value=0 [var7]  : true
<randoop.PrimValue, value=0 [var8]  : true
<randoop.PrimValue, value=10 [var9]  : true
<randoop.PrimValue, value=10 [var10]  : true

allSequences.size()=280
-------------------------------------------
randoop.util.Randomness: total calls to random: 1665
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 279 sequences.
components: 279
randoop.util.Randomness: total calls to random: 1666
randoop.util.Randomness: total calls to random: 1667
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 1668
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 279 sequences.
components: 279
randoop.util.Randomness: total calls to random: 1669
randoop.util.Randomness: total calls to random: 1670
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 1671
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 279 sequences.
components: 279
randoop.util.Randomness: total calls to random: 1672
randoop.util.Randomness: total calls to random: 1673
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 1674
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 279 sequences.
components: 279
randoop.util.Randomness: total calls to random: 1675
randoop.util.Randomness: total calls to random: 1676
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 1677
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 279 sequences.
components: 279
randoop.util.Randomness: total calls to random: 1678
randoop.util.Randomness: total calls to random: 1679
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.normal() : var0 
var2 =  method : A.randomNumber() : var0 
var3 =  method : A.randomNumber() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.normal() : var0 
var6 =  method : A.randomNumber() : var0 
var7 =  method : A.randomNumber() : var0 
var8 =  method : A.normal() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=10 [var1]  : true
<randoop.PrimValue, value=0 [var2]  : true
<randoop.PrimValue, value=0 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=10 [var5]  : true
<randoop.PrimValue, value=0 [var6]  : true
<randoop.PrimValue, value=0 [var7]  : true
<randoop.PrimValue, value=10 [var8]  : true

allSequences.size()=281
-------------------------------------------
randoop.util.Randomness: total calls to random: 1680
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 280 sequences.
components: 280
randoop.util.Randomness: total calls to random: 1681
randoop.util.Randomness: total calls to random: 1682
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 1683
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 280 sequences.
components: 280
randoop.util.Randomness: total calls to random: 1684
randoop.util.Randomness: total calls to random: 1685
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.randomNumber() : var0 
var2 =  method : A.randomNumber() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.normal() : var0 
var5 =  method : A.normal() : var0 
var6 =  method : A.normal() : var0 
var7 =  method : A.randomNumber() : var0 
var8 =  method : A.randomNumber() : var0 
var9 =  method : A.normal() : var0 
var10 =  method : A.normal() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var10 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=0 [var1]  : true
<randoop.PrimValue, value=0 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=10 [var4]  : true
<randoop.PrimValue, value=10 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true
<randoop.PrimValue, value=0 [var7]  : true
<randoop.PrimValue, value=0 [var8]  : true
<randoop.PrimValue, value=10 [var9]  : true
<randoop.PrimValue, value=10 [var10]  : true

allSequences.size()=282
-------------------------------------------
randoop.util.Randomness: total calls to random: 1686
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 281 sequences.
components: 281
randoop.util.Randomness: total calls to random: 1687
randoop.util.Randomness: total calls to random: 1688
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 1689
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 281 sequences.
components: 281
randoop.util.Randomness: total calls to random: 1690
randoop.util.Randomness: total calls to random: 1691
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 1692
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 281 sequences.
components: 281
randoop.util.Randomness: total calls to random: 1693
randoop.util.Randomness: total calls to random: 1694
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 1695
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 281 sequences.
components: 281
randoop.util.Randomness: total calls to random: 1696
randoop.util.Randomness: total calls to random: 1697
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.normal() : var0 
var2 =  method : A.normal() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.normal() : var0 
var5 =  method : A.normal() : var0 
var6 =  method : A.normal() : var0 
var7 =  method : A.normal() : var0 
var8 =  method : A.randomNumber() : var0 
var9 =  method : A.normal() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=10 [var1]  : true
<randoop.PrimValue, value=10 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=10 [var4]  : true
<randoop.PrimValue, value=10 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true
<randoop.PrimValue, value=10 [var7]  : true
<randoop.PrimValue, value=0 [var8]  : true
<randoop.PrimValue, value=10 [var9]  : true

allSequences.size()=283
-------------------------------------------
randoop.util.Randomness: total calls to random: 1698
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 282 sequences.
components: 282
randoop.util.Randomness: total calls to random: 1699
randoop.util.Randomness: total calls to random: 1700
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.normal() : var0 
var2 =  method : A.normal() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.randomNumber() : var0 
var6 =  method : A.randomNumber() : var0 
var7 =  method : A.normal() : var0 
var8 =  method : A.randomNumber() : var0 
var9 =  method : A.randomNumber() : var0 
var10 =  method : A.normal() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var10 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=10 [var1]  : true
<randoop.PrimValue, value=10 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=0 [var5]  : true
<randoop.PrimValue, value=0 [var6]  : true
<randoop.PrimValue, value=10 [var7]  : true
<randoop.PrimValue, value=0 [var8]  : true
<randoop.PrimValue, value=0 [var9]  : true
<randoop.PrimValue, value=10 [var10]  : true

allSequences.size()=284
-------------------------------------------
randoop.util.Randomness: total calls to random: 1701
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 283 sequences.
components: 283
randoop.util.Randomness: total calls to random: 1702
randoop.util.Randomness: total calls to random: 1703
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 1704
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 283 sequences.
components: 283
randoop.util.Randomness: total calls to random: 1705
randoop.util.Randomness: total calls to random: 1706
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.randomNumber() : var0 
var2 =  method : A.randomNumber() : var0 
var3 =  method : A.randomNumber() : var0 
var4 =  method : A.normal() : var0 
var5 =  method : A.randomNumber() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=0 [var1]  : true
<randoop.PrimValue, value=0 [var2]  : true
<randoop.PrimValue, value=0 [var3]  : true
<randoop.PrimValue, value=10 [var4]  : true
<randoop.PrimValue, value=0 [var5]  : true

allSequences.size()=285
-------------------------------------------
randoop.util.Randomness: total calls to random: 1707
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 284 sequences.
components: 284
randoop.util.Randomness: total calls to random: 1708
randoop.util.Randomness: total calls to random: 1709
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.normal() : var0 
var2 =  method : A.normal() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.normal() : var0 
var5 =  method : A.randomNumber() : var0 
var6 =  method : A.normal() : var0 
var7 =  method : A.randomNumber() : var0 
var8 =  method : A.normal() : var0 
var9 =  method : A.randomNumber() : var0 
var10 =  method : A.normal() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var10 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=10 [var1]  : true
<randoop.PrimValue, value=10 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=10 [var4]  : true
<randoop.PrimValue, value=0 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true
<randoop.PrimValue, value=0 [var7]  : true
<randoop.PrimValue, value=10 [var8]  : true
<randoop.PrimValue, value=0 [var9]  : true
<randoop.PrimValue, value=10 [var10]  : true

allSequences.size()=286
-------------------------------------------
randoop.util.Randomness: total calls to random: 1710
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 285 sequences.
components: 285
randoop.util.Randomness: total calls to random: 1711
randoop.util.Randomness: total calls to random: 1712
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.normal() : var0 
var2 =  method : A.normal() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.randomNumber() : var0 
var6 =  method : A.normal() : var0 
var7 =  method : A.randomNumber() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=10 [var1]  : true
<randoop.PrimValue, value=10 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=0 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true
<randoop.PrimValue, value=0 [var7]  : true

allSequences.size()=287
-------------------------------------------
randoop.util.Randomness: total calls to random: 1713
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 286 sequences.
components: 286
randoop.util.Randomness: total calls to random: 1714
randoop.util.Randomness: total calls to random: 1715
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.randomNumber() : var0 
var2 =  method : A.randomNumber() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.normal() : var0 
var5 =  method : A.normal() : var0 
var6 =  method : A.randomNumber() : var0 
var7 =  method : A.randomNumber() : var0 
var8 =  method : A.randomNumber() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=0 [var1]  : true
<randoop.PrimValue, value=0 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=10 [var4]  : true
<randoop.PrimValue, value=10 [var5]  : true
<randoop.PrimValue, value=0 [var6]  : true
<randoop.PrimValue, value=0 [var7]  : true
<randoop.PrimValue, value=0 [var8]  : true

allSequences.size()=288
-------------------------------------------
randoop.util.Randomness: total calls to random: 1716
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 287 sequences.
components: 287
randoop.util.Randomness: total calls to random: 1717
randoop.util.Randomness: total calls to random: 1718
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.randomNumber() : var0 
var2 =  method : A.randomNumber() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.normal() : var0 
var5 =  method : A.normal() : var0 
var6 =  method : A.normal() : var0 
var7 =  method : A.normal() : var0 
var8 =  method : A.randomNumber() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=0 [var1]  : true
<randoop.PrimValue, value=0 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=10 [var4]  : true
<randoop.PrimValue, value=10 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true
<randoop.PrimValue, value=10 [var7]  : true
<randoop.PrimValue, value=0 [var8]  : true

allSequences.size()=289
-------------------------------------------
randoop.util.Randomness: total calls to random: 1719
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 288 sequences.
components: 288
randoop.util.Randomness: total calls to random: 1720
randoop.util.Randomness: total calls to random: 1721
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 1722
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 288 sequences.
components: 288
randoop.util.Randomness: total calls to random: 1723
randoop.util.Randomness: total calls to random: 1724
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 1725
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 288 sequences.
components: 288
randoop.util.Randomness: total calls to random: 1726
randoop.util.Randomness: total calls to random: 1727
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 1728
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 288 sequences.
components: 288
randoop.util.Randomness: total calls to random: 1729
randoop.util.Randomness: total calls to random: 1730
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 1731
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 288 sequences.
components: 288
randoop.util.Randomness: total calls to random: 1732
randoop.util.Randomness: total calls to random: 1733
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.randomNumber() : var0 
var2 =  method : A.randomNumber() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.normal() : var0 
var6 =  method : A.randomNumber() : var0 
var7 =  method : A.randomNumber() : var0 
var8 =  method : A.normal() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=0 [var1]  : true
<randoop.PrimValue, value=0 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=10 [var5]  : true
<randoop.PrimValue, value=0 [var6]  : true
<randoop.PrimValue, value=0 [var7]  : true
<randoop.PrimValue, value=10 [var8]  : true

allSequences.size()=290
-------------------------------------------
randoop.util.Randomness: total calls to random: 1734
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 289 sequences.
components: 289
randoop.util.Randomness: total calls to random: 1735
randoop.util.Randomness: total calls to random: 1736
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 1737
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 289 sequences.
components: 289
randoop.util.Randomness: total calls to random: 1738
randoop.util.Randomness: total calls to random: 1739
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.normal() : var0 
var2 =  method : A.normal() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.normal() : var0 
var5 =  method : A.randomNumber() : var0 
var6 =  method : A.normal() : var0 
var7 =  method : A.normal() : var0 
var8 =  method : A.normal() : var0 
var9 =  method : A.randomNumber() : var0 
var10 =  method : A.randomNumber() : var0 
var11 =  method : A.randomNumber() : var0 
var12 =  method : A.randomNumber() : var0 
var13 =  method : A.randomNumber() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Making index 12 inactive (value is a primitive)
Making index 13 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var10 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var11 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var12 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var13 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=10 [var1]  : true
<randoop.PrimValue, value=10 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=10 [var4]  : true
<randoop.PrimValue, value=0 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true
<randoop.PrimValue, value=10 [var7]  : true
<randoop.PrimValue, value=10 [var8]  : true
<randoop.PrimValue, value=0 [var9]  : true
<randoop.PrimValue, value=0 [var10]  : true
<randoop.PrimValue, value=0 [var11]  : true
<randoop.PrimValue, value=0 [var12]  : true
<randoop.PrimValue, value=0 [var13]  : true

allSequences.size()=291
-------------------------------------------
randoop.util.Randomness: total calls to random: 1740
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 290 sequences.
components: 290
randoop.util.Randomness: total calls to random: 1741
randoop.util.Randomness: total calls to random: 1742
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.normal() : var0 
var2 =  method : A.normal() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.normal() : var0 
var5 =  method : A.normal() : var0 
var6 =  method : A.randomNumber() : var0 
var7 =  method : A.normal() : var0 
var8 =  method : A.normal() : var0 
var9 =  method : A.randomNumber() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=10 [var1]  : true
<randoop.PrimValue, value=10 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=10 [var4]  : true
<randoop.PrimValue, value=10 [var5]  : true
<randoop.PrimValue, value=0 [var6]  : true
<randoop.PrimValue, value=10 [var7]  : true
<randoop.PrimValue, value=10 [var8]  : true
<randoop.PrimValue, value=0 [var9]  : true

allSequences.size()=292
-------------------------------------------
randoop.util.Randomness: total calls to random: 1743
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 291 sequences.
components: 291
randoop.util.Randomness: total calls to random: 1744
randoop.util.Randomness: total calls to random: 1745
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.normal() : var0 
var2 =  method : A.randomNumber() : var0 
var3 =  method : A.randomNumber() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.normal() : var0 
var6 =  method : A.normal() : var0 
var7 =  method : A.normal() : var0 
var8 =  method : A.randomNumber() : var0 
var9 =  method : A.normal() : var0 
var10 =  method : A.randomNumber() : var0 
var11 =  method : A.randomNumber() : var0 
var12 =  method : A.normal() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Making index 12 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var10 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var11 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var12 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=10 [var1]  : true
<randoop.PrimValue, value=0 [var2]  : true
<randoop.PrimValue, value=0 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=10 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true
<randoop.PrimValue, value=10 [var7]  : true
<randoop.PrimValue, value=0 [var8]  : true
<randoop.PrimValue, value=10 [var9]  : true
<randoop.PrimValue, value=0 [var10]  : true
<randoop.PrimValue, value=0 [var11]  : true
<randoop.PrimValue, value=10 [var12]  : true

allSequences.size()=293
-------------------------------------------
randoop.util.Randomness: total calls to random: 1746
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 292 sequences.
components: 292
randoop.util.Randomness: total calls to random: 1747
randoop.util.Randomness: total calls to random: 1748
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.randomNumber() : var0 
var2 =  method : A.randomNumber() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.normal() : var0 
var6 =  method : A.randomNumber() : var0 
var7 =  method : A.randomNumber() : var0 
var8 =  method : A.normal() : var0 
var9 =  method : A.randomNumber() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=0 [var1]  : true
<randoop.PrimValue, value=0 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=10 [var5]  : true
<randoop.PrimValue, value=0 [var6]  : true
<randoop.PrimValue, value=0 [var7]  : true
<randoop.PrimValue, value=10 [var8]  : true
<randoop.PrimValue, value=0 [var9]  : true

allSequences.size()=294
-------------------------------------------
randoop.util.Randomness: total calls to random: 1749
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 293 sequences.
components: 293
randoop.util.Randomness: total calls to random: 1750
randoop.util.Randomness: total calls to random: 1751
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 1752
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 293 sequences.
components: 293
randoop.util.Randomness: total calls to random: 1753
randoop.util.Randomness: total calls to random: 1754
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 1755
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 293 sequences.
components: 293
randoop.util.Randomness: total calls to random: 1756
randoop.util.Randomness: total calls to random: 1757
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 1758
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 293 sequences.
components: 293
randoop.util.Randomness: total calls to random: 1759
randoop.util.Randomness: total calls to random: 1760
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.randomNumber() : var0 
var2 =  method : A.randomNumber() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.normal() : var0 
var5 =  method : A.normal() : var0 
var6 =  method : A.normal() : var0 
var7 =  method : A.randomNumber() : var0 
var8 =  method : A.normal() : var0 
var9 =  method : A.normal() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=0 [var1]  : true
<randoop.PrimValue, value=0 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=10 [var4]  : true
<randoop.PrimValue, value=10 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true
<randoop.PrimValue, value=0 [var7]  : true
<randoop.PrimValue, value=10 [var8]  : true
<randoop.PrimValue, value=10 [var9]  : true

allSequences.size()=295
-------------------------------------------
randoop.util.Randomness: total calls to random: 1761
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 294 sequences.
components: 294
randoop.util.Randomness: total calls to random: 1762
randoop.util.Randomness: total calls to random: 1763
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.randomNumber() : var0 
var2 =  method : A.randomNumber() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.normal() : var0 
var6 =  method : A.normal() : var0 
var7 =  method : A.randomNumber() : var0 
var8 =  method : A.normal() : var0 
var9 =  method : A.normal() : var0 
var10 =  method : A.normal() : var0 
var11 =  method : A.normal() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var10 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var11 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=0 [var1]  : true
<randoop.PrimValue, value=0 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=10 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true
<randoop.PrimValue, value=0 [var7]  : true
<randoop.PrimValue, value=10 [var8]  : true
<randoop.PrimValue, value=10 [var9]  : true
<randoop.PrimValue, value=10 [var10]  : true
<randoop.PrimValue, value=10 [var11]  : true

allSequences.size()=296
-------------------------------------------
randoop.util.Randomness: total calls to random: 1764
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 295 sequences.
components: 295
randoop.util.Randomness: total calls to random: 1765
randoop.util.Randomness: total calls to random: 1766
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 1767
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 295 sequences.
components: 295
randoop.util.Randomness: total calls to random: 1768
randoop.util.Randomness: total calls to random: 1769
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 1770
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 295 sequences.
components: 295
randoop.util.Randomness: total calls to random: 1771
randoop.util.Randomness: total calls to random: 1772
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.normal() : var0 
var2 =  method : A.normal() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.normal() : var0 
var5 =  method : A.randomNumber() : var0 
var6 =  method : A.normal() : var0 
var7 =  method : A.normal() : var0 
var8 =  method : A.normal() : var0 
var9 =  method : A.randomNumber() : var0 
var10 =  method : A.randomNumber() : var0 
var11 =  method : A.normal() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var10 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var11 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=10 [var1]  : true
<randoop.PrimValue, value=10 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=10 [var4]  : true
<randoop.PrimValue, value=0 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true
<randoop.PrimValue, value=10 [var7]  : true
<randoop.PrimValue, value=10 [var8]  : true
<randoop.PrimValue, value=0 [var9]  : true
<randoop.PrimValue, value=0 [var10]  : true
<randoop.PrimValue, value=10 [var11]  : true

allSequences.size()=297
-------------------------------------------
randoop.util.Randomness: total calls to random: 1773
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 296 sequences.
components: 296
randoop.util.Randomness: total calls to random: 1774
randoop.util.Randomness: total calls to random: 1775
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.normal() : var0 
var2 =  method : A.normal() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.normal() : var0 
var5 =  method : A.normal() : var0 
var6 =  method : A.normal() : var0 
var7 =  method : A.randomNumber() : var0 
var8 =  method : A.randomNumber() : var0 
var9 =  method : A.randomNumber() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=10 [var1]  : true
<randoop.PrimValue, value=10 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=10 [var4]  : true
<randoop.PrimValue, value=10 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true
<randoop.PrimValue, value=0 [var7]  : true
<randoop.PrimValue, value=0 [var8]  : true
<randoop.PrimValue, value=0 [var9]  : true

allSequences.size()=298
-------------------------------------------
randoop.util.Randomness: total calls to random: 1776
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 297 sequences.
components: 297
randoop.util.Randomness: total calls to random: 1777
randoop.util.Randomness: total calls to random: 1778
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 1779
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 297 sequences.
components: 297
randoop.util.Randomness: total calls to random: 1780
randoop.util.Randomness: total calls to random: 1781
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.normal() : var0 
var2 =  method : A.normal() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.normal() : var0 
var5 =  method : A.normal() : var0 
var6 =  method : A.randomNumber() : var0 
var7 =  method : A.normal() : var0 
var8 =  method : A.normal() : var0 
var9 =  method : A.randomNumber() : var0 
var10 =  method : A.randomNumber() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var10 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=10 [var1]  : true
<randoop.PrimValue, value=10 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=10 [var4]  : true
<randoop.PrimValue, value=10 [var5]  : true
<randoop.PrimValue, value=0 [var6]  : true
<randoop.PrimValue, value=10 [var7]  : true
<randoop.PrimValue, value=10 [var8]  : true
<randoop.PrimValue, value=0 [var9]  : true
<randoop.PrimValue, value=0 [var10]  : true

allSequences.size()=299
-------------------------------------------
randoop.util.Randomness: total calls to random: 1782
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 298 sequences.
components: 298
randoop.util.Randomness: total calls to random: 1783
randoop.util.Randomness: total calls to random: 1784
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.normal() : var0 
var2 =  method : A.normal() : var0 
var3 =  method : A.randomNumber() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.randomNumber() : var0 
var6 =  method : A.normal() : var0 
var7 =  method : A.randomNumber() : var0 
var8 =  method : A.normal() : var0 
var9 =  method : A.normal() : var0 
var10 =  method : A.normal() : var0 
var11 =  method : A.randomNumber() : var0 
var12 =  method : A.normal() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Making index 12 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var10 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var11 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var12 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=10 [var1]  : true
<randoop.PrimValue, value=10 [var2]  : true
<randoop.PrimValue, value=0 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=0 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true
<randoop.PrimValue, value=0 [var7]  : true
<randoop.PrimValue, value=10 [var8]  : true
<randoop.PrimValue, value=10 [var9]  : true
<randoop.PrimValue, value=10 [var10]  : true
<randoop.PrimValue, value=0 [var11]  : true
<randoop.PrimValue, value=10 [var12]  : true

allSequences.size()=300
-------------------------------------------
randoop.util.Randomness: total calls to random: 1785
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 299 sequences.
components: 299
randoop.util.Randomness: total calls to random: 1786
randoop.util.Randomness: total calls to random: 1787
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.randomNumber() : var0 
var2 =  method : A.randomNumber() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.normal() : var0 
var6 =  method : A.normal() : var0 
var7 =  method : A.randomNumber() : var0 
var8 =  method : A.normal() : var0 
var9 =  method : A.randomNumber() : var0 
var10 =  method : A.randomNumber() : var0 
var11 =  method : A.normal() : var0 
var12 =  method : A.randomNumber() : var0 
var13 =  method : A.randomNumber() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Making index 12 inactive (value is a primitive)
Making index 13 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var10 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var11 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var12 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var13 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=0 [var1]  : true
<randoop.PrimValue, value=0 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=10 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true
<randoop.PrimValue, value=0 [var7]  : true
<randoop.PrimValue, value=10 [var8]  : true
<randoop.PrimValue, value=0 [var9]  : true
<randoop.PrimValue, value=0 [var10]  : true
<randoop.PrimValue, value=10 [var11]  : true
<randoop.PrimValue, value=0 [var12]  : true
<randoop.PrimValue, value=0 [var13]  : true

allSequences.size()=301
-------------------------------------------
randoop.util.Randomness: total calls to random: 1788
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 300 sequences.
components: 300
randoop.util.Randomness: total calls to random: 1789
randoop.util.Randomness: total calls to random: 1790
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 1791
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 300 sequences.
components: 300
randoop.util.Randomness: total calls to random: 1792
randoop.util.Randomness: total calls to random: 1793
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.randomNumber() : var0 
var2 =  method : A.normal() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.normal() : var0 
var6 =  method : A.randomNumber() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=0 [var1]  : true
<randoop.PrimValue, value=10 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=10 [var5]  : true
<randoop.PrimValue, value=0 [var6]  : true

allSequences.size()=302
-------------------------------------------
randoop.util.Randomness: total calls to random: 1794
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 301 sequences.
components: 301
randoop.util.Randomness: total calls to random: 1795
randoop.util.Randomness: total calls to random: 1796
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.randomNumber() : var0 
var2 =  method : A.randomNumber() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.normal() : var0 
var6 =  method : A.normal() : var0 
var7 =  method : A.randomNumber() : var0 
var8 =  method : A.normal() : var0 
var9 =  method : A.randomNumber() : var0 
var10 =  method : A.normal() : var0 
var11 =  method : A.normal() : var0 
var12 =  method : A.randomNumber() : var0 
var13 =  method : A.randomNumber() : var0 
var14 =  method : A.randomNumber() : var0 
var15 =  method : A.randomNumber() : var0 
var16 =  method : A.randomNumber() : var0 
var17 =  method : A.normal() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Making index 12 inactive (value is a primitive)
Making index 13 inactive (value is a primitive)
Making index 14 inactive (value is a primitive)
Making index 15 inactive (value is a primitive)
Making index 16 inactive (value is a primitive)
Making index 17 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var10 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var11 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var12 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var13 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var14 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var15 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var16 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var17 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=0 [var1]  : true
<randoop.PrimValue, value=0 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=10 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true
<randoop.PrimValue, value=0 [var7]  : true
<randoop.PrimValue, value=10 [var8]  : true
<randoop.PrimValue, value=0 [var9]  : true
<randoop.PrimValue, value=10 [var10]  : true
<randoop.PrimValue, value=10 [var11]  : true
<randoop.PrimValue, value=0 [var12]  : true
<randoop.PrimValue, value=0 [var13]  : true
<randoop.PrimValue, value=0 [var14]  : true
<randoop.PrimValue, value=0 [var15]  : true
<randoop.PrimValue, value=0 [var16]  : true
<randoop.PrimValue, value=10 [var17]  : true

allSequences.size()=303
-------------------------------------------
randoop.util.Randomness: total calls to random: 1797
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 302 sequences.
components: 302
randoop.util.Randomness: total calls to random: 1798
randoop.util.Randomness: total calls to random: 1799
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.randomNumber() : var0 
var2 =  method : A.randomNumber() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.normal() : var0 
var6 =  method : A.normal() : var0 
var7 =  method : A.randomNumber() : var0 
var8 =  method : A.randomNumber() : var0 
var9 =  method : A.randomNumber() : var0 
var10 =  method : A.randomNumber() : var0 
var11 =  method : A.randomNumber() : var0 
var12 =  method : A.normal() : var0 
var13 =  method : A.randomNumber() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Making index 12 inactive (value is a primitive)
Making index 13 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var10 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var11 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var12 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var13 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=0 [var1]  : true
<randoop.PrimValue, value=0 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=10 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true
<randoop.PrimValue, value=0 [var7]  : true
<randoop.PrimValue, value=0 [var8]  : true
<randoop.PrimValue, value=0 [var9]  : true
<randoop.PrimValue, value=0 [var10]  : true
<randoop.PrimValue, value=0 [var11]  : true
<randoop.PrimValue, value=10 [var12]  : true
<randoop.PrimValue, value=0 [var13]  : true

allSequences.size()=304
-------------------------------------------
randoop.util.Randomness: total calls to random: 1800
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 303 sequences.
components: 303
randoop.util.Randomness: total calls to random: 1801
randoop.util.Randomness: total calls to random: 1802
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 1803
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 303 sequences.
components: 303
randoop.util.Randomness: total calls to random: 1804
randoop.util.Randomness: total calls to random: 1805
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.randomNumber() : var0 
var2 =  method : A.normal() : var0 
var3 =  method : A.randomNumber() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.randomNumber() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=0 [var1]  : true
<randoop.PrimValue, value=10 [var2]  : true
<randoop.PrimValue, value=0 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=0 [var5]  : true

allSequences.size()=305
-------------------------------------------
randoop.util.Randomness: total calls to random: 1806
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 304 sequences.
components: 304
randoop.util.Randomness: total calls to random: 1807
randoop.util.Randomness: total calls to random: 1808
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 1809
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 304 sequences.
components: 304
randoop.util.Randomness: total calls to random: 1810
randoop.util.Randomness: total calls to random: 1811
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 1812
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 304 sequences.
components: 304
randoop.util.Randomness: total calls to random: 1813
randoop.util.Randomness: total calls to random: 1814
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 1815
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 304 sequences.
components: 304
randoop.util.Randomness: total calls to random: 1816
randoop.util.Randomness: total calls to random: 1817
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.randomNumber() : var0 
var2 =  method : A.normal() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.normal() : var0 
var6 =  method : A.randomNumber() : var0 
var7 =  method : A.randomNumber() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=0 [var1]  : true
<randoop.PrimValue, value=10 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=10 [var5]  : true
<randoop.PrimValue, value=0 [var6]  : true
<randoop.PrimValue, value=0 [var7]  : true

allSequences.size()=306
-------------------------------------------
randoop.util.Randomness: total calls to random: 1818
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 305 sequences.
components: 305
randoop.util.Randomness: total calls to random: 1819
randoop.util.Randomness: total calls to random: 1820
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 1821
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 305 sequences.
components: 305
randoop.util.Randomness: total calls to random: 1822
randoop.util.Randomness: total calls to random: 1823
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 1824
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 305 sequences.
components: 305
randoop.util.Randomness: total calls to random: 1825
randoop.util.Randomness: total calls to random: 1826
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.randomNumber() : var0 
var2 =  method : A.normal() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.normal() : var0 
var6 =  method : A.normal() : var0 
var7 =  method : A.normal() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=0 [var1]  : true
<randoop.PrimValue, value=10 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=10 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true
<randoop.PrimValue, value=10 [var7]  : true

allSequences.size()=307
-------------------------------------------
randoop.util.Randomness: total calls to random: 1827
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 306 sequences.
components: 306
randoop.util.Randomness: total calls to random: 1828
randoop.util.Randomness: total calls to random: 1829
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 1830
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 306 sequences.
components: 306
randoop.util.Randomness: total calls to random: 1831
randoop.util.Randomness: total calls to random: 1832
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 1833
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 306 sequences.
components: 306
randoop.util.Randomness: total calls to random: 1834
randoop.util.Randomness: total calls to random: 1835
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 1836
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 306 sequences.
components: 306
randoop.util.Randomness: total calls to random: 1837
randoop.util.Randomness: total calls to random: 1838
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.randomNumber() : var0 
var2 =  method : A.normal() : var0 
var3 =  method : A.randomNumber() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.randomNumber() : var0 
var6 =  method : A.randomNumber() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=0 [var1]  : true
<randoop.PrimValue, value=10 [var2]  : true
<randoop.PrimValue, value=0 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=0 [var5]  : true
<randoop.PrimValue, value=0 [var6]  : true

allSequences.size()=308
-------------------------------------------
randoop.util.Randomness: total calls to random: 1839
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 307 sequences.
components: 307
randoop.util.Randomness: total calls to random: 1840
randoop.util.Randomness: total calls to random: 1841
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.normal() : var0 
var2 =  method : A.normal() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.randomNumber() : var0 
var6 =  method : A.randomNumber() : var0 
var7 =  method : A.normal() : var0 
var8 =  method : A.randomNumber() : var0 
var9 =  method : A.normal() : var0 
var10 =  method : A.normal() : var0 
var11 =  method : A.normal() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var10 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var11 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=10 [var1]  : true
<randoop.PrimValue, value=10 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=0 [var5]  : true
<randoop.PrimValue, value=0 [var6]  : true
<randoop.PrimValue, value=10 [var7]  : true
<randoop.PrimValue, value=0 [var8]  : true
<randoop.PrimValue, value=10 [var9]  : true
<randoop.PrimValue, value=10 [var10]  : true
<randoop.PrimValue, value=10 [var11]  : true

allSequences.size()=309
-------------------------------------------
randoop.util.Randomness: total calls to random: 1842
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 308 sequences.
components: 308
randoop.util.Randomness: total calls to random: 1843
randoop.util.Randomness: total calls to random: 1844
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.normal() : var0 
var2 =  method : A.randomNumber() : var0 
var3 =  method : A.randomNumber() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.normal() : var0 
var6 =  method : A.normal() : var0 
var7 =  method : A.normal() : var0 
var8 =  method : A.randomNumber() : var0 
var9 =  method : A.normal() : var0 
var10 =  method : A.randomNumber() : var0 
var11 =  method : A.randomNumber() : var0 
var12 =  method : A.randomNumber() : var0 
var13 =  method : A.normal() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Making index 12 inactive (value is a primitive)
Making index 13 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var10 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var11 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var12 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var13 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=10 [var1]  : true
<randoop.PrimValue, value=0 [var2]  : true
<randoop.PrimValue, value=0 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=10 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true
<randoop.PrimValue, value=10 [var7]  : true
<randoop.PrimValue, value=0 [var8]  : true
<randoop.PrimValue, value=10 [var9]  : true
<randoop.PrimValue, value=0 [var10]  : true
<randoop.PrimValue, value=0 [var11]  : true
<randoop.PrimValue, value=0 [var12]  : true
<randoop.PrimValue, value=10 [var13]  : true

allSequences.size()=310
-------------------------------------------
randoop.util.Randomness: total calls to random: 1845
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 309 sequences.
components: 309
randoop.util.Randomness: total calls to random: 1846
randoop.util.Randomness: total calls to random: 1847
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 1848
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 309 sequences.
components: 309
randoop.util.Randomness: total calls to random: 1849
randoop.util.Randomness: total calls to random: 1850
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.normal() : var0 
var2 =  method : A.normal() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.normal() : var0 
var6 =  method : A.randomNumber() : var0 
var7 =  method : A.randomNumber() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=10 [var1]  : true
<randoop.PrimValue, value=10 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=10 [var5]  : true
<randoop.PrimValue, value=0 [var6]  : true
<randoop.PrimValue, value=0 [var7]  : true

allSequences.size()=311
-------------------------------------------
randoop.util.Randomness: total calls to random: 1851
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 310 sequences.
components: 310
randoop.util.Randomness: total calls to random: 1852
randoop.util.Randomness: total calls to random: 1853
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.normal() : var0 
var2 =  method : A.normal() : var0 
var3 =  method : A.randomNumber() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.randomNumber() : var0 
var6 =  method : A.normal() : var0 
var7 =  method : A.randomNumber() : var0 
var8 =  method : A.normal() : var0 
var9 =  method : A.randomNumber() : var0 
var10 =  method : A.randomNumber() : var0 
var11 =  method : A.normal() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var10 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var11 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=10 [var1]  : true
<randoop.PrimValue, value=10 [var2]  : true
<randoop.PrimValue, value=0 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=0 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true
<randoop.PrimValue, value=0 [var7]  : true
<randoop.PrimValue, value=10 [var8]  : true
<randoop.PrimValue, value=0 [var9]  : true
<randoop.PrimValue, value=0 [var10]  : true
<randoop.PrimValue, value=10 [var11]  : true

allSequences.size()=312
-------------------------------------------
randoop.util.Randomness: total calls to random: 1854
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 311 sequences.
components: 311
randoop.util.Randomness: total calls to random: 1855
randoop.util.Randomness: total calls to random: 1856
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 1857
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 311 sequences.
components: 311
randoop.util.Randomness: total calls to random: 1858
randoop.util.Randomness: total calls to random: 1859
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 1860
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 311 sequences.
components: 311
randoop.util.Randomness: total calls to random: 1861
randoop.util.Randomness: total calls to random: 1862
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.normal() : var0 
var2 =  method : A.normal() : var0 
var3 =  method : A.randomNumber() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.randomNumber() : var0 
var6 =  method : A.normal() : var0 
var7 =  method : A.normal() : var0 
var8 =  method : A.randomNumber() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=10 [var1]  : true
<randoop.PrimValue, value=10 [var2]  : true
<randoop.PrimValue, value=0 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=0 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true
<randoop.PrimValue, value=10 [var7]  : true
<randoop.PrimValue, value=0 [var8]  : true

allSequences.size()=313
-------------------------------------------
randoop.util.Randomness: total calls to random: 1863
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 312 sequences.
components: 312
randoop.util.Randomness: total calls to random: 1864
randoop.util.Randomness: total calls to random: 1865
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 1866
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 312 sequences.
components: 312
randoop.util.Randomness: total calls to random: 1867
randoop.util.Randomness: total calls to random: 1868
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.randomNumber() : var0 
var2 =  method : A.randomNumber() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.normal() : var0 
var6 =  method : A.normal() : var0 
var7 =  method : A.normal() : var0 
var8 =  method : A.normal() : var0 
var9 =  method : A.randomNumber() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=0 [var1]  : true
<randoop.PrimValue, value=0 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=10 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true
<randoop.PrimValue, value=10 [var7]  : true
<randoop.PrimValue, value=10 [var8]  : true
<randoop.PrimValue, value=0 [var9]  : true

allSequences.size()=314
-------------------------------------------
randoop.util.Randomness: total calls to random: 1869
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 313 sequences.
components: 313
randoop.util.Randomness: total calls to random: 1870
randoop.util.Randomness: total calls to random: 1871
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 1872
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 313 sequences.
components: 313
randoop.util.Randomness: total calls to random: 1873
randoop.util.Randomness: total calls to random: 1874
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 1875
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 313 sequences.
components: 313
randoop.util.Randomness: total calls to random: 1876
randoop.util.Randomness: total calls to random: 1877
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.randomNumber() : var0 
var2 =  method : A.normal() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.normal() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=0 [var1]  : true
<randoop.PrimValue, value=10 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=10 [var4]  : true

allSequences.size()=315
-------------------------------------------
randoop.util.Randomness: total calls to random: 1878
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 314 sequences.
components: 314
randoop.util.Randomness: total calls to random: 1879
randoop.util.Randomness: total calls to random: 1880
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.normal() : var0 
var2 =  method : A.normal() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.normal() : var0 
var5 =  method : A.randomNumber() : var0 
var6 =  method : A.normal() : var0 
var7 =  method : A.randomNumber() : var0 
var8 =  method : A.normal() : var0 
var9 =  method : A.normal() : var0 
var10 =  method : A.randomNumber() : var0 
var11 =  method : A.randomNumber() : var0 
var12 =  method : A.normal() : var0 
var13 =  method : A.randomNumber() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Making index 12 inactive (value is a primitive)
Making index 13 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var10 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var11 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var12 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var13 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=10 [var1]  : true
<randoop.PrimValue, value=10 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=10 [var4]  : true
<randoop.PrimValue, value=0 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true
<randoop.PrimValue, value=0 [var7]  : true
<randoop.PrimValue, value=10 [var8]  : true
<randoop.PrimValue, value=10 [var9]  : true
<randoop.PrimValue, value=0 [var10]  : true
<randoop.PrimValue, value=0 [var11]  : true
<randoop.PrimValue, value=10 [var12]  : true
<randoop.PrimValue, value=0 [var13]  : true

allSequences.size()=316
-------------------------------------------
randoop.util.Randomness: total calls to random: 1881
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 315 sequences.
components: 315
randoop.util.Randomness: total calls to random: 1882
randoop.util.Randomness: total calls to random: 1883
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.normal() : var0 
var2 =  method : A.normal() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.randomNumber() : var0 
var6 =  method : A.randomNumber() : var0 
var7 =  method : A.normal() : var0 
var8 =  method : A.randomNumber() : var0 
var9 =  method : A.normal() : var0 
var10 =  method : A.normal() : var0 
var11 =  method : A.normal() : var0 
var12 =  method : A.randomNumber() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Making index 12 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var10 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var11 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var12 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=10 [var1]  : true
<randoop.PrimValue, value=10 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=0 [var5]  : true
<randoop.PrimValue, value=0 [var6]  : true
<randoop.PrimValue, value=10 [var7]  : true
<randoop.PrimValue, value=0 [var8]  : true
<randoop.PrimValue, value=10 [var9]  : true
<randoop.PrimValue, value=10 [var10]  : true
<randoop.PrimValue, value=10 [var11]  : true
<randoop.PrimValue, value=0 [var12]  : true

allSequences.size()=317
-------------------------------------------
randoop.util.Randomness: total calls to random: 1884
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 316 sequences.
components: 316
randoop.util.Randomness: total calls to random: 1885
randoop.util.Randomness: total calls to random: 1886
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 1887
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 316 sequences.
components: 316
randoop.util.Randomness: total calls to random: 1888
randoop.util.Randomness: total calls to random: 1889
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 1890
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 316 sequences.
components: 316
randoop.util.Randomness: total calls to random: 1891
randoop.util.Randomness: total calls to random: 1892
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.randomNumber() : var0 
var2 =  method : A.randomNumber() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.normal() : var0 
var5 =  method : A.randomNumber() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=0 [var1]  : true
<randoop.PrimValue, value=0 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=10 [var4]  : true
<randoop.PrimValue, value=0 [var5]  : true

allSequences.size()=318
-------------------------------------------
randoop.util.Randomness: total calls to random: 1893
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 317 sequences.
components: 317
randoop.util.Randomness: total calls to random: 1894
randoop.util.Randomness: total calls to random: 1895
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 1896
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 317 sequences.
components: 317
randoop.util.Randomness: total calls to random: 1897
randoop.util.Randomness: total calls to random: 1898
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.normal() : var0 
var2 =  method : A.normal() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.normal() : var0 
var5 =  method : A.randomNumber() : var0 
var6 =  method : A.normal() : var0 
var7 =  method : A.normal() : var0 
var8 =  method : A.normal() : var0 
var9 =  method : A.normal() : var0 
var10 =  method : A.normal() : var0 
var11 =  method : A.normal() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var10 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var11 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=10 [var1]  : true
<randoop.PrimValue, value=10 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=10 [var4]  : true
<randoop.PrimValue, value=0 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true
<randoop.PrimValue, value=10 [var7]  : true
<randoop.PrimValue, value=10 [var8]  : true
<randoop.PrimValue, value=10 [var9]  : true
<randoop.PrimValue, value=10 [var10]  : true
<randoop.PrimValue, value=10 [var11]  : true

allSequences.size()=319
-------------------------------------------
randoop.util.Randomness: total calls to random: 1899
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 318 sequences.
components: 318
randoop.util.Randomness: total calls to random: 1900
randoop.util.Randomness: total calls to random: 1901
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 1902
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 318 sequences.
components: 318
randoop.util.Randomness: total calls to random: 1903
randoop.util.Randomness: total calls to random: 1904
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.normal() : var0 
var2 =  method : A.normal() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.normal() : var0 
var5 =  method : A.randomNumber() : var0 
var6 =  method : A.randomNumber() : var0 
var7 =  method : A.randomNumber() : var0 
var8 =  method : A.randomNumber() : var0 
var9 =  method : A.normal() : var0 
var10 =  method : A.randomNumber() : var0 
var11 =  method : A.randomNumber() : var0 
var12 =  method : A.randomNumber() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Making index 12 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var10 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var11 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var12 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=10 [var1]  : true
<randoop.PrimValue, value=10 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=10 [var4]  : true
<randoop.PrimValue, value=0 [var5]  : true
<randoop.PrimValue, value=0 [var6]  : true
<randoop.PrimValue, value=0 [var7]  : true
<randoop.PrimValue, value=0 [var8]  : true
<randoop.PrimValue, value=10 [var9]  : true
<randoop.PrimValue, value=0 [var10]  : true
<randoop.PrimValue, value=0 [var11]  : true
<randoop.PrimValue, value=0 [var12]  : true

allSequences.size()=320
-------------------------------------------
randoop.util.Randomness: total calls to random: 1905
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 319 sequences.
components: 319
randoop.util.Randomness: total calls to random: 1906
randoop.util.Randomness: total calls to random: 1907
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 1908
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 319 sequences.
components: 319
randoop.util.Randomness: total calls to random: 1909
randoop.util.Randomness: total calls to random: 1910
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 1911
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 319 sequences.
components: 319
randoop.util.Randomness: total calls to random: 1912
randoop.util.Randomness: total calls to random: 1913
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.randomNumber() : var0 
var2 =  method : A.randomNumber() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.normal() : var0 
var5 =  method : A.normal() : var0 
var6 =  method : A.normal() : var0 
var7 =  method : A.normal() : var0 
var8 =  method : A.randomNumber() : var0 
var9 =  method : A.normal() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=0 [var1]  : true
<randoop.PrimValue, value=0 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=10 [var4]  : true
<randoop.PrimValue, value=10 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true
<randoop.PrimValue, value=10 [var7]  : true
<randoop.PrimValue, value=0 [var8]  : true
<randoop.PrimValue, value=10 [var9]  : true

allSequences.size()=321
-------------------------------------------
randoop.util.Randomness: total calls to random: 1914
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 320 sequences.
components: 320
randoop.util.Randomness: total calls to random: 1915
randoop.util.Randomness: total calls to random: 1916
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 1917
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 320 sequences.
components: 320
randoop.util.Randomness: total calls to random: 1918
randoop.util.Randomness: total calls to random: 1919
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.normal() : var0 
var2 =  method : A.normal() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.normal() : var0 
var5 =  method : A.randomNumber() : var0 
var6 =  method : A.randomNumber() : var0 
var7 =  method : A.randomNumber() : var0 
var8 =  method : A.randomNumber() : var0 
var9 =  method : A.randomNumber() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=10 [var1]  : true
<randoop.PrimValue, value=10 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=10 [var4]  : true
<randoop.PrimValue, value=0 [var5]  : true
<randoop.PrimValue, value=0 [var6]  : true
<randoop.PrimValue, value=0 [var7]  : true
<randoop.PrimValue, value=0 [var8]  : true
<randoop.PrimValue, value=0 [var9]  : true

allSequences.size()=322
-------------------------------------------
randoop.util.Randomness: total calls to random: 1920
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 321 sequences.
components: 321
randoop.util.Randomness: total calls to random: 1921
randoop.util.Randomness: total calls to random: 1922
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 1923
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 321 sequences.
components: 321
randoop.util.Randomness: total calls to random: 1924
randoop.util.Randomness: total calls to random: 1925
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 1926
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 321 sequences.
components: 321
randoop.util.Randomness: total calls to random: 1927
randoop.util.Randomness: total calls to random: 1928
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.randomNumber() : var0 
var2 =  method : A.randomNumber() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.normal() : var0 
var5 =  method : A.normal() : var0 
var6 =  method : A.normal() : var0 
var7 =  method : A.normal() : var0 
var8 =  method : A.normal() : var0 
var9 =  method : A.randomNumber() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=0 [var1]  : true
<randoop.PrimValue, value=0 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=10 [var4]  : true
<randoop.PrimValue, value=10 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true
<randoop.PrimValue, value=10 [var7]  : true
<randoop.PrimValue, value=10 [var8]  : true
<randoop.PrimValue, value=0 [var9]  : true

allSequences.size()=323
-------------------------------------------
randoop.util.Randomness: total calls to random: 1929
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 322 sequences.
components: 322
randoop.util.Randomness: total calls to random: 1930
randoop.util.Randomness: total calls to random: 1931
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.normal() : var0 
var2 =  method : A.normal() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.normal() : var0 
var5 =  method : A.randomNumber() : var0 
var6 =  method : A.normal() : var0 
var7 =  method : A.normal() : var0 
var8 =  method : A.normal() : var0 
var9 =  method : A.randomNumber() : var0 
var10 =  method : A.randomNumber() : var0 
var11 =  method : A.normal() : var0 
var12 =  method : A.normal() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Making index 12 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var10 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var11 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var12 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=10 [var1]  : true
<randoop.PrimValue, value=10 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=10 [var4]  : true
<randoop.PrimValue, value=0 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true
<randoop.PrimValue, value=10 [var7]  : true
<randoop.PrimValue, value=10 [var8]  : true
<randoop.PrimValue, value=0 [var9]  : true
<randoop.PrimValue, value=0 [var10]  : true
<randoop.PrimValue, value=10 [var11]  : true
<randoop.PrimValue, value=10 [var12]  : true

allSequences.size()=324
-------------------------------------------
randoop.util.Randomness: total calls to random: 1932
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 323 sequences.
components: 323
randoop.util.Randomness: total calls to random: 1933
randoop.util.Randomness: total calls to random: 1934
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 1935
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 323 sequences.
components: 323
randoop.util.Randomness: total calls to random: 1936
randoop.util.Randomness: total calls to random: 1937
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 1938
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 323 sequences.
components: 323
randoop.util.Randomness: total calls to random: 1939
randoop.util.Randomness: total calls to random: 1940
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 1941
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 323 sequences.
components: 323
randoop.util.Randomness: total calls to random: 1942
randoop.util.Randomness: total calls to random: 1943
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 1944
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 323 sequences.
components: 323
randoop.util.Randomness: total calls to random: 1945
randoop.util.Randomness: total calls to random: 1946
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 1947
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 323 sequences.
components: 323
randoop.util.Randomness: total calls to random: 1948
randoop.util.Randomness: total calls to random: 1949
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.normal() : var0 
var2 =  method : A.normal() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.normal() : var0 
var5 =  method : A.randomNumber() : var0 
var6 =  method : A.normal() : var0 
var7 =  method : A.normal() : var0 
var8 =  method : A.randomNumber() : var0 
var9 =  method : A.randomNumber() : var0 
var10 =  method : A.normal() : var0 
var11 =  method : A.normal() : var0 
var12 =  method : A.normal() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Making index 12 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var10 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var11 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var12 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=10 [var1]  : true
<randoop.PrimValue, value=10 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=10 [var4]  : true
<randoop.PrimValue, value=0 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true
<randoop.PrimValue, value=10 [var7]  : true
<randoop.PrimValue, value=0 [var8]  : true
<randoop.PrimValue, value=0 [var9]  : true
<randoop.PrimValue, value=10 [var10]  : true
<randoop.PrimValue, value=10 [var11]  : true
<randoop.PrimValue, value=10 [var12]  : true

allSequences.size()=325
-------------------------------------------
randoop.util.Randomness: total calls to random: 1950
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 324 sequences.
components: 324
randoop.util.Randomness: total calls to random: 1951
randoop.util.Randomness: total calls to random: 1952
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 1953
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 324 sequences.
components: 324
randoop.util.Randomness: total calls to random: 1954
randoop.util.Randomness: total calls to random: 1955
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.normal() : var0 
var2 =  method : A.normal() : var0 
var3 =  method : A.randomNumber() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.randomNumber() : var0 
var6 =  method : A.normal() : var0 
var7 =  method : A.randomNumber() : var0 
var8 =  method : A.normal() : var0 
var9 =  method : A.normal() : var0 
var10 =  method : A.randomNumber() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var10 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=10 [var1]  : true
<randoop.PrimValue, value=10 [var2]  : true
<randoop.PrimValue, value=0 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=0 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true
<randoop.PrimValue, value=0 [var7]  : true
<randoop.PrimValue, value=10 [var8]  : true
<randoop.PrimValue, value=10 [var9]  : true
<randoop.PrimValue, value=0 [var10]  : true

allSequences.size()=326
-------------------------------------------
randoop.util.Randomness: total calls to random: 1956
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 325 sequences.
components: 325
randoop.util.Randomness: total calls to random: 1957
randoop.util.Randomness: total calls to random: 1958
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 1959
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 325 sequences.
components: 325
randoop.util.Randomness: total calls to random: 1960
randoop.util.Randomness: total calls to random: 1961
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 1962
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 325 sequences.
components: 325
randoop.util.Randomness: total calls to random: 1963
randoop.util.Randomness: total calls to random: 1964
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.randomNumber() : var0 
var2 =  method : A.randomNumber() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.normal() : var0 
var6 =  method : A.normal() : var0 
var7 =  method : A.randomNumber() : var0 
var8 =  method : A.randomNumber() : var0 
var9 =  method : A.randomNumber() : var0 
var10 =  method : A.randomNumber() : var0 
var11 =  method : A.normal() : var0 
var12 =  method : A.randomNumber() : var0 
var13 =  method : A.normal() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Making index 12 inactive (value is a primitive)
Making index 13 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var10 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var11 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var12 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var13 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=0 [var1]  : true
<randoop.PrimValue, value=0 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=10 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true
<randoop.PrimValue, value=0 [var7]  : true
<randoop.PrimValue, value=0 [var8]  : true
<randoop.PrimValue, value=0 [var9]  : true
<randoop.PrimValue, value=0 [var10]  : true
<randoop.PrimValue, value=10 [var11]  : true
<randoop.PrimValue, value=0 [var12]  : true
<randoop.PrimValue, value=10 [var13]  : true

allSequences.size()=327
-------------------------------------------
randoop.util.Randomness: total calls to random: 1965
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 326 sequences.
components: 326
randoop.util.Randomness: total calls to random: 1966
randoop.util.Randomness: total calls to random: 1967
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.randomNumber() : var0 
var2 =  method : A.normal() : var0 
var3 =  method : A.randomNumber() : var0 
var4 =  method : A.normal() : var0 
var5 =  method : A.normal() : var0 
var6 =  method : A.randomNumber() : var0 
var7 =  method : A.normal() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=0 [var1]  : true
<randoop.PrimValue, value=10 [var2]  : true
<randoop.PrimValue, value=0 [var3]  : true
<randoop.PrimValue, value=10 [var4]  : true
<randoop.PrimValue, value=10 [var5]  : true
<randoop.PrimValue, value=0 [var6]  : true
<randoop.PrimValue, value=10 [var7]  : true

allSequences.size()=328
-------------------------------------------
randoop.util.Randomness: total calls to random: 1968
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 327 sequences.
components: 327
randoop.util.Randomness: total calls to random: 1969
randoop.util.Randomness: total calls to random: 1970
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.randomNumber() : var0 
var2 =  method : A.randomNumber() : var0 
var3 =  method : A.randomNumber() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.randomNumber() : var0 
var6 =  method : A.normal() : var0 
var7 =  method : A.randomNumber() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=0 [var1]  : true
<randoop.PrimValue, value=0 [var2]  : true
<randoop.PrimValue, value=0 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=0 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true
<randoop.PrimValue, value=0 [var7]  : true

allSequences.size()=329
-------------------------------------------
randoop.util.Randomness: total calls to random: 1971
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 328 sequences.
components: 328
randoop.util.Randomness: total calls to random: 1972
randoop.util.Randomness: total calls to random: 1973
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.normal() : var0 
var2 =  method : A.normal() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.normal() : var0 
var6 =  method : A.normal() : var0 
var7 =  method : A.randomNumber() : var0 
var8 =  method : A.normal() : var0 
var9 =  method : A.normal() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=10 [var1]  : true
<randoop.PrimValue, value=10 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=10 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true
<randoop.PrimValue, value=0 [var7]  : true
<randoop.PrimValue, value=10 [var8]  : true
<randoop.PrimValue, value=10 [var9]  : true

allSequences.size()=330
-------------------------------------------
randoop.util.Randomness: total calls to random: 1974
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 329 sequences.
components: 329
randoop.util.Randomness: total calls to random: 1975
randoop.util.Randomness: total calls to random: 1976
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 1977
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 329 sequences.
components: 329
randoop.util.Randomness: total calls to random: 1978
randoop.util.Randomness: total calls to random: 1979
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.randomNumber() : var0 
var2 =  method : A.randomNumber() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.normal() : var0 
var6 =  method : A.normal() : var0 
var7 =  method : A.randomNumber() : var0 
var8 =  method : A.normal() : var0 
var9 =  method : A.randomNumber() : var0 
var10 =  method : A.normal() : var0 
var11 =  method : A.normal() : var0 
var12 =  method : A.randomNumber() : var0 
var13 =  method : A.randomNumber() : var0 
var14 =  method : A.randomNumber() : var0 
var15 =  method : A.normal() : var0 
var16 =  method : A.normal() : var0 
var17 =  method : A.randomNumber() : var0 
var18 =  method : A.randomNumber() : var0 
var19 =  method : A.randomNumber() : var0 
var20 =  method : A.randomNumber() : var0 
var21 =  method : A.randomNumber() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Making index 12 inactive (value is a primitive)
Making index 13 inactive (value is a primitive)
Making index 14 inactive (value is a primitive)
Making index 15 inactive (value is a primitive)
Making index 16 inactive (value is a primitive)
Making index 17 inactive (value is a primitive)
Making index 18 inactive (value is a primitive)
Making index 19 inactive (value is a primitive)
Making index 20 inactive (value is a primitive)
Making index 21 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var10 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var11 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var12 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var13 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var14 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var15 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var16 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var17 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var18 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var19 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var20 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var21 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=0 [var1]  : true
<randoop.PrimValue, value=0 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=10 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true
<randoop.PrimValue, value=0 [var7]  : true
<randoop.PrimValue, value=10 [var8]  : true
<randoop.PrimValue, value=0 [var9]  : true
<randoop.PrimValue, value=10 [var10]  : true
<randoop.PrimValue, value=10 [var11]  : true
<randoop.PrimValue, value=0 [var12]  : true
<randoop.PrimValue, value=0 [var13]  : true
<randoop.PrimValue, value=0 [var14]  : true
<randoop.PrimValue, value=10 [var15]  : true
<randoop.PrimValue, value=10 [var16]  : true
<randoop.PrimValue, value=0 [var17]  : true
<randoop.PrimValue, value=0 [var18]  : true
<randoop.PrimValue, value=0 [var19]  : true
<randoop.PrimValue, value=0 [var20]  : true
<randoop.PrimValue, value=0 [var21]  : true

allSequences.size()=331
-------------------------------------------
randoop.util.Randomness: total calls to random: 1980
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 330 sequences.
components: 330
randoop.util.Randomness: total calls to random: 1981
randoop.util.Randomness: total calls to random: 1982
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.randomNumber() : var0 
var2 =  method : A.randomNumber() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.normal() : var0 
var6 =  method : A.normal() : var0 
var7 =  method : A.randomNumber() : var0 
var8 =  method : A.normal() : var0 
var9 =  method : A.randomNumber() : var0 
var10 =  method : A.normal() : var0 
var11 =  method : A.normal() : var0 
var12 =  method : A.randomNumber() : var0 
var13 =  method : A.randomNumber() : var0 
var14 =  method : A.normal() : var0 
var15 =  method : A.randomNumber() : var0 
var16 =  method : A.normal() : var0 
var17 =  method : A.normal() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Making index 12 inactive (value is a primitive)
Making index 13 inactive (value is a primitive)
Making index 14 inactive (value is a primitive)
Making index 15 inactive (value is a primitive)
Making index 16 inactive (value is a primitive)
Making index 17 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var10 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var11 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var12 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var13 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var14 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var15 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var16 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var17 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=0 [var1]  : true
<randoop.PrimValue, value=0 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=10 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true
<randoop.PrimValue, value=0 [var7]  : true
<randoop.PrimValue, value=10 [var8]  : true
<randoop.PrimValue, value=0 [var9]  : true
<randoop.PrimValue, value=10 [var10]  : true
<randoop.PrimValue, value=10 [var11]  : true
<randoop.PrimValue, value=0 [var12]  : true
<randoop.PrimValue, value=0 [var13]  : true
<randoop.PrimValue, value=10 [var14]  : true
<randoop.PrimValue, value=0 [var15]  : true
<randoop.PrimValue, value=10 [var16]  : true
<randoop.PrimValue, value=10 [var17]  : true

allSequences.size()=332
-------------------------------------------
randoop.util.Randomness: total calls to random: 1983
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 331 sequences.
components: 331
randoop.util.Randomness: total calls to random: 1984
randoop.util.Randomness: total calls to random: 1985
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 1986
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 331 sequences.
components: 331
randoop.util.Randomness: total calls to random: 1987
randoop.util.Randomness: total calls to random: 1988
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 1989
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 331 sequences.
components: 331
randoop.util.Randomness: total calls to random: 1990
randoop.util.Randomness: total calls to random: 1991
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 1992
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 331 sequences.
components: 331
randoop.util.Randomness: total calls to random: 1993
randoop.util.Randomness: total calls to random: 1994
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 1995
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 331 sequences.
components: 331
randoop.util.Randomness: total calls to random: 1996
randoop.util.Randomness: total calls to random: 1997
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 1998
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 331 sequences.
components: 331
randoop.util.Randomness: total calls to random: 1999
randoop.util.Randomness: total calls to random: 2000
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.randomNumber() : var0 
var2 =  method : A.randomNumber() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.normal() : var0 
var5 =  method : A.normal() : var0 
var6 =  method : A.normal() : var0 
var7 =  method : A.normal() : var0 
var8 =  method : A.normal() : var0 
var9 =  method : A.randomNumber() : var0 
var10 =  method : A.randomNumber() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var10 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=0 [var1]  : true
<randoop.PrimValue, value=0 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=10 [var4]  : true
<randoop.PrimValue, value=10 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true
<randoop.PrimValue, value=10 [var7]  : true
<randoop.PrimValue, value=10 [var8]  : true
<randoop.PrimValue, value=0 [var9]  : true
<randoop.PrimValue, value=0 [var10]  : true

allSequences.size()=333
-------------------------------------------
randoop.util.Randomness: total calls to random: 2001
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 332 sequences.
components: 332
randoop.util.Randomness: total calls to random: 2002
randoop.util.Randomness: total calls to random: 2003
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 2004
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 332 sequences.
components: 332
randoop.util.Randomness: total calls to random: 2005
randoop.util.Randomness: total calls to random: 2006
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.normal() : var0 
var2 =  method : A.normal() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.normal() : var0 
var5 =  method : A.randomNumber() : var0 
var6 =  method : A.normal() : var0 
var7 =  method : A.normal() : var0 
var8 =  method : A.normal() : var0 
var9 =  method : A.randomNumber() : var0 
var10 =  method : A.randomNumber() : var0 
var11 =  method : A.randomNumber() : var0 
var12 =  method : A.randomNumber() : var0 
var13 =  method : A.randomNumber() : var0 
var14 =  method : A.randomNumber() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Making index 12 inactive (value is a primitive)
Making index 13 inactive (value is a primitive)
Making index 14 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var10 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var11 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var12 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var13 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var14 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=10 [var1]  : true
<randoop.PrimValue, value=10 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=10 [var4]  : true
<randoop.PrimValue, value=0 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true
<randoop.PrimValue, value=10 [var7]  : true
<randoop.PrimValue, value=10 [var8]  : true
<randoop.PrimValue, value=0 [var9]  : true
<randoop.PrimValue, value=0 [var10]  : true
<randoop.PrimValue, value=0 [var11]  : true
<randoop.PrimValue, value=0 [var12]  : true
<randoop.PrimValue, value=0 [var13]  : true
<randoop.PrimValue, value=0 [var14]  : true

allSequences.size()=334
-------------------------------------------
randoop.util.Randomness: total calls to random: 2007
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 333 sequences.
components: 333
randoop.util.Randomness: total calls to random: 2008
randoop.util.Randomness: total calls to random: 2009
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.normal() : var0 
var2 =  method : A.randomNumber() : var0 
var3 =  method : A.randomNumber() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.normal() : var0 
var6 =  method : A.normal() : var0 
var7 =  method : A.normal() : var0 
var8 =  method : A.randomNumber() : var0 
var9 =  method : A.normal() : var0 
var10 =  method : A.randomNumber() : var0 
var11 =  method : A.normal() : var0 
var12 =  method : A.randomNumber() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Making index 12 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var10 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var11 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var12 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=10 [var1]  : true
<randoop.PrimValue, value=0 [var2]  : true
<randoop.PrimValue, value=0 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=10 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true
<randoop.PrimValue, value=10 [var7]  : true
<randoop.PrimValue, value=0 [var8]  : true
<randoop.PrimValue, value=10 [var9]  : true
<randoop.PrimValue, value=0 [var10]  : true
<randoop.PrimValue, value=10 [var11]  : true
<randoop.PrimValue, value=0 [var12]  : true

allSequences.size()=335
-------------------------------------------
randoop.util.Randomness: total calls to random: 2010
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 334 sequences.
components: 334
randoop.util.Randomness: total calls to random: 2011
randoop.util.Randomness: total calls to random: 2012
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.normal() : var0 
var2 =  method : A.normal() : var0 
var3 =  method : A.randomNumber() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.randomNumber() : var0 
var6 =  method : A.randomNumber() : var0 
var7 =  method : A.normal() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=10 [var1]  : true
<randoop.PrimValue, value=10 [var2]  : true
<randoop.PrimValue, value=0 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=0 [var5]  : true
<randoop.PrimValue, value=0 [var6]  : true
<randoop.PrimValue, value=10 [var7]  : true

allSequences.size()=336
-------------------------------------------
randoop.util.Randomness: total calls to random: 2013
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 335 sequences.
components: 335
randoop.util.Randomness: total calls to random: 2014
randoop.util.Randomness: total calls to random: 2015
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.normal() : var0 
var2 =  method : A.normal() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.randomNumber() : var0 
var6 =  method : A.randomNumber() : var0 
var7 =  method : A.normal() : var0 
var8 =  method : A.randomNumber() : var0 
var9 =  method : A.randomNumber() : var0 
var10 =  method : A.randomNumber() : var0 
var11 =  method : A.randomNumber() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var10 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var11 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=10 [var1]  : true
<randoop.PrimValue, value=10 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=0 [var5]  : true
<randoop.PrimValue, value=0 [var6]  : true
<randoop.PrimValue, value=10 [var7]  : true
<randoop.PrimValue, value=0 [var8]  : true
<randoop.PrimValue, value=0 [var9]  : true
<randoop.PrimValue, value=0 [var10]  : true
<randoop.PrimValue, value=0 [var11]  : true

allSequences.size()=337
-------------------------------------------
randoop.util.Randomness: total calls to random: 2016
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 336 sequences.
components: 336
randoop.util.Randomness: total calls to random: 2017
randoop.util.Randomness: total calls to random: 2018
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.normal() : var0 
var2 =  method : A.normal() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.normal() : var0 
var6 =  method : A.randomNumber() : var0 
var7 =  method : A.randomNumber() : var0 
var8 =  method : A.normal() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=10 [var1]  : true
<randoop.PrimValue, value=10 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=10 [var5]  : true
<randoop.PrimValue, value=0 [var6]  : true
<randoop.PrimValue, value=0 [var7]  : true
<randoop.PrimValue, value=10 [var8]  : true

allSequences.size()=338
-------------------------------------------
randoop.util.Randomness: total calls to random: 2019
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 337 sequences.
components: 337
randoop.util.Randomness: total calls to random: 2020
randoop.util.Randomness: total calls to random: 2021
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.randomNumber() : var0 
var2 =  method : A.randomNumber() : var0 
var3 =  method : A.randomNumber() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.randomNumber() : var0 
var6 =  method : A.normal() : var0 
var7 =  method : A.randomNumber() : var0 
var8 =  method : A.randomNumber() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=0 [var1]  : true
<randoop.PrimValue, value=0 [var2]  : true
<randoop.PrimValue, value=0 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=0 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true
<randoop.PrimValue, value=0 [var7]  : true
<randoop.PrimValue, value=0 [var8]  : true

allSequences.size()=339
-------------------------------------------
randoop.util.Randomness: total calls to random: 2022
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 338 sequences.
components: 338
randoop.util.Randomness: total calls to random: 2023
randoop.util.Randomness: total calls to random: 2024
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 2025
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 338 sequences.
components: 338
randoop.util.Randomness: total calls to random: 2026
randoop.util.Randomness: total calls to random: 2027
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 2028
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 338 sequences.
components: 338
randoop.util.Randomness: total calls to random: 2029
randoop.util.Randomness: total calls to random: 2030
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 2031
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 338 sequences.
components: 338
randoop.util.Randomness: total calls to random: 2032
randoop.util.Randomness: total calls to random: 2033
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.randomNumber() : var0 
var2 =  method : A.randomNumber() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.normal() : var0 
var6 =  method : A.normal() : var0 
var7 =  method : A.randomNumber() : var0 
var8 =  method : A.normal() : var0 
var9 =  method : A.randomNumber() : var0 
var10 =  method : A.randomNumber() : var0 
var11 =  method : A.normal() : var0 
var12 =  method : A.normal() : var0 
var13 =  method : A.randomNumber() : var0 
var14 =  method : A.randomNumber() : var0 
var15 =  method : A.normal() : var0 
var16 =  method : A.randomNumber() : var0 
var17 =  method : A.randomNumber() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Making index 12 inactive (value is a primitive)
Making index 13 inactive (value is a primitive)
Making index 14 inactive (value is a primitive)
Making index 15 inactive (value is a primitive)
Making index 16 inactive (value is a primitive)
Making index 17 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var10 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var11 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var12 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var13 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var14 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var15 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var16 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var17 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=0 [var1]  : true
<randoop.PrimValue, value=0 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=10 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true
<randoop.PrimValue, value=0 [var7]  : true
<randoop.PrimValue, value=10 [var8]  : true
<randoop.PrimValue, value=0 [var9]  : true
<randoop.PrimValue, value=0 [var10]  : true
<randoop.PrimValue, value=10 [var11]  : true
<randoop.PrimValue, value=10 [var12]  : true
<randoop.PrimValue, value=0 [var13]  : true
<randoop.PrimValue, value=0 [var14]  : true
<randoop.PrimValue, value=10 [var15]  : true
<randoop.PrimValue, value=0 [var16]  : true
<randoop.PrimValue, value=0 [var17]  : true

allSequences.size()=340
-------------------------------------------
randoop.util.Randomness: total calls to random: 2034
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 339 sequences.
components: 339
randoop.util.Randomness: total calls to random: 2035
randoop.util.Randomness: total calls to random: 2036
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 2037
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 339 sequences.
components: 339
randoop.util.Randomness: total calls to random: 2038
randoop.util.Randomness: total calls to random: 2039
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 2040
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 339 sequences.
components: 339
randoop.util.Randomness: total calls to random: 2041
randoop.util.Randomness: total calls to random: 2042
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.randomNumber() : var0 
var2 =  method : A.randomNumber() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.normal() : var0 
var6 =  method : A.randomNumber() : var0 
var7 =  method : A.normal() : var0 
var8 =  method : A.normal() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=0 [var1]  : true
<randoop.PrimValue, value=0 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=10 [var5]  : true
<randoop.PrimValue, value=0 [var6]  : true
<randoop.PrimValue, value=10 [var7]  : true
<randoop.PrimValue, value=10 [var8]  : true

allSequences.size()=341
-------------------------------------------
randoop.util.Randomness: total calls to random: 2043
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 340 sequences.
components: 340
randoop.util.Randomness: total calls to random: 2044
randoop.util.Randomness: total calls to random: 2045
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 2046
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 340 sequences.
components: 340
randoop.util.Randomness: total calls to random: 2047
randoop.util.Randomness: total calls to random: 2048
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.normal() : var0 
var2 =  method : A.normal() : var0 
var3 =  method : A.randomNumber() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.randomNumber() : var0 
var6 =  method : A.randomNumber() : var0 
var7 =  method : A.randomNumber() : var0 
var8 =  method : A.normal() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=10 [var1]  : true
<randoop.PrimValue, value=10 [var2]  : true
<randoop.PrimValue, value=0 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=0 [var5]  : true
<randoop.PrimValue, value=0 [var6]  : true
<randoop.PrimValue, value=0 [var7]  : true
<randoop.PrimValue, value=10 [var8]  : true

allSequences.size()=342
-------------------------------------------
randoop.util.Randomness: total calls to random: 2049
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 341 sequences.
components: 341
randoop.util.Randomness: total calls to random: 2050
randoop.util.Randomness: total calls to random: 2051
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 2052
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 341 sequences.
components: 341
randoop.util.Randomness: total calls to random: 2053
randoop.util.Randomness: total calls to random: 2054
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 2055
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 341 sequences.
components: 341
randoop.util.Randomness: total calls to random: 2056
randoop.util.Randomness: total calls to random: 2057
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 2058
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 341 sequences.
components: 341
randoop.util.Randomness: total calls to random: 2059
randoop.util.Randomness: total calls to random: 2060
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 2061
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 341 sequences.
components: 341
randoop.util.Randomness: total calls to random: 2062
randoop.util.Randomness: total calls to random: 2063
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 2064
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 341 sequences.
components: 341
randoop.util.Randomness: total calls to random: 2065
randoop.util.Randomness: total calls to random: 2066
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.randomNumber() : var0 
var2 =  method : A.randomNumber() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.normal() : var0 
var6 =  method : A.normal() : var0 
var7 =  method : A.randomNumber() : var0 
var8 =  method : A.normal() : var0 
var9 =  method : A.randomNumber() : var0 
var10 =  method : A.normal() : var0 
var11 =  method : A.normal() : var0 
var12 =  method : A.randomNumber() : var0 
var13 =  method : A.randomNumber() : var0 
var14 =  method : A.randomNumber() : var0 
var15 =  method : A.normal() : var0 
var16 =  method : A.normal() : var0 
var17 =  method : A.randomNumber() : var0 
var18 =  method : A.randomNumber() : var0 
var19 =  method : A.randomNumber() : var0 
var20 =  method : A.randomNumber() : var0 
var21 =  method : A.randomNumber() : var0 
var22 =  method : A.randomNumber() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Making index 12 inactive (value is a primitive)
Making index 13 inactive (value is a primitive)
Making index 14 inactive (value is a primitive)
Making index 15 inactive (value is a primitive)
Making index 16 inactive (value is a primitive)
Making index 17 inactive (value is a primitive)
Making index 18 inactive (value is a primitive)
Making index 19 inactive (value is a primitive)
Making index 20 inactive (value is a primitive)
Making index 21 inactive (value is a primitive)
Making index 22 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var10 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var11 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var12 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var13 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var14 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var15 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var16 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var17 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var18 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var19 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var20 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var21 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var22 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=0 [var1]  : true
<randoop.PrimValue, value=0 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=10 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true
<randoop.PrimValue, value=0 [var7]  : true
<randoop.PrimValue, value=10 [var8]  : true
<randoop.PrimValue, value=0 [var9]  : true
<randoop.PrimValue, value=10 [var10]  : true
<randoop.PrimValue, value=10 [var11]  : true
<randoop.PrimValue, value=0 [var12]  : true
<randoop.PrimValue, value=0 [var13]  : true
<randoop.PrimValue, value=0 [var14]  : true
<randoop.PrimValue, value=10 [var15]  : true
<randoop.PrimValue, value=10 [var16]  : true
<randoop.PrimValue, value=0 [var17]  : true
<randoop.PrimValue, value=0 [var18]  : true
<randoop.PrimValue, value=0 [var19]  : true
<randoop.PrimValue, value=0 [var20]  : true
<randoop.PrimValue, value=0 [var21]  : true
<randoop.PrimValue, value=0 [var22]  : true

allSequences.size()=343
-------------------------------------------
randoop.util.Randomness: total calls to random: 2067
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 342 sequences.
components: 342
randoop.util.Randomness: total calls to random: 2068
randoop.util.Randomness: total calls to random: 2069
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.randomNumber() : var0 
var2 =  method : A.normal() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.normal() : var0 
var6 =  method : A.normal() : var0 
var7 =  method : A.normal() : var0 
var8 =  method : A.randomNumber() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=0 [var1]  : true
<randoop.PrimValue, value=10 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=10 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true
<randoop.PrimValue, value=10 [var7]  : true
<randoop.PrimValue, value=0 [var8]  : true

allSequences.size()=344
-------------------------------------------
randoop.util.Randomness: total calls to random: 2070
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 343 sequences.
components: 343
randoop.util.Randomness: total calls to random: 2071
randoop.util.Randomness: total calls to random: 2072
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 2073
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 343 sequences.
components: 343
randoop.util.Randomness: total calls to random: 2074
randoop.util.Randomness: total calls to random: 2075
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 2076
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 343 sequences.
components: 343
randoop.util.Randomness: total calls to random: 2077
randoop.util.Randomness: total calls to random: 2078
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.randomNumber() : var0 
var2 =  method : A.randomNumber() : var0 
var3 =  method : A.randomNumber() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.randomNumber() : var0 
var6 =  method : A.normal() : var0 
var7 =  method : A.normal() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=0 [var1]  : true
<randoop.PrimValue, value=0 [var2]  : true
<randoop.PrimValue, value=0 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=0 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true
<randoop.PrimValue, value=10 [var7]  : true

allSequences.size()=345
-------------------------------------------
randoop.util.Randomness: total calls to random: 2079
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 344 sequences.
components: 344
randoop.util.Randomness: total calls to random: 2080
randoop.util.Randomness: total calls to random: 2081
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.randomNumber() : var0 
var2 =  method : A.randomNumber() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.normal() : var0 
var6 =  method : A.normal() : var0 
var7 =  method : A.randomNumber() : var0 
var8 =  method : A.normal() : var0 
var9 =  method : A.randomNumber() : var0 
var10 =  method : A.randomNumber() : var0 
var11 =  method : A.normal() : var0 
var12 =  method : A.normal() : var0 
var13 =  method : A.randomNumber() : var0 
var14 =  method : A.randomNumber() : var0 
var15 =  method : A.normal() : var0 
var16 =  method : A.normal() : var0 
var17 =  method : A.randomNumber() : var0 
var18 =  method : A.randomNumber() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Making index 12 inactive (value is a primitive)
Making index 13 inactive (value is a primitive)
Making index 14 inactive (value is a primitive)
Making index 15 inactive (value is a primitive)
Making index 16 inactive (value is a primitive)
Making index 17 inactive (value is a primitive)
Making index 18 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var10 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var11 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var12 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var13 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var14 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var15 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var16 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var17 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var18 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=0 [var1]  : true
<randoop.PrimValue, value=0 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=10 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true
<randoop.PrimValue, value=0 [var7]  : true
<randoop.PrimValue, value=10 [var8]  : true
<randoop.PrimValue, value=0 [var9]  : true
<randoop.PrimValue, value=0 [var10]  : true
<randoop.PrimValue, value=10 [var11]  : true
<randoop.PrimValue, value=10 [var12]  : true
<randoop.PrimValue, value=0 [var13]  : true
<randoop.PrimValue, value=0 [var14]  : true
<randoop.PrimValue, value=10 [var15]  : true
<randoop.PrimValue, value=10 [var16]  : true
<randoop.PrimValue, value=0 [var17]  : true
<randoop.PrimValue, value=0 [var18]  : true

allSequences.size()=346
-------------------------------------------
randoop.util.Randomness: total calls to random: 2082
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 345 sequences.
components: 345
randoop.util.Randomness: total calls to random: 2083
randoop.util.Randomness: total calls to random: 2084
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 2085
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 345 sequences.
components: 345
randoop.util.Randomness: total calls to random: 2086
randoop.util.Randomness: total calls to random: 2087
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 2088
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 345 sequences.
components: 345
randoop.util.Randomness: total calls to random: 2089
randoop.util.Randomness: total calls to random: 2090
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 2091
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 345 sequences.
components: 345
randoop.util.Randomness: total calls to random: 2092
randoop.util.Randomness: total calls to random: 2093
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 2094
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 345 sequences.
components: 345
randoop.util.Randomness: total calls to random: 2095
randoop.util.Randomness: total calls to random: 2096
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 2097
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 345 sequences.
components: 345
randoop.util.Randomness: total calls to random: 2098
randoop.util.Randomness: total calls to random: 2099
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 2100
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 345 sequences.
components: 345
randoop.util.Randomness: total calls to random: 2101
randoop.util.Randomness: total calls to random: 2102
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.normal() : var0 
var2 =  method : A.normal() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.normal() : var0 
var5 =  method : A.randomNumber() : var0 
var6 =  method : A.randomNumber() : var0 
var7 =  method : A.randomNumber() : var0 
var8 =  method : A.randomNumber() : var0 
var9 =  method : A.normal() : var0 
var10 =  method : A.randomNumber() : var0 
var11 =  method : A.normal() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var10 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var11 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=10 [var1]  : true
<randoop.PrimValue, value=10 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=10 [var4]  : true
<randoop.PrimValue, value=0 [var5]  : true
<randoop.PrimValue, value=0 [var6]  : true
<randoop.PrimValue, value=0 [var7]  : true
<randoop.PrimValue, value=0 [var8]  : true
<randoop.PrimValue, value=10 [var9]  : true
<randoop.PrimValue, value=0 [var10]  : true
<randoop.PrimValue, value=10 [var11]  : true

allSequences.size()=347
-------------------------------------------
randoop.util.Randomness: total calls to random: 2103
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 346 sequences.
components: 346
randoop.util.Randomness: total calls to random: 2104
randoop.util.Randomness: total calls to random: 2105
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 2106
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 346 sequences.
components: 346
randoop.util.Randomness: total calls to random: 2107
randoop.util.Randomness: total calls to random: 2108
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 2109
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 346 sequences.
components: 346
randoop.util.Randomness: total calls to random: 2110
randoop.util.Randomness: total calls to random: 2111
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 2112
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 346 sequences.
components: 346
randoop.util.Randomness: total calls to random: 2113
randoop.util.Randomness: total calls to random: 2114
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.randomNumber() : var0 
var2 =  method : A.randomNumber() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.normal() : var0 
var6 =  method : A.randomNumber() : var0 
var7 =  method : A.normal() : var0 
var8 =  method : A.normal() : var0 
var9 =  method : A.normal() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=0 [var1]  : true
<randoop.PrimValue, value=0 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=10 [var5]  : true
<randoop.PrimValue, value=0 [var6]  : true
<randoop.PrimValue, value=10 [var7]  : true
<randoop.PrimValue, value=10 [var8]  : true
<randoop.PrimValue, value=10 [var9]  : true

allSequences.size()=348
-------------------------------------------
randoop.util.Randomness: total calls to random: 2115
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 347 sequences.
components: 347
randoop.util.Randomness: total calls to random: 2116
randoop.util.Randomness: total calls to random: 2117
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.normal() : var0 
var2 =  method : A.normal() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.randomNumber() : var0 
var6 =  method : A.randomNumber() : var0 
var7 =  method : A.normal() : var0 
var8 =  method : A.normal() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=10 [var1]  : true
<randoop.PrimValue, value=10 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=0 [var5]  : true
<randoop.PrimValue, value=0 [var6]  : true
<randoop.PrimValue, value=10 [var7]  : true
<randoop.PrimValue, value=10 [var8]  : true

allSequences.size()=349
-------------------------------------------
randoop.util.Randomness: total calls to random: 2118
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 348 sequences.
components: 348
randoop.util.Randomness: total calls to random: 2119
randoop.util.Randomness: total calls to random: 2120
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 2121
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 348 sequences.
components: 348
randoop.util.Randomness: total calls to random: 2122
randoop.util.Randomness: total calls to random: 2123
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.normal() : var0 
var2 =  method : A.normal() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.normal() : var0 
var6 =  method : A.normal() : var0 
var7 =  method : A.randomNumber() : var0 
var8 =  method : A.randomNumber() : var0 
var9 =  method : A.normal() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=10 [var1]  : true
<randoop.PrimValue, value=10 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=10 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true
<randoop.PrimValue, value=0 [var7]  : true
<randoop.PrimValue, value=0 [var8]  : true
<randoop.PrimValue, value=10 [var9]  : true

allSequences.size()=350
-------------------------------------------
randoop.util.Randomness: total calls to random: 2124
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 349 sequences.
components: 349
randoop.util.Randomness: total calls to random: 2125
randoop.util.Randomness: total calls to random: 2126
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.normal() : var0 
var2 =  method : A.normal() : var0 
var3 =  method : A.randomNumber() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.normal() : var0 
var6 =  method : A.randomNumber() : var0 
var7 =  method : A.normal() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=10 [var1]  : true
<randoop.PrimValue, value=10 [var2]  : true
<randoop.PrimValue, value=0 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=10 [var5]  : true
<randoop.PrimValue, value=0 [var6]  : true
<randoop.PrimValue, value=10 [var7]  : true

allSequences.size()=351
-------------------------------------------
randoop.util.Randomness: total calls to random: 2127
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 350 sequences.
components: 350
randoop.util.Randomness: total calls to random: 2128
randoop.util.Randomness: total calls to random: 2129
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 2130
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 350 sequences.
components: 350
randoop.util.Randomness: total calls to random: 2131
randoop.util.Randomness: total calls to random: 2132
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 2133
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 350 sequences.
components: 350
randoop.util.Randomness: total calls to random: 2134
randoop.util.Randomness: total calls to random: 2135
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.normal() : var0 
var2 =  method : A.normal() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.normal() : var0 
var5 =  method : A.randomNumber() : var0 
var6 =  method : A.normal() : var0 
var7 =  method : A.normal() : var0 
var8 =  method : A.normal() : var0 
var9 =  method : A.normal() : var0 
var10 =  method : A.normal() : var0 
var11 =  method : A.normal() : var0 
var12 =  method : A.randomNumber() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Making index 12 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var10 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var11 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var12 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=10 [var1]  : true
<randoop.PrimValue, value=10 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=10 [var4]  : true
<randoop.PrimValue, value=0 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true
<randoop.PrimValue, value=10 [var7]  : true
<randoop.PrimValue, value=10 [var8]  : true
<randoop.PrimValue, value=10 [var9]  : true
<randoop.PrimValue, value=10 [var10]  : true
<randoop.PrimValue, value=10 [var11]  : true
<randoop.PrimValue, value=0 [var12]  : true

allSequences.size()=352
-------------------------------------------
randoop.util.Randomness: total calls to random: 2136
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 351 sequences.
components: 351
randoop.util.Randomness: total calls to random: 2137
randoop.util.Randomness: total calls to random: 2138
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 2139
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 351 sequences.
components: 351
randoop.util.Randomness: total calls to random: 2140
randoop.util.Randomness: total calls to random: 2141
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.normal() : var0 
var2 =  method : A.normal() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.normal() : var0 
var5 =  method : A.randomNumber() : var0 
var6 =  method : A.normal() : var0 
var7 =  method : A.randomNumber() : var0 
var8 =  method : A.normal() : var0 
var9 =  method : A.normal() : var0 
var10 =  method : A.randomNumber() : var0 
var11 =  method : A.randomNumber() : var0 
var12 =  method : A.normal() : var0 
var13 =  method : A.normal() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Making index 12 inactive (value is a primitive)
Making index 13 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var10 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var11 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var12 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var13 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=10 [var1]  : true
<randoop.PrimValue, value=10 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=10 [var4]  : true
<randoop.PrimValue, value=0 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true
<randoop.PrimValue, value=0 [var7]  : true
<randoop.PrimValue, value=10 [var8]  : true
<randoop.PrimValue, value=10 [var9]  : true
<randoop.PrimValue, value=0 [var10]  : true
<randoop.PrimValue, value=0 [var11]  : true
<randoop.PrimValue, value=10 [var12]  : true
<randoop.PrimValue, value=10 [var13]  : true

allSequences.size()=353
-------------------------------------------
randoop.util.Randomness: total calls to random: 2142
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 352 sequences.
components: 352
randoop.util.Randomness: total calls to random: 2143
randoop.util.Randomness: total calls to random: 2144
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.randomNumber() : var0 
var2 =  method : A.randomNumber() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.normal() : var0 
var6 =  method : A.normal() : var0 
var7 =  method : A.randomNumber() : var0 
var8 =  method : A.randomNumber() : var0 
var9 =  method : A.randomNumber() : var0 
var10 =  method : A.randomNumber() : var0 
var11 =  method : A.normal() : var0 
var12 =  method : A.randomNumber() : var0 
var13 =  method : A.randomNumber() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Making index 12 inactive (value is a primitive)
Making index 13 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var10 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var11 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var12 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var13 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=0 [var1]  : true
<randoop.PrimValue, value=0 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=10 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true
<randoop.PrimValue, value=0 [var7]  : true
<randoop.PrimValue, value=0 [var8]  : true
<randoop.PrimValue, value=0 [var9]  : true
<randoop.PrimValue, value=0 [var10]  : true
<randoop.PrimValue, value=10 [var11]  : true
<randoop.PrimValue, value=0 [var12]  : true
<randoop.PrimValue, value=0 [var13]  : true

allSequences.size()=354
-------------------------------------------
randoop.util.Randomness: total calls to random: 2145
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 353 sequences.
components: 353
randoop.util.Randomness: total calls to random: 2146
randoop.util.Randomness: total calls to random: 2147
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.randomNumber() : var0 
var2 =  method : A.randomNumber() : var0 
var3 =  method : A.randomNumber() : var0 
var4 =  method : A.normal() : var0 
var5 =  method : A.randomNumber() : var0 
var6 =  method : A.normal() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=0 [var1]  : true
<randoop.PrimValue, value=0 [var2]  : true
<randoop.PrimValue, value=0 [var3]  : true
<randoop.PrimValue, value=10 [var4]  : true
<randoop.PrimValue, value=0 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true

allSequences.size()=355
-------------------------------------------
randoop.util.Randomness: total calls to random: 2148
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 354 sequences.
components: 354
randoop.util.Randomness: total calls to random: 2149
randoop.util.Randomness: total calls to random: 2150
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.randomNumber() : var0 
var2 =  method : A.randomNumber() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.normal() : var0 
var6 =  method : A.normal() : var0 
var7 =  method : A.normal() : var0 
var8 =  method : A.randomNumber() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=0 [var1]  : true
<randoop.PrimValue, value=0 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=10 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true
<randoop.PrimValue, value=10 [var7]  : true
<randoop.PrimValue, value=0 [var8]  : true

allSequences.size()=356
-------------------------------------------
randoop.util.Randomness: total calls to random: 2151
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 355 sequences.
components: 355
randoop.util.Randomness: total calls to random: 2152
randoop.util.Randomness: total calls to random: 2153
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.normal() : var0 
var2 =  method : A.randomNumber() : var0 
var3 =  method : A.randomNumber() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.normal() : var0 
var6 =  method : A.randomNumber() : var0 
var7 =  method : A.normal() : var0 
var8 =  method : A.normal() : var0 
var9 =  method : A.randomNumber() : var0 
var10 =  method : A.randomNumber() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var10 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=10 [var1]  : true
<randoop.PrimValue, value=0 [var2]  : true
<randoop.PrimValue, value=0 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=10 [var5]  : true
<randoop.PrimValue, value=0 [var6]  : true
<randoop.PrimValue, value=10 [var7]  : true
<randoop.PrimValue, value=10 [var8]  : true
<randoop.PrimValue, value=0 [var9]  : true
<randoop.PrimValue, value=0 [var10]  : true

allSequences.size()=357
-------------------------------------------
randoop.util.Randomness: total calls to random: 2154
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 356 sequences.
components: 356
randoop.util.Randomness: total calls to random: 2155
randoop.util.Randomness: total calls to random: 2156
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 2157
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 356 sequences.
components: 356
randoop.util.Randomness: total calls to random: 2158
randoop.util.Randomness: total calls to random: 2159
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 2160
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 356 sequences.
components: 356
randoop.util.Randomness: total calls to random: 2161
randoop.util.Randomness: total calls to random: 2162
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.randomNumber() : var0 
var2 =  method : A.randomNumber() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.normal() : var0 
var6 =  method : A.normal() : var0 
var7 =  method : A.randomNumber() : var0 
var8 =  method : A.normal() : var0 
var9 =  method : A.randomNumber() : var0 
var10 =  method : A.randomNumber() : var0 
var11 =  method : A.normal() : var0 
var12 =  method : A.normal() : var0 
var13 =  method : A.randomNumber() : var0 
var14 =  method : A.randomNumber() : var0 
var15 =  method : A.normal() : var0 
var16 =  method : A.randomNumber() : var0 
var17 =  method : A.randomNumber() : var0 
var18 =  method : A.randomNumber() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Making index 12 inactive (value is a primitive)
Making index 13 inactive (value is a primitive)
Making index 14 inactive (value is a primitive)
Making index 15 inactive (value is a primitive)
Making index 16 inactive (value is a primitive)
Making index 17 inactive (value is a primitive)
Making index 18 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var10 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var11 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var12 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var13 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var14 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var15 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var16 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var17 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var18 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=0 [var1]  : true
<randoop.PrimValue, value=0 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=10 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true
<randoop.PrimValue, value=0 [var7]  : true
<randoop.PrimValue, value=10 [var8]  : true
<randoop.PrimValue, value=0 [var9]  : true
<randoop.PrimValue, value=0 [var10]  : true
<randoop.PrimValue, value=10 [var11]  : true
<randoop.PrimValue, value=10 [var12]  : true
<randoop.PrimValue, value=0 [var13]  : true
<randoop.PrimValue, value=0 [var14]  : true
<randoop.PrimValue, value=10 [var15]  : true
<randoop.PrimValue, value=0 [var16]  : true
<randoop.PrimValue, value=0 [var17]  : true
<randoop.PrimValue, value=0 [var18]  : true

allSequences.size()=358
-------------------------------------------
randoop.util.Randomness: total calls to random: 2163
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 357 sequences.
components: 357
randoop.util.Randomness: total calls to random: 2164
randoop.util.Randomness: total calls to random: 2165
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 2166
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 357 sequences.
components: 357
randoop.util.Randomness: total calls to random: 2167
randoop.util.Randomness: total calls to random: 2168
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.normal() : var0 
var2 =  method : A.normal() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.normal() : var0 
var5 =  method : A.randomNumber() : var0 
var6 =  method : A.randomNumber() : var0 
var7 =  method : A.randomNumber() : var0 
var8 =  method : A.randomNumber() : var0 
var9 =  method : A.normal() : var0 
var10 =  method : A.randomNumber() : var0 
var11 =  method : A.normal() : var0 
var12 =  method : A.randomNumber() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Making index 12 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var10 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var11 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var12 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=10 [var1]  : true
<randoop.PrimValue, value=10 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=10 [var4]  : true
<randoop.PrimValue, value=0 [var5]  : true
<randoop.PrimValue, value=0 [var6]  : true
<randoop.PrimValue, value=0 [var7]  : true
<randoop.PrimValue, value=0 [var8]  : true
<randoop.PrimValue, value=10 [var9]  : true
<randoop.PrimValue, value=0 [var10]  : true
<randoop.PrimValue, value=10 [var11]  : true
<randoop.PrimValue, value=0 [var12]  : true

allSequences.size()=359
-------------------------------------------
randoop.util.Randomness: total calls to random: 2169
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 358 sequences.
components: 358
randoop.util.Randomness: total calls to random: 2170
randoop.util.Randomness: total calls to random: 2171
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 2172
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 358 sequences.
components: 358
randoop.util.Randomness: total calls to random: 2173
randoop.util.Randomness: total calls to random: 2174
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 2175
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 358 sequences.
components: 358
randoop.util.Randomness: total calls to random: 2176
randoop.util.Randomness: total calls to random: 2177
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.normal() : var0 
var2 =  method : A.normal() : var0 
var3 =  method : A.randomNumber() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.randomNumber() : var0 
var6 =  method : A.randomNumber() : var0 
var7 =  method : A.randomNumber() : var0 
var8 =  method : A.normal() : var0 
var9 =  method : A.randomNumber() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=10 [var1]  : true
<randoop.PrimValue, value=10 [var2]  : true
<randoop.PrimValue, value=0 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=0 [var5]  : true
<randoop.PrimValue, value=0 [var6]  : true
<randoop.PrimValue, value=0 [var7]  : true
<randoop.PrimValue, value=10 [var8]  : true
<randoop.PrimValue, value=0 [var9]  : true

allSequences.size()=360
-------------------------------------------
randoop.util.Randomness: total calls to random: 2178
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 359 sequences.
components: 359
randoop.util.Randomness: total calls to random: 2179
randoop.util.Randomness: total calls to random: 2180
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 2181
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 359 sequences.
components: 359
randoop.util.Randomness: total calls to random: 2182
randoop.util.Randomness: total calls to random: 2183
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.randomNumber() : var0 
var2 =  method : A.randomNumber() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.normal() : var0 
var6 =  method : A.normal() : var0 
var7 =  method : A.randomNumber() : var0 
var8 =  method : A.normal() : var0 
var9 =  method : A.randomNumber() : var0 
var10 =  method : A.normal() : var0 
var11 =  method : A.normal() : var0 
var12 =  method : A.randomNumber() : var0 
var13 =  method : A.randomNumber() : var0 
var14 =  method : A.normal() : var0 
var15 =  method : A.randomNumber() : var0 
var16 =  method : A.normal() : var0 
var17 =  method : A.normal() : var0 
var18 =  method : A.randomNumber() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Making index 12 inactive (value is a primitive)
Making index 13 inactive (value is a primitive)
Making index 14 inactive (value is a primitive)
Making index 15 inactive (value is a primitive)
Making index 16 inactive (value is a primitive)
Making index 17 inactive (value is a primitive)
Making index 18 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var10 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var11 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var12 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var13 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var14 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var15 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var16 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var17 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var18 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=0 [var1]  : true
<randoop.PrimValue, value=0 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=10 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true
<randoop.PrimValue, value=0 [var7]  : true
<randoop.PrimValue, value=10 [var8]  : true
<randoop.PrimValue, value=0 [var9]  : true
<randoop.PrimValue, value=10 [var10]  : true
<randoop.PrimValue, value=10 [var11]  : true
<randoop.PrimValue, value=0 [var12]  : true
<randoop.PrimValue, value=0 [var13]  : true
<randoop.PrimValue, value=10 [var14]  : true
<randoop.PrimValue, value=0 [var15]  : true
<randoop.PrimValue, value=10 [var16]  : true
<randoop.PrimValue, value=10 [var17]  : true
<randoop.PrimValue, value=0 [var18]  : true

allSequences.size()=361
-------------------------------------------
randoop.util.Randomness: total calls to random: 2184
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 360 sequences.
components: 360
randoop.util.Randomness: total calls to random: 2185
randoop.util.Randomness: total calls to random: 2186
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 2187
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 360 sequences.
components: 360
randoop.util.Randomness: total calls to random: 2188
randoop.util.Randomness: total calls to random: 2189
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.normal() : var0 
var2 =  method : A.normal() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.randomNumber() : var0 
var6 =  method : A.randomNumber() : var0 
var7 =  method : A.normal() : var0 
var8 =  method : A.randomNumber() : var0 
var9 =  method : A.normal() : var0 
var10 =  method : A.normal() : var0 
var11 =  method : A.normal() : var0 
var12 =  method : A.randomNumber() : var0 
var13 =  method : A.randomNumber() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Making index 12 inactive (value is a primitive)
Making index 13 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var10 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var11 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var12 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var13 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=10 [var1]  : true
<randoop.PrimValue, value=10 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=0 [var5]  : true
<randoop.PrimValue, value=0 [var6]  : true
<randoop.PrimValue, value=10 [var7]  : true
<randoop.PrimValue, value=0 [var8]  : true
<randoop.PrimValue, value=10 [var9]  : true
<randoop.PrimValue, value=10 [var10]  : true
<randoop.PrimValue, value=10 [var11]  : true
<randoop.PrimValue, value=0 [var12]  : true
<randoop.PrimValue, value=0 [var13]  : true

allSequences.size()=362
-------------------------------------------
randoop.util.Randomness: total calls to random: 2190
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 361 sequences.
components: 361
randoop.util.Randomness: total calls to random: 2191
randoop.util.Randomness: total calls to random: 2192
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.randomNumber() : var0 
var2 =  method : A.randomNumber() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.normal() : var0 
var6 =  method : A.normal() : var0 
var7 =  method : A.randomNumber() : var0 
var8 =  method : A.normal() : var0 
var9 =  method : A.randomNumber() : var0 
var10 =  method : A.normal() : var0 
var11 =  method : A.normal() : var0 
var12 =  method : A.randomNumber() : var0 
var13 =  method : A.randomNumber() : var0 
var14 =  method : A.randomNumber() : var0 
var15 =  method : A.randomNumber() : var0 
var16 =  method : A.normal() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Making index 12 inactive (value is a primitive)
Making index 13 inactive (value is a primitive)
Making index 14 inactive (value is a primitive)
Making index 15 inactive (value is a primitive)
Making index 16 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var10 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var11 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var12 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var13 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var14 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var15 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var16 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=0 [var1]  : true
<randoop.PrimValue, value=0 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=10 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true
<randoop.PrimValue, value=0 [var7]  : true
<randoop.PrimValue, value=10 [var8]  : true
<randoop.PrimValue, value=0 [var9]  : true
<randoop.PrimValue, value=10 [var10]  : true
<randoop.PrimValue, value=10 [var11]  : true
<randoop.PrimValue, value=0 [var12]  : true
<randoop.PrimValue, value=0 [var13]  : true
<randoop.PrimValue, value=0 [var14]  : true
<randoop.PrimValue, value=0 [var15]  : true
<randoop.PrimValue, value=10 [var16]  : true

allSequences.size()=363
-------------------------------------------
randoop.util.Randomness: total calls to random: 2193
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 362 sequences.
components: 362
randoop.util.Randomness: total calls to random: 2194
randoop.util.Randomness: total calls to random: 2195
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 2196
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 362 sequences.
components: 362
randoop.util.Randomness: total calls to random: 2197
randoop.util.Randomness: total calls to random: 2198
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.normal() : var0 
var2 =  method : A.normal() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.normal() : var0 
var5 =  method : A.randomNumber() : var0 
var6 =  method : A.normal() : var0 
var7 =  method : A.normal() : var0 
var8 =  method : A.normal() : var0 
var9 =  method : A.randomNumber() : var0 
var10 =  method : A.randomNumber() : var0 
var11 =  method : A.randomNumber() : var0 
var12 =  method : A.randomNumber() : var0 
var13 =  method : A.normal() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Making index 12 inactive (value is a primitive)
Making index 13 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var10 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var11 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var12 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var13 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=10 [var1]  : true
<randoop.PrimValue, value=10 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=10 [var4]  : true
<randoop.PrimValue, value=0 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true
<randoop.PrimValue, value=10 [var7]  : true
<randoop.PrimValue, value=10 [var8]  : true
<randoop.PrimValue, value=0 [var9]  : true
<randoop.PrimValue, value=0 [var10]  : true
<randoop.PrimValue, value=0 [var11]  : true
<randoop.PrimValue, value=0 [var12]  : true
<randoop.PrimValue, value=10 [var13]  : true

allSequences.size()=364
-------------------------------------------
randoop.util.Randomness: total calls to random: 2199
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 363 sequences.
components: 363
randoop.util.Randomness: total calls to random: 2200
randoop.util.Randomness: total calls to random: 2201
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 2202
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 363 sequences.
components: 363
randoop.util.Randomness: total calls to random: 2203
randoop.util.Randomness: total calls to random: 2204
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 2205
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 363 sequences.
components: 363
randoop.util.Randomness: total calls to random: 2206
randoop.util.Randomness: total calls to random: 2207
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 2208
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 363 sequences.
components: 363
randoop.util.Randomness: total calls to random: 2209
randoop.util.Randomness: total calls to random: 2210
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 2211
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 363 sequences.
components: 363
randoop.util.Randomness: total calls to random: 2212
randoop.util.Randomness: total calls to random: 2213
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.randomNumber() : var0 
var2 =  method : A.randomNumber() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.normal() : var0 
var5 =  method : A.normal() : var0 
var6 =  method : A.randomNumber() : var0 
var7 =  method : A.normal() : var0 
var8 =  method : A.randomNumber() : var0 
var9 =  method : A.normal() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=0 [var1]  : true
<randoop.PrimValue, value=0 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=10 [var4]  : true
<randoop.PrimValue, value=10 [var5]  : true
<randoop.PrimValue, value=0 [var6]  : true
<randoop.PrimValue, value=10 [var7]  : true
<randoop.PrimValue, value=0 [var8]  : true
<randoop.PrimValue, value=10 [var9]  : true

allSequences.size()=365
-------------------------------------------
randoop.util.Randomness: total calls to random: 2214
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 364 sequences.
components: 364
randoop.util.Randomness: total calls to random: 2215
randoop.util.Randomness: total calls to random: 2216
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.randomNumber() : var0 
var2 =  method : A.randomNumber() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.normal() : var0 
var6 =  method : A.randomNumber() : var0 
var7 =  method : A.normal() : var0 
var8 =  method : A.randomNumber() : var0 
var9 =  method : A.normal() : var0 
var10 =  method : A.normal() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var10 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=0 [var1]  : true
<randoop.PrimValue, value=0 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=10 [var5]  : true
<randoop.PrimValue, value=0 [var6]  : true
<randoop.PrimValue, value=10 [var7]  : true
<randoop.PrimValue, value=0 [var8]  : true
<randoop.PrimValue, value=10 [var9]  : true
<randoop.PrimValue, value=10 [var10]  : true

allSequences.size()=366
-------------------------------------------
randoop.util.Randomness: total calls to random: 2217
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 365 sequences.
components: 365
randoop.util.Randomness: total calls to random: 2218
randoop.util.Randomness: total calls to random: 2219
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 2220
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 365 sequences.
components: 365
randoop.util.Randomness: total calls to random: 2221
randoop.util.Randomness: total calls to random: 2222
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.normal() : var0 
var2 =  method : A.normal() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.normal() : var0 
var5 =  method : A.randomNumber() : var0 
var6 =  method : A.normal() : var0 
var7 =  method : A.normal() : var0 
var8 =  method : A.randomNumber() : var0 
var9 =  method : A.randomNumber() : var0 
var10 =  method : A.normal() : var0 
var11 =  method : A.normal() : var0 
var12 =  method : A.randomNumber() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Making index 12 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var10 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var11 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var12 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=10 [var1]  : true
<randoop.PrimValue, value=10 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=10 [var4]  : true
<randoop.PrimValue, value=0 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true
<randoop.PrimValue, value=10 [var7]  : true
<randoop.PrimValue, value=0 [var8]  : true
<randoop.PrimValue, value=0 [var9]  : true
<randoop.PrimValue, value=10 [var10]  : true
<randoop.PrimValue, value=10 [var11]  : true
<randoop.PrimValue, value=0 [var12]  : true

allSequences.size()=367
-------------------------------------------
randoop.util.Randomness: total calls to random: 2223
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 366 sequences.
components: 366
randoop.util.Randomness: total calls to random: 2224
randoop.util.Randomness: total calls to random: 2225
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 2226
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 366 sequences.
components: 366
randoop.util.Randomness: total calls to random: 2227
randoop.util.Randomness: total calls to random: 2228
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 2229
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 366 sequences.
components: 366
randoop.util.Randomness: total calls to random: 2230
randoop.util.Randomness: total calls to random: 2231
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 2232
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 366 sequences.
components: 366
randoop.util.Randomness: total calls to random: 2233
randoop.util.Randomness: total calls to random: 2234
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 2235
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 366 sequences.
components: 366
randoop.util.Randomness: total calls to random: 2236
randoop.util.Randomness: total calls to random: 2237
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.normal() : var0 
var2 =  method : A.normal() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.normal() : var0 
var5 =  method : A.randomNumber() : var0 
var6 =  method : A.normal() : var0 
var7 =  method : A.normal() : var0 
var8 =  method : A.normal() : var0 
var9 =  method : A.randomNumber() : var0 
var10 =  method : A.randomNumber() : var0 
var11 =  method : A.randomNumber() : var0 
var12 =  method : A.normal() : var0 
var13 =  method : A.normal() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Making index 12 inactive (value is a primitive)
Making index 13 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var10 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var11 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var12 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var13 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=10 [var1]  : true
<randoop.PrimValue, value=10 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=10 [var4]  : true
<randoop.PrimValue, value=0 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true
<randoop.PrimValue, value=10 [var7]  : true
<randoop.PrimValue, value=10 [var8]  : true
<randoop.PrimValue, value=0 [var9]  : true
<randoop.PrimValue, value=0 [var10]  : true
<randoop.PrimValue, value=0 [var11]  : true
<randoop.PrimValue, value=10 [var12]  : true
<randoop.PrimValue, value=10 [var13]  : true

allSequences.size()=368
-------------------------------------------
randoop.util.Randomness: total calls to random: 2238
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 367 sequences.
components: 367
randoop.util.Randomness: total calls to random: 2239
randoop.util.Randomness: total calls to random: 2240
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 2241
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 367 sequences.
components: 367
randoop.util.Randomness: total calls to random: 2242
randoop.util.Randomness: total calls to random: 2243
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 2244
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 367 sequences.
components: 367
randoop.util.Randomness: total calls to random: 2245
randoop.util.Randomness: total calls to random: 2246
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 2247
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 367 sequences.
components: 367
randoop.util.Randomness: total calls to random: 2248
randoop.util.Randomness: total calls to random: 2249
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.randomNumber() : var0 
var2 =  method : A.randomNumber() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.normal() : var0 
var6 =  method : A.randomNumber() : var0 
var7 =  method : A.normal() : var0 
var8 =  method : A.randomNumber() : var0 
var9 =  method : A.randomNumber() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=0 [var1]  : true
<randoop.PrimValue, value=0 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=10 [var5]  : true
<randoop.PrimValue, value=0 [var6]  : true
<randoop.PrimValue, value=10 [var7]  : true
<randoop.PrimValue, value=0 [var8]  : true
<randoop.PrimValue, value=0 [var9]  : true

allSequences.size()=369
-------------------------------------------
randoop.util.Randomness: total calls to random: 2250
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 368 sequences.
components: 368
randoop.util.Randomness: total calls to random: 2251
randoop.util.Randomness: total calls to random: 2252
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 2253
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 368 sequences.
components: 368
randoop.util.Randomness: total calls to random: 2254
randoop.util.Randomness: total calls to random: 2255
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.randomNumber() : var0 
var2 =  method : A.randomNumber() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.normal() : var0 
var6 =  method : A.normal() : var0 
var7 =  method : A.randomNumber() : var0 
var8 =  method : A.normal() : var0 
var9 =  method : A.randomNumber() : var0 
var10 =  method : A.normal() : var0 
var11 =  method : A.normal() : var0 
var12 =  method : A.randomNumber() : var0 
var13 =  method : A.randomNumber() : var0 
var14 =  method : A.normal() : var0 
var15 =  method : A.normal() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Making index 12 inactive (value is a primitive)
Making index 13 inactive (value is a primitive)
Making index 14 inactive (value is a primitive)
Making index 15 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var10 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var11 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var12 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var13 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var14 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var15 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=0 [var1]  : true
<randoop.PrimValue, value=0 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=10 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true
<randoop.PrimValue, value=0 [var7]  : true
<randoop.PrimValue, value=10 [var8]  : true
<randoop.PrimValue, value=0 [var9]  : true
<randoop.PrimValue, value=10 [var10]  : true
<randoop.PrimValue, value=10 [var11]  : true
<randoop.PrimValue, value=0 [var12]  : true
<randoop.PrimValue, value=0 [var13]  : true
<randoop.PrimValue, value=10 [var14]  : true
<randoop.PrimValue, value=10 [var15]  : true

allSequences.size()=370
-------------------------------------------
randoop.util.Randomness: total calls to random: 2256
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 369 sequences.
components: 369
randoop.util.Randomness: total calls to random: 2257
randoop.util.Randomness: total calls to random: 2258
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.normal() : var0 
var2 =  method : A.normal() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.normal() : var0 
var6 =  method : A.normal() : var0 
var7 =  method : A.randomNumber() : var0 
var8 =  method : A.normal() : var0 
var9 =  method : A.randomNumber() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=10 [var1]  : true
<randoop.PrimValue, value=10 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=10 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true
<randoop.PrimValue, value=0 [var7]  : true
<randoop.PrimValue, value=10 [var8]  : true
<randoop.PrimValue, value=0 [var9]  : true

allSequences.size()=371
-------------------------------------------
randoop.util.Randomness: total calls to random: 2259
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 370 sequences.
components: 370
randoop.util.Randomness: total calls to random: 2260
randoop.util.Randomness: total calls to random: 2261
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.randomNumber() : var0 
var2 =  method : A.randomNumber() : var0 
var3 =  method : A.randomNumber() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.normal() : var0 
var6 =  method : A.normal() : var0 
var7 =  method : A.randomNumber() : var0 
var8 =  method : A.normal() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=0 [var1]  : true
<randoop.PrimValue, value=0 [var2]  : true
<randoop.PrimValue, value=0 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=10 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true
<randoop.PrimValue, value=0 [var7]  : true
<randoop.PrimValue, value=10 [var8]  : true

allSequences.size()=372
-------------------------------------------
randoop.util.Randomness: total calls to random: 2262
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 371 sequences.
components: 371
randoop.util.Randomness: total calls to random: 2263
randoop.util.Randomness: total calls to random: 2264
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.normal() : var0 
var2 =  method : A.normal() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.normal() : var0 
var5 =  method : A.randomNumber() : var0 
var6 =  method : A.normal() : var0 
var7 =  method : A.randomNumber() : var0 
var8 =  method : A.randomNumber() : var0 
var9 =  method : A.normal() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=10 [var1]  : true
<randoop.PrimValue, value=10 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=10 [var4]  : true
<randoop.PrimValue, value=0 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true
<randoop.PrimValue, value=0 [var7]  : true
<randoop.PrimValue, value=0 [var8]  : true
<randoop.PrimValue, value=10 [var9]  : true

allSequences.size()=373
-------------------------------------------
randoop.util.Randomness: total calls to random: 2265
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 372 sequences.
components: 372
randoop.util.Randomness: total calls to random: 2266
randoop.util.Randomness: total calls to random: 2267
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 2268
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 372 sequences.
components: 372
randoop.util.Randomness: total calls to random: 2269
randoop.util.Randomness: total calls to random: 2270
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 2271
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 372 sequences.
components: 372
randoop.util.Randomness: total calls to random: 2272
randoop.util.Randomness: total calls to random: 2273
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.normal() : var0 
var2 =  method : A.normal() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.randomNumber() : var0 
var6 =  method : A.normal() : var0 
var7 =  method : A.normal() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=10 [var1]  : true
<randoop.PrimValue, value=10 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=0 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true
<randoop.PrimValue, value=10 [var7]  : true

allSequences.size()=374
-------------------------------------------
randoop.util.Randomness: total calls to random: 2274
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 373 sequences.
components: 373
randoop.util.Randomness: total calls to random: 2275
randoop.util.Randomness: total calls to random: 2276
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 2277
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 373 sequences.
components: 373
randoop.util.Randomness: total calls to random: 2278
randoop.util.Randomness: total calls to random: 2279
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.normal() : var0 
var2 =  method : A.normal() : var0 
var3 =  method : A.randomNumber() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.randomNumber() : var0 
var6 =  method : A.normal() : var0 
var7 =  method : A.randomNumber() : var0 
var8 =  method : A.normal() : var0 
var9 =  method : A.normal() : var0 
var10 =  method : A.normal() : var0 
var11 =  method : A.normal() : var0 
var12 =  method : A.randomNumber() : var0 
var13 =  method : A.randomNumber() : var0 
var14 =  method : A.normal() : var0 
var15 =  method : A.normal() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Making index 12 inactive (value is a primitive)
Making index 13 inactive (value is a primitive)
Making index 14 inactive (value is a primitive)
Making index 15 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var10 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var11 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var12 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var13 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var14 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var15 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=10 [var1]  : true
<randoop.PrimValue, value=10 [var2]  : true
<randoop.PrimValue, value=0 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=0 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true
<randoop.PrimValue, value=0 [var7]  : true
<randoop.PrimValue, value=10 [var8]  : true
<randoop.PrimValue, value=10 [var9]  : true
<randoop.PrimValue, value=10 [var10]  : true
<randoop.PrimValue, value=10 [var11]  : true
<randoop.PrimValue, value=0 [var12]  : true
<randoop.PrimValue, value=0 [var13]  : true
<randoop.PrimValue, value=10 [var14]  : true
<randoop.PrimValue, value=10 [var15]  : true

allSequences.size()=375
-------------------------------------------
randoop.util.Randomness: total calls to random: 2280
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 374 sequences.
components: 374
randoop.util.Randomness: total calls to random: 2281
randoop.util.Randomness: total calls to random: 2282
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 2283
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 374 sequences.
components: 374
randoop.util.Randomness: total calls to random: 2284
randoop.util.Randomness: total calls to random: 2285
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.randomNumber() : var0 
var2 =  method : A.normal() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.randomNumber() : var0 
var6 =  method : A.randomNumber() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=0 [var1]  : true
<randoop.PrimValue, value=10 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=0 [var5]  : true
<randoop.PrimValue, value=0 [var6]  : true

allSequences.size()=376
-------------------------------------------
randoop.util.Randomness: total calls to random: 2286
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 375 sequences.
components: 375
randoop.util.Randomness: total calls to random: 2287
randoop.util.Randomness: total calls to random: 2288
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 2289
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 375 sequences.
components: 375
randoop.util.Randomness: total calls to random: 2290
randoop.util.Randomness: total calls to random: 2291
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 2292
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 375 sequences.
components: 375
randoop.util.Randomness: total calls to random: 2293
randoop.util.Randomness: total calls to random: 2294
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.randomNumber() : var0 
var2 =  method : A.normal() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.randomNumber() : var0 
var6 =  method : A.normal() : var0 
var7 =  method : A.randomNumber() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=0 [var1]  : true
<randoop.PrimValue, value=10 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=0 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true
<randoop.PrimValue, value=0 [var7]  : true

allSequences.size()=377
-------------------------------------------
randoop.util.Randomness: total calls to random: 2295
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 376 sequences.
components: 376
randoop.util.Randomness: total calls to random: 2296
randoop.util.Randomness: total calls to random: 2297
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 2298
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 376 sequences.
components: 376
randoop.util.Randomness: total calls to random: 2299
randoop.util.Randomness: total calls to random: 2300
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 2301
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 376 sequences.
components: 376
randoop.util.Randomness: total calls to random: 2302
randoop.util.Randomness: total calls to random: 2303
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 2304
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 376 sequences.
components: 376
randoop.util.Randomness: total calls to random: 2305
randoop.util.Randomness: total calls to random: 2306
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.randomNumber() : var0 
var2 =  method : A.randomNumber() : var0 
var3 =  method : A.randomNumber() : var0 
var4 =  method : A.normal() : var0 
var5 =  method : A.normal() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=0 [var1]  : true
<randoop.PrimValue, value=0 [var2]  : true
<randoop.PrimValue, value=0 [var3]  : true
<randoop.PrimValue, value=10 [var4]  : true
<randoop.PrimValue, value=10 [var5]  : true

allSequences.size()=378
-------------------------------------------
randoop.util.Randomness: total calls to random: 2307
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 377 sequences.
components: 377
randoop.util.Randomness: total calls to random: 2308
randoop.util.Randomness: total calls to random: 2309
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 2310
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 377 sequences.
components: 377
randoop.util.Randomness: total calls to random: 2311
randoop.util.Randomness: total calls to random: 2312
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 2313
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 377 sequences.
components: 377
randoop.util.Randomness: total calls to random: 2314
randoop.util.Randomness: total calls to random: 2315
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.randomNumber() : var0 
var2 =  method : A.randomNumber() : var0 
var3 =  method : A.randomNumber() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.randomNumber() : var0 
var6 =  method : A.normal() : var0 
var7 =  method : A.randomNumber() : var0 
var8 =  method : A.normal() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=0 [var1]  : true
<randoop.PrimValue, value=0 [var2]  : true
<randoop.PrimValue, value=0 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=0 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true
<randoop.PrimValue, value=0 [var7]  : true
<randoop.PrimValue, value=10 [var8]  : true

allSequences.size()=379
-------------------------------------------
randoop.util.Randomness: total calls to random: 2316
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 378 sequences.
components: 378
randoop.util.Randomness: total calls to random: 2317
randoop.util.Randomness: total calls to random: 2318
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 2319
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 378 sequences.
components: 378
randoop.util.Randomness: total calls to random: 2320
randoop.util.Randomness: total calls to random: 2321
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.normal() : var0 
var2 =  method : A.normal() : var0 
var3 =  method : A.randomNumber() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.randomNumber() : var0 
var6 =  method : A.normal() : var0 
var7 =  method : A.randomNumber() : var0 
var8 =  method : A.randomNumber() : var0 
var9 =  method : A.normal() : var0 
var10 =  method : A.randomNumber() : var0 
var11 =  method : A.normal() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var10 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var11 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=10 [var1]  : true
<randoop.PrimValue, value=10 [var2]  : true
<randoop.PrimValue, value=0 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=0 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true
<randoop.PrimValue, value=0 [var7]  : true
<randoop.PrimValue, value=0 [var8]  : true
<randoop.PrimValue, value=10 [var9]  : true
<randoop.PrimValue, value=0 [var10]  : true
<randoop.PrimValue, value=10 [var11]  : true

allSequences.size()=380
-------------------------------------------
randoop.util.Randomness: total calls to random: 2322
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 379 sequences.
components: 379
randoop.util.Randomness: total calls to random: 2323
randoop.util.Randomness: total calls to random: 2324
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.randomNumber() : var0 
var2 =  method : A.randomNumber() : var0 
var3 =  method : A.randomNumber() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.normal() : var0 
var6 =  method : A.randomNumber() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=0 [var1]  : true
<randoop.PrimValue, value=0 [var2]  : true
<randoop.PrimValue, value=0 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=10 [var5]  : true
<randoop.PrimValue, value=0 [var6]  : true

allSequences.size()=381
-------------------------------------------
randoop.util.Randomness: total calls to random: 2325
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 380 sequences.
components: 380
randoop.util.Randomness: total calls to random: 2326
randoop.util.Randomness: total calls to random: 2327
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.normal() : var0 
var2 =  method : A.normal() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.randomNumber() : var0 
var6 =  method : A.randomNumber() : var0 
var7 =  method : A.normal() : var0 
var8 =  method : A.randomNumber() : var0 
var9 =  method : A.normal() : var0 
var10 =  method : A.normal() : var0 
var11 =  method : A.normal() : var0 
var12 =  method : A.normal() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Making index 12 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var10 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var11 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var12 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=10 [var1]  : true
<randoop.PrimValue, value=10 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=0 [var5]  : true
<randoop.PrimValue, value=0 [var6]  : true
<randoop.PrimValue, value=10 [var7]  : true
<randoop.PrimValue, value=0 [var8]  : true
<randoop.PrimValue, value=10 [var9]  : true
<randoop.PrimValue, value=10 [var10]  : true
<randoop.PrimValue, value=10 [var11]  : true
<randoop.PrimValue, value=10 [var12]  : true

allSequences.size()=382
-------------------------------------------
randoop.util.Randomness: total calls to random: 2328
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 381 sequences.
components: 381
randoop.util.Randomness: total calls to random: 2329
randoop.util.Randomness: total calls to random: 2330
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 2331
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 381 sequences.
components: 381
randoop.util.Randomness: total calls to random: 2332
randoop.util.Randomness: total calls to random: 2333
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 2334
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 381 sequences.
components: 381
randoop.util.Randomness: total calls to random: 2335
randoop.util.Randomness: total calls to random: 2336
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.normal() : var0 
var2 =  method : A.normal() : var0 
var3 =  method : A.randomNumber() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.randomNumber() : var0 
var6 =  method : A.randomNumber() : var0 
var7 =  method : A.normal() : var0 
var8 =  method : A.normal() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=10 [var1]  : true
<randoop.PrimValue, value=10 [var2]  : true
<randoop.PrimValue, value=0 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=0 [var5]  : true
<randoop.PrimValue, value=0 [var6]  : true
<randoop.PrimValue, value=10 [var7]  : true
<randoop.PrimValue, value=10 [var8]  : true

allSequences.size()=383
-------------------------------------------
randoop.util.Randomness: total calls to random: 2337
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 382 sequences.
components: 382
randoop.util.Randomness: total calls to random: 2338
randoop.util.Randomness: total calls to random: 2339
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.normal() : var0 
var2 =  method : A.normal() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.normal() : var0 
var5 =  method : A.randomNumber() : var0 
var6 =  method : A.normal() : var0 
var7 =  method : A.normal() : var0 
var8 =  method : A.randomNumber() : var0 
var9 =  method : A.randomNumber() : var0 
var10 =  method : A.normal() : var0 
var11 =  method : A.randomNumber() : var0 
var12 =  method : A.normal() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Making index 12 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var10 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var11 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var12 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=10 [var1]  : true
<randoop.PrimValue, value=10 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=10 [var4]  : true
<randoop.PrimValue, value=0 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true
<randoop.PrimValue, value=10 [var7]  : true
<randoop.PrimValue, value=0 [var8]  : true
<randoop.PrimValue, value=0 [var9]  : true
<randoop.PrimValue, value=10 [var10]  : true
<randoop.PrimValue, value=0 [var11]  : true
<randoop.PrimValue, value=10 [var12]  : true

allSequences.size()=384
-------------------------------------------
randoop.util.Randomness: total calls to random: 2340
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 383 sequences.
components: 383
randoop.util.Randomness: total calls to random: 2341
randoop.util.Randomness: total calls to random: 2342
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 2343
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 383 sequences.
components: 383
randoop.util.Randomness: total calls to random: 2344
randoop.util.Randomness: total calls to random: 2345
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 2346
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 383 sequences.
components: 383
randoop.util.Randomness: total calls to random: 2347
randoop.util.Randomness: total calls to random: 2348
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.normal() : var0 
var2 =  method : A.normal() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.normal() : var0 
var5 =  method : A.randomNumber() : var0 
var6 =  method : A.randomNumber() : var0 
var7 =  method : A.randomNumber() : var0 
var8 =  method : A.randomNumber() : var0 
var9 =  method : A.normal() : var0 
var10 =  method : A.normal() : var0 
var11 =  method : A.normal() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var10 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var11 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=10 [var1]  : true
<randoop.PrimValue, value=10 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=10 [var4]  : true
<randoop.PrimValue, value=0 [var5]  : true
<randoop.PrimValue, value=0 [var6]  : true
<randoop.PrimValue, value=0 [var7]  : true
<randoop.PrimValue, value=0 [var8]  : true
<randoop.PrimValue, value=10 [var9]  : true
<randoop.PrimValue, value=10 [var10]  : true
<randoop.PrimValue, value=10 [var11]  : true

allSequences.size()=385
-------------------------------------------
randoop.util.Randomness: total calls to random: 2349
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 384 sequences.
components: 384
randoop.util.Randomness: total calls to random: 2350
randoop.util.Randomness: total calls to random: 2351
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.normal() : var0 
var2 =  method : A.normal() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.normal() : var0 
var5 =  method : A.randomNumber() : var0 
var6 =  method : A.normal() : var0 
var7 =  method : A.normal() : var0 
var8 =  method : A.randomNumber() : var0 
var9 =  method : A.randomNumber() : var0 
var10 =  method : A.normal() : var0 
var11 =  method : A.normal() : var0 
var12 =  method : A.normal() : var0 
var13 =  method : A.normal() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Making index 12 inactive (value is a primitive)
Making index 13 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var10 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var11 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var12 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var13 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=10 [var1]  : true
<randoop.PrimValue, value=10 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=10 [var4]  : true
<randoop.PrimValue, value=0 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true
<randoop.PrimValue, value=10 [var7]  : true
<randoop.PrimValue, value=0 [var8]  : true
<randoop.PrimValue, value=0 [var9]  : true
<randoop.PrimValue, value=10 [var10]  : true
<randoop.PrimValue, value=10 [var11]  : true
<randoop.PrimValue, value=10 [var12]  : true
<randoop.PrimValue, value=10 [var13]  : true

allSequences.size()=386
-------------------------------------------
randoop.util.Randomness: total calls to random: 2352
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 385 sequences.
components: 385
randoop.util.Randomness: total calls to random: 2353
randoop.util.Randomness: total calls to random: 2354
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 2355
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 385 sequences.
components: 385
randoop.util.Randomness: total calls to random: 2356
randoop.util.Randomness: total calls to random: 2357
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 2358
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 385 sequences.
components: 385
randoop.util.Randomness: total calls to random: 2359
randoop.util.Randomness: total calls to random: 2360
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.randomNumber() : var0 
var2 =  method : A.randomNumber() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.normal() : var0 
var5 =  method : A.normal() : var0 
var6 =  method : A.randomNumber() : var0 
var7 =  method : A.normal() : var0 
var8 =  method : A.normal() : var0 
var9 =  method : A.normal() : var0 
var10 =  method : A.normal() : var0 
var11 =  method : A.randomNumber() : var0 
var12 =  method : A.randomNumber() : var0 
var13 =  method : A.randomNumber() : var0 
var14 =  method : A.randomNumber() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Making index 12 inactive (value is a primitive)
Making index 13 inactive (value is a primitive)
Making index 14 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var10 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var11 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var12 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var13 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var14 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=0 [var1]  : true
<randoop.PrimValue, value=0 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=10 [var4]  : true
<randoop.PrimValue, value=10 [var5]  : true
<randoop.PrimValue, value=0 [var6]  : true
<randoop.PrimValue, value=10 [var7]  : true
<randoop.PrimValue, value=10 [var8]  : true
<randoop.PrimValue, value=10 [var9]  : true
<randoop.PrimValue, value=10 [var10]  : true
<randoop.PrimValue, value=0 [var11]  : true
<randoop.PrimValue, value=0 [var12]  : true
<randoop.PrimValue, value=0 [var13]  : true
<randoop.PrimValue, value=0 [var14]  : true

allSequences.size()=387
-------------------------------------------
randoop.util.Randomness: total calls to random: 2361
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 386 sequences.
components: 386
randoop.util.Randomness: total calls to random: 2362
randoop.util.Randomness: total calls to random: 2363
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 2364
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 386 sequences.
components: 386
randoop.util.Randomness: total calls to random: 2365
randoop.util.Randomness: total calls to random: 2366
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 2367
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 386 sequences.
components: 386
randoop.util.Randomness: total calls to random: 2368
randoop.util.Randomness: total calls to random: 2369
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.normal() : var0 
var2 =  method : A.normal() : var0 
var3 =  method : A.randomNumber() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.randomNumber() : var0 
var6 =  method : A.normal() : var0 
var7 =  method : A.randomNumber() : var0 
var8 =  method : A.normal() : var0 
var9 =  method : A.normal() : var0 
var10 =  method : A.normal() : var0 
var11 =  method : A.normal() : var0 
var12 =  method : A.randomNumber() : var0 
var13 =  method : A.randomNumber() : var0 
var14 =  method : A.normal() : var0 
var15 =  method : A.normal() : var0 
var16 =  method : A.normal() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Making index 12 inactive (value is a primitive)
Making index 13 inactive (value is a primitive)
Making index 14 inactive (value is a primitive)
Making index 15 inactive (value is a primitive)
Making index 16 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var10 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var11 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var12 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var13 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var14 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var15 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var16 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=10 [var1]  : true
<randoop.PrimValue, value=10 [var2]  : true
<randoop.PrimValue, value=0 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=0 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true
<randoop.PrimValue, value=0 [var7]  : true
<randoop.PrimValue, value=10 [var8]  : true
<randoop.PrimValue, value=10 [var9]  : true
<randoop.PrimValue, value=10 [var10]  : true
<randoop.PrimValue, value=10 [var11]  : true
<randoop.PrimValue, value=0 [var12]  : true
<randoop.PrimValue, value=0 [var13]  : true
<randoop.PrimValue, value=10 [var14]  : true
<randoop.PrimValue, value=10 [var15]  : true
<randoop.PrimValue, value=10 [var16]  : true

allSequences.size()=388
-------------------------------------------
randoop.util.Randomness: total calls to random: 2370
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 387 sequences.
components: 387
randoop.util.Randomness: total calls to random: 2371
randoop.util.Randomness: total calls to random: 2372
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.normal() : var0 
var2 =  method : A.randomNumber() : var0 
var3 =  method : A.randomNumber() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.randomNumber() : var0 
var6 =  method : A.randomNumber() : var0 
var7 =  method : A.randomNumber() : var0 
var8 =  method : A.normal() : var0 
var9 =  method : A.randomNumber() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=10 [var1]  : true
<randoop.PrimValue, value=0 [var2]  : true
<randoop.PrimValue, value=0 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=0 [var5]  : true
<randoop.PrimValue, value=0 [var6]  : true
<randoop.PrimValue, value=0 [var7]  : true
<randoop.PrimValue, value=10 [var8]  : true
<randoop.PrimValue, value=0 [var9]  : true

allSequences.size()=389
-------------------------------------------
randoop.util.Randomness: total calls to random: 2373
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 388 sequences.
components: 388
randoop.util.Randomness: total calls to random: 2374
randoop.util.Randomness: total calls to random: 2375
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 2376
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 388 sequences.
components: 388
randoop.util.Randomness: total calls to random: 2377
randoop.util.Randomness: total calls to random: 2378
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.normal() : var0 
var2 =  method : A.normal() : var0 
var3 =  method : A.randomNumber() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.randomNumber() : var0 
var6 =  method : A.normal() : var0 
var7 =  method : A.randomNumber() : var0 
var8 =  method : A.normal() : var0 
var9 =  method : A.randomNumber() : var0 
var10 =  method : A.randomNumber() : var0 
var11 =  method : A.randomNumber() : var0 
var12 =  method : A.normal() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Making index 12 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var10 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var11 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var12 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=10 [var1]  : true
<randoop.PrimValue, value=10 [var2]  : true
<randoop.PrimValue, value=0 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=0 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true
<randoop.PrimValue, value=0 [var7]  : true
<randoop.PrimValue, value=10 [var8]  : true
<randoop.PrimValue, value=0 [var9]  : true
<randoop.PrimValue, value=0 [var10]  : true
<randoop.PrimValue, value=0 [var11]  : true
<randoop.PrimValue, value=10 [var12]  : true

allSequences.size()=390
-------------------------------------------
randoop.util.Randomness: total calls to random: 2379
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 389 sequences.
components: 389
randoop.util.Randomness: total calls to random: 2380
randoop.util.Randomness: total calls to random: 2381
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.randomNumber() : var0 
var2 =  method : A.randomNumber() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.normal() : var0 
var5 =  method : A.normal() : var0 
var6 =  method : A.normal() : var0 
var7 =  method : A.normal() : var0 
var8 =  method : A.randomNumber() : var0 
var9 =  method : A.normal() : var0 
var10 =  method : A.randomNumber() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var10 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=0 [var1]  : true
<randoop.PrimValue, value=0 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=10 [var4]  : true
<randoop.PrimValue, value=10 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true
<randoop.PrimValue, value=10 [var7]  : true
<randoop.PrimValue, value=0 [var8]  : true
<randoop.PrimValue, value=10 [var9]  : true
<randoop.PrimValue, value=0 [var10]  : true

allSequences.size()=391
-------------------------------------------
randoop.util.Randomness: total calls to random: 2382
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 390 sequences.
components: 390
randoop.util.Randomness: total calls to random: 2383
randoop.util.Randomness: total calls to random: 2384
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 2385
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 390 sequences.
components: 390
randoop.util.Randomness: total calls to random: 2386
randoop.util.Randomness: total calls to random: 2387
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.randomNumber() : var0 
var2 =  method : A.randomNumber() : var0 
var3 =  method : A.randomNumber() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.randomNumber() : var0 
var6 =  method : A.normal() : var0 
var7 =  method : A.randomNumber() : var0 
var8 =  method : A.normal() : var0 
var9 =  method : A.normal() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=0 [var1]  : true
<randoop.PrimValue, value=0 [var2]  : true
<randoop.PrimValue, value=0 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=0 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true
<randoop.PrimValue, value=0 [var7]  : true
<randoop.PrimValue, value=10 [var8]  : true
<randoop.PrimValue, value=10 [var9]  : true

allSequences.size()=392
-------------------------------------------
randoop.util.Randomness: total calls to random: 2388
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 391 sequences.
components: 391
randoop.util.Randomness: total calls to random: 2389
randoop.util.Randomness: total calls to random: 2390
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.normal() : var0 
var2 =  method : A.normal() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.normal() : var0 
var6 =  method : A.normal() : var0 
var7 =  method : A.randomNumber() : var0 
var8 =  method : A.randomNumber() : var0 
var9 =  method : A.normal() : var0 
var10 =  method : A.normal() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var10 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=10 [var1]  : true
<randoop.PrimValue, value=10 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=10 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true
<randoop.PrimValue, value=0 [var7]  : true
<randoop.PrimValue, value=0 [var8]  : true
<randoop.PrimValue, value=10 [var9]  : true
<randoop.PrimValue, value=10 [var10]  : true

allSequences.size()=393
-------------------------------------------
randoop.util.Randomness: total calls to random: 2391
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 392 sequences.
components: 392
randoop.util.Randomness: total calls to random: 2392
randoop.util.Randomness: total calls to random: 2393
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 2394
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 392 sequences.
components: 392
randoop.util.Randomness: total calls to random: 2395
randoop.util.Randomness: total calls to random: 2396
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 2397
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 392 sequences.
components: 392
randoop.util.Randomness: total calls to random: 2398
randoop.util.Randomness: total calls to random: 2399
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 2400
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 392 sequences.
components: 392
randoop.util.Randomness: total calls to random: 2401
randoop.util.Randomness: total calls to random: 2402
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 2403
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 392 sequences.
components: 392
randoop.util.Randomness: total calls to random: 2404
randoop.util.Randomness: total calls to random: 2405
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 2406
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 392 sequences.
components: 392
randoop.util.Randomness: total calls to random: 2407
randoop.util.Randomness: total calls to random: 2408
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.randomNumber() : var0 
var2 =  method : A.randomNumber() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.normal() : var0 
var6 =  method : A.normal() : var0 
var7 =  method : A.randomNumber() : var0 
var8 =  method : A.normal() : var0 
var9 =  method : A.randomNumber() : var0 
var10 =  method : A.randomNumber() : var0 
var11 =  method : A.normal() : var0 
var12 =  method : A.normal() : var0 
var13 =  method : A.randomNumber() : var0 
var14 =  method : A.randomNumber() : var0 
var15 =  method : A.normal() : var0 
var16 =  method : A.randomNumber() : var0 
var17 =  method : A.normal() : var0 
var18 =  method : A.randomNumber() : var0 
var19 =  method : A.normal() : var0 
var20 =  method : A.normal() : var0 
var21 =  method : A.randomNumber() : var0 
var22 =  method : A.normal() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Making index 12 inactive (value is a primitive)
Making index 13 inactive (value is a primitive)
Making index 14 inactive (value is a primitive)
Making index 15 inactive (value is a primitive)
Making index 16 inactive (value is a primitive)
Making index 17 inactive (value is a primitive)
Making index 18 inactive (value is a primitive)
Making index 19 inactive (value is a primitive)
Making index 20 inactive (value is a primitive)
Making index 21 inactive (value is a primitive)
Making index 22 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var10 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var11 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var12 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var13 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var14 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var15 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var16 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var17 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var18 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var19 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var20 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var21 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var22 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=0 [var1]  : true
<randoop.PrimValue, value=0 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=10 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true
<randoop.PrimValue, value=0 [var7]  : true
<randoop.PrimValue, value=10 [var8]  : true
<randoop.PrimValue, value=0 [var9]  : true
<randoop.PrimValue, value=0 [var10]  : true
<randoop.PrimValue, value=10 [var11]  : true
<randoop.PrimValue, value=10 [var12]  : true
<randoop.PrimValue, value=0 [var13]  : true
<randoop.PrimValue, value=0 [var14]  : true
<randoop.PrimValue, value=10 [var15]  : true
<randoop.PrimValue, value=0 [var16]  : true
<randoop.PrimValue, value=10 [var17]  : true
<randoop.PrimValue, value=0 [var18]  : true
<randoop.PrimValue, value=10 [var19]  : true
<randoop.PrimValue, value=10 [var20]  : true
<randoop.PrimValue, value=0 [var21]  : true
<randoop.PrimValue, value=10 [var22]  : true

allSequences.size()=394
-------------------------------------------
randoop.util.Randomness: total calls to random: 2409
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 393 sequences.
components: 393
randoop.util.Randomness: total calls to random: 2410
randoop.util.Randomness: total calls to random: 2411
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 2412
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 393 sequences.
components: 393
randoop.util.Randomness: total calls to random: 2413
randoop.util.Randomness: total calls to random: 2414
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.randomNumber() : var0 
var2 =  method : A.randomNumber() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.normal() : var0 
var6 =  method : A.randomNumber() : var0 
var7 =  method : A.normal() : var0 
var8 =  method : A.randomNumber() : var0 
var9 =  method : A.normal() : var0 
var10 =  method : A.randomNumber() : var0 
var11 =  method : A.randomNumber() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var10 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var11 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=0 [var1]  : true
<randoop.PrimValue, value=0 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=10 [var5]  : true
<randoop.PrimValue, value=0 [var6]  : true
<randoop.PrimValue, value=10 [var7]  : true
<randoop.PrimValue, value=0 [var8]  : true
<randoop.PrimValue, value=10 [var9]  : true
<randoop.PrimValue, value=0 [var10]  : true
<randoop.PrimValue, value=0 [var11]  : true

allSequences.size()=395
-------------------------------------------
randoop.util.Randomness: total calls to random: 2415
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 394 sequences.
components: 394
randoop.util.Randomness: total calls to random: 2416
randoop.util.Randomness: total calls to random: 2417
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.normal() : var0 
var2 =  method : A.normal() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.randomNumber() : var0 
var6 =  method : A.normal() : var0 
var7 =  method : A.normal() : var0 
var8 =  method : A.randomNumber() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=10 [var1]  : true
<randoop.PrimValue, value=10 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=0 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true
<randoop.PrimValue, value=10 [var7]  : true
<randoop.PrimValue, value=0 [var8]  : true

allSequences.size()=396
-------------------------------------------
randoop.util.Randomness: total calls to random: 2418
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 395 sequences.
components: 395
randoop.util.Randomness: total calls to random: 2419
randoop.util.Randomness: total calls to random: 2420
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 2421
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 395 sequences.
components: 395
randoop.util.Randomness: total calls to random: 2422
randoop.util.Randomness: total calls to random: 2423
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 2424
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 395 sequences.
components: 395
randoop.util.Randomness: total calls to random: 2425
randoop.util.Randomness: total calls to random: 2426
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 2427
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 395 sequences.
components: 395
randoop.util.Randomness: total calls to random: 2428
randoop.util.Randomness: total calls to random: 2429
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.normal() : var0 
var2 =  method : A.normal() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.randomNumber() : var0 
var6 =  method : A.randomNumber() : var0 
var7 =  method : A.randomNumber() : var0 
var8 =  method : A.normal() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=10 [var1]  : true
<randoop.PrimValue, value=10 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=0 [var5]  : true
<randoop.PrimValue, value=0 [var6]  : true
<randoop.PrimValue, value=0 [var7]  : true
<randoop.PrimValue, value=10 [var8]  : true

allSequences.size()=397
-------------------------------------------
randoop.util.Randomness: total calls to random: 2430
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 396 sequences.
components: 396
randoop.util.Randomness: total calls to random: 2431
randoop.util.Randomness: total calls to random: 2432
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.normal() : var0 
var2 =  method : A.normal() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.normal() : var0 
var5 =  method : A.randomNumber() : var0 
var6 =  method : A.randomNumber() : var0 
var7 =  method : A.randomNumber() : var0 
var8 =  method : A.randomNumber() : var0 
var9 =  method : A.normal() : var0 
var10 =  method : A.randomNumber() : var0 
var11 =  method : A.randomNumber() : var0 
var12 =  method : A.randomNumber() : var0 
var13 =  method : A.randomNumber() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Making index 12 inactive (value is a primitive)
Making index 13 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var10 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var11 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var12 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var13 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=10 [var1]  : true
<randoop.PrimValue, value=10 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=10 [var4]  : true
<randoop.PrimValue, value=0 [var5]  : true
<randoop.PrimValue, value=0 [var6]  : true
<randoop.PrimValue, value=0 [var7]  : true
<randoop.PrimValue, value=0 [var8]  : true
<randoop.PrimValue, value=10 [var9]  : true
<randoop.PrimValue, value=0 [var10]  : true
<randoop.PrimValue, value=0 [var11]  : true
<randoop.PrimValue, value=0 [var12]  : true
<randoop.PrimValue, value=0 [var13]  : true

allSequences.size()=398
-------------------------------------------
randoop.util.Randomness: total calls to random: 2433
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 397 sequences.
components: 397
randoop.util.Randomness: total calls to random: 2434
randoop.util.Randomness: total calls to random: 2435
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.normal() : var0 
var2 =  method : A.normal() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.randomNumber() : var0 
var6 =  method : A.randomNumber() : var0 
var7 =  method : A.normal() : var0 
var8 =  method : A.randomNumber() : var0 
var9 =  method : A.randomNumber() : var0 
var10 =  method : A.randomNumber() : var0 
var11 =  method : A.randomNumber() : var0 
var12 =  method : A.randomNumber() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Making index 12 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var10 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var11 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var12 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=10 [var1]  : true
<randoop.PrimValue, value=10 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=0 [var5]  : true
<randoop.PrimValue, value=0 [var6]  : true
<randoop.PrimValue, value=10 [var7]  : true
<randoop.PrimValue, value=0 [var8]  : true
<randoop.PrimValue, value=0 [var9]  : true
<randoop.PrimValue, value=0 [var10]  : true
<randoop.PrimValue, value=0 [var11]  : true
<randoop.PrimValue, value=0 [var12]  : true

allSequences.size()=399
-------------------------------------------
randoop.util.Randomness: total calls to random: 2436
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 398 sequences.
components: 398
randoop.util.Randomness: total calls to random: 2437
randoop.util.Randomness: total calls to random: 2438
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 2439
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 398 sequences.
components: 398
randoop.util.Randomness: total calls to random: 2440
randoop.util.Randomness: total calls to random: 2441
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.normal() : var0 
var2 =  method : A.normal() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.normal() : var0 
var5 =  method : A.normal() : var0 
var6 =  method : A.randomNumber() : var0 
var7 =  method : A.normal() : var0 
var8 =  method : A.normal() : var0 
var9 =  method : A.randomNumber() : var0 
var10 =  method : A.normal() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var10 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=10 [var1]  : true
<randoop.PrimValue, value=10 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=10 [var4]  : true
<randoop.PrimValue, value=10 [var5]  : true
<randoop.PrimValue, value=0 [var6]  : true
<randoop.PrimValue, value=10 [var7]  : true
<randoop.PrimValue, value=10 [var8]  : true
<randoop.PrimValue, value=0 [var9]  : true
<randoop.PrimValue, value=10 [var10]  : true

allSequences.size()=400
-------------------------------------------
randoop.util.Randomness: total calls to random: 2442
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 399 sequences.
components: 399
randoop.util.Randomness: total calls to random: 2443
randoop.util.Randomness: total calls to random: 2444
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 2445
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 399 sequences.
components: 399
randoop.util.Randomness: total calls to random: 2446
randoop.util.Randomness: total calls to random: 2447
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 2448
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 399 sequences.
components: 399
randoop.util.Randomness: total calls to random: 2449
randoop.util.Randomness: total calls to random: 2450
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.normal() : var0 
var2 =  method : A.normal() : var0 
var3 =  method : A.randomNumber() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.randomNumber() : var0 
var6 =  method : A.normal() : var0 
var7 =  method : A.randomNumber() : var0 
var8 =  method : A.normal() : var0 
var9 =  method : A.normal() : var0 
var10 =  method : A.normal() : var0 
var11 =  method : A.normal() : var0 
var12 =  method : A.randomNumber() : var0 
var13 =  method : A.randomNumber() : var0 
var14 =  method : A.randomNumber() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Making index 12 inactive (value is a primitive)
Making index 13 inactive (value is a primitive)
Making index 14 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var10 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var11 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var12 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var13 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var14 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=10 [var1]  : true
<randoop.PrimValue, value=10 [var2]  : true
<randoop.PrimValue, value=0 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=0 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true
<randoop.PrimValue, value=0 [var7]  : true
<randoop.PrimValue, value=10 [var8]  : true
<randoop.PrimValue, value=10 [var9]  : true
<randoop.PrimValue, value=10 [var10]  : true
<randoop.PrimValue, value=10 [var11]  : true
<randoop.PrimValue, value=0 [var12]  : true
<randoop.PrimValue, value=0 [var13]  : true
<randoop.PrimValue, value=0 [var14]  : true

allSequences.size()=401
-------------------------------------------
randoop.util.Randomness: total calls to random: 2451
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 400 sequences.
components: 400
randoop.util.Randomness: total calls to random: 2452
randoop.util.Randomness: total calls to random: 2453
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 2454
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 400 sequences.
components: 400
randoop.util.Randomness: total calls to random: 2455
randoop.util.Randomness: total calls to random: 2456
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.randomNumber() : var0 
var2 =  method : A.randomNumber() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.normal() : var0 
var6 =  method : A.normal() : var0 
var7 =  method : A.randomNumber() : var0 
var8 =  method : A.normal() : var0 
var9 =  method : A.randomNumber() : var0 
var10 =  method : A.normal() : var0 
var11 =  method : A.normal() : var0 
var12 =  method : A.randomNumber() : var0 
var13 =  method : A.randomNumber() : var0 
var14 =  method : A.normal() : var0 
var15 =  method : A.randomNumber() : var0 
var16 =  method : A.randomNumber() : var0 
var17 =  method : A.normal() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Making index 12 inactive (value is a primitive)
Making index 13 inactive (value is a primitive)
Making index 14 inactive (value is a primitive)
Making index 15 inactive (value is a primitive)
Making index 16 inactive (value is a primitive)
Making index 17 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var10 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var11 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var12 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var13 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var14 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var15 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var16 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var17 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=0 [var1]  : true
<randoop.PrimValue, value=0 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=10 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true
<randoop.PrimValue, value=0 [var7]  : true
<randoop.PrimValue, value=10 [var8]  : true
<randoop.PrimValue, value=0 [var9]  : true
<randoop.PrimValue, value=10 [var10]  : true
<randoop.PrimValue, value=10 [var11]  : true
<randoop.PrimValue, value=0 [var12]  : true
<randoop.PrimValue, value=0 [var13]  : true
<randoop.PrimValue, value=10 [var14]  : true
<randoop.PrimValue, value=0 [var15]  : true
<randoop.PrimValue, value=0 [var16]  : true
<randoop.PrimValue, value=10 [var17]  : true

allSequences.size()=402
-------------------------------------------
randoop.util.Randomness: total calls to random: 2457
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 401 sequences.
components: 401
randoop.util.Randomness: total calls to random: 2458
randoop.util.Randomness: total calls to random: 2459
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 2460
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 401 sequences.
components: 401
randoop.util.Randomness: total calls to random: 2461
randoop.util.Randomness: total calls to random: 2462
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.randomNumber() : var0 
var2 =  method : A.randomNumber() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.normal() : var0 
var6 =  method : A.normal() : var0 
var7 =  method : A.randomNumber() : var0 
var8 =  method : A.normal() : var0 
var9 =  method : A.randomNumber() : var0 
var10 =  method : A.normal() : var0 
var11 =  method : A.normal() : var0 
var12 =  method : A.randomNumber() : var0 
var13 =  method : A.randomNumber() : var0 
var14 =  method : A.normal() : var0 
var15 =  method : A.normal() : var0 
var16 =  method : A.normal() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Making index 12 inactive (value is a primitive)
Making index 13 inactive (value is a primitive)
Making index 14 inactive (value is a primitive)
Making index 15 inactive (value is a primitive)
Making index 16 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var10 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var11 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var12 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var13 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var14 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var15 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var16 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=0 [var1]  : true
<randoop.PrimValue, value=0 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=10 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true
<randoop.PrimValue, value=0 [var7]  : true
<randoop.PrimValue, value=10 [var8]  : true
<randoop.PrimValue, value=0 [var9]  : true
<randoop.PrimValue, value=10 [var10]  : true
<randoop.PrimValue, value=10 [var11]  : true
<randoop.PrimValue, value=0 [var12]  : true
<randoop.PrimValue, value=0 [var13]  : true
<randoop.PrimValue, value=10 [var14]  : true
<randoop.PrimValue, value=10 [var15]  : true
<randoop.PrimValue, value=10 [var16]  : true

allSequences.size()=403
-------------------------------------------
randoop.util.Randomness: total calls to random: 2463
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 402 sequences.
components: 402
randoop.util.Randomness: total calls to random: 2464
randoop.util.Randomness: total calls to random: 2465
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 2466
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 402 sequences.
components: 402
randoop.util.Randomness: total calls to random: 2467
randoop.util.Randomness: total calls to random: 2468
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.normal() : var0 
var2 =  method : A.normal() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.normal() : var0 
var5 =  method : A.randomNumber() : var0 
var6 =  method : A.normal() : var0 
var7 =  method : A.randomNumber() : var0 
var8 =  method : A.normal() : var0 
var9 =  method : A.normal() : var0 
var10 =  method : A.randomNumber() : var0 
var11 =  method : A.randomNumber() : var0 
var12 =  method : A.normal() : var0 
var13 =  method : A.normal() : var0 
var14 =  method : A.normal() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Making index 12 inactive (value is a primitive)
Making index 13 inactive (value is a primitive)
Making index 14 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var10 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var11 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var12 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var13 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var14 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=10 [var1]  : true
<randoop.PrimValue, value=10 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=10 [var4]  : true
<randoop.PrimValue, value=0 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true
<randoop.PrimValue, value=0 [var7]  : true
<randoop.PrimValue, value=10 [var8]  : true
<randoop.PrimValue, value=10 [var9]  : true
<randoop.PrimValue, value=0 [var10]  : true
<randoop.PrimValue, value=0 [var11]  : true
<randoop.PrimValue, value=10 [var12]  : true
<randoop.PrimValue, value=10 [var13]  : true
<randoop.PrimValue, value=10 [var14]  : true

allSequences.size()=404
-------------------------------------------
randoop.util.Randomness: total calls to random: 2469
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 403 sequences.
components: 403
randoop.util.Randomness: total calls to random: 2470
randoop.util.Randomness: total calls to random: 2471
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.randomNumber() : var0 
var2 =  method : A.randomNumber() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.normal() : var0 
var6 =  method : A.randomNumber() : var0 
var7 =  method : A.normal() : var0 
var8 =  method : A.normal() : var0 
var9 =  method : A.randomNumber() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=0 [var1]  : true
<randoop.PrimValue, value=0 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=10 [var5]  : true
<randoop.PrimValue, value=0 [var6]  : true
<randoop.PrimValue, value=10 [var7]  : true
<randoop.PrimValue, value=10 [var8]  : true
<randoop.PrimValue, value=0 [var9]  : true

allSequences.size()=405
-------------------------------------------
randoop.util.Randomness: total calls to random: 2472
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 404 sequences.
components: 404
randoop.util.Randomness: total calls to random: 2473
randoop.util.Randomness: total calls to random: 2474
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.randomNumber() : var0 
var2 =  method : A.randomNumber() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.normal() : var0 
var5 =  method : A.normal() : var0 
var6 =  method : A.randomNumber() : var0 
var7 =  method : A.normal() : var0 
var8 =  method : A.normal() : var0 
var9 =  method : A.normal() : var0 
var10 =  method : A.normal() : var0 
var11 =  method : A.randomNumber() : var0 
var12 =  method : A.randomNumber() : var0 
var13 =  method : A.randomNumber() : var0 
var14 =  method : A.randomNumber() : var0 
var15 =  method : A.randomNumber() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Making index 12 inactive (value is a primitive)
Making index 13 inactive (value is a primitive)
Making index 14 inactive (value is a primitive)
Making index 15 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var10 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var11 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var12 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var13 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var14 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var15 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=0 [var1]  : true
<randoop.PrimValue, value=0 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=10 [var4]  : true
<randoop.PrimValue, value=10 [var5]  : true
<randoop.PrimValue, value=0 [var6]  : true
<randoop.PrimValue, value=10 [var7]  : true
<randoop.PrimValue, value=10 [var8]  : true
<randoop.PrimValue, value=10 [var9]  : true
<randoop.PrimValue, value=10 [var10]  : true
<randoop.PrimValue, value=0 [var11]  : true
<randoop.PrimValue, value=0 [var12]  : true
<randoop.PrimValue, value=0 [var13]  : true
<randoop.PrimValue, value=0 [var14]  : true
<randoop.PrimValue, value=0 [var15]  : true

allSequences.size()=406
-------------------------------------------
randoop.util.Randomness: total calls to random: 2475
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 405 sequences.
components: 405
randoop.util.Randomness: total calls to random: 2476
randoop.util.Randomness: total calls to random: 2477
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 2478
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 405 sequences.
components: 405
randoop.util.Randomness: total calls to random: 2479
randoop.util.Randomness: total calls to random: 2480
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.normal() : var0 
var2 =  method : A.normal() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.normal() : var0 
var5 =  method : A.normal() : var0 
var6 =  method : A.randomNumber() : var0 
var7 =  method : A.normal() : var0 
var8 =  method : A.normal() : var0 
var9 =  method : A.randomNumber() : var0 
var10 =  method : A.normal() : var0 
var11 =  method : A.randomNumber() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var10 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var11 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=10 [var1]  : true
<randoop.PrimValue, value=10 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=10 [var4]  : true
<randoop.PrimValue, value=10 [var5]  : true
<randoop.PrimValue, value=0 [var6]  : true
<randoop.PrimValue, value=10 [var7]  : true
<randoop.PrimValue, value=10 [var8]  : true
<randoop.PrimValue, value=0 [var9]  : true
<randoop.PrimValue, value=10 [var10]  : true
<randoop.PrimValue, value=0 [var11]  : true

allSequences.size()=407
-------------------------------------------
randoop.util.Randomness: total calls to random: 2481
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 406 sequences.
components: 406
randoop.util.Randomness: total calls to random: 2482
randoop.util.Randomness: total calls to random: 2483
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.randomNumber() : var0 
var2 =  method : A.randomNumber() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.normal() : var0 
var5 =  method : A.normal() : var0 
var6 =  method : A.randomNumber() : var0 
var7 =  method : A.normal() : var0 
var8 =  method : A.normal() : var0 
var9 =  method : A.normal() : var0 
var10 =  method : A.normal() : var0 
var11 =  method : A.randomNumber() : var0 
var12 =  method : A.normal() : var0 
var13 =  method : A.randomNumber() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Making index 12 inactive (value is a primitive)
Making index 13 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var10 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var11 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var12 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var13 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=0 [var1]  : true
<randoop.PrimValue, value=0 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=10 [var4]  : true
<randoop.PrimValue, value=10 [var5]  : true
<randoop.PrimValue, value=0 [var6]  : true
<randoop.PrimValue, value=10 [var7]  : true
<randoop.PrimValue, value=10 [var8]  : true
<randoop.PrimValue, value=10 [var9]  : true
<randoop.PrimValue, value=10 [var10]  : true
<randoop.PrimValue, value=0 [var11]  : true
<randoop.PrimValue, value=10 [var12]  : true
<randoop.PrimValue, value=0 [var13]  : true

allSequences.size()=408
-------------------------------------------
randoop.util.Randomness: total calls to random: 2484
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 407 sequences.
components: 407
randoop.util.Randomness: total calls to random: 2485
randoop.util.Randomness: total calls to random: 2486
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.randomNumber() : var0 
var2 =  method : A.randomNumber() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.normal() : var0 
var6 =  method : A.normal() : var0 
var7 =  method : A.randomNumber() : var0 
var8 =  method : A.normal() : var0 
var9 =  method : A.randomNumber() : var0 
var10 =  method : A.normal() : var0 
var11 =  method : A.normal() : var0 
var12 =  method : A.randomNumber() : var0 
var13 =  method : A.randomNumber() : var0 
var14 =  method : A.randomNumber() : var0 
var15 =  method : A.normal() : var0 
var16 =  method : A.normal() : var0 
var17 =  method : A.randomNumber() : var0 
var18 =  method : A.randomNumber() : var0 
var19 =  method : A.randomNumber() : var0 
var20 =  method : A.randomNumber() : var0 
var21 =  method : A.randomNumber() : var0 
var22 =  method : A.randomNumber() : var0 
var23 =  method : A.randomNumber() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Making index 12 inactive (value is a primitive)
Making index 13 inactive (value is a primitive)
Making index 14 inactive (value is a primitive)
Making index 15 inactive (value is a primitive)
Making index 16 inactive (value is a primitive)
Making index 17 inactive (value is a primitive)
Making index 18 inactive (value is a primitive)
Making index 19 inactive (value is a primitive)
Making index 20 inactive (value is a primitive)
Making index 21 inactive (value is a primitive)
Making index 22 inactive (value is a primitive)
Making index 23 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var10 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var11 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var12 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var13 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var14 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var15 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var16 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var17 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var18 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var19 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var20 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var21 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var22 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var23 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=0 [var1]  : true
<randoop.PrimValue, value=0 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=10 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true
<randoop.PrimValue, value=0 [var7]  : true
<randoop.PrimValue, value=10 [var8]  : true
<randoop.PrimValue, value=0 [var9]  : true
<randoop.PrimValue, value=10 [var10]  : true
<randoop.PrimValue, value=10 [var11]  : true
<randoop.PrimValue, value=0 [var12]  : true
<randoop.PrimValue, value=0 [var13]  : true
<randoop.PrimValue, value=0 [var14]  : true
<randoop.PrimValue, value=10 [var15]  : true
<randoop.PrimValue, value=10 [var16]  : true
<randoop.PrimValue, value=0 [var17]  : true
<randoop.PrimValue, value=0 [var18]  : true
<randoop.PrimValue, value=0 [var19]  : true
<randoop.PrimValue, value=0 [var20]  : true
<randoop.PrimValue, value=0 [var21]  : true
<randoop.PrimValue, value=0 [var22]  : true
<randoop.PrimValue, value=0 [var23]  : true

allSequences.size()=409
-------------------------------------------
randoop.util.Randomness: total calls to random: 2487
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 408 sequences.
components: 408
randoop.util.Randomness: total calls to random: 2488
randoop.util.Randomness: total calls to random: 2489
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 2490
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 408 sequences.
components: 408
randoop.util.Randomness: total calls to random: 2491
randoop.util.Randomness: total calls to random: 2492
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 2493
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 408 sequences.
components: 408
randoop.util.Randomness: total calls to random: 2494
randoop.util.Randomness: total calls to random: 2495
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.normal() : var0 
var2 =  method : A.normal() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.normal() : var0 
var5 =  method : A.normal() : var0 
var6 =  method : A.randomNumber() : var0 
var7 =  method : A.normal() : var0 
var8 =  method : A.normal() : var0 
var9 =  method : A.randomNumber() : var0 
var10 =  method : A.normal() : var0 
var11 =  method : A.randomNumber() : var0 
var12 =  method : A.normal() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Making index 12 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var10 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var11 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var12 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=10 [var1]  : true
<randoop.PrimValue, value=10 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=10 [var4]  : true
<randoop.PrimValue, value=10 [var5]  : true
<randoop.PrimValue, value=0 [var6]  : true
<randoop.PrimValue, value=10 [var7]  : true
<randoop.PrimValue, value=10 [var8]  : true
<randoop.PrimValue, value=0 [var9]  : true
<randoop.PrimValue, value=10 [var10]  : true
<randoop.PrimValue, value=0 [var11]  : true
<randoop.PrimValue, value=10 [var12]  : true

allSequences.size()=410
-------------------------------------------
randoop.util.Randomness: total calls to random: 2496
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 409 sequences.
components: 409
randoop.util.Randomness: total calls to random: 2497
randoop.util.Randomness: total calls to random: 2498
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 2499
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 409 sequences.
components: 409
randoop.util.Randomness: total calls to random: 2500
randoop.util.Randomness: total calls to random: 2501
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.normal() : var0 
var2 =  method : A.normal() : var0 
var3 =  method : A.randomNumber() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.randomNumber() : var0 
var6 =  method : A.normal() : var0 
var7 =  method : A.randomNumber() : var0 
var8 =  method : A.normal() : var0 
var9 =  method : A.normal() : var0 
var10 =  method : A.normal() : var0 
var11 =  method : A.randomNumber() : var0 
var12 =  method : A.randomNumber() : var0 
var13 =  method : A.randomNumber() : var0 
var14 =  method : A.normal() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Making index 12 inactive (value is a primitive)
Making index 13 inactive (value is a primitive)
Making index 14 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var10 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var11 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var12 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var13 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var14 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=10 [var1]  : true
<randoop.PrimValue, value=10 [var2]  : true
<randoop.PrimValue, value=0 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=0 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true
<randoop.PrimValue, value=0 [var7]  : true
<randoop.PrimValue, value=10 [var8]  : true
<randoop.PrimValue, value=10 [var9]  : true
<randoop.PrimValue, value=10 [var10]  : true
<randoop.PrimValue, value=0 [var11]  : true
<randoop.PrimValue, value=0 [var12]  : true
<randoop.PrimValue, value=0 [var13]  : true
<randoop.PrimValue, value=10 [var14]  : true

allSequences.size()=411
-------------------------------------------
randoop.util.Randomness: total calls to random: 2502
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 410 sequences.
components: 410
randoop.util.Randomness: total calls to random: 2503
randoop.util.Randomness: total calls to random: 2504
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 2505
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 410 sequences.
components: 410
randoop.util.Randomness: total calls to random: 2506
randoop.util.Randomness: total calls to random: 2507
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.randomNumber() : var0 
var2 =  method : A.randomNumber() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.normal() : var0 
var6 =  method : A.normal() : var0 
var7 =  method : A.randomNumber() : var0 
var8 =  method : A.normal() : var0 
var9 =  method : A.randomNumber() : var0 
var10 =  method : A.normal() : var0 
var11 =  method : A.normal() : var0 
var12 =  method : A.randomNumber() : var0 
var13 =  method : A.randomNumber() : var0 
var14 =  method : A.normal() : var0 
var15 =  method : A.normal() : var0 
var16 =  method : A.normal() : var0 
var17 =  method : A.normal() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Making index 12 inactive (value is a primitive)
Making index 13 inactive (value is a primitive)
Making index 14 inactive (value is a primitive)
Making index 15 inactive (value is a primitive)
Making index 16 inactive (value is a primitive)
Making index 17 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var10 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var11 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var12 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var13 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var14 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var15 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var16 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var17 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=0 [var1]  : true
<randoop.PrimValue, value=0 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=10 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true
<randoop.PrimValue, value=0 [var7]  : true
<randoop.PrimValue, value=10 [var8]  : true
<randoop.PrimValue, value=0 [var9]  : true
<randoop.PrimValue, value=10 [var10]  : true
<randoop.PrimValue, value=10 [var11]  : true
<randoop.PrimValue, value=0 [var12]  : true
<randoop.PrimValue, value=0 [var13]  : true
<randoop.PrimValue, value=10 [var14]  : true
<randoop.PrimValue, value=10 [var15]  : true
<randoop.PrimValue, value=10 [var16]  : true
<randoop.PrimValue, value=10 [var17]  : true

allSequences.size()=412
-------------------------------------------
randoop.util.Randomness: total calls to random: 2508
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 411 sequences.
components: 411
randoop.util.Randomness: total calls to random: 2509
randoop.util.Randomness: total calls to random: 2510
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 2511
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 411 sequences.
components: 411
randoop.util.Randomness: total calls to random: 2512
randoop.util.Randomness: total calls to random: 2513
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 2514
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 411 sequences.
components: 411
randoop.util.Randomness: total calls to random: 2515
randoop.util.Randomness: total calls to random: 2516
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 2517
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 411 sequences.
components: 411
randoop.util.Randomness: total calls to random: 2518
randoop.util.Randomness: total calls to random: 2519
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 2520
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 411 sequences.
components: 411
randoop.util.Randomness: total calls to random: 2521
randoop.util.Randomness: total calls to random: 2522
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.normal() : var0 
var2 =  method : A.normal() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.normal() : var0 
var5 =  method : A.randomNumber() : var0 
var6 =  method : A.randomNumber() : var0 
var7 =  method : A.randomNumber() : var0 
var8 =  method : A.randomNumber() : var0 
var9 =  method : A.normal() : var0 
var10 =  method : A.randomNumber() : var0 
var11 =  method : A.randomNumber() : var0 
var12 =  method : A.randomNumber() : var0 
var13 =  method : A.randomNumber() : var0 
var14 =  method : A.normal() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Making index 12 inactive (value is a primitive)
Making index 13 inactive (value is a primitive)
Making index 14 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var10 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var11 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var12 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var13 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var14 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=10 [var1]  : true
<randoop.PrimValue, value=10 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=10 [var4]  : true
<randoop.PrimValue, value=0 [var5]  : true
<randoop.PrimValue, value=0 [var6]  : true
<randoop.PrimValue, value=0 [var7]  : true
<randoop.PrimValue, value=0 [var8]  : true
<randoop.PrimValue, value=10 [var9]  : true
<randoop.PrimValue, value=0 [var10]  : true
<randoop.PrimValue, value=0 [var11]  : true
<randoop.PrimValue, value=0 [var12]  : true
<randoop.PrimValue, value=0 [var13]  : true
<randoop.PrimValue, value=10 [var14]  : true

allSequences.size()=413
-------------------------------------------
randoop.util.Randomness: total calls to random: 2523
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 412 sequences.
components: 412
randoop.util.Randomness: total calls to random: 2524
randoop.util.Randomness: total calls to random: 2525
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 2526
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 412 sequences.
components: 412
randoop.util.Randomness: total calls to random: 2527
randoop.util.Randomness: total calls to random: 2528
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.normal() : var0 
var2 =  method : A.normal() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.normal() : var0 
var6 =  method : A.randomNumber() : var0 
var7 =  method : A.randomNumber() : var0 
var8 =  method : A.normal() : var0 
var9 =  method : A.normal() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=10 [var1]  : true
<randoop.PrimValue, value=10 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=10 [var5]  : true
<randoop.PrimValue, value=0 [var6]  : true
<randoop.PrimValue, value=0 [var7]  : true
<randoop.PrimValue, value=10 [var8]  : true
<randoop.PrimValue, value=10 [var9]  : true

allSequences.size()=414
-------------------------------------------
randoop.util.Randomness: total calls to random: 2529
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 413 sequences.
components: 413
randoop.util.Randomness: total calls to random: 2530
randoop.util.Randomness: total calls to random: 2531
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 2532
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 413 sequences.
components: 413
randoop.util.Randomness: total calls to random: 2533
randoop.util.Randomness: total calls to random: 2534
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 2535
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 413 sequences.
components: 413
randoop.util.Randomness: total calls to random: 2536
randoop.util.Randomness: total calls to random: 2537
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.randomNumber() : var0 
var2 =  method : A.normal() : var0 
var3 =  method : A.randomNumber() : var0 
var4 =  method : A.normal() : var0 
var5 =  method : A.randomNumber() : var0 
var6 =  method : A.normal() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=0 [var1]  : true
<randoop.PrimValue, value=10 [var2]  : true
<randoop.PrimValue, value=0 [var3]  : true
<randoop.PrimValue, value=10 [var4]  : true
<randoop.PrimValue, value=0 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true

allSequences.size()=415
-------------------------------------------
randoop.util.Randomness: total calls to random: 2538
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 414 sequences.
components: 414
randoop.util.Randomness: total calls to random: 2539
randoop.util.Randomness: total calls to random: 2540
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.normal() : var0 
var2 =  method : A.normal() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.randomNumber() : var0 
var6 =  method : A.randomNumber() : var0 
var7 =  method : A.normal() : var0 
var8 =  method : A.randomNumber() : var0 
var9 =  method : A.randomNumber() : var0 
var10 =  method : A.normal() : var0 
var11 =  method : A.normal() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var10 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var11 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=10 [var1]  : true
<randoop.PrimValue, value=10 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=0 [var5]  : true
<randoop.PrimValue, value=0 [var6]  : true
<randoop.PrimValue, value=10 [var7]  : true
<randoop.PrimValue, value=0 [var8]  : true
<randoop.PrimValue, value=0 [var9]  : true
<randoop.PrimValue, value=10 [var10]  : true
<randoop.PrimValue, value=10 [var11]  : true

allSequences.size()=416
-------------------------------------------
randoop.util.Randomness: total calls to random: 2541
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 415 sequences.
components: 415
randoop.util.Randomness: total calls to random: 2542
randoop.util.Randomness: total calls to random: 2543
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.randomNumber() : var0 
var2 =  method : A.normal() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.randomNumber() : var0 
var6 =  method : A.normal() : var0 
var7 =  method : A.randomNumber() : var0 
var8 =  method : A.normal() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=0 [var1]  : true
<randoop.PrimValue, value=10 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=0 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true
<randoop.PrimValue, value=0 [var7]  : true
<randoop.PrimValue, value=10 [var8]  : true

allSequences.size()=417
-------------------------------------------
randoop.util.Randomness: total calls to random: 2544
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 416 sequences.
components: 416
randoop.util.Randomness: total calls to random: 2545
randoop.util.Randomness: total calls to random: 2546
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 2547
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 416 sequences.
components: 416
randoop.util.Randomness: total calls to random: 2548
randoop.util.Randomness: total calls to random: 2549
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.randomNumber() : var0 
var2 =  method : A.randomNumber() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.normal() : var0 
var5 =  method : A.normal() : var0 
var6 =  method : A.randomNumber() : var0 
var7 =  method : A.normal() : var0 
var8 =  method : A.randomNumber() : var0 
var9 =  method : A.normal() : var0 
var10 =  method : A.normal() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var10 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=0 [var1]  : true
<randoop.PrimValue, value=0 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=10 [var4]  : true
<randoop.PrimValue, value=10 [var5]  : true
<randoop.PrimValue, value=0 [var6]  : true
<randoop.PrimValue, value=10 [var7]  : true
<randoop.PrimValue, value=0 [var8]  : true
<randoop.PrimValue, value=10 [var9]  : true
<randoop.PrimValue, value=10 [var10]  : true

allSequences.size()=418
-------------------------------------------
randoop.util.Randomness: total calls to random: 2550
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 417 sequences.
components: 417
randoop.util.Randomness: total calls to random: 2551
randoop.util.Randomness: total calls to random: 2552
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.normal() : var0 
var2 =  method : A.normal() : var0 
var3 =  method : A.randomNumber() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.randomNumber() : var0 
var6 =  method : A.normal() : var0 
var7 =  method : A.randomNumber() : var0 
var8 =  method : A.normal() : var0 
var9 =  method : A.randomNumber() : var0 
var10 =  method : A.randomNumber() : var0 
var11 =  method : A.randomNumber() : var0 
var12 =  method : A.normal() : var0 
var13 =  method : A.randomNumber() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Making index 12 inactive (value is a primitive)
Making index 13 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var10 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var11 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var12 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var13 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=10 [var1]  : true
<randoop.PrimValue, value=10 [var2]  : true
<randoop.PrimValue, value=0 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=0 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true
<randoop.PrimValue, value=0 [var7]  : true
<randoop.PrimValue, value=10 [var8]  : true
<randoop.PrimValue, value=0 [var9]  : true
<randoop.PrimValue, value=0 [var10]  : true
<randoop.PrimValue, value=0 [var11]  : true
<randoop.PrimValue, value=10 [var12]  : true
<randoop.PrimValue, value=0 [var13]  : true

allSequences.size()=419
-------------------------------------------
randoop.util.Randomness: total calls to random: 2553
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 418 sequences.
components: 418
randoop.util.Randomness: total calls to random: 2554
randoop.util.Randomness: total calls to random: 2555
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.randomNumber() : var0 
var2 =  method : A.randomNumber() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.normal() : var0 
var6 =  method : A.normal() : var0 
var7 =  method : A.randomNumber() : var0 
var8 =  method : A.normal() : var0 
var9 =  method : A.normal() : var0 
var10 =  method : A.normal() : var0 
var11 =  method : A.randomNumber() : var0 
var12 =  method : A.normal() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Making index 12 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var10 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var11 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var12 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=0 [var1]  : true
<randoop.PrimValue, value=0 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=10 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true
<randoop.PrimValue, value=0 [var7]  : true
<randoop.PrimValue, value=10 [var8]  : true
<randoop.PrimValue, value=10 [var9]  : true
<randoop.PrimValue, value=10 [var10]  : true
<randoop.PrimValue, value=0 [var11]  : true
<randoop.PrimValue, value=10 [var12]  : true

allSequences.size()=420
-------------------------------------------
randoop.util.Randomness: total calls to random: 2556
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 419 sequences.
components: 419
randoop.util.Randomness: total calls to random: 2557
randoop.util.Randomness: total calls to random: 2558
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 2559
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 419 sequences.
components: 419
randoop.util.Randomness: total calls to random: 2560
randoop.util.Randomness: total calls to random: 2561
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.randomNumber() : var0 
var2 =  method : A.normal() : var0 
var3 =  method : A.randomNumber() : var0 
var4 =  method : A.normal() : var0 
var5 =  method : A.normal() : var0 
var6 =  method : A.randomNumber() : var0 
var7 =  method : A.normal() : var0 
var8 =  method : A.randomNumber() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=0 [var1]  : true
<randoop.PrimValue, value=10 [var2]  : true
<randoop.PrimValue, value=0 [var3]  : true
<randoop.PrimValue, value=10 [var4]  : true
<randoop.PrimValue, value=10 [var5]  : true
<randoop.PrimValue, value=0 [var6]  : true
<randoop.PrimValue, value=10 [var7]  : true
<randoop.PrimValue, value=0 [var8]  : true

allSequences.size()=421
-------------------------------------------
randoop.util.Randomness: total calls to random: 2562
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 420 sequences.
components: 420
randoop.util.Randomness: total calls to random: 2563
randoop.util.Randomness: total calls to random: 2564
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 2565
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 420 sequences.
components: 420
randoop.util.Randomness: total calls to random: 2566
randoop.util.Randomness: total calls to random: 2567
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.normal() : var0 
var2 =  method : A.normal() : var0 
var3 =  method : A.randomNumber() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.randomNumber() : var0 
var6 =  method : A.normal() : var0 
var7 =  method : A.randomNumber() : var0 
var8 =  method : A.normal() : var0 
var9 =  method : A.normal() : var0 
var10 =  method : A.normal() : var0 
var11 =  method : A.randomNumber() : var0 
var12 =  method : A.normal() : var0 
var13 =  method : A.normal() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Making index 12 inactive (value is a primitive)
Making index 13 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var10 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var11 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var12 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var13 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=10 [var1]  : true
<randoop.PrimValue, value=10 [var2]  : true
<randoop.PrimValue, value=0 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=0 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true
<randoop.PrimValue, value=0 [var7]  : true
<randoop.PrimValue, value=10 [var8]  : true
<randoop.PrimValue, value=10 [var9]  : true
<randoop.PrimValue, value=10 [var10]  : true
<randoop.PrimValue, value=0 [var11]  : true
<randoop.PrimValue, value=10 [var12]  : true
<randoop.PrimValue, value=10 [var13]  : true

allSequences.size()=422
-------------------------------------------
randoop.util.Randomness: total calls to random: 2568
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 421 sequences.
components: 421
randoop.util.Randomness: total calls to random: 2569
randoop.util.Randomness: total calls to random: 2570
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.randomNumber() : var0 
var2 =  method : A.randomNumber() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.normal() : var0 
var5 =  method : A.normal() : var0 
var6 =  method : A.randomNumber() : var0 
var7 =  method : A.normal() : var0 
var8 =  method : A.randomNumber() : var0 
var9 =  method : A.randomNumber() : var0 
var10 =  method : A.randomNumber() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var10 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=0 [var1]  : true
<randoop.PrimValue, value=0 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=10 [var4]  : true
<randoop.PrimValue, value=10 [var5]  : true
<randoop.PrimValue, value=0 [var6]  : true
<randoop.PrimValue, value=10 [var7]  : true
<randoop.PrimValue, value=0 [var8]  : true
<randoop.PrimValue, value=0 [var9]  : true
<randoop.PrimValue, value=0 [var10]  : true

allSequences.size()=423
-------------------------------------------
randoop.util.Randomness: total calls to random: 2571
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 422 sequences.
components: 422
randoop.util.Randomness: total calls to random: 2572
randoop.util.Randomness: total calls to random: 2573
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.randomNumber() : var0 
var2 =  method : A.randomNumber() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.randomNumber() : var0 
var6 =  method : A.randomNumber() : var0 
var7 =  method : A.randomNumber() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=0 [var1]  : true
<randoop.PrimValue, value=0 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=0 [var5]  : true
<randoop.PrimValue, value=0 [var6]  : true
<randoop.PrimValue, value=0 [var7]  : true

allSequences.size()=424
-------------------------------------------
randoop.util.Randomness: total calls to random: 2574
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 423 sequences.
components: 423
randoop.util.Randomness: total calls to random: 2575
randoop.util.Randomness: total calls to random: 2576
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 2577
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 423 sequences.
components: 423
randoop.util.Randomness: total calls to random: 2578
randoop.util.Randomness: total calls to random: 2579
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.normal() : var0 
var2 =  method : A.normal() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.randomNumber() : var0 
var6 =  method : A.randomNumber() : var0 
var7 =  method : A.normal() : var0 
var8 =  method : A.randomNumber() : var0 
var9 =  method : A.normal() : var0 
var10 =  method : A.randomNumber() : var0 
var11 =  method : A.randomNumber() : var0 
var12 =  method : A.normal() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Making index 12 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var10 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var11 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var12 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=10 [var1]  : true
<randoop.PrimValue, value=10 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=0 [var5]  : true
<randoop.PrimValue, value=0 [var6]  : true
<randoop.PrimValue, value=10 [var7]  : true
<randoop.PrimValue, value=0 [var8]  : true
<randoop.PrimValue, value=10 [var9]  : true
<randoop.PrimValue, value=0 [var10]  : true
<randoop.PrimValue, value=0 [var11]  : true
<randoop.PrimValue, value=10 [var12]  : true

allSequences.size()=425
-------------------------------------------
randoop.util.Randomness: total calls to random: 2580
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 424 sequences.
components: 424
randoop.util.Randomness: total calls to random: 2581
randoop.util.Randomness: total calls to random: 2582
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 2583
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 424 sequences.
components: 424
randoop.util.Randomness: total calls to random: 2584
randoop.util.Randomness: total calls to random: 2585
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.normal() : var0 
var2 =  method : A.normal() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.randomNumber() : var0 
var6 =  method : A.randomNumber() : var0 
var7 =  method : A.normal() : var0 
var8 =  method : A.randomNumber() : var0 
var9 =  method : A.normal() : var0 
var10 =  method : A.normal() : var0 
var11 =  method : A.normal() : var0 
var12 =  method : A.randomNumber() : var0 
var13 =  method : A.randomNumber() : var0 
var14 =  method : A.randomNumber() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Making index 12 inactive (value is a primitive)
Making index 13 inactive (value is a primitive)
Making index 14 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var10 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var11 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var12 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var13 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var14 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=10 [var1]  : true
<randoop.PrimValue, value=10 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=0 [var5]  : true
<randoop.PrimValue, value=0 [var6]  : true
<randoop.PrimValue, value=10 [var7]  : true
<randoop.PrimValue, value=0 [var8]  : true
<randoop.PrimValue, value=10 [var9]  : true
<randoop.PrimValue, value=10 [var10]  : true
<randoop.PrimValue, value=10 [var11]  : true
<randoop.PrimValue, value=0 [var12]  : true
<randoop.PrimValue, value=0 [var13]  : true
<randoop.PrimValue, value=0 [var14]  : true

allSequences.size()=426
-------------------------------------------
randoop.util.Randomness: total calls to random: 2586
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 425 sequences.
components: 425
randoop.util.Randomness: total calls to random: 2587
randoop.util.Randomness: total calls to random: 2588
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 2589
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 425 sequences.
components: 425
randoop.util.Randomness: total calls to random: 2590
randoop.util.Randomness: total calls to random: 2591
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 2592
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 425 sequences.
components: 425
randoop.util.Randomness: total calls to random: 2593
randoop.util.Randomness: total calls to random: 2594
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 2595
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 425 sequences.
components: 425
randoop.util.Randomness: total calls to random: 2596
randoop.util.Randomness: total calls to random: 2597
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.randomNumber() : var0 
var2 =  method : A.randomNumber() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.normal() : var0 
var6 =  method : A.normal() : var0 
var7 =  method : A.randomNumber() : var0 
var8 =  method : A.normal() : var0 
var9 =  method : A.normal() : var0 
var10 =  method : A.normal() : var0 
var11 =  method : A.randomNumber() : var0 
var12 =  method : A.randomNumber() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Making index 12 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var10 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var11 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var12 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=0 [var1]  : true
<randoop.PrimValue, value=0 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=10 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true
<randoop.PrimValue, value=0 [var7]  : true
<randoop.PrimValue, value=10 [var8]  : true
<randoop.PrimValue, value=10 [var9]  : true
<randoop.PrimValue, value=10 [var10]  : true
<randoop.PrimValue, value=0 [var11]  : true
<randoop.PrimValue, value=0 [var12]  : true

allSequences.size()=427
-------------------------------------------
randoop.util.Randomness: total calls to random: 2598
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 426 sequences.
components: 426
randoop.util.Randomness: total calls to random: 2599
randoop.util.Randomness: total calls to random: 2600
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 2601
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 426 sequences.
components: 426
randoop.util.Randomness: total calls to random: 2602
randoop.util.Randomness: total calls to random: 2603
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.normal() : var0 
var2 =  method : A.randomNumber() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.randomNumber() : var0 
var6 =  method : A.normal() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=10 [var1]  : true
<randoop.PrimValue, value=0 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=0 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true

allSequences.size()=428
-------------------------------------------
randoop.util.Randomness: total calls to random: 2604
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 427 sequences.
components: 427
randoop.util.Randomness: total calls to random: 2605
randoop.util.Randomness: total calls to random: 2606
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.normal() : var0 
var2 =  method : A.normal() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.normal() : var0 
var5 =  method : A.randomNumber() : var0 
var6 =  method : A.normal() : var0 
var7 =  method : A.randomNumber() : var0 
var8 =  method : A.randomNumber() : var0 
var9 =  method : A.normal() : var0 
var10 =  method : A.normal() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var10 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=10 [var1]  : true
<randoop.PrimValue, value=10 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=10 [var4]  : true
<randoop.PrimValue, value=0 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true
<randoop.PrimValue, value=0 [var7]  : true
<randoop.PrimValue, value=0 [var8]  : true
<randoop.PrimValue, value=10 [var9]  : true
<randoop.PrimValue, value=10 [var10]  : true

allSequences.size()=429
-------------------------------------------
randoop.util.Randomness: total calls to random: 2607
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 428 sequences.
components: 428
randoop.util.Randomness: total calls to random: 2608
randoop.util.Randomness: total calls to random: 2609
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 2610
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 428 sequences.
components: 428
randoop.util.Randomness: total calls to random: 2611
randoop.util.Randomness: total calls to random: 2612
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.normal() : var0 
var2 =  method : A.normal() : var0 
var3 =  method : A.randomNumber() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.randomNumber() : var0 
var6 =  method : A.randomNumber() : var0 
var7 =  method : A.normal() : var0 
var8 =  method : A.normal() : var0 
var9 =  method : A.normal() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=10 [var1]  : true
<randoop.PrimValue, value=10 [var2]  : true
<randoop.PrimValue, value=0 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=0 [var5]  : true
<randoop.PrimValue, value=0 [var6]  : true
<randoop.PrimValue, value=10 [var7]  : true
<randoop.PrimValue, value=10 [var8]  : true
<randoop.PrimValue, value=10 [var9]  : true

allSequences.size()=430
-------------------------------------------
randoop.util.Randomness: total calls to random: 2613
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 429 sequences.
components: 429
randoop.util.Randomness: total calls to random: 2614
randoop.util.Randomness: total calls to random: 2615
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.normal() : var0 
var2 =  method : A.normal() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.normal() : var0 
var6 =  method : A.randomNumber() : var0 
var7 =  method : A.randomNumber() : var0 
var8 =  method : A.normal() : var0 
var9 =  method : A.randomNumber() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=10 [var1]  : true
<randoop.PrimValue, value=10 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=10 [var5]  : true
<randoop.PrimValue, value=0 [var6]  : true
<randoop.PrimValue, value=0 [var7]  : true
<randoop.PrimValue, value=10 [var8]  : true
<randoop.PrimValue, value=0 [var9]  : true

allSequences.size()=431
-------------------------------------------
randoop.util.Randomness: total calls to random: 2616
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 430 sequences.
components: 430
randoop.util.Randomness: total calls to random: 2617
randoop.util.Randomness: total calls to random: 2618
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 2619
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 430 sequences.
components: 430
randoop.util.Randomness: total calls to random: 2620
randoop.util.Randomness: total calls to random: 2621
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 2622
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 430 sequences.
components: 430
randoop.util.Randomness: total calls to random: 2623
randoop.util.Randomness: total calls to random: 2624
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.normal() : var0 
var2 =  method : A.normal() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.normal() : var0 
var5 =  method : A.normal() : var0 
var6 =  method : A.randomNumber() : var0 
var7 =  method : A.randomNumber() : var0 
var8 =  method : A.normal() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=10 [var1]  : true
<randoop.PrimValue, value=10 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=10 [var4]  : true
<randoop.PrimValue, value=10 [var5]  : true
<randoop.PrimValue, value=0 [var6]  : true
<randoop.PrimValue, value=0 [var7]  : true
<randoop.PrimValue, value=10 [var8]  : true

allSequences.size()=432
-------------------------------------------
randoop.util.Randomness: total calls to random: 2625
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 431 sequences.
components: 431
randoop.util.Randomness: total calls to random: 2626
randoop.util.Randomness: total calls to random: 2627
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 2628
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 431 sequences.
components: 431
randoop.util.Randomness: total calls to random: 2629
randoop.util.Randomness: total calls to random: 2630
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.normal() : var0 
var2 =  method : A.normal() : var0 
var3 =  method : A.randomNumber() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.randomNumber() : var0 
var6 =  method : A.normal() : var0 
var7 =  method : A.randomNumber() : var0 
var8 =  method : A.normal() : var0 
var9 =  method : A.normal() : var0 
var10 =  method : A.randomNumber() : var0 
var11 =  method : A.normal() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var10 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var11 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=10 [var1]  : true
<randoop.PrimValue, value=10 [var2]  : true
<randoop.PrimValue, value=0 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=0 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true
<randoop.PrimValue, value=0 [var7]  : true
<randoop.PrimValue, value=10 [var8]  : true
<randoop.PrimValue, value=10 [var9]  : true
<randoop.PrimValue, value=0 [var10]  : true
<randoop.PrimValue, value=10 [var11]  : true

allSequences.size()=433
-------------------------------------------
randoop.util.Randomness: total calls to random: 2631
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 432 sequences.
components: 432
randoop.util.Randomness: total calls to random: 2632
randoop.util.Randomness: total calls to random: 2633
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.randomNumber() : var0 
var2 =  method : A.randomNumber() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.normal() : var0 
var6 =  method : A.randomNumber() : var0 
var7 =  method : A.normal() : var0 
var8 =  method : A.randomNumber() : var0 
var9 =  method : A.normal() : var0 
var10 =  method : A.normal() : var0 
var11 =  method : A.normal() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var10 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var11 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=0 [var1]  : true
<randoop.PrimValue, value=0 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=10 [var5]  : true
<randoop.PrimValue, value=0 [var6]  : true
<randoop.PrimValue, value=10 [var7]  : true
<randoop.PrimValue, value=0 [var8]  : true
<randoop.PrimValue, value=10 [var9]  : true
<randoop.PrimValue, value=10 [var10]  : true
<randoop.PrimValue, value=10 [var11]  : true

allSequences.size()=434
-------------------------------------------
randoop.util.Randomness: total calls to random: 2634
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 433 sequences.
components: 433
randoop.util.Randomness: total calls to random: 2635
randoop.util.Randomness: total calls to random: 2636
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 2637
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 433 sequences.
components: 433
randoop.util.Randomness: total calls to random: 2638
randoop.util.Randomness: total calls to random: 2639
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.normal() : var0 
var2 =  method : A.normal() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.normal() : var0 
var5 =  method : A.randomNumber() : var0 
var6 =  method : A.normal() : var0 
var7 =  method : A.randomNumber() : var0 
var8 =  method : A.normal() : var0 
var9 =  method : A.normal() : var0 
var10 =  method : A.randomNumber() : var0 
var11 =  method : A.randomNumber() : var0 
var12 =  method : A.randomNumber() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Making index 12 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var10 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var11 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var12 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=10 [var1]  : true
<randoop.PrimValue, value=10 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=10 [var4]  : true
<randoop.PrimValue, value=0 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true
<randoop.PrimValue, value=0 [var7]  : true
<randoop.PrimValue, value=10 [var8]  : true
<randoop.PrimValue, value=10 [var9]  : true
<randoop.PrimValue, value=0 [var10]  : true
<randoop.PrimValue, value=0 [var11]  : true
<randoop.PrimValue, value=0 [var12]  : true

allSequences.size()=435
-------------------------------------------
randoop.util.Randomness: total calls to random: 2640
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 434 sequences.
components: 434
randoop.util.Randomness: total calls to random: 2641
randoop.util.Randomness: total calls to random: 2642
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 2643
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 434 sequences.
components: 434
randoop.util.Randomness: total calls to random: 2644
randoop.util.Randomness: total calls to random: 2645
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 2646
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 434 sequences.
components: 434
randoop.util.Randomness: total calls to random: 2647
randoop.util.Randomness: total calls to random: 2648
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.normal() : var0 
var2 =  method : A.normal() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.normal() : var0 
var6 =  method : A.normal() : var0 
var7 =  method : A.randomNumber() : var0 
var8 =  method : A.normal() : var0 
var9 =  method : A.randomNumber() : var0 
var10 =  method : A.normal() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var10 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=10 [var1]  : true
<randoop.PrimValue, value=10 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=10 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true
<randoop.PrimValue, value=0 [var7]  : true
<randoop.PrimValue, value=10 [var8]  : true
<randoop.PrimValue, value=0 [var9]  : true
<randoop.PrimValue, value=10 [var10]  : true

allSequences.size()=436
-------------------------------------------
randoop.util.Randomness: total calls to random: 2649
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 435 sequences.
components: 435
randoop.util.Randomness: total calls to random: 2650
randoop.util.Randomness: total calls to random: 2651
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.randomNumber() : var0 
var2 =  method : A.randomNumber() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.normal() : var0 
var6 =  method : A.normal() : var0 
var7 =  method : A.randomNumber() : var0 
var8 =  method : A.normal() : var0 
var9 =  method : A.randomNumber() : var0 
var10 =  method : A.normal() : var0 
var11 =  method : A.normal() : var0 
var12 =  method : A.randomNumber() : var0 
var13 =  method : A.randomNumber() : var0 
var14 =  method : A.randomNumber() : var0 
var15 =  method : A.normal() : var0 
var16 =  method : A.normal() : var0 
var17 =  method : A.randomNumber() : var0 
var18 =  method : A.randomNumber() : var0 
var19 =  method : A.randomNumber() : var0 
var20 =  method : A.randomNumber() : var0 
var21 =  method : A.randomNumber() : var0 
var22 =  method : A.randomNumber() : var0 
var23 =  method : A.normal() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Making index 12 inactive (value is a primitive)
Making index 13 inactive (value is a primitive)
Making index 14 inactive (value is a primitive)
Making index 15 inactive (value is a primitive)
Making index 16 inactive (value is a primitive)
Making index 17 inactive (value is a primitive)
Making index 18 inactive (value is a primitive)
Making index 19 inactive (value is a primitive)
Making index 20 inactive (value is a primitive)
Making index 21 inactive (value is a primitive)
Making index 22 inactive (value is a primitive)
Making index 23 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var10 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var11 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var12 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var13 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var14 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var15 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var16 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var17 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var18 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var19 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var20 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var21 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var22 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var23 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=0 [var1]  : true
<randoop.PrimValue, value=0 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=10 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true
<randoop.PrimValue, value=0 [var7]  : true
<randoop.PrimValue, value=10 [var8]  : true
<randoop.PrimValue, value=0 [var9]  : true
<randoop.PrimValue, value=10 [var10]  : true
<randoop.PrimValue, value=10 [var11]  : true
<randoop.PrimValue, value=0 [var12]  : true
<randoop.PrimValue, value=0 [var13]  : true
<randoop.PrimValue, value=0 [var14]  : true
<randoop.PrimValue, value=10 [var15]  : true
<randoop.PrimValue, value=10 [var16]  : true
<randoop.PrimValue, value=0 [var17]  : true
<randoop.PrimValue, value=0 [var18]  : true
<randoop.PrimValue, value=0 [var19]  : true
<randoop.PrimValue, value=0 [var20]  : true
<randoop.PrimValue, value=0 [var21]  : true
<randoop.PrimValue, value=0 [var22]  : true
<randoop.PrimValue, value=10 [var23]  : true

allSequences.size()=437
-------------------------------------------
randoop.util.Randomness: total calls to random: 2652
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 436 sequences.
components: 436
randoop.util.Randomness: total calls to random: 2653
randoop.util.Randomness: total calls to random: 2654
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.normal() : var0 
var2 =  method : A.randomNumber() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.randomNumber() : var0 
var6 =  method : A.normal() : var0 
var7 =  method : A.normal() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=10 [var1]  : true
<randoop.PrimValue, value=0 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=0 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true
<randoop.PrimValue, value=10 [var7]  : true

allSequences.size()=438
-------------------------------------------
randoop.util.Randomness: total calls to random: 2655
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 437 sequences.
components: 437
randoop.util.Randomness: total calls to random: 2656
randoop.util.Randomness: total calls to random: 2657
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 2658
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 437 sequences.
components: 437
randoop.util.Randomness: total calls to random: 2659
randoop.util.Randomness: total calls to random: 2660
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 2661
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 437 sequences.
components: 437
randoop.util.Randomness: total calls to random: 2662
randoop.util.Randomness: total calls to random: 2663
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 2664
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 437 sequences.
components: 437
randoop.util.Randomness: total calls to random: 2665
randoop.util.Randomness: total calls to random: 2666
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 2667
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 437 sequences.
components: 437
randoop.util.Randomness: total calls to random: 2668
randoop.util.Randomness: total calls to random: 2669
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 2670
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 437 sequences.
components: 437
randoop.util.Randomness: total calls to random: 2671
randoop.util.Randomness: total calls to random: 2672
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 2673
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 437 sequences.
components: 437
randoop.util.Randomness: total calls to random: 2674
randoop.util.Randomness: total calls to random: 2675
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 2676
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 437 sequences.
components: 437
randoop.util.Randomness: total calls to random: 2677
randoop.util.Randomness: total calls to random: 2678
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.normal() : var0 
var2 =  method : A.randomNumber() : var0 
var3 =  method : A.randomNumber() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.normal() : var0 
var6 =  method : A.normal() : var0 
var7 =  method : A.normal() : var0 
var8 =  method : A.randomNumber() : var0 
var9 =  method : A.normal() : var0 
var10 =  method : A.randomNumber() : var0 
var11 =  method : A.randomNumber() : var0 
var12 =  method : A.randomNumber() : var0 
var13 =  method : A.normal() : var0 
var14 =  method : A.normal() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Making index 12 inactive (value is a primitive)
Making index 13 inactive (value is a primitive)
Making index 14 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var10 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var11 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var12 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var13 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var14 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=10 [var1]  : true
<randoop.PrimValue, value=0 [var2]  : true
<randoop.PrimValue, value=0 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=10 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true
<randoop.PrimValue, value=10 [var7]  : true
<randoop.PrimValue, value=0 [var8]  : true
<randoop.PrimValue, value=10 [var9]  : true
<randoop.PrimValue, value=0 [var10]  : true
<randoop.PrimValue, value=0 [var11]  : true
<randoop.PrimValue, value=0 [var12]  : true
<randoop.PrimValue, value=10 [var13]  : true
<randoop.PrimValue, value=10 [var14]  : true

allSequences.size()=439
-------------------------------------------
randoop.util.Randomness: total calls to random: 2679
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 438 sequences.
components: 438
randoop.util.Randomness: total calls to random: 2680
randoop.util.Randomness: total calls to random: 2681
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 2682
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 438 sequences.
components: 438
randoop.util.Randomness: total calls to random: 2683
randoop.util.Randomness: total calls to random: 2684
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.randomNumber() : var0 
var2 =  method : A.randomNumber() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.normal() : var0 
var6 =  method : A.randomNumber() : var0 
var7 =  method : A.randomNumber() : var0 
var8 =  method : A.normal() : var0 
var9 =  method : A.normal() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=0 [var1]  : true
<randoop.PrimValue, value=0 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=10 [var5]  : true
<randoop.PrimValue, value=0 [var6]  : true
<randoop.PrimValue, value=0 [var7]  : true
<randoop.PrimValue, value=10 [var8]  : true
<randoop.PrimValue, value=10 [var9]  : true

allSequences.size()=440
-------------------------------------------
randoop.util.Randomness: total calls to random: 2685
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 439 sequences.
components: 439
randoop.util.Randomness: total calls to random: 2686
randoop.util.Randomness: total calls to random: 2687
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.randomNumber() : var0 
var2 =  method : A.randomNumber() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.normal() : var0 
var6 =  method : A.randomNumber() : var0 
var7 =  method : A.normal() : var0 
var8 =  method : A.randomNumber() : var0 
var9 =  method : A.normal() : var0 
var10 =  method : A.normal() : var0 
var11 =  method : A.normal() : var0 
var12 =  method : A.randomNumber() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Making index 12 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var10 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var11 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var12 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=0 [var1]  : true
<randoop.PrimValue, value=0 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=10 [var5]  : true
<randoop.PrimValue, value=0 [var6]  : true
<randoop.PrimValue, value=10 [var7]  : true
<randoop.PrimValue, value=0 [var8]  : true
<randoop.PrimValue, value=10 [var9]  : true
<randoop.PrimValue, value=10 [var10]  : true
<randoop.PrimValue, value=10 [var11]  : true
<randoop.PrimValue, value=0 [var12]  : true

allSequences.size()=441
-------------------------------------------
randoop.util.Randomness: total calls to random: 2688
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 440 sequences.
components: 440
randoop.util.Randomness: total calls to random: 2689
randoop.util.Randomness: total calls to random: 2690
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 2691
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 440 sequences.
components: 440
randoop.util.Randomness: total calls to random: 2692
randoop.util.Randomness: total calls to random: 2693
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 2694
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 440 sequences.
components: 440
randoop.util.Randomness: total calls to random: 2695
randoop.util.Randomness: total calls to random: 2696
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.randomNumber() : var0 
var2 =  method : A.randomNumber() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.normal() : var0 
var6 =  method : A.normal() : var0 
var7 =  method : A.randomNumber() : var0 
var8 =  method : A.normal() : var0 
var9 =  method : A.normal() : var0 
var10 =  method : A.randomNumber() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var10 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=0 [var1]  : true
<randoop.PrimValue, value=0 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=10 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true
<randoop.PrimValue, value=0 [var7]  : true
<randoop.PrimValue, value=10 [var8]  : true
<randoop.PrimValue, value=10 [var9]  : true
<randoop.PrimValue, value=0 [var10]  : true

allSequences.size()=442
-------------------------------------------
randoop.util.Randomness: total calls to random: 2697
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 441 sequences.
components: 441
randoop.util.Randomness: total calls to random: 2698
randoop.util.Randomness: total calls to random: 2699
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.randomNumber() : var0 
var2 =  method : A.randomNumber() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.normal() : var0 
var5 =  method : A.normal() : var0 
var6 =  method : A.randomNumber() : var0 
var7 =  method : A.normal() : var0 
var8 =  method : A.normal() : var0 
var9 =  method : A.normal() : var0 
var10 =  method : A.randomNumber() : var0 
var11 =  method : A.normal() : var0 
var12 =  method : A.normal() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Making index 12 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var10 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var11 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var12 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=0 [var1]  : true
<randoop.PrimValue, value=0 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=10 [var4]  : true
<randoop.PrimValue, value=10 [var5]  : true
<randoop.PrimValue, value=0 [var6]  : true
<randoop.PrimValue, value=10 [var7]  : true
<randoop.PrimValue, value=10 [var8]  : true
<randoop.PrimValue, value=10 [var9]  : true
<randoop.PrimValue, value=0 [var10]  : true
<randoop.PrimValue, value=10 [var11]  : true
<randoop.PrimValue, value=10 [var12]  : true

allSequences.size()=443
-------------------------------------------
randoop.util.Randomness: total calls to random: 2700
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 442 sequences.
components: 442
randoop.util.Randomness: total calls to random: 2701
randoop.util.Randomness: total calls to random: 2702
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 2703
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 442 sequences.
components: 442
randoop.util.Randomness: total calls to random: 2704
randoop.util.Randomness: total calls to random: 2705
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 2706
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 442 sequences.
components: 442
randoop.util.Randomness: total calls to random: 2707
randoop.util.Randomness: total calls to random: 2708
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.normal() : var0 
var2 =  method : A.normal() : var0 
var3 =  method : A.randomNumber() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.randomNumber() : var0 
var6 =  method : A.randomNumber() : var0 
var7 =  method : A.normal() : var0 
var8 =  method : A.normal() : var0 
var9 =  method : A.randomNumber() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=10 [var1]  : true
<randoop.PrimValue, value=10 [var2]  : true
<randoop.PrimValue, value=0 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=0 [var5]  : true
<randoop.PrimValue, value=0 [var6]  : true
<randoop.PrimValue, value=10 [var7]  : true
<randoop.PrimValue, value=10 [var8]  : true
<randoop.PrimValue, value=0 [var9]  : true

allSequences.size()=444
-------------------------------------------
randoop.util.Randomness: total calls to random: 2709
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 443 sequences.
components: 443
randoop.util.Randomness: total calls to random: 2710
randoop.util.Randomness: total calls to random: 2711
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 2712
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 443 sequences.
components: 443
randoop.util.Randomness: total calls to random: 2713
randoop.util.Randomness: total calls to random: 2714
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 2715
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 443 sequences.
components: 443
randoop.util.Randomness: total calls to random: 2716
randoop.util.Randomness: total calls to random: 2717
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 2718
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 443 sequences.
components: 443
randoop.util.Randomness: total calls to random: 2719
randoop.util.Randomness: total calls to random: 2720
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.normal() : var0 
var2 =  method : A.normal() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.randomNumber() : var0 
var6 =  method : A.randomNumber() : var0 
var7 =  method : A.normal() : var0 
var8 =  method : A.randomNumber() : var0 
var9 =  method : A.normal() : var0 
var10 =  method : A.normal() : var0 
var11 =  method : A.normal() : var0 
var12 =  method : A.randomNumber() : var0 
var13 =  method : A.randomNumber() : var0 
var14 =  method : A.randomNumber() : var0 
var15 =  method : A.normal() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Making index 12 inactive (value is a primitive)
Making index 13 inactive (value is a primitive)
Making index 14 inactive (value is a primitive)
Making index 15 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var10 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var11 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var12 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var13 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var14 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var15 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=10 [var1]  : true
<randoop.PrimValue, value=10 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=0 [var5]  : true
<randoop.PrimValue, value=0 [var6]  : true
<randoop.PrimValue, value=10 [var7]  : true
<randoop.PrimValue, value=0 [var8]  : true
<randoop.PrimValue, value=10 [var9]  : true
<randoop.PrimValue, value=10 [var10]  : true
<randoop.PrimValue, value=10 [var11]  : true
<randoop.PrimValue, value=0 [var12]  : true
<randoop.PrimValue, value=0 [var13]  : true
<randoop.PrimValue, value=0 [var14]  : true
<randoop.PrimValue, value=10 [var15]  : true

allSequences.size()=445
-------------------------------------------
randoop.util.Randomness: total calls to random: 2721
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 444 sequences.
components: 444
randoop.util.Randomness: total calls to random: 2722
randoop.util.Randomness: total calls to random: 2723
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 2724
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 444 sequences.
components: 444
randoop.util.Randomness: total calls to random: 2725
randoop.util.Randomness: total calls to random: 2726
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 2727
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 444 sequences.
components: 444
randoop.util.Randomness: total calls to random: 2728
randoop.util.Randomness: total calls to random: 2729
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.normal() : var0 
var2 =  method : A.normal() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.normal() : var0 
var5 =  method : A.randomNumber() : var0 
var6 =  method : A.normal() : var0 
var7 =  method : A.normal() : var0 
var8 =  method : A.randomNumber() : var0 
var9 =  method : A.randomNumber() : var0 
var10 =  method : A.normal() : var0 
var11 =  method : A.normal() : var0 
var12 =  method : A.normal() : var0 
var13 =  method : A.normal() : var0 
var14 =  method : A.randomNumber() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Making index 12 inactive (value is a primitive)
Making index 13 inactive (value is a primitive)
Making index 14 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var10 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var11 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var12 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var13 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var14 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=10 [var1]  : true
<randoop.PrimValue, value=10 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=10 [var4]  : true
<randoop.PrimValue, value=0 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true
<randoop.PrimValue, value=10 [var7]  : true
<randoop.PrimValue, value=0 [var8]  : true
<randoop.PrimValue, value=0 [var9]  : true
<randoop.PrimValue, value=10 [var10]  : true
<randoop.PrimValue, value=10 [var11]  : true
<randoop.PrimValue, value=10 [var12]  : true
<randoop.PrimValue, value=10 [var13]  : true
<randoop.PrimValue, value=0 [var14]  : true

allSequences.size()=446
-------------------------------------------
randoop.util.Randomness: total calls to random: 2730
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 445 sequences.
components: 445
randoop.util.Randomness: total calls to random: 2731
randoop.util.Randomness: total calls to random: 2732
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.normal() : var0 
var2 =  method : A.randomNumber() : var0 
var3 =  method : A.randomNumber() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.normal() : var0 
var6 =  method : A.randomNumber() : var0 
var7 =  method : A.normal() : var0 
var8 =  method : A.randomNumber() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=10 [var1]  : true
<randoop.PrimValue, value=0 [var2]  : true
<randoop.PrimValue, value=0 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=10 [var5]  : true
<randoop.PrimValue, value=0 [var6]  : true
<randoop.PrimValue, value=10 [var7]  : true
<randoop.PrimValue, value=0 [var8]  : true

allSequences.size()=447
-------------------------------------------
randoop.util.Randomness: total calls to random: 2733
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 446 sequences.
components: 446
randoop.util.Randomness: total calls to random: 2734
randoop.util.Randomness: total calls to random: 2735
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 2736
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 446 sequences.
components: 446
randoop.util.Randomness: total calls to random: 2737
randoop.util.Randomness: total calls to random: 2738
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.normal() : var0 
var2 =  method : A.normal() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.normal() : var0 
var5 =  method : A.normal() : var0 
var6 =  method : A.normal() : var0 
var7 =  method : A.randomNumber() : var0 
var8 =  method : A.randomNumber() : var0 
var9 =  method : A.randomNumber() : var0 
var10 =  method : A.randomNumber() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var10 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=10 [var1]  : true
<randoop.PrimValue, value=10 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=10 [var4]  : true
<randoop.PrimValue, value=10 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true
<randoop.PrimValue, value=0 [var7]  : true
<randoop.PrimValue, value=0 [var8]  : true
<randoop.PrimValue, value=0 [var9]  : true
<randoop.PrimValue, value=0 [var10]  : true

allSequences.size()=448
-------------------------------------------
randoop.util.Randomness: total calls to random: 2739
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 447 sequences.
components: 447
randoop.util.Randomness: total calls to random: 2740
randoop.util.Randomness: total calls to random: 2741
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.normal() : var0 
var2 =  method : A.normal() : var0 
var3 =  method : A.randomNumber() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.randomNumber() : var0 
var6 =  method : A.normal() : var0 
var7 =  method : A.randomNumber() : var0 
var8 =  method : A.normal() : var0 
var9 =  method : A.normal() : var0 
var10 =  method : A.normal() : var0 
var11 =  method : A.normal() : var0 
var12 =  method : A.randomNumber() : var0 
var13 =  method : A.randomNumber() : var0 
var14 =  method : A.randomNumber() : var0 
var15 =  method : A.randomNumber() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Making index 12 inactive (value is a primitive)
Making index 13 inactive (value is a primitive)
Making index 14 inactive (value is a primitive)
Making index 15 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var10 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var11 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var12 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var13 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var14 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var15 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=10 [var1]  : true
<randoop.PrimValue, value=10 [var2]  : true
<randoop.PrimValue, value=0 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=0 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true
<randoop.PrimValue, value=0 [var7]  : true
<randoop.PrimValue, value=10 [var8]  : true
<randoop.PrimValue, value=10 [var9]  : true
<randoop.PrimValue, value=10 [var10]  : true
<randoop.PrimValue, value=10 [var11]  : true
<randoop.PrimValue, value=0 [var12]  : true
<randoop.PrimValue, value=0 [var13]  : true
<randoop.PrimValue, value=0 [var14]  : true
<randoop.PrimValue, value=0 [var15]  : true

allSequences.size()=449
-------------------------------------------
randoop.util.Randomness: total calls to random: 2742
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 448 sequences.
components: 448
randoop.util.Randomness: total calls to random: 2743
randoop.util.Randomness: total calls to random: 2744
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.normal() : var0 
var2 =  method : A.normal() : var0 
var3 =  method : A.randomNumber() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.randomNumber() : var0 
var6 =  method : A.normal() : var0 
var7 =  method : A.randomNumber() : var0 
var8 =  method : A.normal() : var0 
var9 =  method : A.normal() : var0 
var10 =  method : A.randomNumber() : var0 
var11 =  method : A.randomNumber() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var10 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var11 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=10 [var1]  : true
<randoop.PrimValue, value=10 [var2]  : true
<randoop.PrimValue, value=0 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=0 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true
<randoop.PrimValue, value=0 [var7]  : true
<randoop.PrimValue, value=10 [var8]  : true
<randoop.PrimValue, value=10 [var9]  : true
<randoop.PrimValue, value=0 [var10]  : true
<randoop.PrimValue, value=0 [var11]  : true

allSequences.size()=450
-------------------------------------------
randoop.util.Randomness: total calls to random: 2745
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 449 sequences.
components: 449
randoop.util.Randomness: total calls to random: 2746
randoop.util.Randomness: total calls to random: 2747
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 2748
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 449 sequences.
components: 449
randoop.util.Randomness: total calls to random: 2749
randoop.util.Randomness: total calls to random: 2750
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.randomNumber() : var0 
var2 =  method : A.randomNumber() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.normal() : var0 
var6 =  method : A.normal() : var0 
var7 =  method : A.randomNumber() : var0 
var8 =  method : A.normal() : var0 
var9 =  method : A.normal() : var0 
var10 =  method : A.normal() : var0 
var11 =  method : A.randomNumber() : var0 
var12 =  method : A.normal() : var0 
var13 =  method : A.randomNumber() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Making index 12 inactive (value is a primitive)
Making index 13 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var10 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var11 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var12 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var13 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=0 [var1]  : true
<randoop.PrimValue, value=0 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=10 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true
<randoop.PrimValue, value=0 [var7]  : true
<randoop.PrimValue, value=10 [var8]  : true
<randoop.PrimValue, value=10 [var9]  : true
<randoop.PrimValue, value=10 [var10]  : true
<randoop.PrimValue, value=0 [var11]  : true
<randoop.PrimValue, value=10 [var12]  : true
<randoop.PrimValue, value=0 [var13]  : true

allSequences.size()=451
-------------------------------------------
randoop.util.Randomness: total calls to random: 2751
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 450 sequences.
components: 450
randoop.util.Randomness: total calls to random: 2752
randoop.util.Randomness: total calls to random: 2753
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 2754
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 450 sequences.
components: 450
randoop.util.Randomness: total calls to random: 2755
randoop.util.Randomness: total calls to random: 2756
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 2757
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 450 sequences.
components: 450
randoop.util.Randomness: total calls to random: 2758
randoop.util.Randomness: total calls to random: 2759
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.randomNumber() : var0 
var2 =  method : A.randomNumber() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.normal() : var0 
var5 =  method : A.normal() : var0 
var6 =  method : A.randomNumber() : var0 
var7 =  method : A.normal() : var0 
var8 =  method : A.normal() : var0 
var9 =  method : A.normal() : var0 
var10 =  method : A.randomNumber() : var0 
var11 =  method : A.normal() : var0 
var12 =  method : A.normal() : var0 
var13 =  method : A.normal() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Making index 12 inactive (value is a primitive)
Making index 13 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var10 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var11 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var12 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var13 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=0 [var1]  : true
<randoop.PrimValue, value=0 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=10 [var4]  : true
<randoop.PrimValue, value=10 [var5]  : true
<randoop.PrimValue, value=0 [var6]  : true
<randoop.PrimValue, value=10 [var7]  : true
<randoop.PrimValue, value=10 [var8]  : true
<randoop.PrimValue, value=10 [var9]  : true
<randoop.PrimValue, value=0 [var10]  : true
<randoop.PrimValue, value=10 [var11]  : true
<randoop.PrimValue, value=10 [var12]  : true
<randoop.PrimValue, value=10 [var13]  : true

allSequences.size()=452
-------------------------------------------
randoop.util.Randomness: total calls to random: 2760
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 451 sequences.
components: 451
randoop.util.Randomness: total calls to random: 2761
randoop.util.Randomness: total calls to random: 2762
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.normal() : var0 
var2 =  method : A.randomNumber() : var0 
var3 =  method : A.randomNumber() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.normal() : var0 
var6 =  method : A.normal() : var0 
var7 =  method : A.normal() : var0 
var8 =  method : A.randomNumber() : var0 
var9 =  method : A.randomNumber() : var0 
var10 =  method : A.normal() : var0 
var11 =  method : A.normal() : var0 
var12 =  method : A.normal() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Making index 12 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var10 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var11 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var12 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=10 [var1]  : true
<randoop.PrimValue, value=0 [var2]  : true
<randoop.PrimValue, value=0 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=10 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true
<randoop.PrimValue, value=10 [var7]  : true
<randoop.PrimValue, value=0 [var8]  : true
<randoop.PrimValue, value=0 [var9]  : true
<randoop.PrimValue, value=10 [var10]  : true
<randoop.PrimValue, value=10 [var11]  : true
<randoop.PrimValue, value=10 [var12]  : true

allSequences.size()=453
-------------------------------------------
randoop.util.Randomness: total calls to random: 2763
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 452 sequences.
components: 452
randoop.util.Randomness: total calls to random: 2764
randoop.util.Randomness: total calls to random: 2765
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.normal() : var0 
var2 =  method : A.normal() : var0 
var3 =  method : A.randomNumber() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.randomNumber() : var0 
var6 =  method : A.normal() : var0 
var7 =  method : A.randomNumber() : var0 
var8 =  method : A.randomNumber() : var0 
var9 =  method : A.normal() : var0 
var10 =  method : A.randomNumber() : var0 
var11 =  method : A.normal() : var0 
var12 =  method : A.randomNumber() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Making index 12 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var10 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var11 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var12 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=10 [var1]  : true
<randoop.PrimValue, value=10 [var2]  : true
<randoop.PrimValue, value=0 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=0 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true
<randoop.PrimValue, value=0 [var7]  : true
<randoop.PrimValue, value=0 [var8]  : true
<randoop.PrimValue, value=10 [var9]  : true
<randoop.PrimValue, value=0 [var10]  : true
<randoop.PrimValue, value=10 [var11]  : true
<randoop.PrimValue, value=0 [var12]  : true

allSequences.size()=454
-------------------------------------------
randoop.util.Randomness: total calls to random: 2766
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 453 sequences.
components: 453
randoop.util.Randomness: total calls to random: 2767
randoop.util.Randomness: total calls to random: 2768
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.randomNumber() : var0 
var2 =  method : A.randomNumber() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.normal() : var0 
var6 =  method : A.normal() : var0 
var7 =  method : A.randomNumber() : var0 
var8 =  method : A.randomNumber() : var0 
var9 =  method : A.randomNumber() : var0 
var10 =  method : A.normal() : var0 
var11 =  method : A.randomNumber() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var10 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var11 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=0 [var1]  : true
<randoop.PrimValue, value=0 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=10 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true
<randoop.PrimValue, value=0 [var7]  : true
<randoop.PrimValue, value=0 [var8]  : true
<randoop.PrimValue, value=0 [var9]  : true
<randoop.PrimValue, value=10 [var10]  : true
<randoop.PrimValue, value=0 [var11]  : true

allSequences.size()=455
-------------------------------------------
randoop.util.Randomness: total calls to random: 2769
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 454 sequences.
components: 454
randoop.util.Randomness: total calls to random: 2770
randoop.util.Randomness: total calls to random: 2771
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.normal() : var0 
var2 =  method : A.normal() : var0 
var3 =  method : A.randomNumber() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.randomNumber() : var0 
var6 =  method : A.normal() : var0 
var7 =  method : A.randomNumber() : var0 
var8 =  method : A.normal() : var0 
var9 =  method : A.normal() : var0 
var10 =  method : A.normal() : var0 
var11 =  method : A.randomNumber() : var0 
var12 =  method : A.normal() : var0 
var13 =  method : A.normal() : var0 
var14 =  method : A.normal() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Making index 12 inactive (value is a primitive)
Making index 13 inactive (value is a primitive)
Making index 14 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var10 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var11 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var12 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var13 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var14 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=10 [var1]  : true
<randoop.PrimValue, value=10 [var2]  : true
<randoop.PrimValue, value=0 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=0 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true
<randoop.PrimValue, value=0 [var7]  : true
<randoop.PrimValue, value=10 [var8]  : true
<randoop.PrimValue, value=10 [var9]  : true
<randoop.PrimValue, value=10 [var10]  : true
<randoop.PrimValue, value=0 [var11]  : true
<randoop.PrimValue, value=10 [var12]  : true
<randoop.PrimValue, value=10 [var13]  : true
<randoop.PrimValue, value=10 [var14]  : true

allSequences.size()=456
-------------------------------------------
randoop.util.Randomness: total calls to random: 2772
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 455 sequences.
components: 455
randoop.util.Randomness: total calls to random: 2773
randoop.util.Randomness: total calls to random: 2774
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.randomNumber() : var0 
var2 =  method : A.randomNumber() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.normal() : var0 
var6 =  method : A.randomNumber() : var0 
var7 =  method : A.randomNumber() : var0 
var8 =  method : A.normal() : var0 
var9 =  method : A.normal() : var0 
var10 =  method : A.normal() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var10 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=0 [var1]  : true
<randoop.PrimValue, value=0 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=10 [var5]  : true
<randoop.PrimValue, value=0 [var6]  : true
<randoop.PrimValue, value=0 [var7]  : true
<randoop.PrimValue, value=10 [var8]  : true
<randoop.PrimValue, value=10 [var9]  : true
<randoop.PrimValue, value=10 [var10]  : true

allSequences.size()=457
-------------------------------------------
randoop.util.Randomness: total calls to random: 2775
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 456 sequences.
components: 456
randoop.util.Randomness: total calls to random: 2776
randoop.util.Randomness: total calls to random: 2777
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.randomNumber() : var0 
var2 =  method : A.randomNumber() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.normal() : var0 
var5 =  method : A.normal() : var0 
var6 =  method : A.randomNumber() : var0 
var7 =  method : A.normal() : var0 
var8 =  method : A.normal() : var0 
var9 =  method : A.normal() : var0 
var10 =  method : A.normal() : var0 
var11 =  method : A.randomNumber() : var0 
var12 =  method : A.normal() : var0 
var13 =  method : A.randomNumber() : var0 
var14 =  method : A.normal() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Making index 12 inactive (value is a primitive)
Making index 13 inactive (value is a primitive)
Making index 14 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var10 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var11 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var12 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var13 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var14 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=0 [var1]  : true
<randoop.PrimValue, value=0 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=10 [var4]  : true
<randoop.PrimValue, value=10 [var5]  : true
<randoop.PrimValue, value=0 [var6]  : true
<randoop.PrimValue, value=10 [var7]  : true
<randoop.PrimValue, value=10 [var8]  : true
<randoop.PrimValue, value=10 [var9]  : true
<randoop.PrimValue, value=10 [var10]  : true
<randoop.PrimValue, value=0 [var11]  : true
<randoop.PrimValue, value=10 [var12]  : true
<randoop.PrimValue, value=0 [var13]  : true
<randoop.PrimValue, value=10 [var14]  : true

allSequences.size()=458
-------------------------------------------
randoop.util.Randomness: total calls to random: 2778
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 457 sequences.
components: 457
randoop.util.Randomness: total calls to random: 2779
randoop.util.Randomness: total calls to random: 2780
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 2781
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 457 sequences.
components: 457
randoop.util.Randomness: total calls to random: 2782
randoop.util.Randomness: total calls to random: 2783
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 2784
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 457 sequences.
components: 457
randoop.util.Randomness: total calls to random: 2785
randoop.util.Randomness: total calls to random: 2786
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 2787
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 457 sequences.
components: 457
randoop.util.Randomness: total calls to random: 2788
randoop.util.Randomness: total calls to random: 2789
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.normal() : var0 
var2 =  method : A.normal() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.randomNumber() : var0 
var6 =  method : A.randomNumber() : var0 
var7 =  method : A.randomNumber() : var0 
var8 =  method : A.normal() : var0 
var9 =  method : A.randomNumber() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=10 [var1]  : true
<randoop.PrimValue, value=10 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=0 [var5]  : true
<randoop.PrimValue, value=0 [var6]  : true
<randoop.PrimValue, value=0 [var7]  : true
<randoop.PrimValue, value=10 [var8]  : true
<randoop.PrimValue, value=0 [var9]  : true

allSequences.size()=459
-------------------------------------------
randoop.util.Randomness: total calls to random: 2790
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 458 sequences.
components: 458
randoop.util.Randomness: total calls to random: 2791
randoop.util.Randomness: total calls to random: 2792
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.normal() : var0 
var2 =  method : A.normal() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.normal() : var0 
var6 =  method : A.normal() : var0 
var7 =  method : A.normal() : var0 
var8 =  method : A.randomNumber() : var0 
var9 =  method : A.randomNumber() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=10 [var1]  : true
<randoop.PrimValue, value=10 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=10 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true
<randoop.PrimValue, value=10 [var7]  : true
<randoop.PrimValue, value=0 [var8]  : true
<randoop.PrimValue, value=0 [var9]  : true

allSequences.size()=460
-------------------------------------------
randoop.util.Randomness: total calls to random: 2793
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 459 sequences.
components: 459
randoop.util.Randomness: total calls to random: 2794
randoop.util.Randomness: total calls to random: 2795
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 2796
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 459 sequences.
components: 459
randoop.util.Randomness: total calls to random: 2797
randoop.util.Randomness: total calls to random: 2798
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.randomNumber() : var0 
var2 =  method : A.randomNumber() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.normal() : var0 
var6 =  method : A.normal() : var0 
var7 =  method : A.randomNumber() : var0 
var8 =  method : A.normal() : var0 
var9 =  method : A.randomNumber() : var0 
var10 =  method : A.normal() : var0 
var11 =  method : A.normal() : var0 
var12 =  method : A.randomNumber() : var0 
var13 =  method : A.randomNumber() : var0 
var14 =  method : A.randomNumber() : var0 
var15 =  method : A.randomNumber() : var0 
var16 =  method : A.randomNumber() : var0 
var17 =  method : A.randomNumber() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Making index 12 inactive (value is a primitive)
Making index 13 inactive (value is a primitive)
Making index 14 inactive (value is a primitive)
Making index 15 inactive (value is a primitive)
Making index 16 inactive (value is a primitive)
Making index 17 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var10 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var11 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var12 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var13 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var14 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var15 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var16 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var17 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=0 [var1]  : true
<randoop.PrimValue, value=0 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=10 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true
<randoop.PrimValue, value=0 [var7]  : true
<randoop.PrimValue, value=10 [var8]  : true
<randoop.PrimValue, value=0 [var9]  : true
<randoop.PrimValue, value=10 [var10]  : true
<randoop.PrimValue, value=10 [var11]  : true
<randoop.PrimValue, value=0 [var12]  : true
<randoop.PrimValue, value=0 [var13]  : true
<randoop.PrimValue, value=0 [var14]  : true
<randoop.PrimValue, value=0 [var15]  : true
<randoop.PrimValue, value=0 [var16]  : true
<randoop.PrimValue, value=0 [var17]  : true

allSequences.size()=461
-------------------------------------------
randoop.util.Randomness: total calls to random: 2799
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 460 sequences.
components: 460
randoop.util.Randomness: total calls to random: 2800
randoop.util.Randomness: total calls to random: 2801
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 2802
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 460 sequences.
components: 460
randoop.util.Randomness: total calls to random: 2803
randoop.util.Randomness: total calls to random: 2804
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.randomNumber() : var0 
var2 =  method : A.normal() : var0 
var3 =  method : A.randomNumber() : var0 
var4 =  method : A.normal() : var0 
var5 =  method : A.normal() : var0 
var6 =  method : A.normal() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=0 [var1]  : true
<randoop.PrimValue, value=10 [var2]  : true
<randoop.PrimValue, value=0 [var3]  : true
<randoop.PrimValue, value=10 [var4]  : true
<randoop.PrimValue, value=10 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true

allSequences.size()=462
-------------------------------------------
randoop.util.Randomness: total calls to random: 2805
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 461 sequences.
components: 461
randoop.util.Randomness: total calls to random: 2806
randoop.util.Randomness: total calls to random: 2807
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 2808
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 461 sequences.
components: 461
randoop.util.Randomness: total calls to random: 2809
randoop.util.Randomness: total calls to random: 2810
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 2811
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 461 sequences.
components: 461
randoop.util.Randomness: total calls to random: 2812
randoop.util.Randomness: total calls to random: 2813
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 2814
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 461 sequences.
components: 461
randoop.util.Randomness: total calls to random: 2815
randoop.util.Randomness: total calls to random: 2816
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.normal() : var0 
var2 =  method : A.normal() : var0 
var3 =  method : A.randomNumber() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.randomNumber() : var0 
var6 =  method : A.normal() : var0 
var7 =  method : A.randomNumber() : var0 
var8 =  method : A.normal() : var0 
var9 =  method : A.randomNumber() : var0 
var10 =  method : A.randomNumber() : var0 
var11 =  method : A.randomNumber() : var0 
var12 =  method : A.normal() : var0 
var13 =  method : A.randomNumber() : var0 
var14 =  method : A.randomNumber() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Making index 12 inactive (value is a primitive)
Making index 13 inactive (value is a primitive)
Making index 14 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var10 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var11 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var12 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var13 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var14 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=10 [var1]  : true
<randoop.PrimValue, value=10 [var2]  : true
<randoop.PrimValue, value=0 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=0 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true
<randoop.PrimValue, value=0 [var7]  : true
<randoop.PrimValue, value=10 [var8]  : true
<randoop.PrimValue, value=0 [var9]  : true
<randoop.PrimValue, value=0 [var10]  : true
<randoop.PrimValue, value=0 [var11]  : true
<randoop.PrimValue, value=10 [var12]  : true
<randoop.PrimValue, value=0 [var13]  : true
<randoop.PrimValue, value=0 [var14]  : true

allSequences.size()=463
-------------------------------------------
randoop.util.Randomness: total calls to random: 2817
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 462 sequences.
components: 462
randoop.util.Randomness: total calls to random: 2818
randoop.util.Randomness: total calls to random: 2819
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 2820
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 462 sequences.
components: 462
randoop.util.Randomness: total calls to random: 2821
randoop.util.Randomness: total calls to random: 2822
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 2823
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 462 sequences.
components: 462
randoop.util.Randomness: total calls to random: 2824
randoop.util.Randomness: total calls to random: 2825
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.randomNumber() : var0 
var2 =  method : A.randomNumber() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.normal() : var0 
var6 =  method : A.normal() : var0 
var7 =  method : A.randomNumber() : var0 
var8 =  method : A.normal() : var0 
var9 =  method : A.randomNumber() : var0 
var10 =  method : A.normal() : var0 
var11 =  method : A.normal() : var0 
var12 =  method : A.randomNumber() : var0 
var13 =  method : A.randomNumber() : var0 
var14 =  method : A.normal() : var0 
var15 =  method : A.normal() : var0 
var16 =  method : A.randomNumber() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Making index 12 inactive (value is a primitive)
Making index 13 inactive (value is a primitive)
Making index 14 inactive (value is a primitive)
Making index 15 inactive (value is a primitive)
Making index 16 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var10 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var11 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var12 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var13 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var14 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var15 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var16 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=0 [var1]  : true
<randoop.PrimValue, value=0 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=10 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true
<randoop.PrimValue, value=0 [var7]  : true
<randoop.PrimValue, value=10 [var8]  : true
<randoop.PrimValue, value=0 [var9]  : true
<randoop.PrimValue, value=10 [var10]  : true
<randoop.PrimValue, value=10 [var11]  : true
<randoop.PrimValue, value=0 [var12]  : true
<randoop.PrimValue, value=0 [var13]  : true
<randoop.PrimValue, value=10 [var14]  : true
<randoop.PrimValue, value=10 [var15]  : true
<randoop.PrimValue, value=0 [var16]  : true

allSequences.size()=464
-------------------------------------------
randoop.util.Randomness: total calls to random: 2826
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 463 sequences.
components: 463
randoop.util.Randomness: total calls to random: 2827
randoop.util.Randomness: total calls to random: 2828
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.normal() : var0 
var2 =  method : A.randomNumber() : var0 
var3 =  method : A.randomNumber() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.normal() : var0 
var6 =  method : A.normal() : var0 
var7 =  method : A.normal() : var0 
var8 =  method : A.randomNumber() : var0 
var9 =  method : A.normal() : var0 
var10 =  method : A.randomNumber() : var0 
var11 =  method : A.randomNumber() : var0 
var12 =  method : A.normal() : var0 
var13 =  method : A.randomNumber() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Making index 12 inactive (value is a primitive)
Making index 13 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var10 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var11 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var12 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var13 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=10 [var1]  : true
<randoop.PrimValue, value=0 [var2]  : true
<randoop.PrimValue, value=0 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=10 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true
<randoop.PrimValue, value=10 [var7]  : true
<randoop.PrimValue, value=0 [var8]  : true
<randoop.PrimValue, value=10 [var9]  : true
<randoop.PrimValue, value=0 [var10]  : true
<randoop.PrimValue, value=0 [var11]  : true
<randoop.PrimValue, value=10 [var12]  : true
<randoop.PrimValue, value=0 [var13]  : true

allSequences.size()=465
-------------------------------------------
randoop.util.Randomness: total calls to random: 2829
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 464 sequences.
components: 464
randoop.util.Randomness: total calls to random: 2830
randoop.util.Randomness: total calls to random: 2831
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.randomNumber() : var0 
var2 =  method : A.randomNumber() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.normal() : var0 
var5 =  method : A.normal() : var0 
var6 =  method : A.randomNumber() : var0 
var7 =  method : A.randomNumber() : var0 
var8 =  method : A.randomNumber() : var0 
var9 =  method : A.normal() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=0 [var1]  : true
<randoop.PrimValue, value=0 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=10 [var4]  : true
<randoop.PrimValue, value=10 [var5]  : true
<randoop.PrimValue, value=0 [var6]  : true
<randoop.PrimValue, value=0 [var7]  : true
<randoop.PrimValue, value=0 [var8]  : true
<randoop.PrimValue, value=10 [var9]  : true

allSequences.size()=466
-------------------------------------------
randoop.util.Randomness: total calls to random: 2832
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 465 sequences.
components: 465
randoop.util.Randomness: total calls to random: 2833
randoop.util.Randomness: total calls to random: 2834
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.randomNumber() : var0 
var2 =  method : A.randomNumber() : var0 
var3 =  method : A.randomNumber() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.randomNumber() : var0 
var6 =  method : A.randomNumber() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=0 [var1]  : true
<randoop.PrimValue, value=0 [var2]  : true
<randoop.PrimValue, value=0 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=0 [var5]  : true
<randoop.PrimValue, value=0 [var6]  : true

allSequences.size()=467
-------------------------------------------
randoop.util.Randomness: total calls to random: 2835
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 466 sequences.
components: 466
randoop.util.Randomness: total calls to random: 2836
randoop.util.Randomness: total calls to random: 2837
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 2838
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 466 sequences.
components: 466
randoop.util.Randomness: total calls to random: 2839
randoop.util.Randomness: total calls to random: 2840
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 2841
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 466 sequences.
components: 466
randoop.util.Randomness: total calls to random: 2842
randoop.util.Randomness: total calls to random: 2843
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.normal() : var0 
var2 =  method : A.normal() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.normal() : var0 
var5 =  method : A.normal() : var0 
var6 =  method : A.randomNumber() : var0 
var7 =  method : A.randomNumber() : var0 
var8 =  method : A.randomNumber() : var0 
var9 =  method : A.normal() : var0 
var10 =  method : A.normal() : var0 
var11 =  method : A.normal() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var10 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var11 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=10 [var1]  : true
<randoop.PrimValue, value=10 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=10 [var4]  : true
<randoop.PrimValue, value=10 [var5]  : true
<randoop.PrimValue, value=0 [var6]  : true
<randoop.PrimValue, value=0 [var7]  : true
<randoop.PrimValue, value=0 [var8]  : true
<randoop.PrimValue, value=10 [var9]  : true
<randoop.PrimValue, value=10 [var10]  : true
<randoop.PrimValue, value=10 [var11]  : true

allSequences.size()=468
-------------------------------------------
randoop.util.Randomness: total calls to random: 2844
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 467 sequences.
components: 467
randoop.util.Randomness: total calls to random: 2845
randoop.util.Randomness: total calls to random: 2846
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 2847
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 467 sequences.
components: 467
randoop.util.Randomness: total calls to random: 2848
randoop.util.Randomness: total calls to random: 2849
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 2850
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 467 sequences.
components: 467
randoop.util.Randomness: total calls to random: 2851
randoop.util.Randomness: total calls to random: 2852
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 2853
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 467 sequences.
components: 467
randoop.util.Randomness: total calls to random: 2854
randoop.util.Randomness: total calls to random: 2855
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.normal() : var0 
var2 =  method : A.normal() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.randomNumber() : var0 
var6 =  method : A.normal() : var0 
var7 =  method : A.normal() : var0 
var8 =  method : A.randomNumber() : var0 
var9 =  method : A.normal() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=10 [var1]  : true
<randoop.PrimValue, value=10 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=0 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true
<randoop.PrimValue, value=10 [var7]  : true
<randoop.PrimValue, value=0 [var8]  : true
<randoop.PrimValue, value=10 [var9]  : true

allSequences.size()=469
-------------------------------------------
randoop.util.Randomness: total calls to random: 2856
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 468 sequences.
components: 468
randoop.util.Randomness: total calls to random: 2857
randoop.util.Randomness: total calls to random: 2858
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.normal() : var0 
var2 =  method : A.normal() : var0 
var3 =  method : A.randomNumber() : var0 
var4 =  method : A.normal() : var0 
var5 =  method : A.randomNumber() : var0 
var6 =  method : A.randomNumber() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=10 [var1]  : true
<randoop.PrimValue, value=10 [var2]  : true
<randoop.PrimValue, value=0 [var3]  : true
<randoop.PrimValue, value=10 [var4]  : true
<randoop.PrimValue, value=0 [var5]  : true
<randoop.PrimValue, value=0 [var6]  : true

allSequences.size()=470
-------------------------------------------
randoop.util.Randomness: total calls to random: 2859
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 469 sequences.
components: 469
randoop.util.Randomness: total calls to random: 2860
randoop.util.Randomness: total calls to random: 2861
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 2862
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 469 sequences.
components: 469
randoop.util.Randomness: total calls to random: 2863
randoop.util.Randomness: total calls to random: 2864
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.randomNumber() : var0 
var2 =  method : A.randomNumber() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.normal() : var0 
var5 =  method : A.normal() : var0 
var6 =  method : A.randomNumber() : var0 
var7 =  method : A.randomNumber() : var0 
var8 =  method : A.randomNumber() : var0 
var9 =  method : A.randomNumber() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=0 [var1]  : true
<randoop.PrimValue, value=0 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=10 [var4]  : true
<randoop.PrimValue, value=10 [var5]  : true
<randoop.PrimValue, value=0 [var6]  : true
<randoop.PrimValue, value=0 [var7]  : true
<randoop.PrimValue, value=0 [var8]  : true
<randoop.PrimValue, value=0 [var9]  : true

allSequences.size()=471
-------------------------------------------
randoop.util.Randomness: total calls to random: 2865
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 470 sequences.
components: 470
randoop.util.Randomness: total calls to random: 2866
randoop.util.Randomness: total calls to random: 2867
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.normal() : var0 
var2 =  method : A.normal() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.normal() : var0 
var5 =  method : A.normal() : var0 
var6 =  method : A.normal() : var0 
var7 =  method : A.randomNumber() : var0 
var8 =  method : A.normal() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=10 [var1]  : true
<randoop.PrimValue, value=10 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=10 [var4]  : true
<randoop.PrimValue, value=10 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true
<randoop.PrimValue, value=0 [var7]  : true
<randoop.PrimValue, value=10 [var8]  : true

allSequences.size()=472
-------------------------------------------
randoop.util.Randomness: total calls to random: 2868
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 471 sequences.
components: 471
randoop.util.Randomness: total calls to random: 2869
randoop.util.Randomness: total calls to random: 2870
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.randomNumber() : var0 
var2 =  method : A.normal() : var0 
var3 =  method : A.randomNumber() : var0 
var4 =  method : A.normal() : var0 
var5 =  method : A.normal() : var0 
var6 =  method : A.randomNumber() : var0 
var7 =  method : A.normal() : var0 
var8 =  method : A.randomNumber() : var0 
var9 =  method : A.randomNumber() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=0 [var1]  : true
<randoop.PrimValue, value=10 [var2]  : true
<randoop.PrimValue, value=0 [var3]  : true
<randoop.PrimValue, value=10 [var4]  : true
<randoop.PrimValue, value=10 [var5]  : true
<randoop.PrimValue, value=0 [var6]  : true
<randoop.PrimValue, value=10 [var7]  : true
<randoop.PrimValue, value=0 [var8]  : true
<randoop.PrimValue, value=0 [var9]  : true

allSequences.size()=473
-------------------------------------------
randoop.util.Randomness: total calls to random: 2871
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 472 sequences.
components: 472
randoop.util.Randomness: total calls to random: 2872
randoop.util.Randomness: total calls to random: 2873
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 2874
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 472 sequences.
components: 472
randoop.util.Randomness: total calls to random: 2875
randoop.util.Randomness: total calls to random: 2876
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 2877
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 472 sequences.
components: 472
randoop.util.Randomness: total calls to random: 2878
randoop.util.Randomness: total calls to random: 2879
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 2880
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 472 sequences.
components: 472
randoop.util.Randomness: total calls to random: 2881
randoop.util.Randomness: total calls to random: 2882
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 2883
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 472 sequences.
components: 472
randoop.util.Randomness: total calls to random: 2884
randoop.util.Randomness: total calls to random: 2885
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.normal() : var0 
var2 =  method : A.normal() : var0 
var3 =  method : A.randomNumber() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.randomNumber() : var0 
var6 =  method : A.randomNumber() : var0 
var7 =  method : A.normal() : var0 
var8 =  method : A.normal() : var0 
var9 =  method : A.normal() : var0 
var10 =  method : A.normal() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var10 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=10 [var1]  : true
<randoop.PrimValue, value=10 [var2]  : true
<randoop.PrimValue, value=0 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=0 [var5]  : true
<randoop.PrimValue, value=0 [var6]  : true
<randoop.PrimValue, value=10 [var7]  : true
<randoop.PrimValue, value=10 [var8]  : true
<randoop.PrimValue, value=10 [var9]  : true
<randoop.PrimValue, value=10 [var10]  : true

allSequences.size()=474
-------------------------------------------
randoop.util.Randomness: total calls to random: 2886
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 473 sequences.
components: 473
randoop.util.Randomness: total calls to random: 2887
randoop.util.Randomness: total calls to random: 2888
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.randomNumber() : var0 
var2 =  method : A.randomNumber() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.normal() : var0 
var6 =  method : A.normal() : var0 
var7 =  method : A.randomNumber() : var0 
var8 =  method : A.normal() : var0 
var9 =  method : A.randomNumber() : var0 
var10 =  method : A.randomNumber() : var0 
var11 =  method : A.normal() : var0 
var12 =  method : A.normal() : var0 
var13 =  method : A.randomNumber() : var0 
var14 =  method : A.randomNumber() : var0 
var15 =  method : A.normal() : var0 
var16 =  method : A.randomNumber() : var0 
var17 =  method : A.normal() : var0 
var18 =  method : A.randomNumber() : var0 
var19 =  method : A.normal() : var0 
var20 =  method : A.normal() : var0 
var21 =  method : A.normal() : var0 
var22 =  method : A.randomNumber() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Making index 12 inactive (value is a primitive)
Making index 13 inactive (value is a primitive)
Making index 14 inactive (value is a primitive)
Making index 15 inactive (value is a primitive)
Making index 16 inactive (value is a primitive)
Making index 17 inactive (value is a primitive)
Making index 18 inactive (value is a primitive)
Making index 19 inactive (value is a primitive)
Making index 20 inactive (value is a primitive)
Making index 21 inactive (value is a primitive)
Making index 22 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var10 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var11 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var12 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var13 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var14 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var15 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var16 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var17 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var18 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var19 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var20 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var21 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var22 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=0 [var1]  : true
<randoop.PrimValue, value=0 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=10 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true
<randoop.PrimValue, value=0 [var7]  : true
<randoop.PrimValue, value=10 [var8]  : true
<randoop.PrimValue, value=0 [var9]  : true
<randoop.PrimValue, value=0 [var10]  : true
<randoop.PrimValue, value=10 [var11]  : true
<randoop.PrimValue, value=10 [var12]  : true
<randoop.PrimValue, value=0 [var13]  : true
<randoop.PrimValue, value=0 [var14]  : true
<randoop.PrimValue, value=10 [var15]  : true
<randoop.PrimValue, value=0 [var16]  : true
<randoop.PrimValue, value=10 [var17]  : true
<randoop.PrimValue, value=0 [var18]  : true
<randoop.PrimValue, value=10 [var19]  : true
<randoop.PrimValue, value=10 [var20]  : true
<randoop.PrimValue, value=10 [var21]  : true
<randoop.PrimValue, value=0 [var22]  : true

allSequences.size()=475
-------------------------------------------
randoop.util.Randomness: total calls to random: 2889
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 474 sequences.
components: 474
randoop.util.Randomness: total calls to random: 2890
randoop.util.Randomness: total calls to random: 2891
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 2892
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 474 sequences.
components: 474
randoop.util.Randomness: total calls to random: 2893
randoop.util.Randomness: total calls to random: 2894
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.normal() : var0 
var2 =  method : A.normal() : var0 
var3 =  method : A.randomNumber() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.normal() : var0 
var6 =  method : A.normal() : var0 
var7 =  method : A.randomNumber() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=10 [var1]  : true
<randoop.PrimValue, value=10 [var2]  : true
<randoop.PrimValue, value=0 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=10 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true
<randoop.PrimValue, value=0 [var7]  : true

allSequences.size()=476
-------------------------------------------
randoop.util.Randomness: total calls to random: 2895
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 475 sequences.
components: 475
randoop.util.Randomness: total calls to random: 2896
randoop.util.Randomness: total calls to random: 2897
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.normal() : var0 
var2 =  method : A.normal() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.normal() : var0 
var5 =  method : A.randomNumber() : var0 
var6 =  method : A.normal() : var0 
var7 =  method : A.normal() : var0 
var8 =  method : A.normal() : var0 
var9 =  method : A.randomNumber() : var0 
var10 =  method : A.randomNumber() : var0 
var11 =  method : A.randomNumber() : var0 
var12 =  method : A.randomNumber() : var0 
var13 =  method : A.normal() : var0 
var14 =  method : A.normal() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Making index 12 inactive (value is a primitive)
Making index 13 inactive (value is a primitive)
Making index 14 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var10 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var11 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var12 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var13 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var14 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=10 [var1]  : true
<randoop.PrimValue, value=10 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=10 [var4]  : true
<randoop.PrimValue, value=0 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true
<randoop.PrimValue, value=10 [var7]  : true
<randoop.PrimValue, value=10 [var8]  : true
<randoop.PrimValue, value=0 [var9]  : true
<randoop.PrimValue, value=0 [var10]  : true
<randoop.PrimValue, value=0 [var11]  : true
<randoop.PrimValue, value=0 [var12]  : true
<randoop.PrimValue, value=10 [var13]  : true
<randoop.PrimValue, value=10 [var14]  : true

allSequences.size()=477
-------------------------------------------
randoop.util.Randomness: total calls to random: 2898
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 476 sequences.
components: 476
randoop.util.Randomness: total calls to random: 2899
randoop.util.Randomness: total calls to random: 2900
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 2901
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 476 sequences.
components: 476
randoop.util.Randomness: total calls to random: 2902
randoop.util.Randomness: total calls to random: 2903
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.randomNumber() : var0 
var2 =  method : A.randomNumber() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.normal() : var0 
var6 =  method : A.normal() : var0 
var7 =  method : A.randomNumber() : var0 
var8 =  method : A.randomNumber() : var0 
var9 =  method : A.randomNumber() : var0 
var10 =  method : A.randomNumber() : var0 
var11 =  method : A.normal() : var0 
var12 =  method : A.normal() : var0 
var13 =  method : A.randomNumber() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Making index 12 inactive (value is a primitive)
Making index 13 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var10 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var11 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var12 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var13 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=0 [var1]  : true
<randoop.PrimValue, value=0 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=10 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true
<randoop.PrimValue, value=0 [var7]  : true
<randoop.PrimValue, value=0 [var8]  : true
<randoop.PrimValue, value=0 [var9]  : true
<randoop.PrimValue, value=0 [var10]  : true
<randoop.PrimValue, value=10 [var11]  : true
<randoop.PrimValue, value=10 [var12]  : true
<randoop.PrimValue, value=0 [var13]  : true

allSequences.size()=478
-------------------------------------------
randoop.util.Randomness: total calls to random: 2904
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 477 sequences.
components: 477
randoop.util.Randomness: total calls to random: 2905
randoop.util.Randomness: total calls to random: 2906
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 2907
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 477 sequences.
components: 477
randoop.util.Randomness: total calls to random: 2908
randoop.util.Randomness: total calls to random: 2909
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 2910
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 477 sequences.
components: 477
randoop.util.Randomness: total calls to random: 2911
randoop.util.Randomness: total calls to random: 2912
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.randomNumber() : var0 
var2 =  method : A.randomNumber() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.normal() : var0 
var5 =  method : A.normal() : var0 
var6 =  method : A.randomNumber() : var0 
var7 =  method : A.normal() : var0 
var8 =  method : A.normal() : var0 
var9 =  method : A.normal() : var0 
var10 =  method : A.randomNumber() : var0 
var11 =  method : A.normal() : var0 
var12 =  method : A.normal() : var0 
var13 =  method : A.randomNumber() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Making index 12 inactive (value is a primitive)
Making index 13 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var10 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var11 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var12 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var13 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=0 [var1]  : true
<randoop.PrimValue, value=0 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=10 [var4]  : true
<randoop.PrimValue, value=10 [var5]  : true
<randoop.PrimValue, value=0 [var6]  : true
<randoop.PrimValue, value=10 [var7]  : true
<randoop.PrimValue, value=10 [var8]  : true
<randoop.PrimValue, value=10 [var9]  : true
<randoop.PrimValue, value=0 [var10]  : true
<randoop.PrimValue, value=10 [var11]  : true
<randoop.PrimValue, value=10 [var12]  : true
<randoop.PrimValue, value=0 [var13]  : true

allSequences.size()=479
-------------------------------------------
randoop.util.Randomness: total calls to random: 2913
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 478 sequences.
components: 478
randoop.util.Randomness: total calls to random: 2914
randoop.util.Randomness: total calls to random: 2915
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.normal() : var0 
var2 =  method : A.normal() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.normal() : var0 
var5 =  method : A.normal() : var0 
var6 =  method : A.randomNumber() : var0 
var7 =  method : A.normal() : var0 
var8 =  method : A.normal() : var0 
var9 =  method : A.randomNumber() : var0 
var10 =  method : A.normal() : var0 
var11 =  method : A.randomNumber() : var0 
var12 =  method : A.randomNumber() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Making index 12 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var10 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var11 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var12 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=10 [var1]  : true
<randoop.PrimValue, value=10 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=10 [var4]  : true
<randoop.PrimValue, value=10 [var5]  : true
<randoop.PrimValue, value=0 [var6]  : true
<randoop.PrimValue, value=10 [var7]  : true
<randoop.PrimValue, value=10 [var8]  : true
<randoop.PrimValue, value=0 [var9]  : true
<randoop.PrimValue, value=10 [var10]  : true
<randoop.PrimValue, value=0 [var11]  : true
<randoop.PrimValue, value=0 [var12]  : true

allSequences.size()=480
-------------------------------------------
randoop.util.Randomness: total calls to random: 2916
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 479 sequences.
components: 479
randoop.util.Randomness: total calls to random: 2917
randoop.util.Randomness: total calls to random: 2918
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.normal() : var0 
var2 =  method : A.normal() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.normal() : var0 
var5 =  method : A.randomNumber() : var0 
var6 =  method : A.normal() : var0 
var7 =  method : A.normal() : var0 
var8 =  method : A.randomNumber() : var0 
var9 =  method : A.randomNumber() : var0 
var10 =  method : A.normal() : var0 
var11 =  method : A.normal() : var0 
var12 =  method : A.normal() : var0 
var13 =  method : A.randomNumber() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Making index 12 inactive (value is a primitive)
Making index 13 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var10 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var11 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var12 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var13 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=10 [var1]  : true
<randoop.PrimValue, value=10 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=10 [var4]  : true
<randoop.PrimValue, value=0 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true
<randoop.PrimValue, value=10 [var7]  : true
<randoop.PrimValue, value=0 [var8]  : true
<randoop.PrimValue, value=0 [var9]  : true
<randoop.PrimValue, value=10 [var10]  : true
<randoop.PrimValue, value=10 [var11]  : true
<randoop.PrimValue, value=10 [var12]  : true
<randoop.PrimValue, value=0 [var13]  : true

allSequences.size()=481
-------------------------------------------
randoop.util.Randomness: total calls to random: 2919
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 480 sequences.
components: 480
randoop.util.Randomness: total calls to random: 2920
randoop.util.Randomness: total calls to random: 2921
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 2922
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 480 sequences.
components: 480
randoop.util.Randomness: total calls to random: 2923
randoop.util.Randomness: total calls to random: 2924
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 2925
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 480 sequences.
components: 480
randoop.util.Randomness: total calls to random: 2926
randoop.util.Randomness: total calls to random: 2927
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.normal() : var0 
var2 =  method : A.normal() : var0 
var3 =  method : A.randomNumber() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.randomNumber() : var0 
var6 =  method : A.normal() : var0 
var7 =  method : A.randomNumber() : var0 
var8 =  method : A.normal() : var0 
var9 =  method : A.randomNumber() : var0 
var10 =  method : A.randomNumber() : var0 
var11 =  method : A.randomNumber() : var0 
var12 =  method : A.randomNumber() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Making index 12 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var10 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var11 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var12 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=10 [var1]  : true
<randoop.PrimValue, value=10 [var2]  : true
<randoop.PrimValue, value=0 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=0 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true
<randoop.PrimValue, value=0 [var7]  : true
<randoop.PrimValue, value=10 [var8]  : true
<randoop.PrimValue, value=0 [var9]  : true
<randoop.PrimValue, value=0 [var10]  : true
<randoop.PrimValue, value=0 [var11]  : true
<randoop.PrimValue, value=0 [var12]  : true

allSequences.size()=482
-------------------------------------------
randoop.util.Randomness: total calls to random: 2928
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 481 sequences.
components: 481
randoop.util.Randomness: total calls to random: 2929
randoop.util.Randomness: total calls to random: 2930
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 2931
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 481 sequences.
components: 481
randoop.util.Randomness: total calls to random: 2932
randoop.util.Randomness: total calls to random: 2933
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.normal() : var0 
var2 =  method : A.normal() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.normal() : var0 
var5 =  method : A.randomNumber() : var0 
var6 =  method : A.normal() : var0 
var7 =  method : A.randomNumber() : var0 
var8 =  method : A.normal() : var0 
var9 =  method : A.normal() : var0 
var10 =  method : A.randomNumber() : var0 
var11 =  method : A.randomNumber() : var0 
var12 =  method : A.normal() : var0 
var13 =  method : A.randomNumber() : var0 
var14 =  method : A.normal() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Making index 12 inactive (value is a primitive)
Making index 13 inactive (value is a primitive)
Making index 14 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var10 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var11 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var12 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var13 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var14 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=10 [var1]  : true
<randoop.PrimValue, value=10 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=10 [var4]  : true
<randoop.PrimValue, value=0 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true
<randoop.PrimValue, value=0 [var7]  : true
<randoop.PrimValue, value=10 [var8]  : true
<randoop.PrimValue, value=10 [var9]  : true
<randoop.PrimValue, value=0 [var10]  : true
<randoop.PrimValue, value=0 [var11]  : true
<randoop.PrimValue, value=10 [var12]  : true
<randoop.PrimValue, value=0 [var13]  : true
<randoop.PrimValue, value=10 [var14]  : true

allSequences.size()=483
-------------------------------------------
randoop.util.Randomness: total calls to random: 2934
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 482 sequences.
components: 482
randoop.util.Randomness: total calls to random: 2935
randoop.util.Randomness: total calls to random: 2936
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 2937
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 482 sequences.
components: 482
randoop.util.Randomness: total calls to random: 2938
randoop.util.Randomness: total calls to random: 2939
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.randomNumber() : var0 
var2 =  method : A.normal() : var0 
var3 =  method : A.randomNumber() : var0 
var4 =  method : A.normal() : var0 
var5 =  method : A.normal() : var0 
var6 =  method : A.randomNumber() : var0 
var7 =  method : A.normal() : var0 
var8 =  method : A.normal() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=0 [var1]  : true
<randoop.PrimValue, value=10 [var2]  : true
<randoop.PrimValue, value=0 [var3]  : true
<randoop.PrimValue, value=10 [var4]  : true
<randoop.PrimValue, value=10 [var5]  : true
<randoop.PrimValue, value=0 [var6]  : true
<randoop.PrimValue, value=10 [var7]  : true
<randoop.PrimValue, value=10 [var8]  : true

allSequences.size()=484
-------------------------------------------
randoop.util.Randomness: total calls to random: 2940
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 483 sequences.
components: 483
randoop.util.Randomness: total calls to random: 2941
randoop.util.Randomness: total calls to random: 2942
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 2943
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 483 sequences.
components: 483
randoop.util.Randomness: total calls to random: 2944
randoop.util.Randomness: total calls to random: 2945
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.randomNumber() : var0 
var2 =  method : A.randomNumber() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.normal() : var0 
var6 =  method : A.normal() : var0 
var7 =  method : A.randomNumber() : var0 
var8 =  method : A.normal() : var0 
var9 =  method : A.randomNumber() : var0 
var10 =  method : A.normal() : var0 
var11 =  method : A.normal() : var0 
var12 =  method : A.randomNumber() : var0 
var13 =  method : A.randomNumber() : var0 
var14 =  method : A.randomNumber() : var0 
var15 =  method : A.normal() : var0 
var16 =  method : A.normal() : var0 
var17 =  method : A.randomNumber() : var0 
var18 =  method : A.randomNumber() : var0 
var19 =  method : A.randomNumber() : var0 
var20 =  method : A.normal() : var0 
var21 =  method : A.randomNumber() : var0 
var22 =  method : A.normal() : var0 
var23 =  method : A.randomNumber() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Making index 12 inactive (value is a primitive)
Making index 13 inactive (value is a primitive)
Making index 14 inactive (value is a primitive)
Making index 15 inactive (value is a primitive)
Making index 16 inactive (value is a primitive)
Making index 17 inactive (value is a primitive)
Making index 18 inactive (value is a primitive)
Making index 19 inactive (value is a primitive)
Making index 20 inactive (value is a primitive)
Making index 21 inactive (value is a primitive)
Making index 22 inactive (value is a primitive)
Making index 23 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var10 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var11 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var12 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var13 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var14 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var15 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var16 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var17 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var18 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var19 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var20 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var21 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var22 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var23 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=0 [var1]  : true
<randoop.PrimValue, value=0 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=10 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true
<randoop.PrimValue, value=0 [var7]  : true
<randoop.PrimValue, value=10 [var8]  : true
<randoop.PrimValue, value=0 [var9]  : true
<randoop.PrimValue, value=10 [var10]  : true
<randoop.PrimValue, value=10 [var11]  : true
<randoop.PrimValue, value=0 [var12]  : true
<randoop.PrimValue, value=0 [var13]  : true
<randoop.PrimValue, value=0 [var14]  : true
<randoop.PrimValue, value=10 [var15]  : true
<randoop.PrimValue, value=10 [var16]  : true
<randoop.PrimValue, value=0 [var17]  : true
<randoop.PrimValue, value=0 [var18]  : true
<randoop.PrimValue, value=0 [var19]  : true
<randoop.PrimValue, value=10 [var20]  : true
<randoop.PrimValue, value=0 [var21]  : true
<randoop.PrimValue, value=10 [var22]  : true
<randoop.PrimValue, value=0 [var23]  : true

allSequences.size()=485
-------------------------------------------
randoop.util.Randomness: total calls to random: 2946
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 484 sequences.
components: 484
randoop.util.Randomness: total calls to random: 2947
randoop.util.Randomness: total calls to random: 2948
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.randomNumber() : var0 
var2 =  method : A.randomNumber() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.normal() : var0 
var5 =  method : A.normal() : var0 
var6 =  method : A.randomNumber() : var0 
var7 =  method : A.normal() : var0 
var8 =  method : A.normal() : var0 
var9 =  method : A.randomNumber() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=0 [var1]  : true
<randoop.PrimValue, value=0 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=10 [var4]  : true
<randoop.PrimValue, value=10 [var5]  : true
<randoop.PrimValue, value=0 [var6]  : true
<randoop.PrimValue, value=10 [var7]  : true
<randoop.PrimValue, value=10 [var8]  : true
<randoop.PrimValue, value=0 [var9]  : true

allSequences.size()=486
-------------------------------------------
randoop.util.Randomness: total calls to random: 2949
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 485 sequences.
components: 485
randoop.util.Randomness: total calls to random: 2950
randoop.util.Randomness: total calls to random: 2951
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.normal() : var0 
var2 =  method : A.normal() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.normal() : var0 
var5 =  method : A.randomNumber() : var0 
var6 =  method : A.normal() : var0 
var7 =  method : A.normal() : var0 
var8 =  method : A.randomNumber() : var0 
var9 =  method : A.randomNumber() : var0 
var10 =  method : A.normal() : var0 
var11 =  method : A.normal() : var0 
var12 =  method : A.randomNumber() : var0 
var13 =  method : A.randomNumber() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Making index 12 inactive (value is a primitive)
Making index 13 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var10 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var11 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var12 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var13 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=10 [var1]  : true
<randoop.PrimValue, value=10 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=10 [var4]  : true
<randoop.PrimValue, value=0 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true
<randoop.PrimValue, value=10 [var7]  : true
<randoop.PrimValue, value=0 [var8]  : true
<randoop.PrimValue, value=0 [var9]  : true
<randoop.PrimValue, value=10 [var10]  : true
<randoop.PrimValue, value=10 [var11]  : true
<randoop.PrimValue, value=0 [var12]  : true
<randoop.PrimValue, value=0 [var13]  : true

allSequences.size()=487
-------------------------------------------
randoop.util.Randomness: total calls to random: 2952
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 486 sequences.
components: 486
randoop.util.Randomness: total calls to random: 2953
randoop.util.Randomness: total calls to random: 2954
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 2955
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 486 sequences.
components: 486
randoop.util.Randomness: total calls to random: 2956
randoop.util.Randomness: total calls to random: 2957
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 2958
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 486 sequences.
components: 486
randoop.util.Randomness: total calls to random: 2959
randoop.util.Randomness: total calls to random: 2960
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.normal() : var0 
var2 =  method : A.randomNumber() : var0 
var3 =  method : A.randomNumber() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.normal() : var0 
var6 =  method : A.normal() : var0 
var7 =  method : A.normal() : var0 
var8 =  method : A.randomNumber() : var0 
var9 =  method : A.normal() : var0 
var10 =  method : A.randomNumber() : var0 
var11 =  method : A.randomNumber() : var0 
var12 =  method : A.randomNumber() : var0 
var13 =  method : A.normal() : var0 
var14 =  method : A.normal() : var0 
var15 =  method : A.randomNumber() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Making index 12 inactive (value is a primitive)
Making index 13 inactive (value is a primitive)
Making index 14 inactive (value is a primitive)
Making index 15 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var10 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var11 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var12 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var13 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var14 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var15 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=10 [var1]  : true
<randoop.PrimValue, value=0 [var2]  : true
<randoop.PrimValue, value=0 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=10 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true
<randoop.PrimValue, value=10 [var7]  : true
<randoop.PrimValue, value=0 [var8]  : true
<randoop.PrimValue, value=10 [var9]  : true
<randoop.PrimValue, value=0 [var10]  : true
<randoop.PrimValue, value=0 [var11]  : true
<randoop.PrimValue, value=0 [var12]  : true
<randoop.PrimValue, value=10 [var13]  : true
<randoop.PrimValue, value=10 [var14]  : true
<randoop.PrimValue, value=0 [var15]  : true

allSequences.size()=488
-------------------------------------------
randoop.util.Randomness: total calls to random: 2961
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 487 sequences.
components: 487
randoop.util.Randomness: total calls to random: 2962
randoop.util.Randomness: total calls to random: 2963
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 2964
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 487 sequences.
components: 487
randoop.util.Randomness: total calls to random: 2965
randoop.util.Randomness: total calls to random: 2966
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 2967
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 487 sequences.
components: 487
randoop.util.Randomness: total calls to random: 2968
randoop.util.Randomness: total calls to random: 2969
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 2970
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 487 sequences.
components: 487
randoop.util.Randomness: total calls to random: 2971
randoop.util.Randomness: total calls to random: 2972
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 2973
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 487 sequences.
components: 487
randoop.util.Randomness: total calls to random: 2974
randoop.util.Randomness: total calls to random: 2975
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 2976
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 487 sequences.
components: 487
randoop.util.Randomness: total calls to random: 2977
randoop.util.Randomness: total calls to random: 2978
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.normal() : var0 
var2 =  method : A.normal() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.randomNumber() : var0 
var6 =  method : A.randomNumber() : var0 
var7 =  method : A.normal() : var0 
var8 =  method : A.randomNumber() : var0 
var9 =  method : A.normal() : var0 
var10 =  method : A.randomNumber() : var0 
var11 =  method : A.randomNumber() : var0 
var12 =  method : A.normal() : var0 
var13 =  method : A.randomNumber() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Making index 12 inactive (value is a primitive)
Making index 13 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var10 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var11 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var12 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var13 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=10 [var1]  : true
<randoop.PrimValue, value=10 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=0 [var5]  : true
<randoop.PrimValue, value=0 [var6]  : true
<randoop.PrimValue, value=10 [var7]  : true
<randoop.PrimValue, value=0 [var8]  : true
<randoop.PrimValue, value=10 [var9]  : true
<randoop.PrimValue, value=0 [var10]  : true
<randoop.PrimValue, value=0 [var11]  : true
<randoop.PrimValue, value=10 [var12]  : true
<randoop.PrimValue, value=0 [var13]  : true

allSequences.size()=489
-------------------------------------------
randoop.util.Randomness: total calls to random: 2979
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 488 sequences.
components: 488
randoop.util.Randomness: total calls to random: 2980
randoop.util.Randomness: total calls to random: 2981
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 2982
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 488 sequences.
components: 488
randoop.util.Randomness: total calls to random: 2983
randoop.util.Randomness: total calls to random: 2984
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.randomNumber() : var0 
var2 =  method : A.randomNumber() : var0 
var3 =  method : A.randomNumber() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.randomNumber() : var0 
var6 =  method : A.normal() : var0 
var7 =  method : A.normal() : var0 
var8 =  method : A.randomNumber() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=0 [var1]  : true
<randoop.PrimValue, value=0 [var2]  : true
<randoop.PrimValue, value=0 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=0 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true
<randoop.PrimValue, value=10 [var7]  : true
<randoop.PrimValue, value=0 [var8]  : true

allSequences.size()=490
-------------------------------------------
randoop.util.Randomness: total calls to random: 2985
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 489 sequences.
components: 489
randoop.util.Randomness: total calls to random: 2986
randoop.util.Randomness: total calls to random: 2987
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.randomNumber() : var0 
var2 =  method : A.randomNumber() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.normal() : var0 
var6 =  method : A.normal() : var0 
var7 =  method : A.randomNumber() : var0 
var8 =  method : A.normal() : var0 
var9 =  method : A.randomNumber() : var0 
var10 =  method : A.normal() : var0 
var11 =  method : A.normal() : var0 
var12 =  method : A.randomNumber() : var0 
var13 =  method : A.randomNumber() : var0 
var14 =  method : A.normal() : var0 
var15 =  method : A.randomNumber() : var0 
var16 =  method : A.normal() : var0 
var17 =  method : A.randomNumber() : var0 
var18 =  method : A.normal() : var0 
var19 =  method : A.randomNumber() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Making index 12 inactive (value is a primitive)
Making index 13 inactive (value is a primitive)
Making index 14 inactive (value is a primitive)
Making index 15 inactive (value is a primitive)
Making index 16 inactive (value is a primitive)
Making index 17 inactive (value is a primitive)
Making index 18 inactive (value is a primitive)
Making index 19 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var10 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var11 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var12 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var13 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var14 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var15 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var16 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var17 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var18 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var19 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=0 [var1]  : true
<randoop.PrimValue, value=0 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=10 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true
<randoop.PrimValue, value=0 [var7]  : true
<randoop.PrimValue, value=10 [var8]  : true
<randoop.PrimValue, value=0 [var9]  : true
<randoop.PrimValue, value=10 [var10]  : true
<randoop.PrimValue, value=10 [var11]  : true
<randoop.PrimValue, value=0 [var12]  : true
<randoop.PrimValue, value=0 [var13]  : true
<randoop.PrimValue, value=10 [var14]  : true
<randoop.PrimValue, value=0 [var15]  : true
<randoop.PrimValue, value=10 [var16]  : true
<randoop.PrimValue, value=0 [var17]  : true
<randoop.PrimValue, value=10 [var18]  : true
<randoop.PrimValue, value=0 [var19]  : true

allSequences.size()=491
-------------------------------------------
randoop.util.Randomness: total calls to random: 2988
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 490 sequences.
components: 490
randoop.util.Randomness: total calls to random: 2989
randoop.util.Randomness: total calls to random: 2990
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 2991
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 490 sequences.
components: 490
randoop.util.Randomness: total calls to random: 2992
randoop.util.Randomness: total calls to random: 2993
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 2994
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 490 sequences.
components: 490
randoop.util.Randomness: total calls to random: 2995
randoop.util.Randomness: total calls to random: 2996
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 2997
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 490 sequences.
components: 490
randoop.util.Randomness: total calls to random: 2998
randoop.util.Randomness: total calls to random: 2999
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 3000
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 490 sequences.
components: 490
randoop.util.Randomness: total calls to random: 3001
randoop.util.Randomness: total calls to random: 3002
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 3003
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 490 sequences.
components: 490
randoop.util.Randomness: total calls to random: 3004
randoop.util.Randomness: total calls to random: 3005
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 3006
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 490 sequences.
components: 490
randoop.util.Randomness: total calls to random: 3007
randoop.util.Randomness: total calls to random: 3008
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.normal() : var0 
var2 =  method : A.normal() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.normal() : var0 
var5 =  method : A.randomNumber() : var0 
var6 =  method : A.normal() : var0 
var7 =  method : A.randomNumber() : var0 
var8 =  method : A.normal() : var0 
var9 =  method : A.normal() : var0 
var10 =  method : A.randomNumber() : var0 
var11 =  method : A.normal() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var10 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var11 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=10 [var1]  : true
<randoop.PrimValue, value=10 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=10 [var4]  : true
<randoop.PrimValue, value=0 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true
<randoop.PrimValue, value=0 [var7]  : true
<randoop.PrimValue, value=10 [var8]  : true
<randoop.PrimValue, value=10 [var9]  : true
<randoop.PrimValue, value=0 [var10]  : true
<randoop.PrimValue, value=10 [var11]  : true

allSequences.size()=492
-------------------------------------------
randoop.util.Randomness: total calls to random: 3009
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 491 sequences.
components: 491
randoop.util.Randomness: total calls to random: 3010
randoop.util.Randomness: total calls to random: 3011
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.randomNumber() : var0 
var2 =  method : A.randomNumber() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.normal() : var0 
var6 =  method : A.normal() : var0 
var7 =  method : A.randomNumber() : var0 
var8 =  method : A.normal() : var0 
var9 =  method : A.randomNumber() : var0 
var10 =  method : A.randomNumber() : var0 
var11 =  method : A.normal() : var0 
var12 =  method : A.normal() : var0 
var13 =  method : A.randomNumber() : var0 
var14 =  method : A.randomNumber() : var0 
var15 =  method : A.normal() : var0 
var16 =  method : A.randomNumber() : var0 
var17 =  method : A.normal() : var0 
var18 =  method : A.randomNumber() : var0 
var19 =  method : A.normal() : var0 
var20 =  method : A.normal() : var0 
var21 =  method : A.randomNumber() : var0 
var22 =  method : A.normal() : var0 
var23 =  method : A.normal() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Making index 12 inactive (value is a primitive)
Making index 13 inactive (value is a primitive)
Making index 14 inactive (value is a primitive)
Making index 15 inactive (value is a primitive)
Making index 16 inactive (value is a primitive)
Making index 17 inactive (value is a primitive)
Making index 18 inactive (value is a primitive)
Making index 19 inactive (value is a primitive)
Making index 20 inactive (value is a primitive)
Making index 21 inactive (value is a primitive)
Making index 22 inactive (value is a primitive)
Making index 23 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var10 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var11 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var12 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var13 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var14 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var15 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var16 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var17 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var18 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var19 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var20 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var21 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var22 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var23 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=0 [var1]  : true
<randoop.PrimValue, value=0 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=10 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true
<randoop.PrimValue, value=0 [var7]  : true
<randoop.PrimValue, value=10 [var8]  : true
<randoop.PrimValue, value=0 [var9]  : true
<randoop.PrimValue, value=0 [var10]  : true
<randoop.PrimValue, value=10 [var11]  : true
<randoop.PrimValue, value=10 [var12]  : true
<randoop.PrimValue, value=0 [var13]  : true
<randoop.PrimValue, value=0 [var14]  : true
<randoop.PrimValue, value=10 [var15]  : true
<randoop.PrimValue, value=0 [var16]  : true
<randoop.PrimValue, value=10 [var17]  : true
<randoop.PrimValue, value=0 [var18]  : true
<randoop.PrimValue, value=10 [var19]  : true
<randoop.PrimValue, value=10 [var20]  : true
<randoop.PrimValue, value=0 [var21]  : true
<randoop.PrimValue, value=10 [var22]  : true
<randoop.PrimValue, value=10 [var23]  : true

allSequences.size()=493
-------------------------------------------
randoop.util.Randomness: total calls to random: 3012
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 492 sequences.
components: 492
randoop.util.Randomness: total calls to random: 3013
randoop.util.Randomness: total calls to random: 3014
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 3015
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 492 sequences.
components: 492
randoop.util.Randomness: total calls to random: 3016
randoop.util.Randomness: total calls to random: 3017
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.normal() : var0 
var2 =  method : A.normal() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.normal() : var0 
var6 =  method : A.randomNumber() : var0 
var7 =  method : A.randomNumber() : var0 
var8 =  method : A.normal() : var0 
var9 =  method : A.normal() : var0 
var10 =  method : A.randomNumber() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var10 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=10 [var1]  : true
<randoop.PrimValue, value=10 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=10 [var5]  : true
<randoop.PrimValue, value=0 [var6]  : true
<randoop.PrimValue, value=0 [var7]  : true
<randoop.PrimValue, value=10 [var8]  : true
<randoop.PrimValue, value=10 [var9]  : true
<randoop.PrimValue, value=0 [var10]  : true

allSequences.size()=494
-------------------------------------------
randoop.util.Randomness: total calls to random: 3018
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 493 sequences.
components: 493
randoop.util.Randomness: total calls to random: 3019
randoop.util.Randomness: total calls to random: 3020
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.normal() : var0 
var2 =  method : A.normal() : var0 
var3 =  method : A.randomNumber() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.randomNumber() : var0 
var6 =  method : A.randomNumber() : var0 
var7 =  method : A.normal() : var0 
var8 =  method : A.normal() : var0 
var9 =  method : A.normal() : var0 
var10 =  method : A.randomNumber() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var10 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=10 [var1]  : true
<randoop.PrimValue, value=10 [var2]  : true
<randoop.PrimValue, value=0 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=0 [var5]  : true
<randoop.PrimValue, value=0 [var6]  : true
<randoop.PrimValue, value=10 [var7]  : true
<randoop.PrimValue, value=10 [var8]  : true
<randoop.PrimValue, value=10 [var9]  : true
<randoop.PrimValue, value=0 [var10]  : true

allSequences.size()=495
-------------------------------------------
randoop.util.Randomness: total calls to random: 3021
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 494 sequences.
components: 494
randoop.util.Randomness: total calls to random: 3022
randoop.util.Randomness: total calls to random: 3023
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.randomNumber() : var0 
var2 =  method : A.randomNumber() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.normal() : var0 
var6 =  method : A.normal() : var0 
var7 =  method : A.randomNumber() : var0 
var8 =  method : A.normal() : var0 
var9 =  method : A.randomNumber() : var0 
var10 =  method : A.normal() : var0 
var11 =  method : A.normal() : var0 
var12 =  method : A.randomNumber() : var0 
var13 =  method : A.randomNumber() : var0 
var14 =  method : A.randomNumber() : var0 
var15 =  method : A.randomNumber() : var0 
var16 =  method : A.normal() : var0 
var17 =  method : A.normal() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Making index 12 inactive (value is a primitive)
Making index 13 inactive (value is a primitive)
Making index 14 inactive (value is a primitive)
Making index 15 inactive (value is a primitive)
Making index 16 inactive (value is a primitive)
Making index 17 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var10 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var11 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var12 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var13 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var14 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var15 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var16 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var17 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=0 [var1]  : true
<randoop.PrimValue, value=0 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=10 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true
<randoop.PrimValue, value=0 [var7]  : true
<randoop.PrimValue, value=10 [var8]  : true
<randoop.PrimValue, value=0 [var9]  : true
<randoop.PrimValue, value=10 [var10]  : true
<randoop.PrimValue, value=10 [var11]  : true
<randoop.PrimValue, value=0 [var12]  : true
<randoop.PrimValue, value=0 [var13]  : true
<randoop.PrimValue, value=0 [var14]  : true
<randoop.PrimValue, value=0 [var15]  : true
<randoop.PrimValue, value=10 [var16]  : true
<randoop.PrimValue, value=10 [var17]  : true

allSequences.size()=496
-------------------------------------------
randoop.util.Randomness: total calls to random: 3024
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 495 sequences.
components: 495
randoop.util.Randomness: total calls to random: 3025
randoop.util.Randomness: total calls to random: 3026
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 3027
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 495 sequences.
components: 495
randoop.util.Randomness: total calls to random: 3028
randoop.util.Randomness: total calls to random: 3029
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 3030
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 495 sequences.
components: 495
randoop.util.Randomness: total calls to random: 3031
randoop.util.Randomness: total calls to random: 3032
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.randomNumber() : var0 
var2 =  method : A.randomNumber() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.normal() : var0 
var6 =  method : A.normal() : var0 
var7 =  method : A.randomNumber() : var0 
var8 =  method : A.normal() : var0 
var9 =  method : A.randomNumber() : var0 
var10 =  method : A.normal() : var0 
var11 =  method : A.normal() : var0 
var12 =  method : A.randomNumber() : var0 
var13 =  method : A.randomNumber() : var0 
var14 =  method : A.randomNumber() : var0 
var15 =  method : A.normal() : var0 
var16 =  method : A.normal() : var0 
var17 =  method : A.randomNumber() : var0 
var18 =  method : A.randomNumber() : var0 
var19 =  method : A.randomNumber() : var0 
var20 =  method : A.normal() : var0 
var21 =  method : A.randomNumber() : var0 
var22 =  method : A.randomNumber() : var0 
var23 =  method : A.normal() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Making index 12 inactive (value is a primitive)
Making index 13 inactive (value is a primitive)
Making index 14 inactive (value is a primitive)
Making index 15 inactive (value is a primitive)
Making index 16 inactive (value is a primitive)
Making index 17 inactive (value is a primitive)
Making index 18 inactive (value is a primitive)
Making index 19 inactive (value is a primitive)
Making index 20 inactive (value is a primitive)
Making index 21 inactive (value is a primitive)
Making index 22 inactive (value is a primitive)
Making index 23 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var10 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var11 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var12 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var13 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var14 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var15 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var16 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var17 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var18 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var19 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var20 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var21 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var22 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var23 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=0 [var1]  : true
<randoop.PrimValue, value=0 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=10 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true
<randoop.PrimValue, value=0 [var7]  : true
<randoop.PrimValue, value=10 [var8]  : true
<randoop.PrimValue, value=0 [var9]  : true
<randoop.PrimValue, value=10 [var10]  : true
<randoop.PrimValue, value=10 [var11]  : true
<randoop.PrimValue, value=0 [var12]  : true
<randoop.PrimValue, value=0 [var13]  : true
<randoop.PrimValue, value=0 [var14]  : true
<randoop.PrimValue, value=10 [var15]  : true
<randoop.PrimValue, value=10 [var16]  : true
<randoop.PrimValue, value=0 [var17]  : true
<randoop.PrimValue, value=0 [var18]  : true
<randoop.PrimValue, value=0 [var19]  : true
<randoop.PrimValue, value=10 [var20]  : true
<randoop.PrimValue, value=0 [var21]  : true
<randoop.PrimValue, value=0 [var22]  : true
<randoop.PrimValue, value=10 [var23]  : true

allSequences.size()=497
-------------------------------------------
randoop.util.Randomness: total calls to random: 3033
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 496 sequences.
components: 496
randoop.util.Randomness: total calls to random: 3034
randoop.util.Randomness: total calls to random: 3035
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.normal() : var0 
var2 =  method : A.normal() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.normal() : var0 
var5 =  method : A.randomNumber() : var0 
var6 =  method : A.normal() : var0 
var7 =  method : A.normal() : var0 
var8 =  method : A.normal() : var0 
var9 =  method : A.randomNumber() : var0 
var10 =  method : A.randomNumber() : var0 
var11 =  method : A.randomNumber() : var0 
var12 =  method : A.randomNumber() : var0 
var13 =  method : A.normal() : var0 
var14 =  method : A.normal() : var0 
var15 =  method : A.normal() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Making index 12 inactive (value is a primitive)
Making index 13 inactive (value is a primitive)
Making index 14 inactive (value is a primitive)
Making index 15 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var10 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var11 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var12 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var13 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var14 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var15 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=10 [var1]  : true
<randoop.PrimValue, value=10 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=10 [var4]  : true
<randoop.PrimValue, value=0 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true
<randoop.PrimValue, value=10 [var7]  : true
<randoop.PrimValue, value=10 [var8]  : true
<randoop.PrimValue, value=0 [var9]  : true
<randoop.PrimValue, value=0 [var10]  : true
<randoop.PrimValue, value=0 [var11]  : true
<randoop.PrimValue, value=0 [var12]  : true
<randoop.PrimValue, value=10 [var13]  : true
<randoop.PrimValue, value=10 [var14]  : true
<randoop.PrimValue, value=10 [var15]  : true

allSequences.size()=498
-------------------------------------------
randoop.util.Randomness: total calls to random: 3036
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 497 sequences.
components: 497
randoop.util.Randomness: total calls to random: 3037
randoop.util.Randomness: total calls to random: 3038
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.normal() : var0 
var2 =  method : A.randomNumber() : var0 
var3 =  method : A.randomNumber() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.randomNumber() : var0 
var6 =  method : A.randomNumber() : var0 
var7 =  method : A.normal() : var0 
var8 =  method : A.normal() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=10 [var1]  : true
<randoop.PrimValue, value=0 [var2]  : true
<randoop.PrimValue, value=0 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=0 [var5]  : true
<randoop.PrimValue, value=0 [var6]  : true
<randoop.PrimValue, value=10 [var7]  : true
<randoop.PrimValue, value=10 [var8]  : true

allSequences.size()=499
-------------------------------------------
randoop.util.Randomness: total calls to random: 3039
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 498 sequences.
components: 498
randoop.util.Randomness: total calls to random: 3040
randoop.util.Randomness: total calls to random: 3041
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.randomNumber() : var0 
var2 =  method : A.randomNumber() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.normal() : var0 
var5 =  method : A.normal() : var0 
var6 =  method : A.randomNumber() : var0 
var7 =  method : A.normal() : var0 
var8 =  method : A.randomNumber() : var0 
var9 =  method : A.normal() : var0 
var10 =  method : A.normal() : var0 
var11 =  method : A.normal() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var10 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var11 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=0 [var1]  : true
<randoop.PrimValue, value=0 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=10 [var4]  : true
<randoop.PrimValue, value=10 [var5]  : true
<randoop.PrimValue, value=0 [var6]  : true
<randoop.PrimValue, value=10 [var7]  : true
<randoop.PrimValue, value=0 [var8]  : true
<randoop.PrimValue, value=10 [var9]  : true
<randoop.PrimValue, value=10 [var10]  : true
<randoop.PrimValue, value=10 [var11]  : true

allSequences.size()=500
-------------------------------------------
randoop.util.Randomness: total calls to random: 3042
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 499 sequences.
components: 499
randoop.util.Randomness: total calls to random: 3043
randoop.util.Randomness: total calls to random: 3044
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.normal() : var0 
var2 =  method : A.normal() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.normal() : var0 
var5 =  method : A.randomNumber() : var0 
var6 =  method : A.randomNumber() : var0 
var7 =  method : A.randomNumber() : var0 
var8 =  method : A.randomNumber() : var0 
var9 =  method : A.normal() : var0 
var10 =  method : A.randomNumber() : var0 
var11 =  method : A.randomNumber() : var0 
var12 =  method : A.normal() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Making index 12 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var10 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var11 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var12 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=10 [var1]  : true
<randoop.PrimValue, value=10 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=10 [var4]  : true
<randoop.PrimValue, value=0 [var5]  : true
<randoop.PrimValue, value=0 [var6]  : true
<randoop.PrimValue, value=0 [var7]  : true
<randoop.PrimValue, value=0 [var8]  : true
<randoop.PrimValue, value=10 [var9]  : true
<randoop.PrimValue, value=0 [var10]  : true
<randoop.PrimValue, value=0 [var11]  : true
<randoop.PrimValue, value=10 [var12]  : true

allSequences.size()=501
-------------------------------------------
randoop.util.Randomness: total calls to random: 3045
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 500 sequences.
components: 500
randoop.util.Randomness: total calls to random: 3046
randoop.util.Randomness: total calls to random: 3047
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.randomNumber() : var0 
var2 =  method : A.randomNumber() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.normal() : var0 
var6 =  method : A.normal() : var0 
var7 =  method : A.randomNumber() : var0 
var8 =  method : A.normal() : var0 
var9 =  method : A.randomNumber() : var0 
var10 =  method : A.normal() : var0 
var11 =  method : A.normal() : var0 
var12 =  method : A.randomNumber() : var0 
var13 =  method : A.randomNumber() : var0 
var14 =  method : A.normal() : var0 
var15 =  method : A.normal() : var0 
var16 =  method : A.normal() : var0 
var17 =  method : A.normal() : var0 
var18 =  method : A.normal() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Making index 12 inactive (value is a primitive)
Making index 13 inactive (value is a primitive)
Making index 14 inactive (value is a primitive)
Making index 15 inactive (value is a primitive)
Making index 16 inactive (value is a primitive)
Making index 17 inactive (value is a primitive)
Making index 18 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var10 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var11 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var12 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var13 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var14 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var15 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var16 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var17 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var18 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=0 [var1]  : true
<randoop.PrimValue, value=0 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=10 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true
<randoop.PrimValue, value=0 [var7]  : true
<randoop.PrimValue, value=10 [var8]  : true
<randoop.PrimValue, value=0 [var9]  : true
<randoop.PrimValue, value=10 [var10]  : true
<randoop.PrimValue, value=10 [var11]  : true
<randoop.PrimValue, value=0 [var12]  : true
<randoop.PrimValue, value=0 [var13]  : true
<randoop.PrimValue, value=10 [var14]  : true
<randoop.PrimValue, value=10 [var15]  : true
<randoop.PrimValue, value=10 [var16]  : true
<randoop.PrimValue, value=10 [var17]  : true
<randoop.PrimValue, value=10 [var18]  : true

allSequences.size()=502
-------------------------------------------
randoop.util.Randomness: total calls to random: 3048
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 501 sequences.
components: 501
randoop.util.Randomness: total calls to random: 3049
randoop.util.Randomness: total calls to random: 3050
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 3051
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 501 sequences.
components: 501
randoop.util.Randomness: total calls to random: 3052
randoop.util.Randomness: total calls to random: 3053
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 3054
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 501 sequences.
components: 501
randoop.util.Randomness: total calls to random: 3055
randoop.util.Randomness: total calls to random: 3056
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.randomNumber() : var0 
var2 =  method : A.randomNumber() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.normal() : var0 
var5 =  method : A.normal() : var0 
var6 =  method : A.randomNumber() : var0 
var7 =  method : A.normal() : var0 
var8 =  method : A.normal() : var0 
var9 =  method : A.normal() : var0 
var10 =  method : A.normal() : var0 
var11 =  method : A.randomNumber() : var0 
var12 =  method : A.normal() : var0 
var13 =  method : A.normal() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Making index 12 inactive (value is a primitive)
Making index 13 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var10 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var11 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var12 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var13 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=0 [var1]  : true
<randoop.PrimValue, value=0 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=10 [var4]  : true
<randoop.PrimValue, value=10 [var5]  : true
<randoop.PrimValue, value=0 [var6]  : true
<randoop.PrimValue, value=10 [var7]  : true
<randoop.PrimValue, value=10 [var8]  : true
<randoop.PrimValue, value=10 [var9]  : true
<randoop.PrimValue, value=10 [var10]  : true
<randoop.PrimValue, value=0 [var11]  : true
<randoop.PrimValue, value=10 [var12]  : true
<randoop.PrimValue, value=10 [var13]  : true

allSequences.size()=503
-------------------------------------------
randoop.util.Randomness: total calls to random: 3057
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 502 sequences.
components: 502
randoop.util.Randomness: total calls to random: 3058
randoop.util.Randomness: total calls to random: 3059
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 3060
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 502 sequences.
components: 502
randoop.util.Randomness: total calls to random: 3061
randoop.util.Randomness: total calls to random: 3062
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.normal() : var0 
var2 =  method : A.normal() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.randomNumber() : var0 
var6 =  method : A.randomNumber() : var0 
var7 =  method : A.normal() : var0 
var8 =  method : A.randomNumber() : var0 
var9 =  method : A.normal() : var0 
var10 =  method : A.normal() : var0 
var11 =  method : A.normal() : var0 
var12 =  method : A.randomNumber() : var0 
var13 =  method : A.randomNumber() : var0 
var14 =  method : A.randomNumber() : var0 
var15 =  method : A.normal() : var0 
var16 =  method : A.randomNumber() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Making index 12 inactive (value is a primitive)
Making index 13 inactive (value is a primitive)
Making index 14 inactive (value is a primitive)
Making index 15 inactive (value is a primitive)
Making index 16 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var10 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var11 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var12 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var13 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var14 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var15 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var16 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=10 [var1]  : true
<randoop.PrimValue, value=10 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=0 [var5]  : true
<randoop.PrimValue, value=0 [var6]  : true
<randoop.PrimValue, value=10 [var7]  : true
<randoop.PrimValue, value=0 [var8]  : true
<randoop.PrimValue, value=10 [var9]  : true
<randoop.PrimValue, value=10 [var10]  : true
<randoop.PrimValue, value=10 [var11]  : true
<randoop.PrimValue, value=0 [var12]  : true
<randoop.PrimValue, value=0 [var13]  : true
<randoop.PrimValue, value=0 [var14]  : true
<randoop.PrimValue, value=10 [var15]  : true
<randoop.PrimValue, value=0 [var16]  : true

allSequences.size()=504
-------------------------------------------
randoop.util.Randomness: total calls to random: 3063
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 503 sequences.
components: 503
randoop.util.Randomness: total calls to random: 3064
randoop.util.Randomness: total calls to random: 3065
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 3066
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 503 sequences.
components: 503
randoop.util.Randomness: total calls to random: 3067
randoop.util.Randomness: total calls to random: 3068
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.normal() : var0 
var2 =  method : A.randomNumber() : var0 
var3 =  method : A.randomNumber() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.normal() : var0 
var6 =  method : A.normal() : var0 
var7 =  method : A.normal() : var0 
var8 =  method : A.randomNumber() : var0 
var9 =  method : A.randomNumber() : var0 
var10 =  method : A.randomNumber() : var0 
var11 =  method : A.normal() : var0 
var12 =  method : A.randomNumber() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Making index 12 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var10 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var11 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var12 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=10 [var1]  : true
<randoop.PrimValue, value=0 [var2]  : true
<randoop.PrimValue, value=0 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=10 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true
<randoop.PrimValue, value=10 [var7]  : true
<randoop.PrimValue, value=0 [var8]  : true
<randoop.PrimValue, value=0 [var9]  : true
<randoop.PrimValue, value=0 [var10]  : true
<randoop.PrimValue, value=10 [var11]  : true
<randoop.PrimValue, value=0 [var12]  : true

allSequences.size()=505
-------------------------------------------
randoop.util.Randomness: total calls to random: 3069
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 504 sequences.
components: 504
randoop.util.Randomness: total calls to random: 3070
randoop.util.Randomness: total calls to random: 3071
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.normal() : var0 
var2 =  method : A.normal() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.normal() : var0 
var5 =  method : A.randomNumber() : var0 
var6 =  method : A.normal() : var0 
var7 =  method : A.normal() : var0 
var8 =  method : A.normal() : var0 
var9 =  method : A.randomNumber() : var0 
var10 =  method : A.randomNumber() : var0 
var11 =  method : A.normal() : var0 
var12 =  method : A.randomNumber() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Making index 12 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var10 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var11 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var12 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=10 [var1]  : true
<randoop.PrimValue, value=10 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=10 [var4]  : true
<randoop.PrimValue, value=0 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true
<randoop.PrimValue, value=10 [var7]  : true
<randoop.PrimValue, value=10 [var8]  : true
<randoop.PrimValue, value=0 [var9]  : true
<randoop.PrimValue, value=0 [var10]  : true
<randoop.PrimValue, value=10 [var11]  : true
<randoop.PrimValue, value=0 [var12]  : true

allSequences.size()=506
-------------------------------------------
randoop.util.Randomness: total calls to random: 3072
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 505 sequences.
components: 505
randoop.util.Randomness: total calls to random: 3073
randoop.util.Randomness: total calls to random: 3074
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 3075
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 505 sequences.
components: 505
randoop.util.Randomness: total calls to random: 3076
randoop.util.Randomness: total calls to random: 3077
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.randomNumber() : var0 
var2 =  method : A.normal() : var0 
var3 =  method : A.randomNumber() : var0 
var4 =  method : A.normal() : var0 
var5 =  method : A.randomNumber() : var0 
var6 =  method : A.normal() : var0 
var7 =  method : A.normal() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=0 [var1]  : true
<randoop.PrimValue, value=10 [var2]  : true
<randoop.PrimValue, value=0 [var3]  : true
<randoop.PrimValue, value=10 [var4]  : true
<randoop.PrimValue, value=0 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true
<randoop.PrimValue, value=10 [var7]  : true

allSequences.size()=507
-------------------------------------------
randoop.util.Randomness: total calls to random: 3078
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 506 sequences.
components: 506
randoop.util.Randomness: total calls to random: 3079
randoop.util.Randomness: total calls to random: 3080
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 3081
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 506 sequences.
components: 506
randoop.util.Randomness: total calls to random: 3082
randoop.util.Randomness: total calls to random: 3083
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 3084
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 506 sequences.
components: 506
randoop.util.Randomness: total calls to random: 3085
randoop.util.Randomness: total calls to random: 3086
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.normal() : var0 
var2 =  method : A.normal() : var0 
var3 =  method : A.randomNumber() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.normal() : var0 
var6 =  method : A.randomNumber() : var0 
var7 =  method : A.normal() : var0 
var8 =  method : A.randomNumber() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=10 [var1]  : true
<randoop.PrimValue, value=10 [var2]  : true
<randoop.PrimValue, value=0 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=10 [var5]  : true
<randoop.PrimValue, value=0 [var6]  : true
<randoop.PrimValue, value=10 [var7]  : true
<randoop.PrimValue, value=0 [var8]  : true

allSequences.size()=508
-------------------------------------------
randoop.util.Randomness: total calls to random: 3087
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 507 sequences.
components: 507
randoop.util.Randomness: total calls to random: 3088
randoop.util.Randomness: total calls to random: 3089
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 3090
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 507 sequences.
components: 507
randoop.util.Randomness: total calls to random: 3091
randoop.util.Randomness: total calls to random: 3092
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.randomNumber() : var0 
var2 =  method : A.randomNumber() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.normal() : var0 
var6 =  method : A.normal() : var0 
var7 =  method : A.randomNumber() : var0 
var8 =  method : A.normal() : var0 
var9 =  method : A.randomNumber() : var0 
var10 =  method : A.normal() : var0 
var11 =  method : A.normal() : var0 
var12 =  method : A.randomNumber() : var0 
var13 =  method : A.randomNumber() : var0 
var14 =  method : A.normal() : var0 
var15 =  method : A.randomNumber() : var0 
var16 =  method : A.normal() : var0 
var17 =  method : A.randomNumber() : var0 
var18 =  method : A.normal() : var0 
var19 =  method : A.randomNumber() : var0 
var20 =  method : A.randomNumber() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Making index 12 inactive (value is a primitive)
Making index 13 inactive (value is a primitive)
Making index 14 inactive (value is a primitive)
Making index 15 inactive (value is a primitive)
Making index 16 inactive (value is a primitive)
Making index 17 inactive (value is a primitive)
Making index 18 inactive (value is a primitive)
Making index 19 inactive (value is a primitive)
Making index 20 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var10 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var11 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var12 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var13 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var14 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var15 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var16 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var17 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var18 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var19 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var20 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=0 [var1]  : true
<randoop.PrimValue, value=0 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=10 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true
<randoop.PrimValue, value=0 [var7]  : true
<randoop.PrimValue, value=10 [var8]  : true
<randoop.PrimValue, value=0 [var9]  : true
<randoop.PrimValue, value=10 [var10]  : true
<randoop.PrimValue, value=10 [var11]  : true
<randoop.PrimValue, value=0 [var12]  : true
<randoop.PrimValue, value=0 [var13]  : true
<randoop.PrimValue, value=10 [var14]  : true
<randoop.PrimValue, value=0 [var15]  : true
<randoop.PrimValue, value=10 [var16]  : true
<randoop.PrimValue, value=0 [var17]  : true
<randoop.PrimValue, value=10 [var18]  : true
<randoop.PrimValue, value=0 [var19]  : true
<randoop.PrimValue, value=0 [var20]  : true

allSequences.size()=509
-------------------------------------------
randoop.util.Randomness: total calls to random: 3093
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 508 sequences.
components: 508
randoop.util.Randomness: total calls to random: 3094
randoop.util.Randomness: total calls to random: 3095
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 3096
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 508 sequences.
components: 508
randoop.util.Randomness: total calls to random: 3097
randoop.util.Randomness: total calls to random: 3098
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 3099
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 508 sequences.
components: 508
randoop.util.Randomness: total calls to random: 3100
randoop.util.Randomness: total calls to random: 3101
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 3102
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 508 sequences.
components: 508
randoop.util.Randomness: total calls to random: 3103
randoop.util.Randomness: total calls to random: 3104
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.normal() : var0 
var2 =  method : A.normal() : var0 
var3 =  method : A.randomNumber() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.randomNumber() : var0 
var6 =  method : A.normal() : var0 
var7 =  method : A.randomNumber() : var0 
var8 =  method : A.normal() : var0 
var9 =  method : A.randomNumber() : var0 
var10 =  method : A.randomNumber() : var0 
var11 =  method : A.normal() : var0 
var12 =  method : A.normal() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Making index 12 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var10 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var11 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var12 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=10 [var1]  : true
<randoop.PrimValue, value=10 [var2]  : true
<randoop.PrimValue, value=0 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=0 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true
<randoop.PrimValue, value=0 [var7]  : true
<randoop.PrimValue, value=10 [var8]  : true
<randoop.PrimValue, value=0 [var9]  : true
<randoop.PrimValue, value=0 [var10]  : true
<randoop.PrimValue, value=10 [var11]  : true
<randoop.PrimValue, value=10 [var12]  : true

allSequences.size()=510
-------------------------------------------
randoop.util.Randomness: total calls to random: 3105
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 509 sequences.
components: 509
randoop.util.Randomness: total calls to random: 3106
randoop.util.Randomness: total calls to random: 3107
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.normal() : var0 
var2 =  method : A.randomNumber() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.normal() : var0 
var6 =  method : A.randomNumber() : var0 
var7 =  method : A.randomNumber() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=10 [var1]  : true
<randoop.PrimValue, value=0 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=10 [var5]  : true
<randoop.PrimValue, value=0 [var6]  : true
<randoop.PrimValue, value=0 [var7]  : true

allSequences.size()=511
-------------------------------------------
randoop.util.Randomness: total calls to random: 3108
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 510 sequences.
components: 510
randoop.util.Randomness: total calls to random: 3109
randoop.util.Randomness: total calls to random: 3110
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.randomNumber() : var0 
var2 =  method : A.randomNumber() : var0 
var3 =  method : A.randomNumber() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.normal() : var0 
var6 =  method : A.normal() : var0 
var7 =  method : A.normal() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=0 [var1]  : true
<randoop.PrimValue, value=0 [var2]  : true
<randoop.PrimValue, value=0 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=10 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true
<randoop.PrimValue, value=10 [var7]  : true

allSequences.size()=512
-------------------------------------------
randoop.util.Randomness: total calls to random: 3111
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 511 sequences.
components: 511
randoop.util.Randomness: total calls to random: 3112
randoop.util.Randomness: total calls to random: 3113
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 3114
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 511 sequences.
components: 511
randoop.util.Randomness: total calls to random: 3115
randoop.util.Randomness: total calls to random: 3116
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.randomNumber() : var0 
var2 =  method : A.randomNumber() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.normal() : var0 
var5 =  method : A.normal() : var0 
var6 =  method : A.normal() : var0 
var7 =  method : A.randomNumber() : var0 
var8 =  method : A.normal() : var0 
var9 =  method : A.randomNumber() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=0 [var1]  : true
<randoop.PrimValue, value=0 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=10 [var4]  : true
<randoop.PrimValue, value=10 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true
<randoop.PrimValue, value=0 [var7]  : true
<randoop.PrimValue, value=10 [var8]  : true
<randoop.PrimValue, value=0 [var9]  : true

allSequences.size()=513
-------------------------------------------
randoop.util.Randomness: total calls to random: 3117
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 512 sequences.
components: 512
randoop.util.Randomness: total calls to random: 3118
randoop.util.Randomness: total calls to random: 3119
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 3120
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 512 sequences.
components: 512
randoop.util.Randomness: total calls to random: 3121
randoop.util.Randomness: total calls to random: 3122
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 3123
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 512 sequences.
components: 512
randoop.util.Randomness: total calls to random: 3124
randoop.util.Randomness: total calls to random: 3125
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 3126
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 512 sequences.
components: 512
randoop.util.Randomness: total calls to random: 3127
randoop.util.Randomness: total calls to random: 3128
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 3129
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 512 sequences.
components: 512
randoop.util.Randomness: total calls to random: 3130
randoop.util.Randomness: total calls to random: 3131
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 3132
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 512 sequences.
components: 512
randoop.util.Randomness: total calls to random: 3133
randoop.util.Randomness: total calls to random: 3134
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.randomNumber() : var0 
var2 =  method : A.randomNumber() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.normal() : var0 
var6 =  method : A.normal() : var0 
var7 =  method : A.randomNumber() : var0 
var8 =  method : A.randomNumber() : var0 
var9 =  method : A.randomNumber() : var0 
var10 =  method : A.randomNumber() : var0 
var11 =  method : A.normal() : var0 
var12 =  method : A.randomNumber() : var0 
var13 =  method : A.randomNumber() : var0 
var14 =  method : A.normal() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Making index 12 inactive (value is a primitive)
Making index 13 inactive (value is a primitive)
Making index 14 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var10 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var11 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var12 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var13 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var14 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=0 [var1]  : true
<randoop.PrimValue, value=0 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=10 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true
<randoop.PrimValue, value=0 [var7]  : true
<randoop.PrimValue, value=0 [var8]  : true
<randoop.PrimValue, value=0 [var9]  : true
<randoop.PrimValue, value=0 [var10]  : true
<randoop.PrimValue, value=10 [var11]  : true
<randoop.PrimValue, value=0 [var12]  : true
<randoop.PrimValue, value=0 [var13]  : true
<randoop.PrimValue, value=10 [var14]  : true

allSequences.size()=514
-------------------------------------------
randoop.util.Randomness: total calls to random: 3135
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 513 sequences.
components: 513
randoop.util.Randomness: total calls to random: 3136
randoop.util.Randomness: total calls to random: 3137
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 3138
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 513 sequences.
components: 513
randoop.util.Randomness: total calls to random: 3139
randoop.util.Randomness: total calls to random: 3140
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 3141
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 513 sequences.
components: 513
randoop.util.Randomness: total calls to random: 3142
randoop.util.Randomness: total calls to random: 3143
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 3144
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 513 sequences.
components: 513
randoop.util.Randomness: total calls to random: 3145
randoop.util.Randomness: total calls to random: 3146
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.normal() : var0 
var2 =  method : A.normal() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.normal() : var0 
var5 =  method : A.randomNumber() : var0 
var6 =  method : A.normal() : var0 
var7 =  method : A.normal() : var0 
var8 =  method : A.randomNumber() : var0 
var9 =  method : A.randomNumber() : var0 
var10 =  method : A.normal() : var0 
var11 =  method : A.normal() : var0 
var12 =  method : A.randomNumber() : var0 
var13 =  method : A.randomNumber() : var0 
var14 =  method : A.normal() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Making index 12 inactive (value is a primitive)
Making index 13 inactive (value is a primitive)
Making index 14 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var10 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var11 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var12 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var13 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var14 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=10 [var1]  : true
<randoop.PrimValue, value=10 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=10 [var4]  : true
<randoop.PrimValue, value=0 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true
<randoop.PrimValue, value=10 [var7]  : true
<randoop.PrimValue, value=0 [var8]  : true
<randoop.PrimValue, value=0 [var9]  : true
<randoop.PrimValue, value=10 [var10]  : true
<randoop.PrimValue, value=10 [var11]  : true
<randoop.PrimValue, value=0 [var12]  : true
<randoop.PrimValue, value=0 [var13]  : true
<randoop.PrimValue, value=10 [var14]  : true

allSequences.size()=515
-------------------------------------------
randoop.util.Randomness: total calls to random: 3147
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 514 sequences.
components: 514
randoop.util.Randomness: total calls to random: 3148
randoop.util.Randomness: total calls to random: 3149
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 3150
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 514 sequences.
components: 514
randoop.util.Randomness: total calls to random: 3151
randoop.util.Randomness: total calls to random: 3152
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 3153
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 514 sequences.
components: 514
randoop.util.Randomness: total calls to random: 3154
randoop.util.Randomness: total calls to random: 3155
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 3156
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 514 sequences.
components: 514
randoop.util.Randomness: total calls to random: 3157
randoop.util.Randomness: total calls to random: 3158
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 3159
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 514 sequences.
components: 514
randoop.util.Randomness: total calls to random: 3160
randoop.util.Randomness: total calls to random: 3161
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 3162
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 514 sequences.
components: 514
randoop.util.Randomness: total calls to random: 3163
randoop.util.Randomness: total calls to random: 3164
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 3165
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 514 sequences.
components: 514
randoop.util.Randomness: total calls to random: 3166
randoop.util.Randomness: total calls to random: 3167
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 3168
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 514 sequences.
components: 514
randoop.util.Randomness: total calls to random: 3169
randoop.util.Randomness: total calls to random: 3170
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 3171
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 514 sequences.
components: 514
randoop.util.Randomness: total calls to random: 3172
randoop.util.Randomness: total calls to random: 3173
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 3174
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 514 sequences.
components: 514
randoop.util.Randomness: total calls to random: 3175
randoop.util.Randomness: total calls to random: 3176
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.normal() : var0 
var2 =  method : A.normal() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.normal() : var0 
var5 =  method : A.randomNumber() : var0 
var6 =  method : A.randomNumber() : var0 
var7 =  method : A.randomNumber() : var0 
var8 =  method : A.randomNumber() : var0 
var9 =  method : A.normal() : var0 
var10 =  method : A.randomNumber() : var0 
var11 =  method : A.normal() : var0 
var12 =  method : A.randomNumber() : var0 
var13 =  method : A.normal() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Making index 12 inactive (value is a primitive)
Making index 13 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var10 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var11 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var12 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var13 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=10 [var1]  : true
<randoop.PrimValue, value=10 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=10 [var4]  : true
<randoop.PrimValue, value=0 [var5]  : true
<randoop.PrimValue, value=0 [var6]  : true
<randoop.PrimValue, value=0 [var7]  : true
<randoop.PrimValue, value=0 [var8]  : true
<randoop.PrimValue, value=10 [var9]  : true
<randoop.PrimValue, value=0 [var10]  : true
<randoop.PrimValue, value=10 [var11]  : true
<randoop.PrimValue, value=0 [var12]  : true
<randoop.PrimValue, value=10 [var13]  : true

allSequences.size()=516
-------------------------------------------
randoop.util.Randomness: total calls to random: 3177
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 515 sequences.
components: 515
randoop.util.Randomness: total calls to random: 3178
randoop.util.Randomness: total calls to random: 3179
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 3180
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 515 sequences.
components: 515
randoop.util.Randomness: total calls to random: 3181
randoop.util.Randomness: total calls to random: 3182
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 3183
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 515 sequences.
components: 515
randoop.util.Randomness: total calls to random: 3184
randoop.util.Randomness: total calls to random: 3185
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 3186
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 515 sequences.
components: 515
randoop.util.Randomness: total calls to random: 3187
randoop.util.Randomness: total calls to random: 3188
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.randomNumber() : var0 
var2 =  method : A.randomNumber() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.normal() : var0 
var6 =  method : A.normal() : var0 
var7 =  method : A.randomNumber() : var0 
var8 =  method : A.normal() : var0 
var9 =  method : A.randomNumber() : var0 
var10 =  method : A.normal() : var0 
var11 =  method : A.normal() : var0 
var12 =  method : A.randomNumber() : var0 
var13 =  method : A.randomNumber() : var0 
var14 =  method : A.randomNumber() : var0 
var15 =  method : A.randomNumber() : var0 
var16 =  method : A.randomNumber() : var0 
var17 =  method : A.randomNumber() : var0 
var18 =  method : A.randomNumber() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Making index 12 inactive (value is a primitive)
Making index 13 inactive (value is a primitive)
Making index 14 inactive (value is a primitive)
Making index 15 inactive (value is a primitive)
Making index 16 inactive (value is a primitive)
Making index 17 inactive (value is a primitive)
Making index 18 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var10 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var11 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var12 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var13 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var14 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var15 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var16 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var17 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var18 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=0 [var1]  : true
<randoop.PrimValue, value=0 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=10 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true
<randoop.PrimValue, value=0 [var7]  : true
<randoop.PrimValue, value=10 [var8]  : true
<randoop.PrimValue, value=0 [var9]  : true
<randoop.PrimValue, value=10 [var10]  : true
<randoop.PrimValue, value=10 [var11]  : true
<randoop.PrimValue, value=0 [var12]  : true
<randoop.PrimValue, value=0 [var13]  : true
<randoop.PrimValue, value=0 [var14]  : true
<randoop.PrimValue, value=0 [var15]  : true
<randoop.PrimValue, value=0 [var16]  : true
<randoop.PrimValue, value=0 [var17]  : true
<randoop.PrimValue, value=0 [var18]  : true

allSequences.size()=517
-------------------------------------------
randoop.util.Randomness: total calls to random: 3189
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 516 sequences.
components: 516
randoop.util.Randomness: total calls to random: 3190
randoop.util.Randomness: total calls to random: 3191
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 3192
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 516 sequences.
components: 516
randoop.util.Randomness: total calls to random: 3193
randoop.util.Randomness: total calls to random: 3194
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 3195
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 516 sequences.
components: 516
randoop.util.Randomness: total calls to random: 3196
randoop.util.Randomness: total calls to random: 3197
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.randomNumber() : var0 
var2 =  method : A.normal() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.normal() : var0 
var6 =  method : A.normal() : var0 
var7 =  method : A.normal() : var0 
var8 =  method : A.normal() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=0 [var1]  : true
<randoop.PrimValue, value=10 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=10 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true
<randoop.PrimValue, value=10 [var7]  : true
<randoop.PrimValue, value=10 [var8]  : true

allSequences.size()=518
-------------------------------------------
randoop.util.Randomness: total calls to random: 3198
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 517 sequences.
components: 517
randoop.util.Randomness: total calls to random: 3199
randoop.util.Randomness: total calls to random: 3200
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.normal() : var0 
var2 =  method : A.normal() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.normal() : var0 
var5 =  method : A.normal() : var0 
var6 =  method : A.randomNumber() : var0 
var7 =  method : A.normal() : var0 
var8 =  method : A.normal() : var0 
var9 =  method : A.randomNumber() : var0 
var10 =  method : A.randomNumber() : var0 
var11 =  method : A.randomNumber() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var10 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var11 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=10 [var1]  : true
<randoop.PrimValue, value=10 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=10 [var4]  : true
<randoop.PrimValue, value=10 [var5]  : true
<randoop.PrimValue, value=0 [var6]  : true
<randoop.PrimValue, value=10 [var7]  : true
<randoop.PrimValue, value=10 [var8]  : true
<randoop.PrimValue, value=0 [var9]  : true
<randoop.PrimValue, value=0 [var10]  : true
<randoop.PrimValue, value=0 [var11]  : true

allSequences.size()=519
-------------------------------------------
randoop.util.Randomness: total calls to random: 3201
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 518 sequences.
components: 518
randoop.util.Randomness: total calls to random: 3202
randoop.util.Randomness: total calls to random: 3203
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 3204
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 518 sequences.
components: 518
randoop.util.Randomness: total calls to random: 3205
randoop.util.Randomness: total calls to random: 3206
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.randomNumber() : var0 
var2 =  method : A.randomNumber() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.normal() : var0 
var6 =  method : A.normal() : var0 
var7 =  method : A.randomNumber() : var0 
var8 =  method : A.normal() : var0 
var9 =  method : A.normal() : var0 
var10 =  method : A.normal() : var0 
var11 =  method : A.normal() : var0 
var12 =  method : A.normal() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Making index 12 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var10 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var11 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var12 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=0 [var1]  : true
<randoop.PrimValue, value=0 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=10 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true
<randoop.PrimValue, value=0 [var7]  : true
<randoop.PrimValue, value=10 [var8]  : true
<randoop.PrimValue, value=10 [var9]  : true
<randoop.PrimValue, value=10 [var10]  : true
<randoop.PrimValue, value=10 [var11]  : true
<randoop.PrimValue, value=10 [var12]  : true

allSequences.size()=520
-------------------------------------------
randoop.util.Randomness: total calls to random: 3207
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 519 sequences.
components: 519
randoop.util.Randomness: total calls to random: 3208
randoop.util.Randomness: total calls to random: 3209
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 3210
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 519 sequences.
components: 519
randoop.util.Randomness: total calls to random: 3211
randoop.util.Randomness: total calls to random: 3212
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.randomNumber() : var0 
var2 =  method : A.randomNumber() : var0 
var3 =  method : A.randomNumber() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.normal() : var0 
var6 =  method : A.normal() : var0 
var7 =  method : A.randomNumber() : var0 
var8 =  method : A.normal() : var0 
var9 =  method : A.normal() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=0 [var1]  : true
<randoop.PrimValue, value=0 [var2]  : true
<randoop.PrimValue, value=0 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=10 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true
<randoop.PrimValue, value=0 [var7]  : true
<randoop.PrimValue, value=10 [var8]  : true
<randoop.PrimValue, value=10 [var9]  : true

allSequences.size()=521
-------------------------------------------
randoop.util.Randomness: total calls to random: 3213
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 520 sequences.
components: 520
randoop.util.Randomness: total calls to random: 3214
randoop.util.Randomness: total calls to random: 3215
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.randomNumber() : var0 
var2 =  method : A.randomNumber() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.normal() : var0 
var6 =  method : A.normal() : var0 
var7 =  method : A.randomNumber() : var0 
var8 =  method : A.normal() : var0 
var9 =  method : A.randomNumber() : var0 
var10 =  method : A.normal() : var0 
var11 =  method : A.normal() : var0 
var12 =  method : A.randomNumber() : var0 
var13 =  method : A.randomNumber() : var0 
var14 =  method : A.randomNumber() : var0 
var15 =  method : A.normal() : var0 
var16 =  method : A.normal() : var0 
var17 =  method : A.randomNumber() : var0 
var18 =  method : A.randomNumber() : var0 
var19 =  method : A.randomNumber() : var0 
var20 =  method : A.randomNumber() : var0 
var21 =  method : A.randomNumber() : var0 
var22 =  method : A.randomNumber() : var0 
var23 =  method : A.randomNumber() : var0 
var24 =  method : A.normal() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Making index 12 inactive (value is a primitive)
Making index 13 inactive (value is a primitive)
Making index 14 inactive (value is a primitive)
Making index 15 inactive (value is a primitive)
Making index 16 inactive (value is a primitive)
Making index 17 inactive (value is a primitive)
Making index 18 inactive (value is a primitive)
Making index 19 inactive (value is a primitive)
Making index 20 inactive (value is a primitive)
Making index 21 inactive (value is a primitive)
Making index 22 inactive (value is a primitive)
Making index 23 inactive (value is a primitive)
Making index 24 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var10 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var11 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var12 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var13 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var14 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var15 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var16 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var17 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var18 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var19 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var20 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var21 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var22 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var23 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var24 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=0 [var1]  : true
<randoop.PrimValue, value=0 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=10 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true
<randoop.PrimValue, value=0 [var7]  : true
<randoop.PrimValue, value=10 [var8]  : true
<randoop.PrimValue, value=0 [var9]  : true
<randoop.PrimValue, value=10 [var10]  : true
<randoop.PrimValue, value=10 [var11]  : true
<randoop.PrimValue, value=0 [var12]  : true
<randoop.PrimValue, value=0 [var13]  : true
<randoop.PrimValue, value=0 [var14]  : true
<randoop.PrimValue, value=10 [var15]  : true
<randoop.PrimValue, value=10 [var16]  : true
<randoop.PrimValue, value=0 [var17]  : true
<randoop.PrimValue, value=0 [var18]  : true
<randoop.PrimValue, value=0 [var19]  : true
<randoop.PrimValue, value=0 [var20]  : true
<randoop.PrimValue, value=0 [var21]  : true
<randoop.PrimValue, value=0 [var22]  : true
<randoop.PrimValue, value=0 [var23]  : true
<randoop.PrimValue, value=10 [var24]  : true

allSequences.size()=522
-------------------------------------------
randoop.util.Randomness: total calls to random: 3216
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 521 sequences.
components: 521
randoop.util.Randomness: total calls to random: 3217
randoop.util.Randomness: total calls to random: 3218
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.normal() : var0 
var2 =  method : A.randomNumber() : var0 
var3 =  method : A.randomNumber() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.randomNumber() : var0 
var6 =  method : A.randomNumber() : var0 
var7 =  method : A.randomNumber() : var0 
var8 =  method : A.normal() : var0 
var9 =  method : A.randomNumber() : var0 
var10 =  method : A.normal() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var10 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=10 [var1]  : true
<randoop.PrimValue, value=0 [var2]  : true
<randoop.PrimValue, value=0 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=0 [var5]  : true
<randoop.PrimValue, value=0 [var6]  : true
<randoop.PrimValue, value=0 [var7]  : true
<randoop.PrimValue, value=10 [var8]  : true
<randoop.PrimValue, value=0 [var9]  : true
<randoop.PrimValue, value=10 [var10]  : true

allSequences.size()=523
-------------------------------------------
randoop.util.Randomness: total calls to random: 3219
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 522 sequences.
components: 522
randoop.util.Randomness: total calls to random: 3220
randoop.util.Randomness: total calls to random: 3221
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 3222
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 522 sequences.
components: 522
randoop.util.Randomness: total calls to random: 3223
randoop.util.Randomness: total calls to random: 3224
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 3225
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 522 sequences.
components: 522
randoop.util.Randomness: total calls to random: 3226
randoop.util.Randomness: total calls to random: 3227
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.normal() : var0 
var2 =  method : A.normal() : var0 
var3 =  method : A.randomNumber() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.randomNumber() : var0 
var6 =  method : A.normal() : var0 
var7 =  method : A.randomNumber() : var0 
var8 =  method : A.normal() : var0 
var9 =  method : A.normal() : var0 
var10 =  method : A.normal() : var0 
var11 =  method : A.randomNumber() : var0 
var12 =  method : A.randomNumber() : var0 
var13 =  method : A.normal() : var0 
var14 =  method : A.normal() : var0 
var15 =  method : A.randomNumber() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Making index 12 inactive (value is a primitive)
Making index 13 inactive (value is a primitive)
Making index 14 inactive (value is a primitive)
Making index 15 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var10 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var11 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var12 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var13 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var14 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var15 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=10 [var1]  : true
<randoop.PrimValue, value=10 [var2]  : true
<randoop.PrimValue, value=0 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=0 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true
<randoop.PrimValue, value=0 [var7]  : true
<randoop.PrimValue, value=10 [var8]  : true
<randoop.PrimValue, value=10 [var9]  : true
<randoop.PrimValue, value=10 [var10]  : true
<randoop.PrimValue, value=0 [var11]  : true
<randoop.PrimValue, value=0 [var12]  : true
<randoop.PrimValue, value=10 [var13]  : true
<randoop.PrimValue, value=10 [var14]  : true
<randoop.PrimValue, value=0 [var15]  : true

allSequences.size()=524
-------------------------------------------
randoop.util.Randomness: total calls to random: 3228
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 523 sequences.
components: 523
randoop.util.Randomness: total calls to random: 3229
randoop.util.Randomness: total calls to random: 3230
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.normal() : var0 
var2 =  method : A.normal() : var0 
var3 =  method : A.randomNumber() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.randomNumber() : var0 
var6 =  method : A.normal() : var0 
var7 =  method : A.randomNumber() : var0 
var8 =  method : A.randomNumber() : var0 
var9 =  method : A.normal() : var0 
var10 =  method : A.randomNumber() : var0 
var11 =  method : A.normal() : var0 
var12 =  method : A.normal() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Making index 12 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var10 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var11 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var12 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=10 [var1]  : true
<randoop.PrimValue, value=10 [var2]  : true
<randoop.PrimValue, value=0 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=0 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true
<randoop.PrimValue, value=0 [var7]  : true
<randoop.PrimValue, value=0 [var8]  : true
<randoop.PrimValue, value=10 [var9]  : true
<randoop.PrimValue, value=0 [var10]  : true
<randoop.PrimValue, value=10 [var11]  : true
<randoop.PrimValue, value=10 [var12]  : true

allSequences.size()=525
-------------------------------------------
randoop.util.Randomness: total calls to random: 3231
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 524 sequences.
components: 524
randoop.util.Randomness: total calls to random: 3232
randoop.util.Randomness: total calls to random: 3233
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.normal() : var0 
var2 =  method : A.normal() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.randomNumber() : var0 
var6 =  method : A.randomNumber() : var0 
var7 =  method : A.normal() : var0 
var8 =  method : A.randomNumber() : var0 
var9 =  method : A.randomNumber() : var0 
var10 =  method : A.randomNumber() : var0 
var11 =  method : A.randomNumber() : var0 
var12 =  method : A.normal() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Making index 12 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var10 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var11 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var12 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=10 [var1]  : true
<randoop.PrimValue, value=10 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=0 [var5]  : true
<randoop.PrimValue, value=0 [var6]  : true
<randoop.PrimValue, value=10 [var7]  : true
<randoop.PrimValue, value=0 [var8]  : true
<randoop.PrimValue, value=0 [var9]  : true
<randoop.PrimValue, value=0 [var10]  : true
<randoop.PrimValue, value=0 [var11]  : true
<randoop.PrimValue, value=10 [var12]  : true

allSequences.size()=526
-------------------------------------------
randoop.util.Randomness: total calls to random: 3234
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 525 sequences.
components: 525
randoop.util.Randomness: total calls to random: 3235
randoop.util.Randomness: total calls to random: 3236
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.randomNumber() : var0 
var2 =  method : A.randomNumber() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.normal() : var0 
var5 =  method : A.normal() : var0 
var6 =  method : A.randomNumber() : var0 
var7 =  method : A.normal() : var0 
var8 =  method : A.randomNumber() : var0 
var9 =  method : A.normal() : var0 
var10 =  method : A.randomNumber() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var10 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=0 [var1]  : true
<randoop.PrimValue, value=0 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=10 [var4]  : true
<randoop.PrimValue, value=10 [var5]  : true
<randoop.PrimValue, value=0 [var6]  : true
<randoop.PrimValue, value=10 [var7]  : true
<randoop.PrimValue, value=0 [var8]  : true
<randoop.PrimValue, value=10 [var9]  : true
<randoop.PrimValue, value=0 [var10]  : true

allSequences.size()=527
-------------------------------------------
randoop.util.Randomness: total calls to random: 3237
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 526 sequences.
components: 526
randoop.util.Randomness: total calls to random: 3238
randoop.util.Randomness: total calls to random: 3239
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.normal() : var0 
var2 =  method : A.normal() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.randomNumber() : var0 
var6 =  method : A.randomNumber() : var0 
var7 =  method : A.normal() : var0 
var8 =  method : A.normal() : var0 
var9 =  method : A.randomNumber() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=10 [var1]  : true
<randoop.PrimValue, value=10 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=0 [var5]  : true
<randoop.PrimValue, value=0 [var6]  : true
<randoop.PrimValue, value=10 [var7]  : true
<randoop.PrimValue, value=10 [var8]  : true
<randoop.PrimValue, value=0 [var9]  : true

allSequences.size()=528
-------------------------------------------
randoop.util.Randomness: total calls to random: 3240
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 527 sequences.
components: 527
randoop.util.Randomness: total calls to random: 3241
randoop.util.Randomness: total calls to random: 3242
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.normal() : var0 
var2 =  method : A.normal() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.randomNumber() : var0 
var6 =  method : A.randomNumber() : var0 
var7 =  method : A.normal() : var0 
var8 =  method : A.randomNumber() : var0 
var9 =  method : A.randomNumber() : var0 
var10 =  method : A.normal() : var0 
var11 =  method : A.randomNumber() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var10 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var11 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=10 [var1]  : true
<randoop.PrimValue, value=10 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=0 [var5]  : true
<randoop.PrimValue, value=0 [var6]  : true
<randoop.PrimValue, value=10 [var7]  : true
<randoop.PrimValue, value=0 [var8]  : true
<randoop.PrimValue, value=0 [var9]  : true
<randoop.PrimValue, value=10 [var10]  : true
<randoop.PrimValue, value=0 [var11]  : true

allSequences.size()=529
-------------------------------------------
randoop.util.Randomness: total calls to random: 3243
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 528 sequences.
components: 528
randoop.util.Randomness: total calls to random: 3244
randoop.util.Randomness: total calls to random: 3245
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.normal() : var0 
var2 =  method : A.normal() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.normal() : var0 
var5 =  method : A.randomNumber() : var0 
var6 =  method : A.normal() : var0 
var7 =  method : A.randomNumber() : var0 
var8 =  method : A.randomNumber() : var0 
var9 =  method : A.normal() : var0 
var10 =  method : A.normal() : var0 
var11 =  method : A.randomNumber() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var10 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var11 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=10 [var1]  : true
<randoop.PrimValue, value=10 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=10 [var4]  : true
<randoop.PrimValue, value=0 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true
<randoop.PrimValue, value=0 [var7]  : true
<randoop.PrimValue, value=0 [var8]  : true
<randoop.PrimValue, value=10 [var9]  : true
<randoop.PrimValue, value=10 [var10]  : true
<randoop.PrimValue, value=0 [var11]  : true

allSequences.size()=530
-------------------------------------------
randoop.util.Randomness: total calls to random: 3246
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 529 sequences.
components: 529
randoop.util.Randomness: total calls to random: 3247
randoop.util.Randomness: total calls to random: 3248
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.normal() : var0 
var2 =  method : A.normal() : var0 
var3 =  method : A.randomNumber() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.randomNumber() : var0 
var6 =  method : A.normal() : var0 
var7 =  method : A.randomNumber() : var0 
var8 =  method : A.normal() : var0 
var9 =  method : A.normal() : var0 
var10 =  method : A.randomNumber() : var0 
var11 =  method : A.normal() : var0 
var12 =  method : A.randomNumber() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Making index 12 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var10 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var11 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var12 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=10 [var1]  : true
<randoop.PrimValue, value=10 [var2]  : true
<randoop.PrimValue, value=0 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=0 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true
<randoop.PrimValue, value=0 [var7]  : true
<randoop.PrimValue, value=10 [var8]  : true
<randoop.PrimValue, value=10 [var9]  : true
<randoop.PrimValue, value=0 [var10]  : true
<randoop.PrimValue, value=10 [var11]  : true
<randoop.PrimValue, value=0 [var12]  : true

allSequences.size()=531
-------------------------------------------
randoop.util.Randomness: total calls to random: 3249
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 530 sequences.
components: 530
randoop.util.Randomness: total calls to random: 3250
randoop.util.Randomness: total calls to random: 3251
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.normal() : var0 
var2 =  method : A.randomNumber() : var0 
var3 =  method : A.randomNumber() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.normal() : var0 
var6 =  method : A.normal() : var0 
var7 =  method : A.normal() : var0 
var8 =  method : A.randomNumber() : var0 
var9 =  method : A.normal() : var0 
var10 =  method : A.randomNumber() : var0 
var11 =  method : A.normal() : var0 
var12 =  method : A.normal() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Making index 12 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var10 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var11 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var12 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=10 [var1]  : true
<randoop.PrimValue, value=0 [var2]  : true
<randoop.PrimValue, value=0 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=10 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true
<randoop.PrimValue, value=10 [var7]  : true
<randoop.PrimValue, value=0 [var8]  : true
<randoop.PrimValue, value=10 [var9]  : true
<randoop.PrimValue, value=0 [var10]  : true
<randoop.PrimValue, value=10 [var11]  : true
<randoop.PrimValue, value=10 [var12]  : true

allSequences.size()=532
-------------------------------------------
randoop.util.Randomness: total calls to random: 3252
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 531 sequences.
components: 531
randoop.util.Randomness: total calls to random: 3253
randoop.util.Randomness: total calls to random: 3254
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 3255
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 531 sequences.
components: 531
randoop.util.Randomness: total calls to random: 3256
randoop.util.Randomness: total calls to random: 3257
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.normal() : var0 
var2 =  method : A.randomNumber() : var0 
var3 =  method : A.randomNumber() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.randomNumber() : var0 
var6 =  method : A.randomNumber() : var0 
var7 =  method : A.normal() : var0 
var8 =  method : A.normal() : var0 
var9 =  method : A.randomNumber() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=10 [var1]  : true
<randoop.PrimValue, value=0 [var2]  : true
<randoop.PrimValue, value=0 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=0 [var5]  : true
<randoop.PrimValue, value=0 [var6]  : true
<randoop.PrimValue, value=10 [var7]  : true
<randoop.PrimValue, value=10 [var8]  : true
<randoop.PrimValue, value=0 [var9]  : true

allSequences.size()=533
-------------------------------------------
randoop.util.Randomness: total calls to random: 3258
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 532 sequences.
components: 532
randoop.util.Randomness: total calls to random: 3259
randoop.util.Randomness: total calls to random: 3260
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 3261
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 532 sequences.
components: 532
randoop.util.Randomness: total calls to random: 3262
randoop.util.Randomness: total calls to random: 3263
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 3264
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 532 sequences.
components: 532
randoop.util.Randomness: total calls to random: 3265
randoop.util.Randomness: total calls to random: 3266
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 3267
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 532 sequences.
components: 532
randoop.util.Randomness: total calls to random: 3268
randoop.util.Randomness: total calls to random: 3269
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 3270
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 532 sequences.
components: 532
randoop.util.Randomness: total calls to random: 3271
randoop.util.Randomness: total calls to random: 3272
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 3273
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 532 sequences.
components: 532
randoop.util.Randomness: total calls to random: 3274
randoop.util.Randomness: total calls to random: 3275
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 3276
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 532 sequences.
components: 532
randoop.util.Randomness: total calls to random: 3277
randoop.util.Randomness: total calls to random: 3278
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.randomNumber() : var0 
var2 =  method : A.randomNumber() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.normal() : var0 
var6 =  method : A.normal() : var0 
var7 =  method : A.randomNumber() : var0 
var8 =  method : A.normal() : var0 
var9 =  method : A.randomNumber() : var0 
var10 =  method : A.normal() : var0 
var11 =  method : A.normal() : var0 
var12 =  method : A.randomNumber() : var0 
var13 =  method : A.randomNumber() : var0 
var14 =  method : A.normal() : var0 
var15 =  method : A.normal() : var0 
var16 =  method : A.normal() : var0 
var17 =  method : A.normal() : var0 
var18 =  method : A.normal() : var0 
var19 =  method : A.normal() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Making index 12 inactive (value is a primitive)
Making index 13 inactive (value is a primitive)
Making index 14 inactive (value is a primitive)
Making index 15 inactive (value is a primitive)
Making index 16 inactive (value is a primitive)
Making index 17 inactive (value is a primitive)
Making index 18 inactive (value is a primitive)
Making index 19 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var10 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var11 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var12 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var13 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var14 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var15 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var16 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var17 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var18 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var19 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=0 [var1]  : true
<randoop.PrimValue, value=0 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=10 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true
<randoop.PrimValue, value=0 [var7]  : true
<randoop.PrimValue, value=10 [var8]  : true
<randoop.PrimValue, value=0 [var9]  : true
<randoop.PrimValue, value=10 [var10]  : true
<randoop.PrimValue, value=10 [var11]  : true
<randoop.PrimValue, value=0 [var12]  : true
<randoop.PrimValue, value=0 [var13]  : true
<randoop.PrimValue, value=10 [var14]  : true
<randoop.PrimValue, value=10 [var15]  : true
<randoop.PrimValue, value=10 [var16]  : true
<randoop.PrimValue, value=10 [var17]  : true
<randoop.PrimValue, value=10 [var18]  : true
<randoop.PrimValue, value=10 [var19]  : true

allSequences.size()=534
-------------------------------------------
randoop.util.Randomness: total calls to random: 3279
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 533 sequences.
components: 533
randoop.util.Randomness: total calls to random: 3280
randoop.util.Randomness: total calls to random: 3281
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.normal() : var0 
var2 =  method : A.normal() : var0 
var3 =  method : A.randomNumber() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.randomNumber() : var0 
var6 =  method : A.normal() : var0 
var7 =  method : A.randomNumber() : var0 
var8 =  method : A.randomNumber() : var0 
var9 =  method : A.normal() : var0 
var10 =  method : A.randomNumber() : var0 
var11 =  method : A.normal() : var0 
var12 =  method : A.randomNumber() : var0 
var13 =  method : A.normal() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Making index 12 inactive (value is a primitive)
Making index 13 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var10 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var11 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var12 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var13 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=10 [var1]  : true
<randoop.PrimValue, value=10 [var2]  : true
<randoop.PrimValue, value=0 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=0 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true
<randoop.PrimValue, value=0 [var7]  : true
<randoop.PrimValue, value=0 [var8]  : true
<randoop.PrimValue, value=10 [var9]  : true
<randoop.PrimValue, value=0 [var10]  : true
<randoop.PrimValue, value=10 [var11]  : true
<randoop.PrimValue, value=0 [var12]  : true
<randoop.PrimValue, value=10 [var13]  : true

allSequences.size()=535
-------------------------------------------
randoop.util.Randomness: total calls to random: 3282
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 534 sequences.
components: 534
randoop.util.Randomness: total calls to random: 3283
randoop.util.Randomness: total calls to random: 3284
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 3285
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 534 sequences.
components: 534
randoop.util.Randomness: total calls to random: 3286
randoop.util.Randomness: total calls to random: 3287
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 3288
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 534 sequences.
components: 534
randoop.util.Randomness: total calls to random: 3289
randoop.util.Randomness: total calls to random: 3290
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.randomNumber() : var0 
var2 =  method : A.randomNumber() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.normal() : var0 
var6 =  method : A.normal() : var0 
var7 =  method : A.randomNumber() : var0 
var8 =  method : A.randomNumber() : var0 
var9 =  method : A.randomNumber() : var0 
var10 =  method : A.randomNumber() : var0 
var11 =  method : A.normal() : var0 
var12 =  method : A.randomNumber() : var0 
var13 =  method : A.normal() : var0 
var14 =  method : A.normal() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Making index 12 inactive (value is a primitive)
Making index 13 inactive (value is a primitive)
Making index 14 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var10 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var11 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var12 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var13 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var14 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=0 [var1]  : true
<randoop.PrimValue, value=0 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=10 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true
<randoop.PrimValue, value=0 [var7]  : true
<randoop.PrimValue, value=0 [var8]  : true
<randoop.PrimValue, value=0 [var9]  : true
<randoop.PrimValue, value=0 [var10]  : true
<randoop.PrimValue, value=10 [var11]  : true
<randoop.PrimValue, value=0 [var12]  : true
<randoop.PrimValue, value=10 [var13]  : true
<randoop.PrimValue, value=10 [var14]  : true

allSequences.size()=536
-------------------------------------------
randoop.util.Randomness: total calls to random: 3291
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 535 sequences.
components: 535
randoop.util.Randomness: total calls to random: 3292
randoop.util.Randomness: total calls to random: 3293
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.normal() : var0 
var2 =  method : A.normal() : var0 
var3 =  method : A.randomNumber() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.randomNumber() : var0 
var6 =  method : A.normal() : var0 
var7 =  method : A.randomNumber() : var0 
var8 =  method : A.normal() : var0 
var9 =  method : A.normal() : var0 
var10 =  method : A.normal() : var0 
var11 =  method : A.randomNumber() : var0 
var12 =  method : A.randomNumber() : var0 
var13 =  method : A.normal() : var0 
var14 =  method : A.normal() : var0 
var15 =  method : A.randomNumber() : var0 
var16 =  method : A.randomNumber() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Making index 12 inactive (value is a primitive)
Making index 13 inactive (value is a primitive)
Making index 14 inactive (value is a primitive)
Making index 15 inactive (value is a primitive)
Making index 16 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var10 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var11 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var12 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var13 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var14 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var15 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var16 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=10 [var1]  : true
<randoop.PrimValue, value=10 [var2]  : true
<randoop.PrimValue, value=0 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=0 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true
<randoop.PrimValue, value=0 [var7]  : true
<randoop.PrimValue, value=10 [var8]  : true
<randoop.PrimValue, value=10 [var9]  : true
<randoop.PrimValue, value=10 [var10]  : true
<randoop.PrimValue, value=0 [var11]  : true
<randoop.PrimValue, value=0 [var12]  : true
<randoop.PrimValue, value=10 [var13]  : true
<randoop.PrimValue, value=10 [var14]  : true
<randoop.PrimValue, value=0 [var15]  : true
<randoop.PrimValue, value=0 [var16]  : true

allSequences.size()=537
-------------------------------------------
randoop.util.Randomness: total calls to random: 3294
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 536 sequences.
components: 536
randoop.util.Randomness: total calls to random: 3295
randoop.util.Randomness: total calls to random: 3296
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.randomNumber() : var0 
var2 =  method : A.randomNumber() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.normal() : var0 
var6 =  method : A.normal() : var0 
var7 =  method : A.randomNumber() : var0 
var8 =  method : A.normal() : var0 
var9 =  method : A.randomNumber() : var0 
var10 =  method : A.normal() : var0 
var11 =  method : A.normal() : var0 
var12 =  method : A.randomNumber() : var0 
var13 =  method : A.randomNumber() : var0 
var14 =  method : A.randomNumber() : var0 
var15 =  method : A.normal() : var0 
var16 =  method : A.normal() : var0 
var17 =  method : A.randomNumber() : var0 
var18 =  method : A.randomNumber() : var0 
var19 =  method : A.randomNumber() : var0 
var20 =  method : A.normal() : var0 
var21 =  method : A.randomNumber() : var0 
var22 =  method : A.randomNumber() : var0 
var23 =  method : A.normal() : var0 
var24 =  method : A.randomNumber() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Making index 12 inactive (value is a primitive)
Making index 13 inactive (value is a primitive)
Making index 14 inactive (value is a primitive)
Making index 15 inactive (value is a primitive)
Making index 16 inactive (value is a primitive)
Making index 17 inactive (value is a primitive)
Making index 18 inactive (value is a primitive)
Making index 19 inactive (value is a primitive)
Making index 20 inactive (value is a primitive)
Making index 21 inactive (value is a primitive)
Making index 22 inactive (value is a primitive)
Making index 23 inactive (value is a primitive)
Making index 24 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var10 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var11 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var12 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var13 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var14 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var15 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var16 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var17 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var18 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var19 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var20 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var21 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var22 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var23 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var24 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=0 [var1]  : true
<randoop.PrimValue, value=0 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=10 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true
<randoop.PrimValue, value=0 [var7]  : true
<randoop.PrimValue, value=10 [var8]  : true
<randoop.PrimValue, value=0 [var9]  : true
<randoop.PrimValue, value=10 [var10]  : true
<randoop.PrimValue, value=10 [var11]  : true
<randoop.PrimValue, value=0 [var12]  : true
<randoop.PrimValue, value=0 [var13]  : true
<randoop.PrimValue, value=0 [var14]  : true
<randoop.PrimValue, value=10 [var15]  : true
<randoop.PrimValue, value=10 [var16]  : true
<randoop.PrimValue, value=0 [var17]  : true
<randoop.PrimValue, value=0 [var18]  : true
<randoop.PrimValue, value=0 [var19]  : true
<randoop.PrimValue, value=10 [var20]  : true
<randoop.PrimValue, value=0 [var21]  : true
<randoop.PrimValue, value=0 [var22]  : true
<randoop.PrimValue, value=10 [var23]  : true
<randoop.PrimValue, value=0 [var24]  : true

allSequences.size()=538
-------------------------------------------
randoop.util.Randomness: total calls to random: 3297
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 537 sequences.
components: 537
randoop.util.Randomness: total calls to random: 3298
randoop.util.Randomness: total calls to random: 3299
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 3300
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 537 sequences.
components: 537
randoop.util.Randomness: total calls to random: 3301
randoop.util.Randomness: total calls to random: 3302
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 3303
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 537 sequences.
components: 537
randoop.util.Randomness: total calls to random: 3304
randoop.util.Randomness: total calls to random: 3305
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 3306
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 537 sequences.
components: 537
randoop.util.Randomness: total calls to random: 3307
randoop.util.Randomness: total calls to random: 3308
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.randomNumber() : var0 
var2 =  method : A.randomNumber() : var0 
var3 =  method : A.randomNumber() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.randomNumber() : var0 
var6 =  method : A.normal() : var0 
var7 =  method : A.normal() : var0 
var8 =  method : A.randomNumber() : var0 
var9 =  method : A.randomNumber() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=0 [var1]  : true
<randoop.PrimValue, value=0 [var2]  : true
<randoop.PrimValue, value=0 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=0 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true
<randoop.PrimValue, value=10 [var7]  : true
<randoop.PrimValue, value=0 [var8]  : true
<randoop.PrimValue, value=0 [var9]  : true

allSequences.size()=539
-------------------------------------------
randoop.util.Randomness: total calls to random: 3309
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 538 sequences.
components: 538
randoop.util.Randomness: total calls to random: 3310
randoop.util.Randomness: total calls to random: 3311
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.randomNumber() : var0 
var2 =  method : A.randomNumber() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.normal() : var0 
var6 =  method : A.normal() : var0 
var7 =  method : A.randomNumber() : var0 
var8 =  method : A.normal() : var0 
var9 =  method : A.randomNumber() : var0 
var10 =  method : A.normal() : var0 
var11 =  method : A.normal() : var0 
var12 =  method : A.randomNumber() : var0 
var13 =  method : A.randomNumber() : var0 
var14 =  method : A.randomNumber() : var0 
var15 =  method : A.normal() : var0 
var16 =  method : A.normal() : var0 
var17 =  method : A.randomNumber() : var0 
var18 =  method : A.randomNumber() : var0 
var19 =  method : A.normal() : var0 
var20 =  method : A.randomNumber() : var0 
var21 =  method : A.randomNumber() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Making index 12 inactive (value is a primitive)
Making index 13 inactive (value is a primitive)
Making index 14 inactive (value is a primitive)
Making index 15 inactive (value is a primitive)
Making index 16 inactive (value is a primitive)
Making index 17 inactive (value is a primitive)
Making index 18 inactive (value is a primitive)
Making index 19 inactive (value is a primitive)
Making index 20 inactive (value is a primitive)
Making index 21 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var10 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var11 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var12 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var13 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var14 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var15 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var16 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var17 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var18 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var19 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var20 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var21 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=0 [var1]  : true
<randoop.PrimValue, value=0 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=10 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true
<randoop.PrimValue, value=0 [var7]  : true
<randoop.PrimValue, value=10 [var8]  : true
<randoop.PrimValue, value=0 [var9]  : true
<randoop.PrimValue, value=10 [var10]  : true
<randoop.PrimValue, value=10 [var11]  : true
<randoop.PrimValue, value=0 [var12]  : true
<randoop.PrimValue, value=0 [var13]  : true
<randoop.PrimValue, value=0 [var14]  : true
<randoop.PrimValue, value=10 [var15]  : true
<randoop.PrimValue, value=10 [var16]  : true
<randoop.PrimValue, value=0 [var17]  : true
<randoop.PrimValue, value=0 [var18]  : true
<randoop.PrimValue, value=10 [var19]  : true
<randoop.PrimValue, value=0 [var20]  : true
<randoop.PrimValue, value=0 [var21]  : true

allSequences.size()=540
-------------------------------------------
randoop.util.Randomness: total calls to random: 3312
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 539 sequences.
components: 539
randoop.util.Randomness: total calls to random: 3313
randoop.util.Randomness: total calls to random: 3314
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 3315
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 539 sequences.
components: 539
randoop.util.Randomness: total calls to random: 3316
randoop.util.Randomness: total calls to random: 3317
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.randomNumber() : var0 
var2 =  method : A.normal() : var0 
var3 =  method : A.randomNumber() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.normal() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=0 [var1]  : true
<randoop.PrimValue, value=10 [var2]  : true
<randoop.PrimValue, value=0 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=10 [var5]  : true

allSequences.size()=541
-------------------------------------------
randoop.util.Randomness: total calls to random: 3318
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 540 sequences.
components: 540
randoop.util.Randomness: total calls to random: 3319
randoop.util.Randomness: total calls to random: 3320
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.normal() : var0 
var2 =  method : A.randomNumber() : var0 
var3 =  method : A.randomNumber() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.normal() : var0 
var6 =  method : A.normal() : var0 
var7 =  method : A.normal() : var0 
var8 =  method : A.randomNumber() : var0 
var9 =  method : A.normal() : var0 
var10 =  method : A.randomNumber() : var0 
var11 =  method : A.randomNumber() : var0 
var12 =  method : A.randomNumber() : var0 
var13 =  method : A.randomNumber() : var0 
var14 =  method : A.randomNumber() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Making index 12 inactive (value is a primitive)
Making index 13 inactive (value is a primitive)
Making index 14 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var10 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var11 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var12 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var13 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var14 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=10 [var1]  : true
<randoop.PrimValue, value=0 [var2]  : true
<randoop.PrimValue, value=0 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=10 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true
<randoop.PrimValue, value=10 [var7]  : true
<randoop.PrimValue, value=0 [var8]  : true
<randoop.PrimValue, value=10 [var9]  : true
<randoop.PrimValue, value=0 [var10]  : true
<randoop.PrimValue, value=0 [var11]  : true
<randoop.PrimValue, value=0 [var12]  : true
<randoop.PrimValue, value=0 [var13]  : true
<randoop.PrimValue, value=0 [var14]  : true

allSequences.size()=542
-------------------------------------------
randoop.util.Randomness: total calls to random: 3321
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 541 sequences.
components: 541
randoop.util.Randomness: total calls to random: 3322
randoop.util.Randomness: total calls to random: 3323
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.randomNumber() : var0 
var2 =  method : A.randomNumber() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.normal() : var0 
var6 =  method : A.normal() : var0 
var7 =  method : A.randomNumber() : var0 
var8 =  method : A.normal() : var0 
var9 =  method : A.normal() : var0 
var10 =  method : A.normal() : var0 
var11 =  method : A.randomNumber() : var0 
var12 =  method : A.normal() : var0 
var13 =  method : A.randomNumber() : var0 
var14 =  method : A.randomNumber() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Making index 12 inactive (value is a primitive)
Making index 13 inactive (value is a primitive)
Making index 14 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var10 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var11 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var12 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var13 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var14 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=0 [var1]  : true
<randoop.PrimValue, value=0 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=10 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true
<randoop.PrimValue, value=0 [var7]  : true
<randoop.PrimValue, value=10 [var8]  : true
<randoop.PrimValue, value=10 [var9]  : true
<randoop.PrimValue, value=10 [var10]  : true
<randoop.PrimValue, value=0 [var11]  : true
<randoop.PrimValue, value=10 [var12]  : true
<randoop.PrimValue, value=0 [var13]  : true
<randoop.PrimValue, value=0 [var14]  : true

allSequences.size()=543
-------------------------------------------
randoop.util.Randomness: total calls to random: 3324
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 542 sequences.
components: 542
randoop.util.Randomness: total calls to random: 3325
randoop.util.Randomness: total calls to random: 3326
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 3327
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 542 sequences.
components: 542
randoop.util.Randomness: total calls to random: 3328
randoop.util.Randomness: total calls to random: 3329
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.normal() : var0 
var2 =  method : A.normal() : var0 
var3 =  method : A.randomNumber() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.randomNumber() : var0 
var6 =  method : A.normal() : var0 
var7 =  method : A.randomNumber() : var0 
var8 =  method : A.normal() : var0 
var9 =  method : A.normal() : var0 
var10 =  method : A.normal() : var0 
var11 =  method : A.randomNumber() : var0 
var12 =  method : A.randomNumber() : var0 
var13 =  method : A.randomNumber() : var0 
var14 =  method : A.normal() : var0 
var15 =  method : A.randomNumber() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Making index 12 inactive (value is a primitive)
Making index 13 inactive (value is a primitive)
Making index 14 inactive (value is a primitive)
Making index 15 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var10 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var11 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var12 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var13 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var14 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var15 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=10 [var1]  : true
<randoop.PrimValue, value=10 [var2]  : true
<randoop.PrimValue, value=0 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=0 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true
<randoop.PrimValue, value=0 [var7]  : true
<randoop.PrimValue, value=10 [var8]  : true
<randoop.PrimValue, value=10 [var9]  : true
<randoop.PrimValue, value=10 [var10]  : true
<randoop.PrimValue, value=0 [var11]  : true
<randoop.PrimValue, value=0 [var12]  : true
<randoop.PrimValue, value=0 [var13]  : true
<randoop.PrimValue, value=10 [var14]  : true
<randoop.PrimValue, value=0 [var15]  : true

allSequences.size()=544
-------------------------------------------
randoop.util.Randomness: total calls to random: 3330
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 543 sequences.
components: 543
randoop.util.Randomness: total calls to random: 3331
randoop.util.Randomness: total calls to random: 3332
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.randomNumber() : var0 
var2 =  method : A.randomNumber() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.normal() : var0 
var5 =  method : A.normal() : var0 
var6 =  method : A.randomNumber() : var0 
var7 =  method : A.normal() : var0 
var8 =  method : A.randomNumber() : var0 
var9 =  method : A.randomNumber() : var0 
var10 =  method : A.normal() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var10 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=0 [var1]  : true
<randoop.PrimValue, value=0 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=10 [var4]  : true
<randoop.PrimValue, value=10 [var5]  : true
<randoop.PrimValue, value=0 [var6]  : true
<randoop.PrimValue, value=10 [var7]  : true
<randoop.PrimValue, value=0 [var8]  : true
<randoop.PrimValue, value=0 [var9]  : true
<randoop.PrimValue, value=10 [var10]  : true

allSequences.size()=545
-------------------------------------------
randoop.util.Randomness: total calls to random: 3333
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 544 sequences.
components: 544
randoop.util.Randomness: total calls to random: 3334
randoop.util.Randomness: total calls to random: 3335
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 3336
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 544 sequences.
components: 544
randoop.util.Randomness: total calls to random: 3337
randoop.util.Randomness: total calls to random: 3338
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 3339
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 544 sequences.
components: 544
randoop.util.Randomness: total calls to random: 3340
randoop.util.Randomness: total calls to random: 3341
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.randomNumber() : var0 
var2 =  method : A.randomNumber() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.normal() : var0 
var5 =  method : A.normal() : var0 
var6 =  method : A.randomNumber() : var0 
var7 =  method : A.normal() : var0 
var8 =  method : A.normal() : var0 
var9 =  method : A.normal() : var0 
var10 =  method : A.normal() : var0 
var11 =  method : A.randomNumber() : var0 
var12 =  method : A.randomNumber() : var0 
var13 =  method : A.randomNumber() : var0 
var14 =  method : A.randomNumber() : var0 
var15 =  method : A.randomNumber() : var0 
var16 =  method : A.normal() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Making index 12 inactive (value is a primitive)
Making index 13 inactive (value is a primitive)
Making index 14 inactive (value is a primitive)
Making index 15 inactive (value is a primitive)
Making index 16 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var10 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var11 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var12 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var13 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var14 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var15 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var16 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=0 [var1]  : true
<randoop.PrimValue, value=0 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=10 [var4]  : true
<randoop.PrimValue, value=10 [var5]  : true
<randoop.PrimValue, value=0 [var6]  : true
<randoop.PrimValue, value=10 [var7]  : true
<randoop.PrimValue, value=10 [var8]  : true
<randoop.PrimValue, value=10 [var9]  : true
<randoop.PrimValue, value=10 [var10]  : true
<randoop.PrimValue, value=0 [var11]  : true
<randoop.PrimValue, value=0 [var12]  : true
<randoop.PrimValue, value=0 [var13]  : true
<randoop.PrimValue, value=0 [var14]  : true
<randoop.PrimValue, value=0 [var15]  : true
<randoop.PrimValue, value=10 [var16]  : true

allSequences.size()=546
-------------------------------------------
randoop.util.Randomness: total calls to random: 3342
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 545 sequences.
components: 545
randoop.util.Randomness: total calls to random: 3343
randoop.util.Randomness: total calls to random: 3344
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.normal() : var0 
var2 =  method : A.normal() : var0 
var3 =  method : A.randomNumber() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.randomNumber() : var0 
var6 =  method : A.normal() : var0 
var7 =  method : A.randomNumber() : var0 
var8 =  method : A.normal() : var0 
var9 =  method : A.normal() : var0 
var10 =  method : A.normal() : var0 
var11 =  method : A.randomNumber() : var0 
var12 =  method : A.normal() : var0 
var13 =  method : A.randomNumber() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Making index 12 inactive (value is a primitive)
Making index 13 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var10 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var11 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var12 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var13 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=10 [var1]  : true
<randoop.PrimValue, value=10 [var2]  : true
<randoop.PrimValue, value=0 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=0 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true
<randoop.PrimValue, value=0 [var7]  : true
<randoop.PrimValue, value=10 [var8]  : true
<randoop.PrimValue, value=10 [var9]  : true
<randoop.PrimValue, value=10 [var10]  : true
<randoop.PrimValue, value=0 [var11]  : true
<randoop.PrimValue, value=10 [var12]  : true
<randoop.PrimValue, value=0 [var13]  : true

allSequences.size()=547
-------------------------------------------
randoop.util.Randomness: total calls to random: 3345
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 546 sequences.
components: 546
randoop.util.Randomness: total calls to random: 3346
randoop.util.Randomness: total calls to random: 3347
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.randomNumber() : var0 
var2 =  method : A.randomNumber() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.normal() : var0 
var6 =  method : A.normal() : var0 
var7 =  method : A.randomNumber() : var0 
var8 =  method : A.normal() : var0 
var9 =  method : A.randomNumber() : var0 
var10 =  method : A.normal() : var0 
var11 =  method : A.normal() : var0 
var12 =  method : A.randomNumber() : var0 
var13 =  method : A.randomNumber() : var0 
var14 =  method : A.randomNumber() : var0 
var15 =  method : A.randomNumber() : var0 
var16 =  method : A.randomNumber() : var0 
var17 =  method : A.normal() : var0 
var18 =  method : A.normal() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Making index 12 inactive (value is a primitive)
Making index 13 inactive (value is a primitive)
Making index 14 inactive (value is a primitive)
Making index 15 inactive (value is a primitive)
Making index 16 inactive (value is a primitive)
Making index 17 inactive (value is a primitive)
Making index 18 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var10 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var11 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var12 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var13 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var14 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var15 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var16 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var17 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var18 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=0 [var1]  : true
<randoop.PrimValue, value=0 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=10 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true
<randoop.PrimValue, value=0 [var7]  : true
<randoop.PrimValue, value=10 [var8]  : true
<randoop.PrimValue, value=0 [var9]  : true
<randoop.PrimValue, value=10 [var10]  : true
<randoop.PrimValue, value=10 [var11]  : true
<randoop.PrimValue, value=0 [var12]  : true
<randoop.PrimValue, value=0 [var13]  : true
<randoop.PrimValue, value=0 [var14]  : true
<randoop.PrimValue, value=0 [var15]  : true
<randoop.PrimValue, value=0 [var16]  : true
<randoop.PrimValue, value=10 [var17]  : true
<randoop.PrimValue, value=10 [var18]  : true

allSequences.size()=548
-------------------------------------------
randoop.util.Randomness: total calls to random: 3348
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 547 sequences.
components: 547
randoop.util.Randomness: total calls to random: 3349
randoop.util.Randomness: total calls to random: 3350
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 3351
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 547 sequences.
components: 547
randoop.util.Randomness: total calls to random: 3352
randoop.util.Randomness: total calls to random: 3353
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 3354
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 547 sequences.
components: 547
randoop.util.Randomness: total calls to random: 3355
randoop.util.Randomness: total calls to random: 3356
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 3357
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 547 sequences.
components: 547
randoop.util.Randomness: total calls to random: 3358
randoop.util.Randomness: total calls to random: 3359
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 3360
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 547 sequences.
components: 547
randoop.util.Randomness: total calls to random: 3361
randoop.util.Randomness: total calls to random: 3362
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.randomNumber() : var0 
var2 =  method : A.randomNumber() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.normal() : var0 
var6 =  method : A.normal() : var0 
var7 =  method : A.randomNumber() : var0 
var8 =  method : A.normal() : var0 
var9 =  method : A.randomNumber() : var0 
var10 =  method : A.normal() : var0 
var11 =  method : A.normal() : var0 
var12 =  method : A.randomNumber() : var0 
var13 =  method : A.randomNumber() : var0 
var14 =  method : A.randomNumber() : var0 
var15 =  method : A.normal() : var0 
var16 =  method : A.normal() : var0 
var17 =  method : A.randomNumber() : var0 
var18 =  method : A.randomNumber() : var0 
var19 =  method : A.randomNumber() : var0 
var20 =  method : A.randomNumber() : var0 
var21 =  method : A.normal() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Making index 12 inactive (value is a primitive)
Making index 13 inactive (value is a primitive)
Making index 14 inactive (value is a primitive)
Making index 15 inactive (value is a primitive)
Making index 16 inactive (value is a primitive)
Making index 17 inactive (value is a primitive)
Making index 18 inactive (value is a primitive)
Making index 19 inactive (value is a primitive)
Making index 20 inactive (value is a primitive)
Making index 21 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var10 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var11 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var12 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var13 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var14 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var15 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var16 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var17 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var18 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var19 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var20 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var21 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=0 [var1]  : true
<randoop.PrimValue, value=0 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=10 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true
<randoop.PrimValue, value=0 [var7]  : true
<randoop.PrimValue, value=10 [var8]  : true
<randoop.PrimValue, value=0 [var9]  : true
<randoop.PrimValue, value=10 [var10]  : true
<randoop.PrimValue, value=10 [var11]  : true
<randoop.PrimValue, value=0 [var12]  : true
<randoop.PrimValue, value=0 [var13]  : true
<randoop.PrimValue, value=0 [var14]  : true
<randoop.PrimValue, value=10 [var15]  : true
<randoop.PrimValue, value=10 [var16]  : true
<randoop.PrimValue, value=0 [var17]  : true
<randoop.PrimValue, value=0 [var18]  : true
<randoop.PrimValue, value=0 [var19]  : true
<randoop.PrimValue, value=0 [var20]  : true
<randoop.PrimValue, value=10 [var21]  : true

allSequences.size()=549
-------------------------------------------
randoop.util.Randomness: total calls to random: 3363
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 548 sequences.
components: 548
randoop.util.Randomness: total calls to random: 3364
randoop.util.Randomness: total calls to random: 3365
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 3366
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 548 sequences.
components: 548
randoop.util.Randomness: total calls to random: 3367
randoop.util.Randomness: total calls to random: 3368
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 3369
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 548 sequences.
components: 548
randoop.util.Randomness: total calls to random: 3370
randoop.util.Randomness: total calls to random: 3371
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.normal() : var0 
var2 =  method : A.normal() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.normal() : var0 
var5 =  method : A.normal() : var0 
var6 =  method : A.normal() : var0 
var7 =  method : A.randomNumber() : var0 
var8 =  method : A.normal() : var0 
var9 =  method : A.normal() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=10 [var1]  : true
<randoop.PrimValue, value=10 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=10 [var4]  : true
<randoop.PrimValue, value=10 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true
<randoop.PrimValue, value=0 [var7]  : true
<randoop.PrimValue, value=10 [var8]  : true
<randoop.PrimValue, value=10 [var9]  : true

allSequences.size()=550
-------------------------------------------
randoop.util.Randomness: total calls to random: 3372
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 549 sequences.
components: 549
randoop.util.Randomness: total calls to random: 3373
randoop.util.Randomness: total calls to random: 3374
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.normal() : var0 
var2 =  method : A.randomNumber() : var0 
var3 =  method : A.randomNumber() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.normal() : var0 
var6 =  method : A.normal() : var0 
var7 =  method : A.normal() : var0 
var8 =  method : A.normal() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=10 [var1]  : true
<randoop.PrimValue, value=0 [var2]  : true
<randoop.PrimValue, value=0 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=10 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true
<randoop.PrimValue, value=10 [var7]  : true
<randoop.PrimValue, value=10 [var8]  : true

allSequences.size()=551
-------------------------------------------
randoop.util.Randomness: total calls to random: 3375
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 550 sequences.
components: 550
randoop.util.Randomness: total calls to random: 3376
randoop.util.Randomness: total calls to random: 3377
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 3378
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 550 sequences.
components: 550
randoop.util.Randomness: total calls to random: 3379
randoop.util.Randomness: total calls to random: 3380
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.normal() : var0 
var2 =  method : A.randomNumber() : var0 
var3 =  method : A.randomNumber() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.normal() : var0 
var6 =  method : A.randomNumber() : var0 
var7 =  method : A.randomNumber() : var0 
var8 =  method : A.normal() : var0 
var9 =  method : A.normal() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=10 [var1]  : true
<randoop.PrimValue, value=0 [var2]  : true
<randoop.PrimValue, value=0 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=10 [var5]  : true
<randoop.PrimValue, value=0 [var6]  : true
<randoop.PrimValue, value=0 [var7]  : true
<randoop.PrimValue, value=10 [var8]  : true
<randoop.PrimValue, value=10 [var9]  : true

allSequences.size()=552
-------------------------------------------
randoop.util.Randomness: total calls to random: 3381
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 551 sequences.
components: 551
randoop.util.Randomness: total calls to random: 3382
randoop.util.Randomness: total calls to random: 3383
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.normal() : var0 
var2 =  method : A.normal() : var0 
var3 =  method : A.randomNumber() : var0 
var4 =  method : A.normal() : var0 
var5 =  method : A.randomNumber() : var0 
var6 =  method : A.randomNumber() : var0 
var7 =  method : A.randomNumber() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=10 [var1]  : true
<randoop.PrimValue, value=10 [var2]  : true
<randoop.PrimValue, value=0 [var3]  : true
<randoop.PrimValue, value=10 [var4]  : true
<randoop.PrimValue, value=0 [var5]  : true
<randoop.PrimValue, value=0 [var6]  : true
<randoop.PrimValue, value=0 [var7]  : true

allSequences.size()=553
-------------------------------------------
randoop.util.Randomness: total calls to random: 3384
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 552 sequences.
components: 552
randoop.util.Randomness: total calls to random: 3385
randoop.util.Randomness: total calls to random: 3386
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.randomNumber() : var0 
var2 =  method : A.randomNumber() : var0 
var3 =  method : A.randomNumber() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.normal() : var0 
var6 =  method : A.normal() : var0 
var7 =  method : A.randomNumber() : var0 
var8 =  method : A.normal() : var0 
var9 =  method : A.normal() : var0 
var10 =  method : A.randomNumber() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var10 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=0 [var1]  : true
<randoop.PrimValue, value=0 [var2]  : true
<randoop.PrimValue, value=0 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=10 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true
<randoop.PrimValue, value=0 [var7]  : true
<randoop.PrimValue, value=10 [var8]  : true
<randoop.PrimValue, value=10 [var9]  : true
<randoop.PrimValue, value=0 [var10]  : true

allSequences.size()=554
-------------------------------------------
randoop.util.Randomness: total calls to random: 3387
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 553 sequences.
components: 553
randoop.util.Randomness: total calls to random: 3388
randoop.util.Randomness: total calls to random: 3389
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.randomNumber() : var0 
var2 =  method : A.randomNumber() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.normal() : var0 
var6 =  method : A.normal() : var0 
var7 =  method : A.normal() : var0 
var8 =  method : A.normal() : var0 
var9 =  method : A.randomNumber() : var0 
var10 =  method : A.normal() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var10 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=0 [var1]  : true
<randoop.PrimValue, value=0 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=10 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true
<randoop.PrimValue, value=10 [var7]  : true
<randoop.PrimValue, value=10 [var8]  : true
<randoop.PrimValue, value=0 [var9]  : true
<randoop.PrimValue, value=10 [var10]  : true

allSequences.size()=555
-------------------------------------------
randoop.util.Randomness: total calls to random: 3390
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 554 sequences.
components: 554
randoop.util.Randomness: total calls to random: 3391
randoop.util.Randomness: total calls to random: 3392
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 3393
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 554 sequences.
components: 554
randoop.util.Randomness: total calls to random: 3394
randoop.util.Randomness: total calls to random: 3395
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.normal() : var0 
var2 =  method : A.normal() : var0 
var3 =  method : A.randomNumber() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.randomNumber() : var0 
var6 =  method : A.normal() : var0 
var7 =  method : A.randomNumber() : var0 
var8 =  method : A.randomNumber() : var0 
var9 =  method : A.normal() : var0 
var10 =  method : A.normal() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var10 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=10 [var1]  : true
<randoop.PrimValue, value=10 [var2]  : true
<randoop.PrimValue, value=0 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=0 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true
<randoop.PrimValue, value=0 [var7]  : true
<randoop.PrimValue, value=0 [var8]  : true
<randoop.PrimValue, value=10 [var9]  : true
<randoop.PrimValue, value=10 [var10]  : true

allSequences.size()=556
-------------------------------------------
randoop.util.Randomness: total calls to random: 3396
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 555 sequences.
components: 555
randoop.util.Randomness: total calls to random: 3397
randoop.util.Randomness: total calls to random: 3398
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.normal() : var0 
var2 =  method : A.normal() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.normal() : var0 
var5 =  method : A.randomNumber() : var0 
var6 =  method : A.normal() : var0 
var7 =  method : A.normal() : var0 
var8 =  method : A.randomNumber() : var0 
var9 =  method : A.randomNumber() : var0 
var10 =  method : A.normal() : var0 
var11 =  method : A.randomNumber() : var0 
var12 =  method : A.randomNumber() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Making index 12 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var10 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var11 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var12 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=10 [var1]  : true
<randoop.PrimValue, value=10 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=10 [var4]  : true
<randoop.PrimValue, value=0 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true
<randoop.PrimValue, value=10 [var7]  : true
<randoop.PrimValue, value=0 [var8]  : true
<randoop.PrimValue, value=0 [var9]  : true
<randoop.PrimValue, value=10 [var10]  : true
<randoop.PrimValue, value=0 [var11]  : true
<randoop.PrimValue, value=0 [var12]  : true

allSequences.size()=557
-------------------------------------------
randoop.util.Randomness: total calls to random: 3399
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 556 sequences.
components: 556
randoop.util.Randomness: total calls to random: 3400
randoop.util.Randomness: total calls to random: 3401
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.randomNumber() : var0 
var2 =  method : A.randomNumber() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.randomNumber() : var0 
var6 =  method : A.normal() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=0 [var1]  : true
<randoop.PrimValue, value=0 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=0 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true

allSequences.size()=558
-------------------------------------------
randoop.util.Randomness: total calls to random: 3402
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 557 sequences.
components: 557
randoop.util.Randomness: total calls to random: 3403
randoop.util.Randomness: total calls to random: 3404
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 3405
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 557 sequences.
components: 557
randoop.util.Randomness: total calls to random: 3406
randoop.util.Randomness: total calls to random: 3407
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 3408
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 557 sequences.
components: 557
randoop.util.Randomness: total calls to random: 3409
randoop.util.Randomness: total calls to random: 3410
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 3411
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 557 sequences.
components: 557
randoop.util.Randomness: total calls to random: 3412
randoop.util.Randomness: total calls to random: 3413
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 3414
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 557 sequences.
components: 557
randoop.util.Randomness: total calls to random: 3415
randoop.util.Randomness: total calls to random: 3416
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.randomNumber() : var0 
var2 =  method : A.normal() : var0 
var3 =  method : A.randomNumber() : var0 
var4 =  method : A.normal() : var0 
var5 =  method : A.randomNumber() : var0 
var6 =  method : A.normal() : var0 
var7 =  method : A.normal() : var0 
var8 =  method : A.normal() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=0 [var1]  : true
<randoop.PrimValue, value=10 [var2]  : true
<randoop.PrimValue, value=0 [var3]  : true
<randoop.PrimValue, value=10 [var4]  : true
<randoop.PrimValue, value=0 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true
<randoop.PrimValue, value=10 [var7]  : true
<randoop.PrimValue, value=10 [var8]  : true

allSequences.size()=559
-------------------------------------------
randoop.util.Randomness: total calls to random: 3417
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 558 sequences.
components: 558
randoop.util.Randomness: total calls to random: 3418
randoop.util.Randomness: total calls to random: 3419
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 3420
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 558 sequences.
components: 558
randoop.util.Randomness: total calls to random: 3421
randoop.util.Randomness: total calls to random: 3422
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 3423
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 558 sequences.
components: 558
randoop.util.Randomness: total calls to random: 3424
randoop.util.Randomness: total calls to random: 3425
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 3426
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 558 sequences.
components: 558
randoop.util.Randomness: total calls to random: 3427
randoop.util.Randomness: total calls to random: 3428
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.randomNumber() : var0 
var2 =  method : A.randomNumber() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.normal() : var0 
var5 =  method : A.normal() : var0 
var6 =  method : A.randomNumber() : var0 
var7 =  method : A.randomNumber() : var0 
var8 =  method : A.randomNumber() : var0 
var9 =  method : A.normal() : var0 
var10 =  method : A.normal() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var10 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=0 [var1]  : true
<randoop.PrimValue, value=0 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=10 [var4]  : true
<randoop.PrimValue, value=10 [var5]  : true
<randoop.PrimValue, value=0 [var6]  : true
<randoop.PrimValue, value=0 [var7]  : true
<randoop.PrimValue, value=0 [var8]  : true
<randoop.PrimValue, value=10 [var9]  : true
<randoop.PrimValue, value=10 [var10]  : true

allSequences.size()=560
-------------------------------------------
randoop.util.Randomness: total calls to random: 3429
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 559 sequences.
components: 559
randoop.util.Randomness: total calls to random: 3430
randoop.util.Randomness: total calls to random: 3431
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 3432
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 559 sequences.
components: 559
randoop.util.Randomness: total calls to random: 3433
randoop.util.Randomness: total calls to random: 3434
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.randomNumber() : var0 
var2 =  method : A.randomNumber() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.normal() : var0 
var6 =  method : A.normal() : var0 
var7 =  method : A.randomNumber() : var0 
var8 =  method : A.normal() : var0 
var9 =  method : A.randomNumber() : var0 
var10 =  method : A.normal() : var0 
var11 =  method : A.normal() : var0 
var12 =  method : A.randomNumber() : var0 
var13 =  method : A.randomNumber() : var0 
var14 =  method : A.randomNumber() : var0 
var15 =  method : A.normal() : var0 
var16 =  method : A.normal() : var0 
var17 =  method : A.randomNumber() : var0 
var18 =  method : A.randomNumber() : var0 
var19 =  method : A.randomNumber() : var0 
var20 =  method : A.randomNumber() : var0 
var21 =  method : A.normal() : var0 
var22 =  method : A.randomNumber() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Making index 12 inactive (value is a primitive)
Making index 13 inactive (value is a primitive)
Making index 14 inactive (value is a primitive)
Making index 15 inactive (value is a primitive)
Making index 16 inactive (value is a primitive)
Making index 17 inactive (value is a primitive)
Making index 18 inactive (value is a primitive)
Making index 19 inactive (value is a primitive)
Making index 20 inactive (value is a primitive)
Making index 21 inactive (value is a primitive)
Making index 22 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var10 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var11 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var12 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var13 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var14 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var15 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var16 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var17 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var18 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var19 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var20 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var21 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var22 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=0 [var1]  : true
<randoop.PrimValue, value=0 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=10 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true
<randoop.PrimValue, value=0 [var7]  : true
<randoop.PrimValue, value=10 [var8]  : true
<randoop.PrimValue, value=0 [var9]  : true
<randoop.PrimValue, value=10 [var10]  : true
<randoop.PrimValue, value=10 [var11]  : true
<randoop.PrimValue, value=0 [var12]  : true
<randoop.PrimValue, value=0 [var13]  : true
<randoop.PrimValue, value=0 [var14]  : true
<randoop.PrimValue, value=10 [var15]  : true
<randoop.PrimValue, value=10 [var16]  : true
<randoop.PrimValue, value=0 [var17]  : true
<randoop.PrimValue, value=0 [var18]  : true
<randoop.PrimValue, value=0 [var19]  : true
<randoop.PrimValue, value=0 [var20]  : true
<randoop.PrimValue, value=10 [var21]  : true
<randoop.PrimValue, value=0 [var22]  : true

allSequences.size()=561
-------------------------------------------
randoop.util.Randomness: total calls to random: 3435
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 560 sequences.
components: 560
randoop.util.Randomness: total calls to random: 3436
randoop.util.Randomness: total calls to random: 3437
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.normal() : var0 
var2 =  method : A.normal() : var0 
var3 =  method : A.randomNumber() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.randomNumber() : var0 
var6 =  method : A.normal() : var0 
var7 =  method : A.randomNumber() : var0 
var8 =  method : A.normal() : var0 
var9 =  method : A.normal() : var0 
var10 =  method : A.normal() : var0 
var11 =  method : A.randomNumber() : var0 
var12 =  method : A.randomNumber() : var0 
var13 =  method : A.randomNumber() : var0 
var14 =  method : A.randomNumber() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Making index 12 inactive (value is a primitive)
Making index 13 inactive (value is a primitive)
Making index 14 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var10 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var11 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var12 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var13 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var14 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=10 [var1]  : true
<randoop.PrimValue, value=10 [var2]  : true
<randoop.PrimValue, value=0 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=0 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true
<randoop.PrimValue, value=0 [var7]  : true
<randoop.PrimValue, value=10 [var8]  : true
<randoop.PrimValue, value=10 [var9]  : true
<randoop.PrimValue, value=10 [var10]  : true
<randoop.PrimValue, value=0 [var11]  : true
<randoop.PrimValue, value=0 [var12]  : true
<randoop.PrimValue, value=0 [var13]  : true
<randoop.PrimValue, value=0 [var14]  : true

allSequences.size()=562
-------------------------------------------
randoop.util.Randomness: total calls to random: 3438
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 561 sequences.
components: 561
randoop.util.Randomness: total calls to random: 3439
randoop.util.Randomness: total calls to random: 3440
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 3441
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 561 sequences.
components: 561
randoop.util.Randomness: total calls to random: 3442
randoop.util.Randomness: total calls to random: 3443
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.randomNumber() : var0 
var2 =  method : A.randomNumber() : var0 
var3 =  method : A.randomNumber() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.randomNumber() : var0 
var6 =  method : A.normal() : var0 
var7 =  method : A.randomNumber() : var0 
var8 =  method : A.randomNumber() : var0 
var9 =  method : A.normal() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=0 [var1]  : true
<randoop.PrimValue, value=0 [var2]  : true
<randoop.PrimValue, value=0 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=0 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true
<randoop.PrimValue, value=0 [var7]  : true
<randoop.PrimValue, value=0 [var8]  : true
<randoop.PrimValue, value=10 [var9]  : true

allSequences.size()=563
-------------------------------------------
randoop.util.Randomness: total calls to random: 3444
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 562 sequences.
components: 562
randoop.util.Randomness: total calls to random: 3445
randoop.util.Randomness: total calls to random: 3446
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 3447
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 562 sequences.
components: 562
randoop.util.Randomness: total calls to random: 3448
randoop.util.Randomness: total calls to random: 3449
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 3450
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 562 sequences.
components: 562
randoop.util.Randomness: total calls to random: 3451
randoop.util.Randomness: total calls to random: 3452
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.randomNumber() : var0 
var2 =  method : A.normal() : var0 
var3 =  method : A.randomNumber() : var0 
var4 =  method : A.normal() : var0 
var5 =  method : A.normal() : var0 
var6 =  method : A.randomNumber() : var0 
var7 =  method : A.normal() : var0 
var8 =  method : A.normal() : var0 
var9 =  method : A.randomNumber() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=0 [var1]  : true
<randoop.PrimValue, value=10 [var2]  : true
<randoop.PrimValue, value=0 [var3]  : true
<randoop.PrimValue, value=10 [var4]  : true
<randoop.PrimValue, value=10 [var5]  : true
<randoop.PrimValue, value=0 [var6]  : true
<randoop.PrimValue, value=10 [var7]  : true
<randoop.PrimValue, value=10 [var8]  : true
<randoop.PrimValue, value=0 [var9]  : true

allSequences.size()=564
-------------------------------------------
randoop.util.Randomness: total calls to random: 3453
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 563 sequences.
components: 563
randoop.util.Randomness: total calls to random: 3454
randoop.util.Randomness: total calls to random: 3455
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.normal() : var0 
var2 =  method : A.normal() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.normal() : var0 
var5 =  method : A.randomNumber() : var0 
var6 =  method : A.randomNumber() : var0 
var7 =  method : A.randomNumber() : var0 
var8 =  method : A.randomNumber() : var0 
var9 =  method : A.normal() : var0 
var10 =  method : A.randomNumber() : var0 
var11 =  method : A.randomNumber() : var0 
var12 =  method : A.randomNumber() : var0 
var13 =  method : A.normal() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Making index 12 inactive (value is a primitive)
Making index 13 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var10 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var11 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var12 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var13 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=10 [var1]  : true
<randoop.PrimValue, value=10 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=10 [var4]  : true
<randoop.PrimValue, value=0 [var5]  : true
<randoop.PrimValue, value=0 [var6]  : true
<randoop.PrimValue, value=0 [var7]  : true
<randoop.PrimValue, value=0 [var8]  : true
<randoop.PrimValue, value=10 [var9]  : true
<randoop.PrimValue, value=0 [var10]  : true
<randoop.PrimValue, value=0 [var11]  : true
<randoop.PrimValue, value=0 [var12]  : true
<randoop.PrimValue, value=10 [var13]  : true

allSequences.size()=565
-------------------------------------------
randoop.util.Randomness: total calls to random: 3456
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 564 sequences.
components: 564
randoop.util.Randomness: total calls to random: 3457
randoop.util.Randomness: total calls to random: 3458
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.normal() : var0 
var2 =  method : A.normal() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.normal() : var0 
var5 =  method : A.randomNumber() : var0 
var6 =  method : A.normal() : var0 
var7 =  method : A.randomNumber() : var0 
var8 =  method : A.randomNumber() : var0 
var9 =  method : A.normal() : var0 
var10 =  method : A.randomNumber() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var10 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=10 [var1]  : true
<randoop.PrimValue, value=10 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=10 [var4]  : true
<randoop.PrimValue, value=0 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true
<randoop.PrimValue, value=0 [var7]  : true
<randoop.PrimValue, value=0 [var8]  : true
<randoop.PrimValue, value=10 [var9]  : true
<randoop.PrimValue, value=0 [var10]  : true

allSequences.size()=566
-------------------------------------------
randoop.util.Randomness: total calls to random: 3459
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 565 sequences.
components: 565
randoop.util.Randomness: total calls to random: 3460
randoop.util.Randomness: total calls to random: 3461
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.randomNumber() : var0 
var2 =  method : A.randomNumber() : var0 
var3 =  method : A.randomNumber() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.normal() : var0 
var6 =  method : A.randomNumber() : var0 
var7 =  method : A.normal() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=0 [var1]  : true
<randoop.PrimValue, value=0 [var2]  : true
<randoop.PrimValue, value=0 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=10 [var5]  : true
<randoop.PrimValue, value=0 [var6]  : true
<randoop.PrimValue, value=10 [var7]  : true

allSequences.size()=567
-------------------------------------------
randoop.util.Randomness: total calls to random: 3462
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 566 sequences.
components: 566
randoop.util.Randomness: total calls to random: 3463
randoop.util.Randomness: total calls to random: 3464
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.normal() : var0 
var2 =  method : A.normal() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.normal() : var0 
var5 =  method : A.randomNumber() : var0 
var6 =  method : A.normal() : var0 
var7 =  method : A.normal() : var0 
var8 =  method : A.normal() : var0 
var9 =  method : A.randomNumber() : var0 
var10 =  method : A.normal() : var0 
var11 =  method : A.randomNumber() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var10 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var11 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=10 [var1]  : true
<randoop.PrimValue, value=10 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=10 [var4]  : true
<randoop.PrimValue, value=0 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true
<randoop.PrimValue, value=10 [var7]  : true
<randoop.PrimValue, value=10 [var8]  : true
<randoop.PrimValue, value=0 [var9]  : true
<randoop.PrimValue, value=10 [var10]  : true
<randoop.PrimValue, value=0 [var11]  : true

allSequences.size()=568
-------------------------------------------
randoop.util.Randomness: total calls to random: 3465
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 567 sequences.
components: 567
randoop.util.Randomness: total calls to random: 3466
randoop.util.Randomness: total calls to random: 3467
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.normal() : var0 
var2 =  method : A.normal() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.randomNumber() : var0 
var6 =  method : A.randomNumber() : var0 
var7 =  method : A.normal() : var0 
var8 =  method : A.randomNumber() : var0 
var9 =  method : A.normal() : var0 
var10 =  method : A.normal() : var0 
var11 =  method : A.normal() : var0 
var12 =  method : A.randomNumber() : var0 
var13 =  method : A.randomNumber() : var0 
var14 =  method : A.randomNumber() : var0 
var15 =  method : A.randomNumber() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Making index 12 inactive (value is a primitive)
Making index 13 inactive (value is a primitive)
Making index 14 inactive (value is a primitive)
Making index 15 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var10 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var11 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var12 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var13 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var14 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var15 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=10 [var1]  : true
<randoop.PrimValue, value=10 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=0 [var5]  : true
<randoop.PrimValue, value=0 [var6]  : true
<randoop.PrimValue, value=10 [var7]  : true
<randoop.PrimValue, value=0 [var8]  : true
<randoop.PrimValue, value=10 [var9]  : true
<randoop.PrimValue, value=10 [var10]  : true
<randoop.PrimValue, value=10 [var11]  : true
<randoop.PrimValue, value=0 [var12]  : true
<randoop.PrimValue, value=0 [var13]  : true
<randoop.PrimValue, value=0 [var14]  : true
<randoop.PrimValue, value=0 [var15]  : true

allSequences.size()=569
-------------------------------------------
randoop.util.Randomness: total calls to random: 3468
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 568 sequences.
components: 568
randoop.util.Randomness: total calls to random: 3469
randoop.util.Randomness: total calls to random: 3470
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 3471
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 568 sequences.
components: 568
randoop.util.Randomness: total calls to random: 3472
randoop.util.Randomness: total calls to random: 3473
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 3474
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 568 sequences.
components: 568
randoop.util.Randomness: total calls to random: 3475
randoop.util.Randomness: total calls to random: 3476
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.normal() : var0 
var2 =  method : A.normal() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.normal() : var0 
var5 =  method : A.randomNumber() : var0 
var6 =  method : A.normal() : var0 
var7 =  method : A.normal() : var0 
var8 =  method : A.randomNumber() : var0 
var9 =  method : A.randomNumber() : var0 
var10 =  method : A.normal() : var0 
var11 =  method : A.normal() : var0 
var12 =  method : A.randomNumber() : var0 
var13 =  method : A.normal() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Making index 12 inactive (value is a primitive)
Making index 13 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var10 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var11 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var12 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var13 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=10 [var1]  : true
<randoop.PrimValue, value=10 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=10 [var4]  : true
<randoop.PrimValue, value=0 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true
<randoop.PrimValue, value=10 [var7]  : true
<randoop.PrimValue, value=0 [var8]  : true
<randoop.PrimValue, value=0 [var9]  : true
<randoop.PrimValue, value=10 [var10]  : true
<randoop.PrimValue, value=10 [var11]  : true
<randoop.PrimValue, value=0 [var12]  : true
<randoop.PrimValue, value=10 [var13]  : true

allSequences.size()=570
-------------------------------------------
randoop.util.Randomness: total calls to random: 3477
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 569 sequences.
components: 569
randoop.util.Randomness: total calls to random: 3478
randoop.util.Randomness: total calls to random: 3479
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.randomNumber() : var0 
var2 =  method : A.randomNumber() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.normal() : var0 
var6 =  method : A.randomNumber() : var0 
var7 =  method : A.normal() : var0 
var8 =  method : A.randomNumber() : var0 
var9 =  method : A.randomNumber() : var0 
var10 =  method : A.normal() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var10 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=0 [var1]  : true
<randoop.PrimValue, value=0 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=10 [var5]  : true
<randoop.PrimValue, value=0 [var6]  : true
<randoop.PrimValue, value=10 [var7]  : true
<randoop.PrimValue, value=0 [var8]  : true
<randoop.PrimValue, value=0 [var9]  : true
<randoop.PrimValue, value=10 [var10]  : true

allSequences.size()=571
-------------------------------------------
randoop.util.Randomness: total calls to random: 3480
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 570 sequences.
components: 570
randoop.util.Randomness: total calls to random: 3481
randoop.util.Randomness: total calls to random: 3482
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 3483
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 570 sequences.
components: 570
randoop.util.Randomness: total calls to random: 3484
randoop.util.Randomness: total calls to random: 3485
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.randomNumber() : var0 
var2 =  method : A.randomNumber() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.normal() : var0 
var6 =  method : A.normal() : var0 
var7 =  method : A.randomNumber() : var0 
var8 =  method : A.normal() : var0 
var9 =  method : A.randomNumber() : var0 
var10 =  method : A.normal() : var0 
var11 =  method : A.normal() : var0 
var12 =  method : A.randomNumber() : var0 
var13 =  method : A.randomNumber() : var0 
var14 =  method : A.normal() : var0 
var15 =  method : A.randomNumber() : var0 
var16 =  method : A.randomNumber() : var0 
var17 =  method : A.normal() : var0 
var18 =  method : A.normal() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Making index 12 inactive (value is a primitive)
Making index 13 inactive (value is a primitive)
Making index 14 inactive (value is a primitive)
Making index 15 inactive (value is a primitive)
Making index 16 inactive (value is a primitive)
Making index 17 inactive (value is a primitive)
Making index 18 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var10 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var11 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var12 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var13 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var14 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var15 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var16 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var17 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var18 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=0 [var1]  : true
<randoop.PrimValue, value=0 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=10 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true
<randoop.PrimValue, value=0 [var7]  : true
<randoop.PrimValue, value=10 [var8]  : true
<randoop.PrimValue, value=0 [var9]  : true
<randoop.PrimValue, value=10 [var10]  : true
<randoop.PrimValue, value=10 [var11]  : true
<randoop.PrimValue, value=0 [var12]  : true
<randoop.PrimValue, value=0 [var13]  : true
<randoop.PrimValue, value=10 [var14]  : true
<randoop.PrimValue, value=0 [var15]  : true
<randoop.PrimValue, value=0 [var16]  : true
<randoop.PrimValue, value=10 [var17]  : true
<randoop.PrimValue, value=10 [var18]  : true

allSequences.size()=572
-------------------------------------------
randoop.util.Randomness: total calls to random: 3486
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 571 sequences.
components: 571
randoop.util.Randomness: total calls to random: 3487
randoop.util.Randomness: total calls to random: 3488
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 3489
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 571 sequences.
components: 571
randoop.util.Randomness: total calls to random: 3490
randoop.util.Randomness: total calls to random: 3491
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 3492
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 571 sequences.
components: 571
randoop.util.Randomness: total calls to random: 3493
randoop.util.Randomness: total calls to random: 3494
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.randomNumber() : var0 
var2 =  method : A.randomNumber() : var0 
var3 =  method : A.randomNumber() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.normal() : var0 
var6 =  method : A.normal() : var0 
var7 =  method : A.normal() : var0 
var8 =  method : A.normal() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=0 [var1]  : true
<randoop.PrimValue, value=0 [var2]  : true
<randoop.PrimValue, value=0 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=10 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true
<randoop.PrimValue, value=10 [var7]  : true
<randoop.PrimValue, value=10 [var8]  : true

allSequences.size()=573
-------------------------------------------
randoop.util.Randomness: total calls to random: 3495
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 572 sequences.
components: 572
randoop.util.Randomness: total calls to random: 3496
randoop.util.Randomness: total calls to random: 3497
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 3498
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 572 sequences.
components: 572
randoop.util.Randomness: total calls to random: 3499
randoop.util.Randomness: total calls to random: 3500
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.normal() : var0 
var2 =  method : A.randomNumber() : var0 
var3 =  method : A.randomNumber() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.randomNumber() : var0 
var6 =  method : A.randomNumber() : var0 
var7 =  method : A.normal() : var0 
var8 =  method : A.normal() : var0 
var9 =  method : A.normal() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=10 [var1]  : true
<randoop.PrimValue, value=0 [var2]  : true
<randoop.PrimValue, value=0 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=0 [var5]  : true
<randoop.PrimValue, value=0 [var6]  : true
<randoop.PrimValue, value=10 [var7]  : true
<randoop.PrimValue, value=10 [var8]  : true
<randoop.PrimValue, value=10 [var9]  : true

allSequences.size()=574
-------------------------------------------
randoop.util.Randomness: total calls to random: 3501
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 573 sequences.
components: 573
randoop.util.Randomness: total calls to random: 3502
randoop.util.Randomness: total calls to random: 3503
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 3504
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 573 sequences.
components: 573
randoop.util.Randomness: total calls to random: 3505
randoop.util.Randomness: total calls to random: 3506
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.randomNumber() : var0 
var2 =  method : A.randomNumber() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.normal() : var0 
var6 =  method : A.normal() : var0 
var7 =  method : A.randomNumber() : var0 
var8 =  method : A.normal() : var0 
var9 =  method : A.randomNumber() : var0 
var10 =  method : A.normal() : var0 
var11 =  method : A.normal() : var0 
var12 =  method : A.randomNumber() : var0 
var13 =  method : A.randomNumber() : var0 
var14 =  method : A.randomNumber() : var0 
var15 =  method : A.randomNumber() : var0 
var16 =  method : A.randomNumber() : var0 
var17 =  method : A.randomNumber() : var0 
var18 =  method : A.normal() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Making index 12 inactive (value is a primitive)
Making index 13 inactive (value is a primitive)
Making index 14 inactive (value is a primitive)
Making index 15 inactive (value is a primitive)
Making index 16 inactive (value is a primitive)
Making index 17 inactive (value is a primitive)
Making index 18 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var10 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var11 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var12 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var13 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var14 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var15 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var16 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var17 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var18 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=0 [var1]  : true
<randoop.PrimValue, value=0 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=10 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true
<randoop.PrimValue, value=0 [var7]  : true
<randoop.PrimValue, value=10 [var8]  : true
<randoop.PrimValue, value=0 [var9]  : true
<randoop.PrimValue, value=10 [var10]  : true
<randoop.PrimValue, value=10 [var11]  : true
<randoop.PrimValue, value=0 [var12]  : true
<randoop.PrimValue, value=0 [var13]  : true
<randoop.PrimValue, value=0 [var14]  : true
<randoop.PrimValue, value=0 [var15]  : true
<randoop.PrimValue, value=0 [var16]  : true
<randoop.PrimValue, value=0 [var17]  : true
<randoop.PrimValue, value=10 [var18]  : true

allSequences.size()=575
-------------------------------------------
randoop.util.Randomness: total calls to random: 3507
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 574 sequences.
components: 574
randoop.util.Randomness: total calls to random: 3508
randoop.util.Randomness: total calls to random: 3509
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.randomNumber() : var0 
var2 =  method : A.randomNumber() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.normal() : var0 
var6 =  method : A.randomNumber() : var0 
var7 =  method : A.randomNumber() : var0 
var8 =  method : A.normal() : var0 
var9 =  method : A.randomNumber() : var0 
var10 =  method : A.randomNumber() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var10 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=0 [var1]  : true
<randoop.PrimValue, value=0 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=10 [var5]  : true
<randoop.PrimValue, value=0 [var6]  : true
<randoop.PrimValue, value=0 [var7]  : true
<randoop.PrimValue, value=10 [var8]  : true
<randoop.PrimValue, value=0 [var9]  : true
<randoop.PrimValue, value=0 [var10]  : true

allSequences.size()=576
-------------------------------------------
randoop.util.Randomness: total calls to random: 3510
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 575 sequences.
components: 575
randoop.util.Randomness: total calls to random: 3511
randoop.util.Randomness: total calls to random: 3512
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 3513
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 575 sequences.
components: 575
randoop.util.Randomness: total calls to random: 3514
randoop.util.Randomness: total calls to random: 3515
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 3516
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 575 sequences.
components: 575
randoop.util.Randomness: total calls to random: 3517
randoop.util.Randomness: total calls to random: 3518
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.normal() : var0 
var2 =  method : A.randomNumber() : var0 
var3 =  method : A.randomNumber() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.normal() : var0 
var6 =  method : A.normal() : var0 
var7 =  method : A.normal() : var0 
var8 =  method : A.randomNumber() : var0 
var9 =  method : A.normal() : var0 
var10 =  method : A.randomNumber() : var0 
var11 =  method : A.randomNumber() : var0 
var12 =  method : A.normal() : var0 
var13 =  method : A.randomNumber() : var0 
var14 =  method : A.randomNumber() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Making index 12 inactive (value is a primitive)
Making index 13 inactive (value is a primitive)
Making index 14 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var10 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var11 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var12 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var13 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var14 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=10 [var1]  : true
<randoop.PrimValue, value=0 [var2]  : true
<randoop.PrimValue, value=0 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=10 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true
<randoop.PrimValue, value=10 [var7]  : true
<randoop.PrimValue, value=0 [var8]  : true
<randoop.PrimValue, value=10 [var9]  : true
<randoop.PrimValue, value=0 [var10]  : true
<randoop.PrimValue, value=0 [var11]  : true
<randoop.PrimValue, value=10 [var12]  : true
<randoop.PrimValue, value=0 [var13]  : true
<randoop.PrimValue, value=0 [var14]  : true

allSequences.size()=577
-------------------------------------------
randoop.util.Randomness: total calls to random: 3519
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 576 sequences.
components: 576
randoop.util.Randomness: total calls to random: 3520
randoop.util.Randomness: total calls to random: 3521
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 3522
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 576 sequences.
components: 576
randoop.util.Randomness: total calls to random: 3523
randoop.util.Randomness: total calls to random: 3524
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.normal() : var0 
var2 =  method : A.normal() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.normal() : var0 
var5 =  method : A.randomNumber() : var0 
var6 =  method : A.normal() : var0 
var7 =  method : A.normal() : var0 
var8 =  method : A.normal() : var0 
var9 =  method : A.randomNumber() : var0 
var10 =  method : A.randomNumber() : var0 
var11 =  method : A.normal() : var0 
var12 =  method : A.randomNumber() : var0 
var13 =  method : A.randomNumber() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Making index 12 inactive (value is a primitive)
Making index 13 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var10 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var11 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var12 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var13 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=10 [var1]  : true
<randoop.PrimValue, value=10 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=10 [var4]  : true
<randoop.PrimValue, value=0 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true
<randoop.PrimValue, value=10 [var7]  : true
<randoop.PrimValue, value=10 [var8]  : true
<randoop.PrimValue, value=0 [var9]  : true
<randoop.PrimValue, value=0 [var10]  : true
<randoop.PrimValue, value=10 [var11]  : true
<randoop.PrimValue, value=0 [var12]  : true
<randoop.PrimValue, value=0 [var13]  : true

allSequences.size()=578
-------------------------------------------
randoop.util.Randomness: total calls to random: 3525
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 577 sequences.
components: 577
randoop.util.Randomness: total calls to random: 3526
randoop.util.Randomness: total calls to random: 3527
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 3528
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 577 sequences.
components: 577
randoop.util.Randomness: total calls to random: 3529
randoop.util.Randomness: total calls to random: 3530
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.randomNumber() : var0 
var2 =  method : A.randomNumber() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.normal() : var0 
var6 =  method : A.normal() : var0 
var7 =  method : A.randomNumber() : var0 
var8 =  method : A.randomNumber() : var0 
var9 =  method : A.randomNumber() : var0 
var10 =  method : A.randomNumber() : var0 
var11 =  method : A.normal() : var0 
var12 =  method : A.normal() : var0 
var13 =  method : A.normal() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Making index 12 inactive (value is a primitive)
Making index 13 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var10 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var11 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var12 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var13 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=0 [var1]  : true
<randoop.PrimValue, value=0 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=10 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true
<randoop.PrimValue, value=0 [var7]  : true
<randoop.PrimValue, value=0 [var8]  : true
<randoop.PrimValue, value=0 [var9]  : true
<randoop.PrimValue, value=0 [var10]  : true
<randoop.PrimValue, value=10 [var11]  : true
<randoop.PrimValue, value=10 [var12]  : true
<randoop.PrimValue, value=10 [var13]  : true

allSequences.size()=579
-------------------------------------------
randoop.util.Randomness: total calls to random: 3531
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 578 sequences.
components: 578
randoop.util.Randomness: total calls to random: 3532
randoop.util.Randomness: total calls to random: 3533
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.normal() : var0 
var2 =  method : A.normal() : var0 
var3 =  method : A.randomNumber() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.randomNumber() : var0 
var6 =  method : A.normal() : var0 
var7 =  method : A.randomNumber() : var0 
var8 =  method : A.normal() : var0 
var9 =  method : A.randomNumber() : var0 
var10 =  method : A.normal() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var10 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=10 [var1]  : true
<randoop.PrimValue, value=10 [var2]  : true
<randoop.PrimValue, value=0 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=0 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true
<randoop.PrimValue, value=0 [var7]  : true
<randoop.PrimValue, value=10 [var8]  : true
<randoop.PrimValue, value=0 [var9]  : true
<randoop.PrimValue, value=10 [var10]  : true

allSequences.size()=580
-------------------------------------------
randoop.util.Randomness: total calls to random: 3534
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 579 sequences.
components: 579
randoop.util.Randomness: total calls to random: 3535
randoop.util.Randomness: total calls to random: 3536
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 3537
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 579 sequences.
components: 579
randoop.util.Randomness: total calls to random: 3538
randoop.util.Randomness: total calls to random: 3539
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 3540
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 579 sequences.
components: 579
randoop.util.Randomness: total calls to random: 3541
randoop.util.Randomness: total calls to random: 3542
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 3543
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 579 sequences.
components: 579
randoop.util.Randomness: total calls to random: 3544
randoop.util.Randomness: total calls to random: 3545
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 3546
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 579 sequences.
components: 579
randoop.util.Randomness: total calls to random: 3547
randoop.util.Randomness: total calls to random: 3548
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 3549
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 579 sequences.
components: 579
randoop.util.Randomness: total calls to random: 3550
randoop.util.Randomness: total calls to random: 3551
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 3552
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 579 sequences.
components: 579
randoop.util.Randomness: total calls to random: 3553
randoop.util.Randomness: total calls to random: 3554
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 3555
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 579 sequences.
components: 579
randoop.util.Randomness: total calls to random: 3556
randoop.util.Randomness: total calls to random: 3557
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.randomNumber() : var0 
var2 =  method : A.randomNumber() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.normal() : var0 
var6 =  method : A.normal() : var0 
var7 =  method : A.randomNumber() : var0 
var8 =  method : A.normal() : var0 
var9 =  method : A.randomNumber() : var0 
var10 =  method : A.normal() : var0 
var11 =  method : A.normal() : var0 
var12 =  method : A.randomNumber() : var0 
var13 =  method : A.randomNumber() : var0 
var14 =  method : A.randomNumber() : var0 
var15 =  method : A.normal() : var0 
var16 =  method : A.normal() : var0 
var17 =  method : A.randomNumber() : var0 
var18 =  method : A.randomNumber() : var0 
var19 =  method : A.normal() : var0 
var20 =  method : A.randomNumber() : var0 
var21 =  method : A.randomNumber() : var0 
var22 =  method : A.normal() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Making index 12 inactive (value is a primitive)
Making index 13 inactive (value is a primitive)
Making index 14 inactive (value is a primitive)
Making index 15 inactive (value is a primitive)
Making index 16 inactive (value is a primitive)
Making index 17 inactive (value is a primitive)
Making index 18 inactive (value is a primitive)
Making index 19 inactive (value is a primitive)
Making index 20 inactive (value is a primitive)
Making index 21 inactive (value is a primitive)
Making index 22 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var10 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var11 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var12 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var13 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var14 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var15 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var16 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var17 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var18 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var19 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var20 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var21 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var22 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=0 [var1]  : true
<randoop.PrimValue, value=0 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=10 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true
<randoop.PrimValue, value=0 [var7]  : true
<randoop.PrimValue, value=10 [var8]  : true
<randoop.PrimValue, value=0 [var9]  : true
<randoop.PrimValue, value=10 [var10]  : true
<randoop.PrimValue, value=10 [var11]  : true
<randoop.PrimValue, value=0 [var12]  : true
<randoop.PrimValue, value=0 [var13]  : true
<randoop.PrimValue, value=0 [var14]  : true
<randoop.PrimValue, value=10 [var15]  : true
<randoop.PrimValue, value=10 [var16]  : true
<randoop.PrimValue, value=0 [var17]  : true
<randoop.PrimValue, value=0 [var18]  : true
<randoop.PrimValue, value=10 [var19]  : true
<randoop.PrimValue, value=0 [var20]  : true
<randoop.PrimValue, value=0 [var21]  : true
<randoop.PrimValue, value=10 [var22]  : true

allSequences.size()=581
-------------------------------------------
randoop.util.Randomness: total calls to random: 3558
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 580 sequences.
components: 580
randoop.util.Randomness: total calls to random: 3559
randoop.util.Randomness: total calls to random: 3560
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 3561
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 580 sequences.
components: 580
randoop.util.Randomness: total calls to random: 3562
randoop.util.Randomness: total calls to random: 3563
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 3564
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 580 sequences.
components: 580
randoop.util.Randomness: total calls to random: 3565
randoop.util.Randomness: total calls to random: 3566
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.normal() : var0 
var2 =  method : A.normal() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.randomNumber() : var0 
var6 =  method : A.normal() : var0 
var7 =  method : A.randomNumber() : var0 
var8 =  method : A.randomNumber() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=10 [var1]  : true
<randoop.PrimValue, value=10 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=0 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true
<randoop.PrimValue, value=0 [var7]  : true
<randoop.PrimValue, value=0 [var8]  : true

allSequences.size()=582
-------------------------------------------
randoop.util.Randomness: total calls to random: 3567
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 581 sequences.
components: 581
randoop.util.Randomness: total calls to random: 3568
randoop.util.Randomness: total calls to random: 3569
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 3570
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 581 sequences.
components: 581
randoop.util.Randomness: total calls to random: 3571
randoop.util.Randomness: total calls to random: 3572
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.normal() : var0 
var2 =  method : A.normal() : var0 
var3 =  method : A.randomNumber() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.randomNumber() : var0 
var6 =  method : A.normal() : var0 
var7 =  method : A.randomNumber() : var0 
var8 =  method : A.normal() : var0 
var9 =  method : A.normal() : var0 
var10 =  method : A.normal() : var0 
var11 =  method : A.randomNumber() : var0 
var12 =  method : A.normal() : var0 
var13 =  method : A.normal() : var0 
var14 =  method : A.normal() : var0 
var15 =  method : A.normal() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Making index 12 inactive (value is a primitive)
Making index 13 inactive (value is a primitive)
Making index 14 inactive (value is a primitive)
Making index 15 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var10 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var11 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var12 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var13 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var14 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var15 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=10 [var1]  : true
<randoop.PrimValue, value=10 [var2]  : true
<randoop.PrimValue, value=0 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=0 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true
<randoop.PrimValue, value=0 [var7]  : true
<randoop.PrimValue, value=10 [var8]  : true
<randoop.PrimValue, value=10 [var9]  : true
<randoop.PrimValue, value=10 [var10]  : true
<randoop.PrimValue, value=0 [var11]  : true
<randoop.PrimValue, value=10 [var12]  : true
<randoop.PrimValue, value=10 [var13]  : true
<randoop.PrimValue, value=10 [var14]  : true
<randoop.PrimValue, value=10 [var15]  : true

allSequences.size()=583
-------------------------------------------
randoop.util.Randomness: total calls to random: 3573
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 582 sequences.
components: 582
randoop.util.Randomness: total calls to random: 3574
randoop.util.Randomness: total calls to random: 3575
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 3576
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 582 sequences.
components: 582
randoop.util.Randomness: total calls to random: 3577
randoop.util.Randomness: total calls to random: 3578
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.normal() : var0 
var2 =  method : A.normal() : var0 
var3 =  method : A.randomNumber() : var0 
var4 =  method : A.normal() : var0 
var5 =  method : A.randomNumber() : var0 
var6 =  method : A.randomNumber() : var0 
var7 =  method : A.normal() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=10 [var1]  : true
<randoop.PrimValue, value=10 [var2]  : true
<randoop.PrimValue, value=0 [var3]  : true
<randoop.PrimValue, value=10 [var4]  : true
<randoop.PrimValue, value=0 [var5]  : true
<randoop.PrimValue, value=0 [var6]  : true
<randoop.PrimValue, value=10 [var7]  : true

allSequences.size()=584
-------------------------------------------
randoop.util.Randomness: total calls to random: 3579
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 583 sequences.
components: 583
randoop.util.Randomness: total calls to random: 3580
randoop.util.Randomness: total calls to random: 3581
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 3582
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 583 sequences.
components: 583
randoop.util.Randomness: total calls to random: 3583
randoop.util.Randomness: total calls to random: 3584
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.normal() : var0 
var2 =  method : A.randomNumber() : var0 
var3 =  method : A.randomNumber() : var0 
var4 =  method : A.normal() : var0 
var5 =  method : A.randomNumber() : var0 
var6 =  method : A.randomNumber() : var0 
var7 =  method : A.normal() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=10 [var1]  : true
<randoop.PrimValue, value=0 [var2]  : true
<randoop.PrimValue, value=0 [var3]  : true
<randoop.PrimValue, value=10 [var4]  : true
<randoop.PrimValue, value=0 [var5]  : true
<randoop.PrimValue, value=0 [var6]  : true
<randoop.PrimValue, value=10 [var7]  : true

allSequences.size()=585
-------------------------------------------
randoop.util.Randomness: total calls to random: 3585
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 584 sequences.
components: 584
randoop.util.Randomness: total calls to random: 3586
randoop.util.Randomness: total calls to random: 3587
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 3588
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 584 sequences.
components: 584
randoop.util.Randomness: total calls to random: 3589
randoop.util.Randomness: total calls to random: 3590
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 3591
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 584 sequences.
components: 584
randoop.util.Randomness: total calls to random: 3592
randoop.util.Randomness: total calls to random: 3593
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.randomNumber() : var0 
var2 =  method : A.randomNumber() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.normal() : var0 
var5 =  method : A.normal() : var0 
var6 =  method : A.randomNumber() : var0 
var7 =  method : A.normal() : var0 
var8 =  method : A.normal() : var0 
var9 =  method : A.normal() : var0 
var10 =  method : A.normal() : var0 
var11 =  method : A.randomNumber() : var0 
var12 =  method : A.randomNumber() : var0 
var13 =  method : A.randomNumber() : var0 
var14 =  method : A.randomNumber() : var0 
var15 =  method : A.randomNumber() : var0 
var16 =  method : A.normal() : var0 
var17 =  method : A.normal() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Making index 12 inactive (value is a primitive)
Making index 13 inactive (value is a primitive)
Making index 14 inactive (value is a primitive)
Making index 15 inactive (value is a primitive)
Making index 16 inactive (value is a primitive)
Making index 17 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var10 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var11 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var12 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var13 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var14 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var15 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var16 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var17 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=0 [var1]  : true
<randoop.PrimValue, value=0 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=10 [var4]  : true
<randoop.PrimValue, value=10 [var5]  : true
<randoop.PrimValue, value=0 [var6]  : true
<randoop.PrimValue, value=10 [var7]  : true
<randoop.PrimValue, value=10 [var8]  : true
<randoop.PrimValue, value=10 [var9]  : true
<randoop.PrimValue, value=10 [var10]  : true
<randoop.PrimValue, value=0 [var11]  : true
<randoop.PrimValue, value=0 [var12]  : true
<randoop.PrimValue, value=0 [var13]  : true
<randoop.PrimValue, value=0 [var14]  : true
<randoop.PrimValue, value=0 [var15]  : true
<randoop.PrimValue, value=10 [var16]  : true
<randoop.PrimValue, value=10 [var17]  : true

allSequences.size()=586
-------------------------------------------
randoop.util.Randomness: total calls to random: 3594
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 585 sequences.
components: 585
randoop.util.Randomness: total calls to random: 3595
randoop.util.Randomness: total calls to random: 3596
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 3597
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 585 sequences.
components: 585
randoop.util.Randomness: total calls to random: 3598
randoop.util.Randomness: total calls to random: 3599
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.randomNumber() : var0 
var2 =  method : A.randomNumber() : var0 
var3 =  method : A.randomNumber() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.randomNumber() : var0 
var6 =  method : A.randomNumber() : var0 
var7 =  method : A.normal() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=0 [var1]  : true
<randoop.PrimValue, value=0 [var2]  : true
<randoop.PrimValue, value=0 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=0 [var5]  : true
<randoop.PrimValue, value=0 [var6]  : true
<randoop.PrimValue, value=10 [var7]  : true

allSequences.size()=587
-------------------------------------------
randoop.util.Randomness: total calls to random: 3600
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 586 sequences.
components: 586
randoop.util.Randomness: total calls to random: 3601
randoop.util.Randomness: total calls to random: 3602
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 3603
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 586 sequences.
components: 586
randoop.util.Randomness: total calls to random: 3604
randoop.util.Randomness: total calls to random: 3605
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 3606
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 586 sequences.
components: 586
randoop.util.Randomness: total calls to random: 3607
randoop.util.Randomness: total calls to random: 3608
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.randomNumber() : var0 
var2 =  method : A.randomNumber() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.normal() : var0 
var6 =  method : A.normal() : var0 
var7 =  method : A.randomNumber() : var0 
var8 =  method : A.normal() : var0 
var9 =  method : A.normal() : var0 
var10 =  method : A.normal() : var0 
var11 =  method : A.randomNumber() : var0 
var12 =  method : A.normal() : var0 
var13 =  method : A.randomNumber() : var0 
var14 =  method : A.randomNumber() : var0 
var15 =  method : A.normal() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Making index 12 inactive (value is a primitive)
Making index 13 inactive (value is a primitive)
Making index 14 inactive (value is a primitive)
Making index 15 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var10 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var11 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var12 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var13 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var14 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var15 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=0 [var1]  : true
<randoop.PrimValue, value=0 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=10 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true
<randoop.PrimValue, value=0 [var7]  : true
<randoop.PrimValue, value=10 [var8]  : true
<randoop.PrimValue, value=10 [var9]  : true
<randoop.PrimValue, value=10 [var10]  : true
<randoop.PrimValue, value=0 [var11]  : true
<randoop.PrimValue, value=10 [var12]  : true
<randoop.PrimValue, value=0 [var13]  : true
<randoop.PrimValue, value=0 [var14]  : true
<randoop.PrimValue, value=10 [var15]  : true

allSequences.size()=588
-------------------------------------------
randoop.util.Randomness: total calls to random: 3609
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 587 sequences.
components: 587
randoop.util.Randomness: total calls to random: 3610
randoop.util.Randomness: total calls to random: 3611
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.normal() : var0 
var2 =  method : A.normal() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.randomNumber() : var0 
var6 =  method : A.randomNumber() : var0 
var7 =  method : A.normal() : var0 
var8 =  method : A.randomNumber() : var0 
var9 =  method : A.normal() : var0 
var10 =  method : A.normal() : var0 
var11 =  method : A.normal() : var0 
var12 =  method : A.randomNumber() : var0 
var13 =  method : A.randomNumber() : var0 
var14 =  method : A.randomNumber() : var0 
var15 =  method : A.normal() : var0 
var16 =  method : A.randomNumber() : var0 
var17 =  method : A.normal() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Making index 12 inactive (value is a primitive)
Making index 13 inactive (value is a primitive)
Making index 14 inactive (value is a primitive)
Making index 15 inactive (value is a primitive)
Making index 16 inactive (value is a primitive)
Making index 17 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var10 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var11 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var12 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var13 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var14 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var15 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var16 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var17 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=10 [var1]  : true
<randoop.PrimValue, value=10 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=0 [var5]  : true
<randoop.PrimValue, value=0 [var6]  : true
<randoop.PrimValue, value=10 [var7]  : true
<randoop.PrimValue, value=0 [var8]  : true
<randoop.PrimValue, value=10 [var9]  : true
<randoop.PrimValue, value=10 [var10]  : true
<randoop.PrimValue, value=10 [var11]  : true
<randoop.PrimValue, value=0 [var12]  : true
<randoop.PrimValue, value=0 [var13]  : true
<randoop.PrimValue, value=0 [var14]  : true
<randoop.PrimValue, value=10 [var15]  : true
<randoop.PrimValue, value=0 [var16]  : true
<randoop.PrimValue, value=10 [var17]  : true

allSequences.size()=589
-------------------------------------------
randoop.util.Randomness: total calls to random: 3612
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 588 sequences.
components: 588
randoop.util.Randomness: total calls to random: 3613
randoop.util.Randomness: total calls to random: 3614
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 3615
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 588 sequences.
components: 588
randoop.util.Randomness: total calls to random: 3616
randoop.util.Randomness: total calls to random: 3617
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 3618
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 588 sequences.
components: 588
randoop.util.Randomness: total calls to random: 3619
randoop.util.Randomness: total calls to random: 3620
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.randomNumber() : var0 
var2 =  method : A.randomNumber() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.normal() : var0 
var6 =  method : A.normal() : var0 
var7 =  method : A.randomNumber() : var0 
var8 =  method : A.normal() : var0 
var9 =  method : A.normal() : var0 
var10 =  method : A.normal() : var0 
var11 =  method : A.randomNumber() : var0 
var12 =  method : A.normal() : var0 
var13 =  method : A.randomNumber() : var0 
var14 =  method : A.randomNumber() : var0 
var15 =  method : A.normal() : var0 
var16 =  method : A.normal() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Making index 12 inactive (value is a primitive)
Making index 13 inactive (value is a primitive)
Making index 14 inactive (value is a primitive)
Making index 15 inactive (value is a primitive)
Making index 16 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var10 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var11 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var12 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var13 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var14 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var15 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var16 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=0 [var1]  : true
<randoop.PrimValue, value=0 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=10 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true
<randoop.PrimValue, value=0 [var7]  : true
<randoop.PrimValue, value=10 [var8]  : true
<randoop.PrimValue, value=10 [var9]  : true
<randoop.PrimValue, value=10 [var10]  : true
<randoop.PrimValue, value=0 [var11]  : true
<randoop.PrimValue, value=10 [var12]  : true
<randoop.PrimValue, value=0 [var13]  : true
<randoop.PrimValue, value=0 [var14]  : true
<randoop.PrimValue, value=10 [var15]  : true
<randoop.PrimValue, value=10 [var16]  : true

allSequences.size()=590
-------------------------------------------
randoop.util.Randomness: total calls to random: 3621
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 589 sequences.
components: 589
randoop.util.Randomness: total calls to random: 3622
randoop.util.Randomness: total calls to random: 3623
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.normal() : var0 
var2 =  method : A.randomNumber() : var0 
var3 =  method : A.randomNumber() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.normal() : var0 
var6 =  method : A.normal() : var0 
var7 =  method : A.normal() : var0 
var8 =  method : A.randomNumber() : var0 
var9 =  method : A.normal() : var0 
var10 =  method : A.randomNumber() : var0 
var11 =  method : A.randomNumber() : var0 
var12 =  method : A.randomNumber() : var0 
var13 =  method : A.normal() : var0 
var14 =  method : A.normal() : var0 
var15 =  method : A.normal() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Making index 12 inactive (value is a primitive)
Making index 13 inactive (value is a primitive)
Making index 14 inactive (value is a primitive)
Making index 15 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var10 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var11 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var12 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var13 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var14 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var15 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=10 [var1]  : true
<randoop.PrimValue, value=0 [var2]  : true
<randoop.PrimValue, value=0 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=10 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true
<randoop.PrimValue, value=10 [var7]  : true
<randoop.PrimValue, value=0 [var8]  : true
<randoop.PrimValue, value=10 [var9]  : true
<randoop.PrimValue, value=0 [var10]  : true
<randoop.PrimValue, value=0 [var11]  : true
<randoop.PrimValue, value=0 [var12]  : true
<randoop.PrimValue, value=10 [var13]  : true
<randoop.PrimValue, value=10 [var14]  : true
<randoop.PrimValue, value=10 [var15]  : true

allSequences.size()=591
-------------------------------------------
randoop.util.Randomness: total calls to random: 3624
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 590 sequences.
components: 590
randoop.util.Randomness: total calls to random: 3625
randoop.util.Randomness: total calls to random: 3626
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.normal() : var0 
var2 =  method : A.normal() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.normal() : var0 
var5 =  method : A.randomNumber() : var0 
var6 =  method : A.randomNumber() : var0 
var7 =  method : A.randomNumber() : var0 
var8 =  method : A.randomNumber() : var0 
var9 =  method : A.normal() : var0 
var10 =  method : A.randomNumber() : var0 
var11 =  method : A.normal() : var0 
var12 =  method : A.randomNumber() : var0 
var13 =  method : A.normal() : var0 
var14 =  method : A.normal() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Making index 12 inactive (value is a primitive)
Making index 13 inactive (value is a primitive)
Making index 14 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var10 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var11 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var12 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var13 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var14 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=10 [var1]  : true
<randoop.PrimValue, value=10 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=10 [var4]  : true
<randoop.PrimValue, value=0 [var5]  : true
<randoop.PrimValue, value=0 [var6]  : true
<randoop.PrimValue, value=0 [var7]  : true
<randoop.PrimValue, value=0 [var8]  : true
<randoop.PrimValue, value=10 [var9]  : true
<randoop.PrimValue, value=0 [var10]  : true
<randoop.PrimValue, value=10 [var11]  : true
<randoop.PrimValue, value=0 [var12]  : true
<randoop.PrimValue, value=10 [var13]  : true
<randoop.PrimValue, value=10 [var14]  : true

allSequences.size()=592
-------------------------------------------
randoop.util.Randomness: total calls to random: 3627
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 591 sequences.
components: 591
randoop.util.Randomness: total calls to random: 3628
randoop.util.Randomness: total calls to random: 3629
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.randomNumber() : var0 
var2 =  method : A.randomNumber() : var0 
var3 =  method : A.randomNumber() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.normal() : var0 
var6 =  method : A.randomNumber() : var0 
var7 =  method : A.randomNumber() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=0 [var1]  : true
<randoop.PrimValue, value=0 [var2]  : true
<randoop.PrimValue, value=0 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=10 [var5]  : true
<randoop.PrimValue, value=0 [var6]  : true
<randoop.PrimValue, value=0 [var7]  : true

allSequences.size()=593
-------------------------------------------
randoop.util.Randomness: total calls to random: 3630
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 592 sequences.
components: 592
randoop.util.Randomness: total calls to random: 3631
randoop.util.Randomness: total calls to random: 3632
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.normal() : var0 
var2 =  method : A.randomNumber() : var0 
var3 =  method : A.randomNumber() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.normal() : var0 
var6 =  method : A.normal() : var0 
var7 =  method : A.normal() : var0 
var8 =  method : A.randomNumber() : var0 
var9 =  method : A.normal() : var0 
var10 =  method : A.randomNumber() : var0 
var11 =  method : A.randomNumber() : var0 
var12 =  method : A.randomNumber() : var0 
var13 =  method : A.normal() : var0 
var14 =  method : A.normal() : var0 
var15 =  method : A.randomNumber() : var0 
var16 =  method : A.randomNumber() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Making index 12 inactive (value is a primitive)
Making index 13 inactive (value is a primitive)
Making index 14 inactive (value is a primitive)
Making index 15 inactive (value is a primitive)
Making index 16 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var10 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var11 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var12 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var13 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var14 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var15 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var16 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=10 [var1]  : true
<randoop.PrimValue, value=0 [var2]  : true
<randoop.PrimValue, value=0 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=10 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true
<randoop.PrimValue, value=10 [var7]  : true
<randoop.PrimValue, value=0 [var8]  : true
<randoop.PrimValue, value=10 [var9]  : true
<randoop.PrimValue, value=0 [var10]  : true
<randoop.PrimValue, value=0 [var11]  : true
<randoop.PrimValue, value=0 [var12]  : true
<randoop.PrimValue, value=10 [var13]  : true
<randoop.PrimValue, value=10 [var14]  : true
<randoop.PrimValue, value=0 [var15]  : true
<randoop.PrimValue, value=0 [var16]  : true

allSequences.size()=594
-------------------------------------------
randoop.util.Randomness: total calls to random: 3633
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 593 sequences.
components: 593
randoop.util.Randomness: total calls to random: 3634
randoop.util.Randomness: total calls to random: 3635
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.normal() : var0 
var2 =  method : A.randomNumber() : var0 
var3 =  method : A.randomNumber() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.normal() : var0 
var6 =  method : A.normal() : var0 
var7 =  method : A.normal() : var0 
var8 =  method : A.randomNumber() : var0 
var9 =  method : A.randomNumber() : var0 
var10 =  method : A.randomNumber() : var0 
var11 =  method : A.normal() : var0 
var12 =  method : A.normal() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Making index 12 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var10 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var11 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var12 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=10 [var1]  : true
<randoop.PrimValue, value=0 [var2]  : true
<randoop.PrimValue, value=0 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=10 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true
<randoop.PrimValue, value=10 [var7]  : true
<randoop.PrimValue, value=0 [var8]  : true
<randoop.PrimValue, value=0 [var9]  : true
<randoop.PrimValue, value=0 [var10]  : true
<randoop.PrimValue, value=10 [var11]  : true
<randoop.PrimValue, value=10 [var12]  : true

allSequences.size()=595
-------------------------------------------
randoop.util.Randomness: total calls to random: 3636
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 594 sequences.
components: 594
randoop.util.Randomness: total calls to random: 3637
randoop.util.Randomness: total calls to random: 3638
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 3639
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 594 sequences.
components: 594
randoop.util.Randomness: total calls to random: 3640
randoop.util.Randomness: total calls to random: 3641
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.randomNumber() : var0 
var2 =  method : A.randomNumber() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.normal() : var0 
var6 =  method : A.normal() : var0 
var7 =  method : A.randomNumber() : var0 
var8 =  method : A.normal() : var0 
var9 =  method : A.randomNumber() : var0 
var10 =  method : A.randomNumber() : var0 
var11 =  method : A.normal() : var0 
var12 =  method : A.randomNumber() : var0 
var13 =  method : A.randomNumber() : var0 
var14 =  method : A.randomNumber() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Making index 12 inactive (value is a primitive)
Making index 13 inactive (value is a primitive)
Making index 14 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var10 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var11 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var12 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var13 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var14 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=0 [var1]  : true
<randoop.PrimValue, value=0 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=10 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true
<randoop.PrimValue, value=0 [var7]  : true
<randoop.PrimValue, value=10 [var8]  : true
<randoop.PrimValue, value=0 [var9]  : true
<randoop.PrimValue, value=0 [var10]  : true
<randoop.PrimValue, value=10 [var11]  : true
<randoop.PrimValue, value=0 [var12]  : true
<randoop.PrimValue, value=0 [var13]  : true
<randoop.PrimValue, value=0 [var14]  : true

allSequences.size()=596
-------------------------------------------
randoop.util.Randomness: total calls to random: 3642
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 595 sequences.
components: 595
randoop.util.Randomness: total calls to random: 3643
randoop.util.Randomness: total calls to random: 3644
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 3645
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 595 sequences.
components: 595
randoop.util.Randomness: total calls to random: 3646
randoop.util.Randomness: total calls to random: 3647
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 3648
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 595 sequences.
components: 595
randoop.util.Randomness: total calls to random: 3649
randoop.util.Randomness: total calls to random: 3650
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 3651
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 595 sequences.
components: 595
randoop.util.Randomness: total calls to random: 3652
randoop.util.Randomness: total calls to random: 3653
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.randomNumber() : var0 
var2 =  method : A.randomNumber() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.randomNumber() : var0 
var6 =  method : A.randomNumber() : var0 
var7 =  method : A.normal() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=0 [var1]  : true
<randoop.PrimValue, value=0 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=0 [var5]  : true
<randoop.PrimValue, value=0 [var6]  : true
<randoop.PrimValue, value=10 [var7]  : true

allSequences.size()=597
-------------------------------------------
randoop.util.Randomness: total calls to random: 3654
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 596 sequences.
components: 596
randoop.util.Randomness: total calls to random: 3655
randoop.util.Randomness: total calls to random: 3656
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.normal() : var0 
var2 =  method : A.normal() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.normal() : var0 
var5 =  method : A.randomNumber() : var0 
var6 =  method : A.normal() : var0 
var7 =  method : A.randomNumber() : var0 
var8 =  method : A.randomNumber() : var0 
var9 =  method : A.normal() : var0 
var10 =  method : A.randomNumber() : var0 
var11 =  method : A.normal() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var10 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var11 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=10 [var1]  : true
<randoop.PrimValue, value=10 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=10 [var4]  : true
<randoop.PrimValue, value=0 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true
<randoop.PrimValue, value=0 [var7]  : true
<randoop.PrimValue, value=0 [var8]  : true
<randoop.PrimValue, value=10 [var9]  : true
<randoop.PrimValue, value=0 [var10]  : true
<randoop.PrimValue, value=10 [var11]  : true

allSequences.size()=598
-------------------------------------------
randoop.util.Randomness: total calls to random: 3657
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 597 sequences.
components: 597
randoop.util.Randomness: total calls to random: 3658
randoop.util.Randomness: total calls to random: 3659
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.normal() : var0 
var2 =  method : A.normal() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.normal() : var0 
var5 =  method : A.randomNumber() : var0 
var6 =  method : A.normal() : var0 
var7 =  method : A.normal() : var0 
var8 =  method : A.randomNumber() : var0 
var9 =  method : A.randomNumber() : var0 
var10 =  method : A.normal() : var0 
var11 =  method : A.normal() : var0 
var12 =  method : A.normal() : var0 
var13 =  method : A.normal() : var0 
var14 =  method : A.randomNumber() : var0 
var15 =  method : A.normal() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Making index 12 inactive (value is a primitive)
Making index 13 inactive (value is a primitive)
Making index 14 inactive (value is a primitive)
Making index 15 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var10 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var11 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var12 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var13 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var14 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var15 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=10 [var1]  : true
<randoop.PrimValue, value=10 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=10 [var4]  : true
<randoop.PrimValue, value=0 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true
<randoop.PrimValue, value=10 [var7]  : true
<randoop.PrimValue, value=0 [var8]  : true
<randoop.PrimValue, value=0 [var9]  : true
<randoop.PrimValue, value=10 [var10]  : true
<randoop.PrimValue, value=10 [var11]  : true
<randoop.PrimValue, value=10 [var12]  : true
<randoop.PrimValue, value=10 [var13]  : true
<randoop.PrimValue, value=0 [var14]  : true
<randoop.PrimValue, value=10 [var15]  : true

allSequences.size()=599
-------------------------------------------
randoop.util.Randomness: total calls to random: 3660
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 598 sequences.
components: 598
randoop.util.Randomness: total calls to random: 3661
randoop.util.Randomness: total calls to random: 3662
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.normal() : var0 
var2 =  method : A.randomNumber() : var0 
var3 =  method : A.randomNumber() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.normal() : var0 
var6 =  method : A.randomNumber() : var0 
var7 =  method : A.normal() : var0 
var8 =  method : A.randomNumber() : var0 
var9 =  method : A.normal() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=10 [var1]  : true
<randoop.PrimValue, value=0 [var2]  : true
<randoop.PrimValue, value=0 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=10 [var5]  : true
<randoop.PrimValue, value=0 [var6]  : true
<randoop.PrimValue, value=10 [var7]  : true
<randoop.PrimValue, value=0 [var8]  : true
<randoop.PrimValue, value=10 [var9]  : true

allSequences.size()=600
-------------------------------------------
randoop.util.Randomness: total calls to random: 3663
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 599 sequences.
components: 599
randoop.util.Randomness: total calls to random: 3664
randoop.util.Randomness: total calls to random: 3665
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.normal() : var0 
var2 =  method : A.randomNumber() : var0 
var3 =  method : A.randomNumber() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.normal() : var0 
var6 =  method : A.randomNumber() : var0 
var7 =  method : A.randomNumber() : var0 
var8 =  method : A.normal() : var0 
var9 =  method : A.normal() : var0 
var10 =  method : A.normal() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var10 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=10 [var1]  : true
<randoop.PrimValue, value=0 [var2]  : true
<randoop.PrimValue, value=0 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=10 [var5]  : true
<randoop.PrimValue, value=0 [var6]  : true
<randoop.PrimValue, value=0 [var7]  : true
<randoop.PrimValue, value=10 [var8]  : true
<randoop.PrimValue, value=10 [var9]  : true
<randoop.PrimValue, value=10 [var10]  : true

allSequences.size()=601
-------------------------------------------
randoop.util.Randomness: total calls to random: 3666
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 600 sequences.
components: 600
randoop.util.Randomness: total calls to random: 3667
randoop.util.Randomness: total calls to random: 3668
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 3669
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 600 sequences.
components: 600
randoop.util.Randomness: total calls to random: 3670
randoop.util.Randomness: total calls to random: 3671
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 3672
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 600 sequences.
components: 600
randoop.util.Randomness: total calls to random: 3673
randoop.util.Randomness: total calls to random: 3674
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.normal() : var0 
var2 =  method : A.normal() : var0 
var3 =  method : A.randomNumber() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.randomNumber() : var0 
var6 =  method : A.normal() : var0 
var7 =  method : A.randomNumber() : var0 
var8 =  method : A.normal() : var0 
var9 =  method : A.normal() : var0 
var10 =  method : A.normal() : var0 
var11 =  method : A.randomNumber() : var0 
var12 =  method : A.randomNumber() : var0 
var13 =  method : A.randomNumber() : var0 
var14 =  method : A.randomNumber() : var0 
var15 =  method : A.normal() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Making index 12 inactive (value is a primitive)
Making index 13 inactive (value is a primitive)
Making index 14 inactive (value is a primitive)
Making index 15 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var10 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var11 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var12 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var13 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var14 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var15 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=10 [var1]  : true
<randoop.PrimValue, value=10 [var2]  : true
<randoop.PrimValue, value=0 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=0 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true
<randoop.PrimValue, value=0 [var7]  : true
<randoop.PrimValue, value=10 [var8]  : true
<randoop.PrimValue, value=10 [var9]  : true
<randoop.PrimValue, value=10 [var10]  : true
<randoop.PrimValue, value=0 [var11]  : true
<randoop.PrimValue, value=0 [var12]  : true
<randoop.PrimValue, value=0 [var13]  : true
<randoop.PrimValue, value=0 [var14]  : true
<randoop.PrimValue, value=10 [var15]  : true

allSequences.size()=602
-------------------------------------------
randoop.util.Randomness: total calls to random: 3675
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 601 sequences.
components: 601
randoop.util.Randomness: total calls to random: 3676
randoop.util.Randomness: total calls to random: 3677
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 3678
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 601 sequences.
components: 601
randoop.util.Randomness: total calls to random: 3679
randoop.util.Randomness: total calls to random: 3680
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.randomNumber() : var0 
var2 =  method : A.randomNumber() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.normal() : var0 
var6 =  method : A.normal() : var0 
var7 =  method : A.randomNumber() : var0 
var8 =  method : A.normal() : var0 
var9 =  method : A.randomNumber() : var0 
var10 =  method : A.normal() : var0 
var11 =  method : A.normal() : var0 
var12 =  method : A.randomNumber() : var0 
var13 =  method : A.randomNumber() : var0 
var14 =  method : A.randomNumber() : var0 
var15 =  method : A.normal() : var0 
var16 =  method : A.normal() : var0 
var17 =  method : A.randomNumber() : var0 
var18 =  method : A.randomNumber() : var0 
var19 =  method : A.randomNumber() : var0 
var20 =  method : A.normal() : var0 
var21 =  method : A.randomNumber() : var0 
var22 =  method : A.randomNumber() : var0 
var23 =  method : A.normal() : var0 
var24 =  method : A.normal() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Making index 12 inactive (value is a primitive)
Making index 13 inactive (value is a primitive)
Making index 14 inactive (value is a primitive)
Making index 15 inactive (value is a primitive)
Making index 16 inactive (value is a primitive)
Making index 17 inactive (value is a primitive)
Making index 18 inactive (value is a primitive)
Making index 19 inactive (value is a primitive)
Making index 20 inactive (value is a primitive)
Making index 21 inactive (value is a primitive)
Making index 22 inactive (value is a primitive)
Making index 23 inactive (value is a primitive)
Making index 24 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var10 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var11 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var12 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var13 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var14 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var15 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var16 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var17 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var18 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var19 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var20 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var21 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var22 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var23 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var24 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=0 [var1]  : true
<randoop.PrimValue, value=0 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=10 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true
<randoop.PrimValue, value=0 [var7]  : true
<randoop.PrimValue, value=10 [var8]  : true
<randoop.PrimValue, value=0 [var9]  : true
<randoop.PrimValue, value=10 [var10]  : true
<randoop.PrimValue, value=10 [var11]  : true
<randoop.PrimValue, value=0 [var12]  : true
<randoop.PrimValue, value=0 [var13]  : true
<randoop.PrimValue, value=0 [var14]  : true
<randoop.PrimValue, value=10 [var15]  : true
<randoop.PrimValue, value=10 [var16]  : true
<randoop.PrimValue, value=0 [var17]  : true
<randoop.PrimValue, value=0 [var18]  : true
<randoop.PrimValue, value=0 [var19]  : true
<randoop.PrimValue, value=10 [var20]  : true
<randoop.PrimValue, value=0 [var21]  : true
<randoop.PrimValue, value=0 [var22]  : true
<randoop.PrimValue, value=10 [var23]  : true
<randoop.PrimValue, value=10 [var24]  : true

allSequences.size()=603
-------------------------------------------
randoop.util.Randomness: total calls to random: 3681
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 602 sequences.
components: 602
randoop.util.Randomness: total calls to random: 3682
randoop.util.Randomness: total calls to random: 3683
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 3684
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 602 sequences.
components: 602
randoop.util.Randomness: total calls to random: 3685
randoop.util.Randomness: total calls to random: 3686
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.normal() : var0 
var2 =  method : A.randomNumber() : var0 
var3 =  method : A.randomNumber() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.normal() : var0 
var6 =  method : A.randomNumber() : var0 
var7 =  method : A.normal() : var0 
var8 =  method : A.normal() : var0 
var9 =  method : A.randomNumber() : var0 
var10 =  method : A.normal() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var10 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=10 [var1]  : true
<randoop.PrimValue, value=0 [var2]  : true
<randoop.PrimValue, value=0 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=10 [var5]  : true
<randoop.PrimValue, value=0 [var6]  : true
<randoop.PrimValue, value=10 [var7]  : true
<randoop.PrimValue, value=10 [var8]  : true
<randoop.PrimValue, value=0 [var9]  : true
<randoop.PrimValue, value=10 [var10]  : true

allSequences.size()=604
-------------------------------------------
randoop.util.Randomness: total calls to random: 3687
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 603 sequences.
components: 603
randoop.util.Randomness: total calls to random: 3688
randoop.util.Randomness: total calls to random: 3689
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 3690
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 603 sequences.
components: 603
randoop.util.Randomness: total calls to random: 3691
randoop.util.Randomness: total calls to random: 3692
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.randomNumber() : var0 
var2 =  method : A.randomNumber() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.normal() : var0 
var6 =  method : A.normal() : var0 
var7 =  method : A.randomNumber() : var0 
var8 =  method : A.normal() : var0 
var9 =  method : A.normal() : var0 
var10 =  method : A.normal() : var0 
var11 =  method : A.randomNumber() : var0 
var12 =  method : A.normal() : var0 
var13 =  method : A.randomNumber() : var0 
var14 =  method : A.randomNumber() : var0 
var15 =  method : A.normal() : var0 
var16 =  method : A.randomNumber() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Making index 12 inactive (value is a primitive)
Making index 13 inactive (value is a primitive)
Making index 14 inactive (value is a primitive)
Making index 15 inactive (value is a primitive)
Making index 16 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var10 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var11 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var12 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var13 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var14 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var15 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var16 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=0 [var1]  : true
<randoop.PrimValue, value=0 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=10 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true
<randoop.PrimValue, value=0 [var7]  : true
<randoop.PrimValue, value=10 [var8]  : true
<randoop.PrimValue, value=10 [var9]  : true
<randoop.PrimValue, value=10 [var10]  : true
<randoop.PrimValue, value=0 [var11]  : true
<randoop.PrimValue, value=10 [var12]  : true
<randoop.PrimValue, value=0 [var13]  : true
<randoop.PrimValue, value=0 [var14]  : true
<randoop.PrimValue, value=10 [var15]  : true
<randoop.PrimValue, value=0 [var16]  : true

allSequences.size()=605
-------------------------------------------
randoop.util.Randomness: total calls to random: 3693
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 604 sequences.
components: 604
randoop.util.Randomness: total calls to random: 3694
randoop.util.Randomness: total calls to random: 3695
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 3696
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 604 sequences.
components: 604
randoop.util.Randomness: total calls to random: 3697
randoop.util.Randomness: total calls to random: 3698
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 3699
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 604 sequences.
components: 604
randoop.util.Randomness: total calls to random: 3700
randoop.util.Randomness: total calls to random: 3701
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 3702
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 604 sequences.
components: 604
randoop.util.Randomness: total calls to random: 3703
randoop.util.Randomness: total calls to random: 3704
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 3705
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 604 sequences.
components: 604
randoop.util.Randomness: total calls to random: 3706
randoop.util.Randomness: total calls to random: 3707
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 3708
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 604 sequences.
components: 604
randoop.util.Randomness: total calls to random: 3709
randoop.util.Randomness: total calls to random: 3710
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 3711
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 604 sequences.
components: 604
randoop.util.Randomness: total calls to random: 3712
randoop.util.Randomness: total calls to random: 3713
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 3714
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 604 sequences.
components: 604
randoop.util.Randomness: total calls to random: 3715
randoop.util.Randomness: total calls to random: 3716
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.normal() : var0 
var2 =  method : A.normal() : var0 
var3 =  method : A.randomNumber() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.randomNumber() : var0 
var6 =  method : A.normal() : var0 
var7 =  method : A.randomNumber() : var0 
var8 =  method : A.normal() : var0 
var9 =  method : A.normal() : var0 
var10 =  method : A.normal() : var0 
var11 =  method : A.normal() : var0 
var12 =  method : A.randomNumber() : var0 
var13 =  method : A.randomNumber() : var0 
var14 =  method : A.randomNumber() : var0 
var15 =  method : A.randomNumber() : var0 
var16 =  method : A.randomNumber() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Making index 12 inactive (value is a primitive)
Making index 13 inactive (value is a primitive)
Making index 14 inactive (value is a primitive)
Making index 15 inactive (value is a primitive)
Making index 16 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var10 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var11 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var12 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var13 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var14 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var15 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var16 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=10 [var1]  : true
<randoop.PrimValue, value=10 [var2]  : true
<randoop.PrimValue, value=0 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=0 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true
<randoop.PrimValue, value=0 [var7]  : true
<randoop.PrimValue, value=10 [var8]  : true
<randoop.PrimValue, value=10 [var9]  : true
<randoop.PrimValue, value=10 [var10]  : true
<randoop.PrimValue, value=10 [var11]  : true
<randoop.PrimValue, value=0 [var12]  : true
<randoop.PrimValue, value=0 [var13]  : true
<randoop.PrimValue, value=0 [var14]  : true
<randoop.PrimValue, value=0 [var15]  : true
<randoop.PrimValue, value=0 [var16]  : true

allSequences.size()=606
-------------------------------------------
randoop.util.Randomness: total calls to random: 3717
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 605 sequences.
components: 605
randoop.util.Randomness: total calls to random: 3718
randoop.util.Randomness: total calls to random: 3719
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 3720
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 605 sequences.
components: 605
randoop.util.Randomness: total calls to random: 3721
randoop.util.Randomness: total calls to random: 3722
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 3723
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 605 sequences.
components: 605
randoop.util.Randomness: total calls to random: 3724
randoop.util.Randomness: total calls to random: 3725
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.normal() : var0 
var2 =  method : A.normal() : var0 
var3 =  method : A.randomNumber() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.randomNumber() : var0 
var6 =  method : A.normal() : var0 
var7 =  method : A.randomNumber() : var0 
var8 =  method : A.normal() : var0 
var9 =  method : A.normal() : var0 
var10 =  method : A.randomNumber() : var0 
var11 =  method : A.randomNumber() : var0 
var12 =  method : A.normal() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Making index 12 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var10 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var11 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var12 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=10 [var1]  : true
<randoop.PrimValue, value=10 [var2]  : true
<randoop.PrimValue, value=0 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=0 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true
<randoop.PrimValue, value=0 [var7]  : true
<randoop.PrimValue, value=10 [var8]  : true
<randoop.PrimValue, value=10 [var9]  : true
<randoop.PrimValue, value=0 [var10]  : true
<randoop.PrimValue, value=0 [var11]  : true
<randoop.PrimValue, value=10 [var12]  : true

allSequences.size()=607
-------------------------------------------
randoop.util.Randomness: total calls to random: 3726
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 606 sequences.
components: 606
randoop.util.Randomness: total calls to random: 3727
randoop.util.Randomness: total calls to random: 3728
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.randomNumber() : var0 
var2 =  method : A.randomNumber() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.normal() : var0 
var5 =  method : A.randomNumber() : var0 
var6 =  method : A.randomNumber() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=0 [var1]  : true
<randoop.PrimValue, value=0 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=10 [var4]  : true
<randoop.PrimValue, value=0 [var5]  : true
<randoop.PrimValue, value=0 [var6]  : true

allSequences.size()=608
-------------------------------------------
randoop.util.Randomness: total calls to random: 3729
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 607 sequences.
components: 607
randoop.util.Randomness: total calls to random: 3730
randoop.util.Randomness: total calls to random: 3731
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.randomNumber() : var0 
var2 =  method : A.randomNumber() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.normal() : var0 
var6 =  method : A.normal() : var0 
var7 =  method : A.randomNumber() : var0 
var8 =  method : A.normal() : var0 
var9 =  method : A.normal() : var0 
var10 =  method : A.normal() : var0 
var11 =  method : A.randomNumber() : var0 
var12 =  method : A.normal() : var0 
var13 =  method : A.randomNumber() : var0 
var14 =  method : A.randomNumber() : var0 
var15 =  method : A.normal() : var0 
var16 =  method : A.randomNumber() : var0 
var17 =  method : A.randomNumber() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Making index 12 inactive (value is a primitive)
Making index 13 inactive (value is a primitive)
Making index 14 inactive (value is a primitive)
Making index 15 inactive (value is a primitive)
Making index 16 inactive (value is a primitive)
Making index 17 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var10 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var11 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var12 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var13 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var14 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var15 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var16 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var17 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=0 [var1]  : true
<randoop.PrimValue, value=0 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=10 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true
<randoop.PrimValue, value=0 [var7]  : true
<randoop.PrimValue, value=10 [var8]  : true
<randoop.PrimValue, value=10 [var9]  : true
<randoop.PrimValue, value=10 [var10]  : true
<randoop.PrimValue, value=0 [var11]  : true
<randoop.PrimValue, value=10 [var12]  : true
<randoop.PrimValue, value=0 [var13]  : true
<randoop.PrimValue, value=0 [var14]  : true
<randoop.PrimValue, value=10 [var15]  : true
<randoop.PrimValue, value=0 [var16]  : true
<randoop.PrimValue, value=0 [var17]  : true

allSequences.size()=609
-------------------------------------------
randoop.util.Randomness: total calls to random: 3732
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 608 sequences.
components: 608
randoop.util.Randomness: total calls to random: 3733
randoop.util.Randomness: total calls to random: 3734
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 3735
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 608 sequences.
components: 608
randoop.util.Randomness: total calls to random: 3736
randoop.util.Randomness: total calls to random: 3737
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.randomNumber() : var0 
var2 =  method : A.randomNumber() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.normal() : var0 
var6 =  method : A.normal() : var0 
var7 =  method : A.randomNumber() : var0 
var8 =  method : A.normal() : var0 
var9 =  method : A.randomNumber() : var0 
var10 =  method : A.normal() : var0 
var11 =  method : A.normal() : var0 
var12 =  method : A.randomNumber() : var0 
var13 =  method : A.randomNumber() : var0 
var14 =  method : A.randomNumber() : var0 
var15 =  method : A.randomNumber() : var0 
var16 =  method : A.randomNumber() : var0 
var17 =  method : A.randomNumber() : var0 
var18 =  method : A.randomNumber() : var0 
var19 =  method : A.randomNumber() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Making index 12 inactive (value is a primitive)
Making index 13 inactive (value is a primitive)
Making index 14 inactive (value is a primitive)
Making index 15 inactive (value is a primitive)
Making index 16 inactive (value is a primitive)
Making index 17 inactive (value is a primitive)
Making index 18 inactive (value is a primitive)
Making index 19 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var10 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var11 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var12 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var13 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var14 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var15 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var16 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var17 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var18 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var19 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=0 [var1]  : true
<randoop.PrimValue, value=0 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=10 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true
<randoop.PrimValue, value=0 [var7]  : true
<randoop.PrimValue, value=10 [var8]  : true
<randoop.PrimValue, value=0 [var9]  : true
<randoop.PrimValue, value=10 [var10]  : true
<randoop.PrimValue, value=10 [var11]  : true
<randoop.PrimValue, value=0 [var12]  : true
<randoop.PrimValue, value=0 [var13]  : true
<randoop.PrimValue, value=0 [var14]  : true
<randoop.PrimValue, value=0 [var15]  : true
<randoop.PrimValue, value=0 [var16]  : true
<randoop.PrimValue, value=0 [var17]  : true
<randoop.PrimValue, value=0 [var18]  : true
<randoop.PrimValue, value=0 [var19]  : true

allSequences.size()=610
-------------------------------------------
randoop.util.Randomness: total calls to random: 3738
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 609 sequences.
components: 609
randoop.util.Randomness: total calls to random: 3739
randoop.util.Randomness: total calls to random: 3740
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.randomNumber() : var0 
var2 =  method : A.randomNumber() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.normal() : var0 
var6 =  method : A.normal() : var0 
var7 =  method : A.randomNumber() : var0 
var8 =  method : A.normal() : var0 
var9 =  method : A.randomNumber() : var0 
var10 =  method : A.randomNumber() : var0 
var11 =  method : A.normal() : var0 
var12 =  method : A.normal() : var0 
var13 =  method : A.randomNumber() : var0 
var14 =  method : A.randomNumber() : var0 
var15 =  method : A.normal() : var0 
var16 =  method : A.randomNumber() : var0 
var17 =  method : A.normal() : var0 
var18 =  method : A.randomNumber() : var0 
var19 =  method : A.normal() : var0 
var20 =  method : A.normal() : var0 
var21 =  method : A.randomNumber() : var0 
var22 =  method : A.normal() : var0 
var23 =  method : A.randomNumber() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Making index 12 inactive (value is a primitive)
Making index 13 inactive (value is a primitive)
Making index 14 inactive (value is a primitive)
Making index 15 inactive (value is a primitive)
Making index 16 inactive (value is a primitive)
Making index 17 inactive (value is a primitive)
Making index 18 inactive (value is a primitive)
Making index 19 inactive (value is a primitive)
Making index 20 inactive (value is a primitive)
Making index 21 inactive (value is a primitive)
Making index 22 inactive (value is a primitive)
Making index 23 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var10 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var11 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var12 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var13 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var14 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var15 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var16 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var17 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var18 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var19 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var20 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var21 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var22 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var23 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=0 [var1]  : true
<randoop.PrimValue, value=0 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=10 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true
<randoop.PrimValue, value=0 [var7]  : true
<randoop.PrimValue, value=10 [var8]  : true
<randoop.PrimValue, value=0 [var9]  : true
<randoop.PrimValue, value=0 [var10]  : true
<randoop.PrimValue, value=10 [var11]  : true
<randoop.PrimValue, value=10 [var12]  : true
<randoop.PrimValue, value=0 [var13]  : true
<randoop.PrimValue, value=0 [var14]  : true
<randoop.PrimValue, value=10 [var15]  : true
<randoop.PrimValue, value=0 [var16]  : true
<randoop.PrimValue, value=10 [var17]  : true
<randoop.PrimValue, value=0 [var18]  : true
<randoop.PrimValue, value=10 [var19]  : true
<randoop.PrimValue, value=10 [var20]  : true
<randoop.PrimValue, value=0 [var21]  : true
<randoop.PrimValue, value=10 [var22]  : true
<randoop.PrimValue, value=0 [var23]  : true

allSequences.size()=611
-------------------------------------------
randoop.util.Randomness: total calls to random: 3741
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 610 sequences.
components: 610
randoop.util.Randomness: total calls to random: 3742
randoop.util.Randomness: total calls to random: 3743
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 3744
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 610 sequences.
components: 610
randoop.util.Randomness: total calls to random: 3745
randoop.util.Randomness: total calls to random: 3746
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.randomNumber() : var0 
var2 =  method : A.randomNumber() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.normal() : var0 
var6 =  method : A.normal() : var0 
var7 =  method : A.randomNumber() : var0 
var8 =  method : A.randomNumber() : var0 
var9 =  method : A.normal() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=0 [var1]  : true
<randoop.PrimValue, value=0 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=10 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true
<randoop.PrimValue, value=0 [var7]  : true
<randoop.PrimValue, value=0 [var8]  : true
<randoop.PrimValue, value=10 [var9]  : true

allSequences.size()=612
-------------------------------------------
randoop.util.Randomness: total calls to random: 3747
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 611 sequences.
components: 611
randoop.util.Randomness: total calls to random: 3748
randoop.util.Randomness: total calls to random: 3749
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.randomNumber() : var0 
var2 =  method : A.normal() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.randomNumber() : var0 
var6 =  method : A.normal() : var0 
var7 =  method : A.randomNumber() : var0 
var8 =  method : A.normal() : var0 
var9 =  method : A.normal() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=0 [var1]  : true
<randoop.PrimValue, value=10 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=0 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true
<randoop.PrimValue, value=0 [var7]  : true
<randoop.PrimValue, value=10 [var8]  : true
<randoop.PrimValue, value=10 [var9]  : true

allSequences.size()=613
-------------------------------------------
randoop.util.Randomness: total calls to random: 3750
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 612 sequences.
components: 612
randoop.util.Randomness: total calls to random: 3751
randoop.util.Randomness: total calls to random: 3752
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 3753
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 612 sequences.
components: 612
randoop.util.Randomness: total calls to random: 3754
randoop.util.Randomness: total calls to random: 3755
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.normal() : var0 
var2 =  method : A.normal() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.normal() : var0 
var5 =  method : A.randomNumber() : var0 
var6 =  method : A.normal() : var0 
var7 =  method : A.randomNumber() : var0 
var8 =  method : A.randomNumber() : var0 
var9 =  method : A.normal() : var0 
var10 =  method : A.normal() : var0 
var11 =  method : A.normal() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var10 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var11 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=10 [var1]  : true
<randoop.PrimValue, value=10 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=10 [var4]  : true
<randoop.PrimValue, value=0 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true
<randoop.PrimValue, value=0 [var7]  : true
<randoop.PrimValue, value=0 [var8]  : true
<randoop.PrimValue, value=10 [var9]  : true
<randoop.PrimValue, value=10 [var10]  : true
<randoop.PrimValue, value=10 [var11]  : true

allSequences.size()=614
-------------------------------------------
randoop.util.Randomness: total calls to random: 3756
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 613 sequences.
components: 613
randoop.util.Randomness: total calls to random: 3757
randoop.util.Randomness: total calls to random: 3758
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.normal() : var0 
var2 =  method : A.normal() : var0 
var3 =  method : A.randomNumber() : var0 
var4 =  method : A.normal() : var0 
var5 =  method : A.randomNumber() : var0 
var6 =  method : A.randomNumber() : var0 
var7 =  method : A.normal() : var0 
var8 =  method : A.randomNumber() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=10 [var1]  : true
<randoop.PrimValue, value=10 [var2]  : true
<randoop.PrimValue, value=0 [var3]  : true
<randoop.PrimValue, value=10 [var4]  : true
<randoop.PrimValue, value=0 [var5]  : true
<randoop.PrimValue, value=0 [var6]  : true
<randoop.PrimValue, value=10 [var7]  : true
<randoop.PrimValue, value=0 [var8]  : true

allSequences.size()=615
-------------------------------------------
randoop.util.Randomness: total calls to random: 3759
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 614 sequences.
components: 614
randoop.util.Randomness: total calls to random: 3760
randoop.util.Randomness: total calls to random: 3761
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.randomNumber() : var0 
var2 =  method : A.randomNumber() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.normal() : var0 
var6 =  method : A.normal() : var0 
var7 =  method : A.randomNumber() : var0 
var8 =  method : A.normal() : var0 
var9 =  method : A.randomNumber() : var0 
var10 =  method : A.normal() : var0 
var11 =  method : A.normal() : var0 
var12 =  method : A.randomNumber() : var0 
var13 =  method : A.randomNumber() : var0 
var14 =  method : A.randomNumber() : var0 
var15 =  method : A.randomNumber() : var0 
var16 =  method : A.randomNumber() : var0 
var17 =  method : A.normal() : var0 
var18 =  method : A.normal() : var0 
var19 =  method : A.normal() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Making index 12 inactive (value is a primitive)
Making index 13 inactive (value is a primitive)
Making index 14 inactive (value is a primitive)
Making index 15 inactive (value is a primitive)
Making index 16 inactive (value is a primitive)
Making index 17 inactive (value is a primitive)
Making index 18 inactive (value is a primitive)
Making index 19 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var10 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var11 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var12 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var13 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var14 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var15 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var16 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var17 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var18 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var19 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=0 [var1]  : true
<randoop.PrimValue, value=0 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=10 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true
<randoop.PrimValue, value=0 [var7]  : true
<randoop.PrimValue, value=10 [var8]  : true
<randoop.PrimValue, value=0 [var9]  : true
<randoop.PrimValue, value=10 [var10]  : true
<randoop.PrimValue, value=10 [var11]  : true
<randoop.PrimValue, value=0 [var12]  : true
<randoop.PrimValue, value=0 [var13]  : true
<randoop.PrimValue, value=0 [var14]  : true
<randoop.PrimValue, value=0 [var15]  : true
<randoop.PrimValue, value=0 [var16]  : true
<randoop.PrimValue, value=10 [var17]  : true
<randoop.PrimValue, value=10 [var18]  : true
<randoop.PrimValue, value=10 [var19]  : true

allSequences.size()=616
-------------------------------------------
randoop.util.Randomness: total calls to random: 3762
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 615 sequences.
components: 615
randoop.util.Randomness: total calls to random: 3763
randoop.util.Randomness: total calls to random: 3764
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.randomNumber() : var0 
var2 =  method : A.randomNumber() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.normal() : var0 
var5 =  method : A.normal() : var0 
var6 =  method : A.normal() : var0 
var7 =  method : A.normal() : var0 
var8 =  method : A.randomNumber() : var0 
var9 =  method : A.randomNumber() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=0 [var1]  : true
<randoop.PrimValue, value=0 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=10 [var4]  : true
<randoop.PrimValue, value=10 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true
<randoop.PrimValue, value=10 [var7]  : true
<randoop.PrimValue, value=0 [var8]  : true
<randoop.PrimValue, value=0 [var9]  : true

allSequences.size()=617
-------------------------------------------
randoop.util.Randomness: total calls to random: 3765
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 616 sequences.
components: 616
randoop.util.Randomness: total calls to random: 3766
randoop.util.Randomness: total calls to random: 3767
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 3768
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 616 sequences.
components: 616
randoop.util.Randomness: total calls to random: 3769
randoop.util.Randomness: total calls to random: 3770
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.normal() : var0 
var2 =  method : A.normal() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.normal() : var0 
var6 =  method : A.randomNumber() : var0 
var7 =  method : A.randomNumber() : var0 
var8 =  method : A.randomNumber() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=10 [var1]  : true
<randoop.PrimValue, value=10 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=10 [var5]  : true
<randoop.PrimValue, value=0 [var6]  : true
<randoop.PrimValue, value=0 [var7]  : true
<randoop.PrimValue, value=0 [var8]  : true

allSequences.size()=618
-------------------------------------------
randoop.util.Randomness: total calls to random: 3771
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 617 sequences.
components: 617
randoop.util.Randomness: total calls to random: 3772
randoop.util.Randomness: total calls to random: 3773
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 3774
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 617 sequences.
components: 617
randoop.util.Randomness: total calls to random: 3775
randoop.util.Randomness: total calls to random: 3776
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.normal() : var0 
var2 =  method : A.normal() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.normal() : var0 
var5 =  method : A.randomNumber() : var0 
var6 =  method : A.normal() : var0 
var7 =  method : A.randomNumber() : var0 
var8 =  method : A.normal() : var0 
var9 =  method : A.normal() : var0 
var10 =  method : A.randomNumber() : var0 
var11 =  method : A.randomNumber() : var0 
var12 =  method : A.normal() : var0 
var13 =  method : A.normal() : var0 
var14 =  method : A.randomNumber() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Making index 12 inactive (value is a primitive)
Making index 13 inactive (value is a primitive)
Making index 14 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var10 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var11 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var12 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var13 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var14 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=10 [var1]  : true
<randoop.PrimValue, value=10 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=10 [var4]  : true
<randoop.PrimValue, value=0 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true
<randoop.PrimValue, value=0 [var7]  : true
<randoop.PrimValue, value=10 [var8]  : true
<randoop.PrimValue, value=10 [var9]  : true
<randoop.PrimValue, value=0 [var10]  : true
<randoop.PrimValue, value=0 [var11]  : true
<randoop.PrimValue, value=10 [var12]  : true
<randoop.PrimValue, value=10 [var13]  : true
<randoop.PrimValue, value=0 [var14]  : true

allSequences.size()=619
-------------------------------------------
randoop.util.Randomness: total calls to random: 3777
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 618 sequences.
components: 618
randoop.util.Randomness: total calls to random: 3778
randoop.util.Randomness: total calls to random: 3779
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 3780
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 618 sequences.
components: 618
randoop.util.Randomness: total calls to random: 3781
randoop.util.Randomness: total calls to random: 3782
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 3783
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 618 sequences.
components: 618
randoop.util.Randomness: total calls to random: 3784
randoop.util.Randomness: total calls to random: 3785
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 3786
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 618 sequences.
components: 618
randoop.util.Randomness: total calls to random: 3787
randoop.util.Randomness: total calls to random: 3788
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.normal() : var0 
var2 =  method : A.normal() : var0 
var3 =  method : A.randomNumber() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.randomNumber() : var0 
var6 =  method : A.normal() : var0 
var7 =  method : A.randomNumber() : var0 
var8 =  method : A.normal() : var0 
var9 =  method : A.randomNumber() : var0 
var10 =  method : A.randomNumber() : var0 
var11 =  method : A.randomNumber() : var0 
var12 =  method : A.normal() : var0 
var13 =  method : A.randomNumber() : var0 
var14 =  method : A.randomNumber() : var0 
var15 =  method : A.randomNumber() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Making index 12 inactive (value is a primitive)
Making index 13 inactive (value is a primitive)
Making index 14 inactive (value is a primitive)
Making index 15 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var10 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var11 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var12 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var13 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var14 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var15 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=10 [var1]  : true
<randoop.PrimValue, value=10 [var2]  : true
<randoop.PrimValue, value=0 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=0 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true
<randoop.PrimValue, value=0 [var7]  : true
<randoop.PrimValue, value=10 [var8]  : true
<randoop.PrimValue, value=0 [var9]  : true
<randoop.PrimValue, value=0 [var10]  : true
<randoop.PrimValue, value=0 [var11]  : true
<randoop.PrimValue, value=10 [var12]  : true
<randoop.PrimValue, value=0 [var13]  : true
<randoop.PrimValue, value=0 [var14]  : true
<randoop.PrimValue, value=0 [var15]  : true

allSequences.size()=620
-------------------------------------------
randoop.util.Randomness: total calls to random: 3789
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 619 sequences.
components: 619
randoop.util.Randomness: total calls to random: 3790
randoop.util.Randomness: total calls to random: 3791
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.normal() : var0 
var2 =  method : A.randomNumber() : var0 
var3 =  method : A.randomNumber() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.normal() : var0 
var6 =  method : A.randomNumber() : var0 
var7 =  method : A.randomNumber() : var0 
var8 =  method : A.normal() : var0 
var9 =  method : A.randomNumber() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=10 [var1]  : true
<randoop.PrimValue, value=0 [var2]  : true
<randoop.PrimValue, value=0 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=10 [var5]  : true
<randoop.PrimValue, value=0 [var6]  : true
<randoop.PrimValue, value=0 [var7]  : true
<randoop.PrimValue, value=10 [var8]  : true
<randoop.PrimValue, value=0 [var9]  : true

allSequences.size()=621
-------------------------------------------
randoop.util.Randomness: total calls to random: 3792
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 620 sequences.
components: 620
randoop.util.Randomness: total calls to random: 3793
randoop.util.Randomness: total calls to random: 3794
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 3795
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 620 sequences.
components: 620
randoop.util.Randomness: total calls to random: 3796
randoop.util.Randomness: total calls to random: 3797
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 3798
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 620 sequences.
components: 620
randoop.util.Randomness: total calls to random: 3799
randoop.util.Randomness: total calls to random: 3800
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 3801
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 620 sequences.
components: 620
randoop.util.Randomness: total calls to random: 3802
randoop.util.Randomness: total calls to random: 3803
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.normal() : var0 
var2 =  method : A.normal() : var0 
var3 =  method : A.randomNumber() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.randomNumber() : var0 
var6 =  method : A.normal() : var0 
var7 =  method : A.randomNumber() : var0 
var8 =  method : A.randomNumber() : var0 
var9 =  method : A.randomNumber() : var0 
var10 =  method : A.randomNumber() : var0 
var11 =  method : A.normal() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var10 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var11 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=10 [var1]  : true
<randoop.PrimValue, value=10 [var2]  : true
<randoop.PrimValue, value=0 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=0 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true
<randoop.PrimValue, value=0 [var7]  : true
<randoop.PrimValue, value=0 [var8]  : true
<randoop.PrimValue, value=0 [var9]  : true
<randoop.PrimValue, value=0 [var10]  : true
<randoop.PrimValue, value=10 [var11]  : true

allSequences.size()=622
-------------------------------------------
randoop.util.Randomness: total calls to random: 3804
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 621 sequences.
components: 621
randoop.util.Randomness: total calls to random: 3805
randoop.util.Randomness: total calls to random: 3806
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 3807
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 621 sequences.
components: 621
randoop.util.Randomness: total calls to random: 3808
randoop.util.Randomness: total calls to random: 3809
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.normal() : var0 
var2 =  method : A.normal() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.normal() : var0 
var6 =  method : A.normal() : var0 
var7 =  method : A.randomNumber() : var0 
var8 =  method : A.normal() : var0 
var9 =  method : A.randomNumber() : var0 
var10 =  method : A.normal() : var0 
var11 =  method : A.normal() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var10 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var11 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=10 [var1]  : true
<randoop.PrimValue, value=10 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=10 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true
<randoop.PrimValue, value=0 [var7]  : true
<randoop.PrimValue, value=10 [var8]  : true
<randoop.PrimValue, value=0 [var9]  : true
<randoop.PrimValue, value=10 [var10]  : true
<randoop.PrimValue, value=10 [var11]  : true

allSequences.size()=623
-------------------------------------------
randoop.util.Randomness: total calls to random: 3810
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 622 sequences.
components: 622
randoop.util.Randomness: total calls to random: 3811
randoop.util.Randomness: total calls to random: 3812
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.randomNumber() : var0 
var2 =  method : A.randomNumber() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.normal() : var0 
var6 =  method : A.normal() : var0 
var7 =  method : A.randomNumber() : var0 
var8 =  method : A.normal() : var0 
var9 =  method : A.randomNumber() : var0 
var10 =  method : A.normal() : var0 
var11 =  method : A.normal() : var0 
var12 =  method : A.randomNumber() : var0 
var13 =  method : A.randomNumber() : var0 
var14 =  method : A.randomNumber() : var0 
var15 =  method : A.normal() : var0 
var16 =  method : A.normal() : var0 
var17 =  method : A.randomNumber() : var0 
var18 =  method : A.randomNumber() : var0 
var19 =  method : A.normal() : var0 
var20 =  method : A.normal() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Making index 12 inactive (value is a primitive)
Making index 13 inactive (value is a primitive)
Making index 14 inactive (value is a primitive)
Making index 15 inactive (value is a primitive)
Making index 16 inactive (value is a primitive)
Making index 17 inactive (value is a primitive)
Making index 18 inactive (value is a primitive)
Making index 19 inactive (value is a primitive)
Making index 20 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var10 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var11 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var12 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var13 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var14 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var15 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var16 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var17 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var18 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var19 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var20 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=0 [var1]  : true
<randoop.PrimValue, value=0 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=10 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true
<randoop.PrimValue, value=0 [var7]  : true
<randoop.PrimValue, value=10 [var8]  : true
<randoop.PrimValue, value=0 [var9]  : true
<randoop.PrimValue, value=10 [var10]  : true
<randoop.PrimValue, value=10 [var11]  : true
<randoop.PrimValue, value=0 [var12]  : true
<randoop.PrimValue, value=0 [var13]  : true
<randoop.PrimValue, value=0 [var14]  : true
<randoop.PrimValue, value=10 [var15]  : true
<randoop.PrimValue, value=10 [var16]  : true
<randoop.PrimValue, value=0 [var17]  : true
<randoop.PrimValue, value=0 [var18]  : true
<randoop.PrimValue, value=10 [var19]  : true
<randoop.PrimValue, value=10 [var20]  : true

allSequences.size()=624
-------------------------------------------
randoop.util.Randomness: total calls to random: 3813
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 623 sequences.
components: 623
randoop.util.Randomness: total calls to random: 3814
randoop.util.Randomness: total calls to random: 3815
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.randomNumber() : var0 
var2 =  method : A.randomNumber() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.normal() : var0 
var5 =  method : A.normal() : var0 
var6 =  method : A.normal() : var0 
var7 =  method : A.normal() : var0 
var8 =  method : A.normal() : var0 
var9 =  method : A.normal() : var0 
var10 =  method : A.randomNumber() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var10 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=0 [var1]  : true
<randoop.PrimValue, value=0 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=10 [var4]  : true
<randoop.PrimValue, value=10 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true
<randoop.PrimValue, value=10 [var7]  : true
<randoop.PrimValue, value=10 [var8]  : true
<randoop.PrimValue, value=10 [var9]  : true
<randoop.PrimValue, value=0 [var10]  : true

allSequences.size()=625
-------------------------------------------
randoop.util.Randomness: total calls to random: 3816
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 624 sequences.
components: 624
randoop.util.Randomness: total calls to random: 3817
randoop.util.Randomness: total calls to random: 3818
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.normal() : var0 
var2 =  method : A.randomNumber() : var0 
var3 =  method : A.randomNumber() : var0 
var4 =  method : A.normal() : var0 
var5 =  method : A.randomNumber() : var0 
var6 =  method : A.normal() : var0 
var7 =  method : A.randomNumber() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=10 [var1]  : true
<randoop.PrimValue, value=0 [var2]  : true
<randoop.PrimValue, value=0 [var3]  : true
<randoop.PrimValue, value=10 [var4]  : true
<randoop.PrimValue, value=0 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true
<randoop.PrimValue, value=0 [var7]  : true

allSequences.size()=626
-------------------------------------------
randoop.util.Randomness: total calls to random: 3819
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 625 sequences.
components: 625
randoop.util.Randomness: total calls to random: 3820
randoop.util.Randomness: total calls to random: 3821
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.normal() : var0 
var2 =  method : A.normal() : var0 
var3 =  method : A.randomNumber() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.randomNumber() : var0 
var6 =  method : A.normal() : var0 
var7 =  method : A.randomNumber() : var0 
var8 =  method : A.normal() : var0 
var9 =  method : A.normal() : var0 
var10 =  method : A.normal() : var0 
var11 =  method : A.randomNumber() : var0 
var12 =  method : A.normal() : var0 
var13 =  method : A.randomNumber() : var0 
var14 =  method : A.normal() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Making index 12 inactive (value is a primitive)
Making index 13 inactive (value is a primitive)
Making index 14 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var10 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var11 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var12 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var13 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var14 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=10 [var1]  : true
<randoop.PrimValue, value=10 [var2]  : true
<randoop.PrimValue, value=0 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=0 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true
<randoop.PrimValue, value=0 [var7]  : true
<randoop.PrimValue, value=10 [var8]  : true
<randoop.PrimValue, value=10 [var9]  : true
<randoop.PrimValue, value=10 [var10]  : true
<randoop.PrimValue, value=0 [var11]  : true
<randoop.PrimValue, value=10 [var12]  : true
<randoop.PrimValue, value=0 [var13]  : true
<randoop.PrimValue, value=10 [var14]  : true

allSequences.size()=627
-------------------------------------------
randoop.util.Randomness: total calls to random: 3822
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 626 sequences.
components: 626
randoop.util.Randomness: total calls to random: 3823
randoop.util.Randomness: total calls to random: 3824
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.randomNumber() : var0 
var2 =  method : A.randomNumber() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.normal() : var0 
var6 =  method : A.normal() : var0 
var7 =  method : A.randomNumber() : var0 
var8 =  method : A.normal() : var0 
var9 =  method : A.randomNumber() : var0 
var10 =  method : A.randomNumber() : var0 
var11 =  method : A.normal() : var0 
var12 =  method : A.normal() : var0 
var13 =  method : A.normal() : var0 
var14 =  method : A.randomNumber() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Making index 12 inactive (value is a primitive)
Making index 13 inactive (value is a primitive)
Making index 14 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var10 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var11 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var12 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var13 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var14 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=0 [var1]  : true
<randoop.PrimValue, value=0 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=10 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true
<randoop.PrimValue, value=0 [var7]  : true
<randoop.PrimValue, value=10 [var8]  : true
<randoop.PrimValue, value=0 [var9]  : true
<randoop.PrimValue, value=0 [var10]  : true
<randoop.PrimValue, value=10 [var11]  : true
<randoop.PrimValue, value=10 [var12]  : true
<randoop.PrimValue, value=10 [var13]  : true
<randoop.PrimValue, value=0 [var14]  : true

allSequences.size()=628
-------------------------------------------
randoop.util.Randomness: total calls to random: 3825
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 627 sequences.
components: 627
randoop.util.Randomness: total calls to random: 3826
randoop.util.Randomness: total calls to random: 3827
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 3828
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 627 sequences.
components: 627
randoop.util.Randomness: total calls to random: 3829
randoop.util.Randomness: total calls to random: 3830
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.randomNumber() : var0 
var2 =  method : A.randomNumber() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.normal() : var0 
var6 =  method : A.normal() : var0 
var7 =  method : A.randomNumber() : var0 
var8 =  method : A.normal() : var0 
var9 =  method : A.randomNumber() : var0 
var10 =  method : A.normal() : var0 
var11 =  method : A.normal() : var0 
var12 =  method : A.randomNumber() : var0 
var13 =  method : A.randomNumber() : var0 
var14 =  method : A.normal() : var0 
var15 =  method : A.randomNumber() : var0 
var16 =  method : A.randomNumber() : var0 
var17 =  method : A.normal() : var0 
var18 =  method : A.randomNumber() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Making index 12 inactive (value is a primitive)
Making index 13 inactive (value is a primitive)
Making index 14 inactive (value is a primitive)
Making index 15 inactive (value is a primitive)
Making index 16 inactive (value is a primitive)
Making index 17 inactive (value is a primitive)
Making index 18 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var10 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var11 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var12 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var13 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var14 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var15 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var16 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var17 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var18 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=0 [var1]  : true
<randoop.PrimValue, value=0 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=10 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true
<randoop.PrimValue, value=0 [var7]  : true
<randoop.PrimValue, value=10 [var8]  : true
<randoop.PrimValue, value=0 [var9]  : true
<randoop.PrimValue, value=10 [var10]  : true
<randoop.PrimValue, value=10 [var11]  : true
<randoop.PrimValue, value=0 [var12]  : true
<randoop.PrimValue, value=0 [var13]  : true
<randoop.PrimValue, value=10 [var14]  : true
<randoop.PrimValue, value=0 [var15]  : true
<randoop.PrimValue, value=0 [var16]  : true
<randoop.PrimValue, value=10 [var17]  : true
<randoop.PrimValue, value=0 [var18]  : true

allSequences.size()=629
-------------------------------------------
randoop.util.Randomness: total calls to random: 3831
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 628 sequences.
components: 628
randoop.util.Randomness: total calls to random: 3832
randoop.util.Randomness: total calls to random: 3833
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.randomNumber() : var0 
var2 =  method : A.normal() : var0 
var3 =  method : A.randomNumber() : var0 
var4 =  method : A.normal() : var0 
var5 =  method : A.normal() : var0 
var6 =  method : A.randomNumber() : var0 
var7 =  method : A.normal() : var0 
var8 =  method : A.randomNumber() : var0 
var9 =  method : A.randomNumber() : var0 
var10 =  method : A.normal() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var10 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=0 [var1]  : true
<randoop.PrimValue, value=10 [var2]  : true
<randoop.PrimValue, value=0 [var3]  : true
<randoop.PrimValue, value=10 [var4]  : true
<randoop.PrimValue, value=10 [var5]  : true
<randoop.PrimValue, value=0 [var6]  : true
<randoop.PrimValue, value=10 [var7]  : true
<randoop.PrimValue, value=0 [var8]  : true
<randoop.PrimValue, value=0 [var9]  : true
<randoop.PrimValue, value=10 [var10]  : true

allSequences.size()=630
-------------------------------------------
randoop.util.Randomness: total calls to random: 3834
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 629 sequences.
components: 629
randoop.util.Randomness: total calls to random: 3835
randoop.util.Randomness: total calls to random: 3836
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 3837
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 629 sequences.
components: 629
randoop.util.Randomness: total calls to random: 3838
randoop.util.Randomness: total calls to random: 3839
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.randomNumber() : var0 
var2 =  method : A.randomNumber() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.normal() : var0 
var6 =  method : A.normal() : var0 
var7 =  method : A.randomNumber() : var0 
var8 =  method : A.randomNumber() : var0 
var9 =  method : A.randomNumber() : var0 
var10 =  method : A.randomNumber() : var0 
var11 =  method : A.randomNumber() : var0 
var12 =  method : A.normal() : var0 
var13 =  method : A.randomNumber() : var0 
var14 =  method : A.randomNumber() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Making index 12 inactive (value is a primitive)
Making index 13 inactive (value is a primitive)
Making index 14 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var10 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var11 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var12 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var13 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var14 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=0 [var1]  : true
<randoop.PrimValue, value=0 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=10 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true
<randoop.PrimValue, value=0 [var7]  : true
<randoop.PrimValue, value=0 [var8]  : true
<randoop.PrimValue, value=0 [var9]  : true
<randoop.PrimValue, value=0 [var10]  : true
<randoop.PrimValue, value=0 [var11]  : true
<randoop.PrimValue, value=10 [var12]  : true
<randoop.PrimValue, value=0 [var13]  : true
<randoop.PrimValue, value=0 [var14]  : true

allSequences.size()=631
-------------------------------------------
randoop.util.Randomness: total calls to random: 3840
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 630 sequences.
components: 630
randoop.util.Randomness: total calls to random: 3841
randoop.util.Randomness: total calls to random: 3842
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 3843
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 630 sequences.
components: 630
randoop.util.Randomness: total calls to random: 3844
randoop.util.Randomness: total calls to random: 3845
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 3846
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 630 sequences.
components: 630
randoop.util.Randomness: total calls to random: 3847
randoop.util.Randomness: total calls to random: 3848
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 3849
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 630 sequences.
components: 630
randoop.util.Randomness: total calls to random: 3850
randoop.util.Randomness: total calls to random: 3851
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 3852
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 630 sequences.
components: 630
randoop.util.Randomness: total calls to random: 3853
randoop.util.Randomness: total calls to random: 3854
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 3855
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 630 sequences.
components: 630
randoop.util.Randomness: total calls to random: 3856
randoop.util.Randomness: total calls to random: 3857
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 3858
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 630 sequences.
components: 630
randoop.util.Randomness: total calls to random: 3859
randoop.util.Randomness: total calls to random: 3860
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 3861
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 630 sequences.
components: 630
randoop.util.Randomness: total calls to random: 3862
randoop.util.Randomness: total calls to random: 3863
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 3864
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 630 sequences.
components: 630
randoop.util.Randomness: total calls to random: 3865
randoop.util.Randomness: total calls to random: 3866
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 3867
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 630 sequences.
components: 630
randoop.util.Randomness: total calls to random: 3868
randoop.util.Randomness: total calls to random: 3869
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 3870
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 630 sequences.
components: 630
randoop.util.Randomness: total calls to random: 3871
randoop.util.Randomness: total calls to random: 3872
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 3873
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 630 sequences.
components: 630
randoop.util.Randomness: total calls to random: 3874
randoop.util.Randomness: total calls to random: 3875
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 3876
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 630 sequences.
components: 630
randoop.util.Randomness: total calls to random: 3877
randoop.util.Randomness: total calls to random: 3878
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 3879
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 630 sequences.
components: 630
randoop.util.Randomness: total calls to random: 3880
randoop.util.Randomness: total calls to random: 3881
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 3882
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 630 sequences.
components: 630
randoop.util.Randomness: total calls to random: 3883
randoop.util.Randomness: total calls to random: 3884
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.normal() : var0 
var2 =  method : A.randomNumber() : var0 
var3 =  method : A.randomNumber() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.normal() : var0 
var6 =  method : A.randomNumber() : var0 
var7 =  method : A.normal() : var0 
var8 =  method : A.normal() : var0 
var9 =  method : A.randomNumber() : var0 
var10 =  method : A.randomNumber() : var0 
var11 =  method : A.normal() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var10 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var11 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=10 [var1]  : true
<randoop.PrimValue, value=0 [var2]  : true
<randoop.PrimValue, value=0 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=10 [var5]  : true
<randoop.PrimValue, value=0 [var6]  : true
<randoop.PrimValue, value=10 [var7]  : true
<randoop.PrimValue, value=10 [var8]  : true
<randoop.PrimValue, value=0 [var9]  : true
<randoop.PrimValue, value=0 [var10]  : true
<randoop.PrimValue, value=10 [var11]  : true

allSequences.size()=632
-------------------------------------------
randoop.util.Randomness: total calls to random: 3885
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 631 sequences.
components: 631
randoop.util.Randomness: total calls to random: 3886
randoop.util.Randomness: total calls to random: 3887
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.randomNumber() : var0 
var2 =  method : A.randomNumber() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.normal() : var0 
var6 =  method : A.normal() : var0 
var7 =  method : A.randomNumber() : var0 
var8 =  method : A.normal() : var0 
var9 =  method : A.randomNumber() : var0 
var10 =  method : A.normal() : var0 
var11 =  method : A.normal() : var0 
var12 =  method : A.randomNumber() : var0 
var13 =  method : A.randomNumber() : var0 
var14 =  method : A.randomNumber() : var0 
var15 =  method : A.randomNumber() : var0 
var16 =  method : A.randomNumber() : var0 
var17 =  method : A.normal() : var0 
var18 =  method : A.normal() : var0 
var19 =  method : A.randomNumber() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Making index 12 inactive (value is a primitive)
Making index 13 inactive (value is a primitive)
Making index 14 inactive (value is a primitive)
Making index 15 inactive (value is a primitive)
Making index 16 inactive (value is a primitive)
Making index 17 inactive (value is a primitive)
Making index 18 inactive (value is a primitive)
Making index 19 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var10 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var11 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var12 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var13 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var14 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var15 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var16 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var17 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var18 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var19 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=0 [var1]  : true
<randoop.PrimValue, value=0 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=10 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true
<randoop.PrimValue, value=0 [var7]  : true
<randoop.PrimValue, value=10 [var8]  : true
<randoop.PrimValue, value=0 [var9]  : true
<randoop.PrimValue, value=10 [var10]  : true
<randoop.PrimValue, value=10 [var11]  : true
<randoop.PrimValue, value=0 [var12]  : true
<randoop.PrimValue, value=0 [var13]  : true
<randoop.PrimValue, value=0 [var14]  : true
<randoop.PrimValue, value=0 [var15]  : true
<randoop.PrimValue, value=0 [var16]  : true
<randoop.PrimValue, value=10 [var17]  : true
<randoop.PrimValue, value=10 [var18]  : true
<randoop.PrimValue, value=0 [var19]  : true

allSequences.size()=633
-------------------------------------------
randoop.util.Randomness: total calls to random: 3888
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 632 sequences.
components: 632
randoop.util.Randomness: total calls to random: 3889
randoop.util.Randomness: total calls to random: 3890
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.normal() : var0 
var2 =  method : A.normal() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.normal() : var0 
var5 =  method : A.normal() : var0 
var6 =  method : A.normal() : var0 
var7 =  method : A.normal() : var0 
var8 =  method : A.randomNumber() : var0 
var9 =  method : A.normal() : var0 
var10 =  method : A.randomNumber() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var10 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=10 [var1]  : true
<randoop.PrimValue, value=10 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=10 [var4]  : true
<randoop.PrimValue, value=10 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true
<randoop.PrimValue, value=10 [var7]  : true
<randoop.PrimValue, value=0 [var8]  : true
<randoop.PrimValue, value=10 [var9]  : true
<randoop.PrimValue, value=0 [var10]  : true

allSequences.size()=634
-------------------------------------------
randoop.util.Randomness: total calls to random: 3891
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 633 sequences.
components: 633
randoop.util.Randomness: total calls to random: 3892
randoop.util.Randomness: total calls to random: 3893
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.randomNumber() : var0 
var2 =  method : A.randomNumber() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.normal() : var0 
var6 =  method : A.normal() : var0 
var7 =  method : A.randomNumber() : var0 
var8 =  method : A.normal() : var0 
var9 =  method : A.normal() : var0 
var10 =  method : A.randomNumber() : var0 
var11 =  method : A.normal() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var10 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var11 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=0 [var1]  : true
<randoop.PrimValue, value=0 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=10 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true
<randoop.PrimValue, value=0 [var7]  : true
<randoop.PrimValue, value=10 [var8]  : true
<randoop.PrimValue, value=10 [var9]  : true
<randoop.PrimValue, value=0 [var10]  : true
<randoop.PrimValue, value=10 [var11]  : true

allSequences.size()=635
-------------------------------------------
randoop.util.Randomness: total calls to random: 3894
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 634 sequences.
components: 634
randoop.util.Randomness: total calls to random: 3895
randoop.util.Randomness: total calls to random: 3896
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 3897
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 634 sequences.
components: 634
randoop.util.Randomness: total calls to random: 3898
randoop.util.Randomness: total calls to random: 3899
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.randomNumber() : var0 
var2 =  method : A.randomNumber() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.normal() : var0 
var5 =  method : A.normal() : var0 
var6 =  method : A.randomNumber() : var0 
var7 =  method : A.normal() : var0 
var8 =  method : A.normal() : var0 
var9 =  method : A.randomNumber() : var0 
var10 =  method : A.randomNumber() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var10 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=0 [var1]  : true
<randoop.PrimValue, value=0 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=10 [var4]  : true
<randoop.PrimValue, value=10 [var5]  : true
<randoop.PrimValue, value=0 [var6]  : true
<randoop.PrimValue, value=10 [var7]  : true
<randoop.PrimValue, value=10 [var8]  : true
<randoop.PrimValue, value=0 [var9]  : true
<randoop.PrimValue, value=0 [var10]  : true

allSequences.size()=636
-------------------------------------------
randoop.util.Randomness: total calls to random: 3900
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 635 sequences.
components: 635
randoop.util.Randomness: total calls to random: 3901
randoop.util.Randomness: total calls to random: 3902
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 3903
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 635 sequences.
components: 635
randoop.util.Randomness: total calls to random: 3904
randoop.util.Randomness: total calls to random: 3905
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.randomNumber() : var0 
var2 =  method : A.randomNumber() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.normal() : var0 
var6 =  method : A.normal() : var0 
var7 =  method : A.randomNumber() : var0 
var8 =  method : A.normal() : var0 
var9 =  method : A.randomNumber() : var0 
var10 =  method : A.normal() : var0 
var11 =  method : A.normal() : var0 
var12 =  method : A.randomNumber() : var0 
var13 =  method : A.randomNumber() : var0 
var14 =  method : A.randomNumber() : var0 
var15 =  method : A.normal() : var0 
var16 =  method : A.normal() : var0 
var17 =  method : A.randomNumber() : var0 
var18 =  method : A.randomNumber() : var0 
var19 =  method : A.randomNumber() : var0 
var20 =  method : A.normal() : var0 
var21 =  method : A.randomNumber() : var0 
var22 =  method : A.normal() : var0 
var23 =  method : A.randomNumber() : var0 
var24 =  method : A.normal() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Making index 12 inactive (value is a primitive)
Making index 13 inactive (value is a primitive)
Making index 14 inactive (value is a primitive)
Making index 15 inactive (value is a primitive)
Making index 16 inactive (value is a primitive)
Making index 17 inactive (value is a primitive)
Making index 18 inactive (value is a primitive)
Making index 19 inactive (value is a primitive)
Making index 20 inactive (value is a primitive)
Making index 21 inactive (value is a primitive)
Making index 22 inactive (value is a primitive)
Making index 23 inactive (value is a primitive)
Making index 24 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var10 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var11 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var12 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var13 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var14 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var15 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var16 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var17 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var18 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var19 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var20 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var21 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var22 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var23 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var24 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=0 [var1]  : true
<randoop.PrimValue, value=0 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=10 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true
<randoop.PrimValue, value=0 [var7]  : true
<randoop.PrimValue, value=10 [var8]  : true
<randoop.PrimValue, value=0 [var9]  : true
<randoop.PrimValue, value=10 [var10]  : true
<randoop.PrimValue, value=10 [var11]  : true
<randoop.PrimValue, value=0 [var12]  : true
<randoop.PrimValue, value=0 [var13]  : true
<randoop.PrimValue, value=0 [var14]  : true
<randoop.PrimValue, value=10 [var15]  : true
<randoop.PrimValue, value=10 [var16]  : true
<randoop.PrimValue, value=0 [var17]  : true
<randoop.PrimValue, value=0 [var18]  : true
<randoop.PrimValue, value=0 [var19]  : true
<randoop.PrimValue, value=10 [var20]  : true
<randoop.PrimValue, value=0 [var21]  : true
<randoop.PrimValue, value=10 [var22]  : true
<randoop.PrimValue, value=0 [var23]  : true
<randoop.PrimValue, value=10 [var24]  : true

allSequences.size()=637
-------------------------------------------
randoop.util.Randomness: total calls to random: 3906
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 636 sequences.
components: 636
randoop.util.Randomness: total calls to random: 3907
randoop.util.Randomness: total calls to random: 3908
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 3909
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 636 sequences.
components: 636
randoop.util.Randomness: total calls to random: 3910
randoop.util.Randomness: total calls to random: 3911
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 3912
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 636 sequences.
components: 636
randoop.util.Randomness: total calls to random: 3913
randoop.util.Randomness: total calls to random: 3914
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 3915
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 636 sequences.
components: 636
randoop.util.Randomness: total calls to random: 3916
randoop.util.Randomness: total calls to random: 3917
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.normal() : var0 
var2 =  method : A.normal() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.normal() : var0 
var5 =  method : A.normal() : var0 
var6 =  method : A.randomNumber() : var0 
var7 =  method : A.normal() : var0 
var8 =  method : A.normal() : var0 
var9 =  method : A.randomNumber() : var0 
var10 =  method : A.normal() : var0 
var11 =  method : A.randomNumber() : var0 
var12 =  method : A.normal() : var0 
var13 =  method : A.normal() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Making index 12 inactive (value is a primitive)
Making index 13 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var10 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var11 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var12 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var13 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=10 [var1]  : true
<randoop.PrimValue, value=10 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=10 [var4]  : true
<randoop.PrimValue, value=10 [var5]  : true
<randoop.PrimValue, value=0 [var6]  : true
<randoop.PrimValue, value=10 [var7]  : true
<randoop.PrimValue, value=10 [var8]  : true
<randoop.PrimValue, value=0 [var9]  : true
<randoop.PrimValue, value=10 [var10]  : true
<randoop.PrimValue, value=0 [var11]  : true
<randoop.PrimValue, value=10 [var12]  : true
<randoop.PrimValue, value=10 [var13]  : true

allSequences.size()=638
-------------------------------------------
randoop.util.Randomness: total calls to random: 3918
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 637 sequences.
components: 637
randoop.util.Randomness: total calls to random: 3919
randoop.util.Randomness: total calls to random: 3920
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 3921
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 637 sequences.
components: 637
randoop.util.Randomness: total calls to random: 3922
randoop.util.Randomness: total calls to random: 3923
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 3924
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 637 sequences.
components: 637
randoop.util.Randomness: total calls to random: 3925
randoop.util.Randomness: total calls to random: 3926
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 3927
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 637 sequences.
components: 637
randoop.util.Randomness: total calls to random: 3928
randoop.util.Randomness: total calls to random: 3929
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 3930
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 637 sequences.
components: 637
randoop.util.Randomness: total calls to random: 3931
randoop.util.Randomness: total calls to random: 3932
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.randomNumber() : var0 
var2 =  method : A.randomNumber() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.normal() : var0 
var6 =  method : A.normal() : var0 
var7 =  method : A.randomNumber() : var0 
var8 =  method : A.normal() : var0 
var9 =  method : A.randomNumber() : var0 
var10 =  method : A.randomNumber() : var0 
var11 =  method : A.normal() : var0 
var12 =  method : A.randomNumber() : var0 
var13 =  method : A.normal() : var0 
var14 =  method : A.randomNumber() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Making index 12 inactive (value is a primitive)
Making index 13 inactive (value is a primitive)
Making index 14 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var10 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var11 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var12 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var13 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var14 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=0 [var1]  : true
<randoop.PrimValue, value=0 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=10 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true
<randoop.PrimValue, value=0 [var7]  : true
<randoop.PrimValue, value=10 [var8]  : true
<randoop.PrimValue, value=0 [var9]  : true
<randoop.PrimValue, value=0 [var10]  : true
<randoop.PrimValue, value=10 [var11]  : true
<randoop.PrimValue, value=0 [var12]  : true
<randoop.PrimValue, value=10 [var13]  : true
<randoop.PrimValue, value=0 [var14]  : true

allSequences.size()=639
-------------------------------------------
randoop.util.Randomness: total calls to random: 3933
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 638 sequences.
components: 638
randoop.util.Randomness: total calls to random: 3934
randoop.util.Randomness: total calls to random: 3935
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.randomNumber() : var0 
var2 =  method : A.randomNumber() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.normal() : var0 
var5 =  method : A.normal() : var0 
var6 =  method : A.randomNumber() : var0 
var7 =  method : A.randomNumber() : var0 
var8 =  method : A.randomNumber() : var0 
var9 =  method : A.randomNumber() : var0 
var10 =  method : A.normal() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var10 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=0 [var1]  : true
<randoop.PrimValue, value=0 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=10 [var4]  : true
<randoop.PrimValue, value=10 [var5]  : true
<randoop.PrimValue, value=0 [var6]  : true
<randoop.PrimValue, value=0 [var7]  : true
<randoop.PrimValue, value=0 [var8]  : true
<randoop.PrimValue, value=0 [var9]  : true
<randoop.PrimValue, value=10 [var10]  : true

allSequences.size()=640
-------------------------------------------
randoop.util.Randomness: total calls to random: 3936
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 639 sequences.
components: 639
randoop.util.Randomness: total calls to random: 3937
randoop.util.Randomness: total calls to random: 3938
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 3939
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 639 sequences.
components: 639
randoop.util.Randomness: total calls to random: 3940
randoop.util.Randomness: total calls to random: 3941
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.randomNumber() : var0 
var2 =  method : A.randomNumber() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.normal() : var0 
var6 =  method : A.normal() : var0 
var7 =  method : A.randomNumber() : var0 
var8 =  method : A.normal() : var0 
var9 =  method : A.randomNumber() : var0 
var10 =  method : A.randomNumber() : var0 
var11 =  method : A.normal() : var0 
var12 =  method : A.normal() : var0 
var13 =  method : A.randomNumber() : var0 
var14 =  method : A.randomNumber() : var0 
var15 =  method : A.normal() : var0 
var16 =  method : A.randomNumber() : var0 
var17 =  method : A.randomNumber() : var0 
var18 =  method : A.randomNumber() : var0 
var19 =  method : A.normal() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Making index 12 inactive (value is a primitive)
Making index 13 inactive (value is a primitive)
Making index 14 inactive (value is a primitive)
Making index 15 inactive (value is a primitive)
Making index 16 inactive (value is a primitive)
Making index 17 inactive (value is a primitive)
Making index 18 inactive (value is a primitive)
Making index 19 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var10 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var11 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var12 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var13 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var14 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var15 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var16 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var17 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var18 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var19 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=0 [var1]  : true
<randoop.PrimValue, value=0 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=10 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true
<randoop.PrimValue, value=0 [var7]  : true
<randoop.PrimValue, value=10 [var8]  : true
<randoop.PrimValue, value=0 [var9]  : true
<randoop.PrimValue, value=0 [var10]  : true
<randoop.PrimValue, value=10 [var11]  : true
<randoop.PrimValue, value=10 [var12]  : true
<randoop.PrimValue, value=0 [var13]  : true
<randoop.PrimValue, value=0 [var14]  : true
<randoop.PrimValue, value=10 [var15]  : true
<randoop.PrimValue, value=0 [var16]  : true
<randoop.PrimValue, value=0 [var17]  : true
<randoop.PrimValue, value=0 [var18]  : true
<randoop.PrimValue, value=10 [var19]  : true

allSequences.size()=641
-------------------------------------------
randoop.util.Randomness: total calls to random: 3942
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 640 sequences.
components: 640
randoop.util.Randomness: total calls to random: 3943
randoop.util.Randomness: total calls to random: 3944
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 3945
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 640 sequences.
components: 640
randoop.util.Randomness: total calls to random: 3946
randoop.util.Randomness: total calls to random: 3947
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.normal() : var0 
var2 =  method : A.normal() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.normal() : var0 
var5 =  method : A.normal() : var0 
var6 =  method : A.normal() : var0 
var7 =  method : A.randomNumber() : var0 
var8 =  method : A.randomNumber() : var0 
var9 =  method : A.randomNumber() : var0 
var10 =  method : A.normal() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var10 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=10 [var1]  : true
<randoop.PrimValue, value=10 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=10 [var4]  : true
<randoop.PrimValue, value=10 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true
<randoop.PrimValue, value=0 [var7]  : true
<randoop.PrimValue, value=0 [var8]  : true
<randoop.PrimValue, value=0 [var9]  : true
<randoop.PrimValue, value=10 [var10]  : true

allSequences.size()=642
-------------------------------------------
randoop.util.Randomness: total calls to random: 3948
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 641 sequences.
components: 641
randoop.util.Randomness: total calls to random: 3949
randoop.util.Randomness: total calls to random: 3950
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.randomNumber() : var0 
var2 =  method : A.normal() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.randomNumber() : var0 
var6 =  method : A.randomNumber() : var0 
var7 =  method : A.normal() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=0 [var1]  : true
<randoop.PrimValue, value=10 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=0 [var5]  : true
<randoop.PrimValue, value=0 [var6]  : true
<randoop.PrimValue, value=10 [var7]  : true

allSequences.size()=643
-------------------------------------------
randoop.util.Randomness: total calls to random: 3951
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 642 sequences.
components: 642
randoop.util.Randomness: total calls to random: 3952
randoop.util.Randomness: total calls to random: 3953
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.randomNumber() : var0 
var2 =  method : A.randomNumber() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.normal() : var0 
var6 =  method : A.normal() : var0 
var7 =  method : A.randomNumber() : var0 
var8 =  method : A.normal() : var0 
var9 =  method : A.randomNumber() : var0 
var10 =  method : A.randomNumber() : var0 
var11 =  method : A.normal() : var0 
var12 =  method : A.normal() : var0 
var13 =  method : A.randomNumber() : var0 
var14 =  method : A.randomNumber() : var0 
var15 =  method : A.normal() : var0 
var16 =  method : A.randomNumber() : var0 
var17 =  method : A.normal() : var0 
var18 =  method : A.randomNumber() : var0 
var19 =  method : A.normal() : var0 
var20 =  method : A.normal() : var0 
var21 =  method : A.normal() : var0 
var22 =  method : A.randomNumber() : var0 
var23 =  method : A.randomNumber() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Making index 12 inactive (value is a primitive)
Making index 13 inactive (value is a primitive)
Making index 14 inactive (value is a primitive)
Making index 15 inactive (value is a primitive)
Making index 16 inactive (value is a primitive)
Making index 17 inactive (value is a primitive)
Making index 18 inactive (value is a primitive)
Making index 19 inactive (value is a primitive)
Making index 20 inactive (value is a primitive)
Making index 21 inactive (value is a primitive)
Making index 22 inactive (value is a primitive)
Making index 23 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var10 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var11 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var12 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var13 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var14 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var15 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var16 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var17 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var18 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var19 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var20 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var21 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var22 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var23 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=0 [var1]  : true
<randoop.PrimValue, value=0 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=10 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true
<randoop.PrimValue, value=0 [var7]  : true
<randoop.PrimValue, value=10 [var8]  : true
<randoop.PrimValue, value=0 [var9]  : true
<randoop.PrimValue, value=0 [var10]  : true
<randoop.PrimValue, value=10 [var11]  : true
<randoop.PrimValue, value=10 [var12]  : true
<randoop.PrimValue, value=0 [var13]  : true
<randoop.PrimValue, value=0 [var14]  : true
<randoop.PrimValue, value=10 [var15]  : true
<randoop.PrimValue, value=0 [var16]  : true
<randoop.PrimValue, value=10 [var17]  : true
<randoop.PrimValue, value=0 [var18]  : true
<randoop.PrimValue, value=10 [var19]  : true
<randoop.PrimValue, value=10 [var20]  : true
<randoop.PrimValue, value=10 [var21]  : true
<randoop.PrimValue, value=0 [var22]  : true
<randoop.PrimValue, value=0 [var23]  : true

allSequences.size()=644
-------------------------------------------
randoop.util.Randomness: total calls to random: 3954
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 643 sequences.
components: 643
randoop.util.Randomness: total calls to random: 3955
randoop.util.Randomness: total calls to random: 3956
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 3957
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 643 sequences.
components: 643
randoop.util.Randomness: total calls to random: 3958
randoop.util.Randomness: total calls to random: 3959
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.normal() : var0 
var2 =  method : A.normal() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.normal() : var0 
var5 =  method : A.randomNumber() : var0 
var6 =  method : A.normal() : var0 
var7 =  method : A.normal() : var0 
var8 =  method : A.normal() : var0 
var9 =  method : A.randomNumber() : var0 
var10 =  method : A.randomNumber() : var0 
var11 =  method : A.randomNumber() : var0 
var12 =  method : A.normal() : var0 
var13 =  method : A.normal() : var0 
var14 =  method : A.randomNumber() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Making index 12 inactive (value is a primitive)
Making index 13 inactive (value is a primitive)
Making index 14 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var10 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var11 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var12 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var13 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var14 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=10 [var1]  : true
<randoop.PrimValue, value=10 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=10 [var4]  : true
<randoop.PrimValue, value=0 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true
<randoop.PrimValue, value=10 [var7]  : true
<randoop.PrimValue, value=10 [var8]  : true
<randoop.PrimValue, value=0 [var9]  : true
<randoop.PrimValue, value=0 [var10]  : true
<randoop.PrimValue, value=0 [var11]  : true
<randoop.PrimValue, value=10 [var12]  : true
<randoop.PrimValue, value=10 [var13]  : true
<randoop.PrimValue, value=0 [var14]  : true

allSequences.size()=645
-------------------------------------------
randoop.util.Randomness: total calls to random: 3960
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 644 sequences.
components: 644
randoop.util.Randomness: total calls to random: 3961
randoop.util.Randomness: total calls to random: 3962
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.randomNumber() : var0 
var2 =  method : A.randomNumber() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.normal() : var0 
var6 =  method : A.normal() : var0 
var7 =  method : A.randomNumber() : var0 
var8 =  method : A.randomNumber() : var0 
var9 =  method : A.randomNumber() : var0 
var10 =  method : A.randomNumber() : var0 
var11 =  method : A.randomNumber() : var0 
var12 =  method : A.normal() : var0 
var13 =  method : A.randomNumber() : var0 
var14 =  method : A.randomNumber() : var0 
var15 =  method : A.normal() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Making index 12 inactive (value is a primitive)
Making index 13 inactive (value is a primitive)
Making index 14 inactive (value is a primitive)
Making index 15 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var10 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var11 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var12 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var13 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var14 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var15 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=0 [var1]  : true
<randoop.PrimValue, value=0 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=10 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true
<randoop.PrimValue, value=0 [var7]  : true
<randoop.PrimValue, value=0 [var8]  : true
<randoop.PrimValue, value=0 [var9]  : true
<randoop.PrimValue, value=0 [var10]  : true
<randoop.PrimValue, value=0 [var11]  : true
<randoop.PrimValue, value=10 [var12]  : true
<randoop.PrimValue, value=0 [var13]  : true
<randoop.PrimValue, value=0 [var14]  : true
<randoop.PrimValue, value=10 [var15]  : true

allSequences.size()=646
-------------------------------------------
randoop.util.Randomness: total calls to random: 3963
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 645 sequences.
components: 645
randoop.util.Randomness: total calls to random: 3964
randoop.util.Randomness: total calls to random: 3965
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 3966
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 645 sequences.
components: 645
randoop.util.Randomness: total calls to random: 3967
randoop.util.Randomness: total calls to random: 3968
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.randomNumber() : var0 
var2 =  method : A.normal() : var0 
var3 =  method : A.randomNumber() : var0 
var4 =  method : A.normal() : var0 
var5 =  method : A.randomNumber() : var0 
var6 =  method : A.normal() : var0 
var7 =  method : A.randomNumber() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=0 [var1]  : true
<randoop.PrimValue, value=10 [var2]  : true
<randoop.PrimValue, value=0 [var3]  : true
<randoop.PrimValue, value=10 [var4]  : true
<randoop.PrimValue, value=0 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true
<randoop.PrimValue, value=0 [var7]  : true

allSequences.size()=647
-------------------------------------------
randoop.util.Randomness: total calls to random: 3969
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 646 sequences.
components: 646
randoop.util.Randomness: total calls to random: 3970
randoop.util.Randomness: total calls to random: 3971
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.randomNumber() : var0 
var2 =  method : A.randomNumber() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.normal() : var0 
var6 =  method : A.normal() : var0 
var7 =  method : A.randomNumber() : var0 
var8 =  method : A.normal() : var0 
var9 =  method : A.randomNumber() : var0 
var10 =  method : A.randomNumber() : var0 
var11 =  method : A.normal() : var0 
var12 =  method : A.normal() : var0 
var13 =  method : A.randomNumber() : var0 
var14 =  method : A.randomNumber() : var0 
var15 =  method : A.normal() : var0 
var16 =  method : A.randomNumber() : var0 
var17 =  method : A.normal() : var0 
var18 =  method : A.randomNumber() : var0 
var19 =  method : A.normal() : var0 
var20 =  method : A.normal() : var0 
var21 =  method : A.normal() : var0 
var22 =  method : A.randomNumber() : var0 
var23 =  method : A.normal() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Making index 12 inactive (value is a primitive)
Making index 13 inactive (value is a primitive)
Making index 14 inactive (value is a primitive)
Making index 15 inactive (value is a primitive)
Making index 16 inactive (value is a primitive)
Making index 17 inactive (value is a primitive)
Making index 18 inactive (value is a primitive)
Making index 19 inactive (value is a primitive)
Making index 20 inactive (value is a primitive)
Making index 21 inactive (value is a primitive)
Making index 22 inactive (value is a primitive)
Making index 23 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var10 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var11 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var12 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var13 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var14 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var15 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var16 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var17 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var18 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var19 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var20 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var21 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var22 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var23 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=0 [var1]  : true
<randoop.PrimValue, value=0 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=10 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true
<randoop.PrimValue, value=0 [var7]  : true
<randoop.PrimValue, value=10 [var8]  : true
<randoop.PrimValue, value=0 [var9]  : true
<randoop.PrimValue, value=0 [var10]  : true
<randoop.PrimValue, value=10 [var11]  : true
<randoop.PrimValue, value=10 [var12]  : true
<randoop.PrimValue, value=0 [var13]  : true
<randoop.PrimValue, value=0 [var14]  : true
<randoop.PrimValue, value=10 [var15]  : true
<randoop.PrimValue, value=0 [var16]  : true
<randoop.PrimValue, value=10 [var17]  : true
<randoop.PrimValue, value=0 [var18]  : true
<randoop.PrimValue, value=10 [var19]  : true
<randoop.PrimValue, value=10 [var20]  : true
<randoop.PrimValue, value=10 [var21]  : true
<randoop.PrimValue, value=0 [var22]  : true
<randoop.PrimValue, value=10 [var23]  : true

allSequences.size()=648
-------------------------------------------
randoop.util.Randomness: total calls to random: 3972
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 647 sequences.
components: 647
randoop.util.Randomness: total calls to random: 3973
randoop.util.Randomness: total calls to random: 3974
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.randomNumber() : var0 
var2 =  method : A.randomNumber() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.normal() : var0 
var5 =  method : A.normal() : var0 
var6 =  method : A.randomNumber() : var0 
var7 =  method : A.normal() : var0 
var8 =  method : A.normal() : var0 
var9 =  method : A.normal() : var0 
var10 =  method : A.normal() : var0 
var11 =  method : A.normal() : var0 
var12 =  method : A.normal() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Making index 12 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var10 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var11 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var12 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=0 [var1]  : true
<randoop.PrimValue, value=0 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=10 [var4]  : true
<randoop.PrimValue, value=10 [var5]  : true
<randoop.PrimValue, value=0 [var6]  : true
<randoop.PrimValue, value=10 [var7]  : true
<randoop.PrimValue, value=10 [var8]  : true
<randoop.PrimValue, value=10 [var9]  : true
<randoop.PrimValue, value=10 [var10]  : true
<randoop.PrimValue, value=10 [var11]  : true
<randoop.PrimValue, value=10 [var12]  : true

allSequences.size()=649
-------------------------------------------
randoop.util.Randomness: total calls to random: 3975
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 648 sequences.
components: 648
randoop.util.Randomness: total calls to random: 3976
randoop.util.Randomness: total calls to random: 3977
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.randomNumber() : var0 
var2 =  method : A.randomNumber() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.normal() : var0 
var6 =  method : A.normal() : var0 
var7 =  method : A.randomNumber() : var0 
var8 =  method : A.normal() : var0 
var9 =  method : A.randomNumber() : var0 
var10 =  method : A.normal() : var0 
var11 =  method : A.normal() : var0 
var12 =  method : A.randomNumber() : var0 
var13 =  method : A.randomNumber() : var0 
var14 =  method : A.randomNumber() : var0 
var15 =  method : A.normal() : var0 
var16 =  method : A.normal() : var0 
var17 =  method : A.randomNumber() : var0 
var18 =  method : A.randomNumber() : var0 
var19 =  method : A.randomNumber() : var0 
var20 =  method : A.randomNumber() : var0 
var21 =  method : A.randomNumber() : var0 
var22 =  method : A.randomNumber() : var0 
var23 =  method : A.randomNumber() : var0 
var24 =  method : A.normal() : var0 
var25 =  method : A.normal() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Making index 12 inactive (value is a primitive)
Making index 13 inactive (value is a primitive)
Making index 14 inactive (value is a primitive)
Making index 15 inactive (value is a primitive)
Making index 16 inactive (value is a primitive)
Making index 17 inactive (value is a primitive)
Making index 18 inactive (value is a primitive)
Making index 19 inactive (value is a primitive)
Making index 20 inactive (value is a primitive)
Making index 21 inactive (value is a primitive)
Making index 22 inactive (value is a primitive)
Making index 23 inactive (value is a primitive)
Making index 24 inactive (value is a primitive)
Making index 25 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var10 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var11 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var12 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var13 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var14 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var15 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var16 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var17 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var18 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var19 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var20 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var21 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var22 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var23 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var24 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var25 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=0 [var1]  : true
<randoop.PrimValue, value=0 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=10 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true
<randoop.PrimValue, value=0 [var7]  : true
<randoop.PrimValue, value=10 [var8]  : true
<randoop.PrimValue, value=0 [var9]  : true
<randoop.PrimValue, value=10 [var10]  : true
<randoop.PrimValue, value=10 [var11]  : true
<randoop.PrimValue, value=0 [var12]  : true
<randoop.PrimValue, value=0 [var13]  : true
<randoop.PrimValue, value=0 [var14]  : true
<randoop.PrimValue, value=10 [var15]  : true
<randoop.PrimValue, value=10 [var16]  : true
<randoop.PrimValue, value=0 [var17]  : true
<randoop.PrimValue, value=0 [var18]  : true
<randoop.PrimValue, value=0 [var19]  : true
<randoop.PrimValue, value=0 [var20]  : true
<randoop.PrimValue, value=0 [var21]  : true
<randoop.PrimValue, value=0 [var22]  : true
<randoop.PrimValue, value=0 [var23]  : true
<randoop.PrimValue, value=10 [var24]  : true
<randoop.PrimValue, value=10 [var25]  : true

allSequences.size()=650
-------------------------------------------
randoop.util.Randomness: total calls to random: 3978
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 649 sequences.
components: 649
randoop.util.Randomness: total calls to random: 3979
randoop.util.Randomness: total calls to random: 3980
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.normal() : var0 
var2 =  method : A.normal() : var0 
var3 =  method : A.randomNumber() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.normal() : var0 
var6 =  method : A.randomNumber() : var0 
var7 =  method : A.randomNumber() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=10 [var1]  : true
<randoop.PrimValue, value=10 [var2]  : true
<randoop.PrimValue, value=0 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=10 [var5]  : true
<randoop.PrimValue, value=0 [var6]  : true
<randoop.PrimValue, value=0 [var7]  : true

allSequences.size()=651
-------------------------------------------
randoop.util.Randomness: total calls to random: 3981
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 650 sequences.
components: 650
randoop.util.Randomness: total calls to random: 3982
randoop.util.Randomness: total calls to random: 3983
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.randomNumber() : var0 
var2 =  method : A.randomNumber() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.normal() : var0 
var5 =  method : A.normal() : var0 
var6 =  method : A.normal() : var0 
var7 =  method : A.normal() : var0 
var8 =  method : A.normal() : var0 
var9 =  method : A.normal() : var0 
var10 =  method : A.randomNumber() : var0 
var11 =  method : A.randomNumber() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var10 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var11 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=0 [var1]  : true
<randoop.PrimValue, value=0 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=10 [var4]  : true
<randoop.PrimValue, value=10 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true
<randoop.PrimValue, value=10 [var7]  : true
<randoop.PrimValue, value=10 [var8]  : true
<randoop.PrimValue, value=10 [var9]  : true
<randoop.PrimValue, value=0 [var10]  : true
<randoop.PrimValue, value=0 [var11]  : true

allSequences.size()=652
-------------------------------------------
randoop.util.Randomness: total calls to random: 3984
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 651 sequences.
components: 651
randoop.util.Randomness: total calls to random: 3985
randoop.util.Randomness: total calls to random: 3986
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.normal() : var0 
var2 =  method : A.normal() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.normal() : var0 
var6 =  method : A.normal() : var0 
var7 =  method : A.normal() : var0 
var8 =  method : A.randomNumber() : var0 
var9 =  method : A.normal() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=10 [var1]  : true
<randoop.PrimValue, value=10 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=10 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true
<randoop.PrimValue, value=10 [var7]  : true
<randoop.PrimValue, value=0 [var8]  : true
<randoop.PrimValue, value=10 [var9]  : true

allSequences.size()=653
-------------------------------------------
randoop.util.Randomness: total calls to random: 3987
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 652 sequences.
components: 652
randoop.util.Randomness: total calls to random: 3988
randoop.util.Randomness: total calls to random: 3989
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 3990
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 652 sequences.
components: 652
randoop.util.Randomness: total calls to random: 3991
randoop.util.Randomness: total calls to random: 3992
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 3993
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 652 sequences.
components: 652
randoop.util.Randomness: total calls to random: 3994
randoop.util.Randomness: total calls to random: 3995
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 3996
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 652 sequences.
components: 652
randoop.util.Randomness: total calls to random: 3997
randoop.util.Randomness: total calls to random: 3998
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.randomNumber() : var0 
var2 =  method : A.randomNumber() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.normal() : var0 
var5 =  method : A.normal() : var0 
var6 =  method : A.normal() : var0 
var7 =  method : A.normal() : var0 
var8 =  method : A.normal() : var0 
var9 =  method : A.randomNumber() : var0 
var10 =  method : A.randomNumber() : var0 
var11 =  method : A.randomNumber() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var10 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var11 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=0 [var1]  : true
<randoop.PrimValue, value=0 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=10 [var4]  : true
<randoop.PrimValue, value=10 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true
<randoop.PrimValue, value=10 [var7]  : true
<randoop.PrimValue, value=10 [var8]  : true
<randoop.PrimValue, value=0 [var9]  : true
<randoop.PrimValue, value=0 [var10]  : true
<randoop.PrimValue, value=0 [var11]  : true

allSequences.size()=654
-------------------------------------------
randoop.util.Randomness: total calls to random: 3999
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 653 sequences.
components: 653
randoop.util.Randomness: total calls to random: 4000
randoop.util.Randomness: total calls to random: 4001
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.normal() : var0 
var2 =  method : A.normal() : var0 
var3 =  method : A.randomNumber() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.randomNumber() : var0 
var6 =  method : A.normal() : var0 
var7 =  method : A.randomNumber() : var0 
var8 =  method : A.randomNumber() : var0 
var9 =  method : A.randomNumber() : var0 
var10 =  method : A.normal() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var10 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=10 [var1]  : true
<randoop.PrimValue, value=10 [var2]  : true
<randoop.PrimValue, value=0 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=0 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true
<randoop.PrimValue, value=0 [var7]  : true
<randoop.PrimValue, value=0 [var8]  : true
<randoop.PrimValue, value=0 [var9]  : true
<randoop.PrimValue, value=10 [var10]  : true

allSequences.size()=655
-------------------------------------------
randoop.util.Randomness: total calls to random: 4002
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 654 sequences.
components: 654
randoop.util.Randomness: total calls to random: 4003
randoop.util.Randomness: total calls to random: 4004
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.normal() : var0 
var2 =  method : A.normal() : var0 
var3 =  method : A.randomNumber() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.randomNumber() : var0 
var6 =  method : A.normal() : var0 
var7 =  method : A.randomNumber() : var0 
var8 =  method : A.normal() : var0 
var9 =  method : A.normal() : var0 
var10 =  method : A.randomNumber() : var0 
var11 =  method : A.normal() : var0 
var12 =  method : A.randomNumber() : var0 
var13 =  method : A.randomNumber() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Making index 12 inactive (value is a primitive)
Making index 13 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var10 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var11 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var12 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var13 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=10 [var1]  : true
<randoop.PrimValue, value=10 [var2]  : true
<randoop.PrimValue, value=0 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=0 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true
<randoop.PrimValue, value=0 [var7]  : true
<randoop.PrimValue, value=10 [var8]  : true
<randoop.PrimValue, value=10 [var9]  : true
<randoop.PrimValue, value=0 [var10]  : true
<randoop.PrimValue, value=10 [var11]  : true
<randoop.PrimValue, value=0 [var12]  : true
<randoop.PrimValue, value=0 [var13]  : true

allSequences.size()=656
-------------------------------------------
randoop.util.Randomness: total calls to random: 4005
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 655 sequences.
components: 655
randoop.util.Randomness: total calls to random: 4006
randoop.util.Randomness: total calls to random: 4007
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 4008
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 655 sequences.
components: 655
randoop.util.Randomness: total calls to random: 4009
randoop.util.Randomness: total calls to random: 4010
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.randomNumber() : var0 
var2 =  method : A.randomNumber() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.normal() : var0 
var5 =  method : A.normal() : var0 
var6 =  method : A.normal() : var0 
var7 =  method : A.randomNumber() : var0 
var8 =  method : A.randomNumber() : var0 
var9 =  method : A.normal() : var0 
var10 =  method : A.normal() : var0 
var11 =  method : A.normal() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var10 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var11 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=0 [var1]  : true
<randoop.PrimValue, value=0 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=10 [var4]  : true
<randoop.PrimValue, value=10 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true
<randoop.PrimValue, value=0 [var7]  : true
<randoop.PrimValue, value=0 [var8]  : true
<randoop.PrimValue, value=10 [var9]  : true
<randoop.PrimValue, value=10 [var10]  : true
<randoop.PrimValue, value=10 [var11]  : true

allSequences.size()=657
-------------------------------------------
randoop.util.Randomness: total calls to random: 4011
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 656 sequences.
components: 656
randoop.util.Randomness: total calls to random: 4012
randoop.util.Randomness: total calls to random: 4013
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 4014
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 656 sequences.
components: 656
randoop.util.Randomness: total calls to random: 4015
randoop.util.Randomness: total calls to random: 4016
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 4017
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 656 sequences.
components: 656
randoop.util.Randomness: total calls to random: 4018
randoop.util.Randomness: total calls to random: 4019
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 4020
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 656 sequences.
components: 656
randoop.util.Randomness: total calls to random: 4021
randoop.util.Randomness: total calls to random: 4022
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.normal() : var0 
var2 =  method : A.normal() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.normal() : var0 
var5 =  method : A.randomNumber() : var0 
var6 =  method : A.normal() : var0 
var7 =  method : A.normal() : var0 
var8 =  method : A.normal() : var0 
var9 =  method : A.randomNumber() : var0 
var10 =  method : A.randomNumber() : var0 
var11 =  method : A.randomNumber() : var0 
var12 =  method : A.randomNumber() : var0 
var13 =  method : A.normal() : var0 
var14 =  method : A.normal() : var0 
var15 =  method : A.normal() : var0 
var16 =  method : A.randomNumber() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Making index 12 inactive (value is a primitive)
Making index 13 inactive (value is a primitive)
Making index 14 inactive (value is a primitive)
Making index 15 inactive (value is a primitive)
Making index 16 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var10 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var11 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var12 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var13 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var14 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var15 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var16 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=10 [var1]  : true
<randoop.PrimValue, value=10 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=10 [var4]  : true
<randoop.PrimValue, value=0 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true
<randoop.PrimValue, value=10 [var7]  : true
<randoop.PrimValue, value=10 [var8]  : true
<randoop.PrimValue, value=0 [var9]  : true
<randoop.PrimValue, value=0 [var10]  : true
<randoop.PrimValue, value=0 [var11]  : true
<randoop.PrimValue, value=0 [var12]  : true
<randoop.PrimValue, value=10 [var13]  : true
<randoop.PrimValue, value=10 [var14]  : true
<randoop.PrimValue, value=10 [var15]  : true
<randoop.PrimValue, value=0 [var16]  : true

allSequences.size()=658
-------------------------------------------
randoop.util.Randomness: total calls to random: 4023
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 657 sequences.
components: 657
randoop.util.Randomness: total calls to random: 4024
randoop.util.Randomness: total calls to random: 4025
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 4026
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 657 sequences.
components: 657
randoop.util.Randomness: total calls to random: 4027
randoop.util.Randomness: total calls to random: 4028
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.randomNumber() : var0 
var2 =  method : A.randomNumber() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.normal() : var0 
var6 =  method : A.randomNumber() : var0 
var7 =  method : A.normal() : var0 
var8 =  method : A.randomNumber() : var0 
var9 =  method : A.normal() : var0 
var10 =  method : A.randomNumber() : var0 
var11 =  method : A.normal() : var0 
var12 =  method : A.normal() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Making index 12 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var10 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var11 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var12 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=0 [var1]  : true
<randoop.PrimValue, value=0 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=10 [var5]  : true
<randoop.PrimValue, value=0 [var6]  : true
<randoop.PrimValue, value=10 [var7]  : true
<randoop.PrimValue, value=0 [var8]  : true
<randoop.PrimValue, value=10 [var9]  : true
<randoop.PrimValue, value=0 [var10]  : true
<randoop.PrimValue, value=10 [var11]  : true
<randoop.PrimValue, value=10 [var12]  : true

allSequences.size()=659
-------------------------------------------
randoop.util.Randomness: total calls to random: 4029
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 658 sequences.
components: 658
randoop.util.Randomness: total calls to random: 4030
randoop.util.Randomness: total calls to random: 4031
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 4032
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 658 sequences.
components: 658
randoop.util.Randomness: total calls to random: 4033
randoop.util.Randomness: total calls to random: 4034
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.normal() : var0 
var2 =  method : A.normal() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.normal() : var0 
var5 =  method : A.randomNumber() : var0 
var6 =  method : A.normal() : var0 
var7 =  method : A.normal() : var0 
var8 =  method : A.normal() : var0 
var9 =  method : A.randomNumber() : var0 
var10 =  method : A.randomNumber() : var0 
var11 =  method : A.randomNumber() : var0 
var12 =  method : A.randomNumber() : var0 
var13 =  method : A.normal() : var0 
var14 =  method : A.normal() : var0 
var15 =  method : A.randomNumber() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Making index 12 inactive (value is a primitive)
Making index 13 inactive (value is a primitive)
Making index 14 inactive (value is a primitive)
Making index 15 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var10 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var11 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var12 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var13 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var14 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var15 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=10 [var1]  : true
<randoop.PrimValue, value=10 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=10 [var4]  : true
<randoop.PrimValue, value=0 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true
<randoop.PrimValue, value=10 [var7]  : true
<randoop.PrimValue, value=10 [var8]  : true
<randoop.PrimValue, value=0 [var9]  : true
<randoop.PrimValue, value=0 [var10]  : true
<randoop.PrimValue, value=0 [var11]  : true
<randoop.PrimValue, value=0 [var12]  : true
<randoop.PrimValue, value=10 [var13]  : true
<randoop.PrimValue, value=10 [var14]  : true
<randoop.PrimValue, value=0 [var15]  : true

allSequences.size()=660
-------------------------------------------
randoop.util.Randomness: total calls to random: 4035
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 659 sequences.
components: 659
randoop.util.Randomness: total calls to random: 4036
randoop.util.Randomness: total calls to random: 4037
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 4038
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 659 sequences.
components: 659
randoop.util.Randomness: total calls to random: 4039
randoop.util.Randomness: total calls to random: 4040
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.randomNumber() : var0 
var2 =  method : A.randomNumber() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.normal() : var0 
var6 =  method : A.normal() : var0 
var7 =  method : A.randomNumber() : var0 
var8 =  method : A.normal() : var0 
var9 =  method : A.normal() : var0 
var10 =  method : A.normal() : var0 
var11 =  method : A.randomNumber() : var0 
var12 =  method : A.normal() : var0 
var13 =  method : A.randomNumber() : var0 
var14 =  method : A.randomNumber() : var0 
var15 =  method : A.randomNumber() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Making index 12 inactive (value is a primitive)
Making index 13 inactive (value is a primitive)
Making index 14 inactive (value is a primitive)
Making index 15 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var10 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var11 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var12 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var13 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var14 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var15 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=0 [var1]  : true
<randoop.PrimValue, value=0 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=10 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true
<randoop.PrimValue, value=0 [var7]  : true
<randoop.PrimValue, value=10 [var8]  : true
<randoop.PrimValue, value=10 [var9]  : true
<randoop.PrimValue, value=10 [var10]  : true
<randoop.PrimValue, value=0 [var11]  : true
<randoop.PrimValue, value=10 [var12]  : true
<randoop.PrimValue, value=0 [var13]  : true
<randoop.PrimValue, value=0 [var14]  : true
<randoop.PrimValue, value=0 [var15]  : true

allSequences.size()=661
-------------------------------------------
randoop.util.Randomness: total calls to random: 4041
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 660 sequences.
components: 660
randoop.util.Randomness: total calls to random: 4042
randoop.util.Randomness: total calls to random: 4043
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.normal() : var0 
var2 =  method : A.randomNumber() : var0 
var3 =  method : A.randomNumber() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.normal() : var0 
var6 =  method : A.normal() : var0 
var7 =  method : A.normal() : var0 
var8 =  method : A.randomNumber() : var0 
var9 =  method : A.normal() : var0 
var10 =  method : A.randomNumber() : var0 
var11 =  method : A.randomNumber() : var0 
var12 =  method : A.randomNumber() : var0 
var13 =  method : A.normal() : var0 
var14 =  method : A.normal() : var0 
var15 =  method : A.randomNumber() : var0 
var16 =  method : A.normal() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Making index 12 inactive (value is a primitive)
Making index 13 inactive (value is a primitive)
Making index 14 inactive (value is a primitive)
Making index 15 inactive (value is a primitive)
Making index 16 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var10 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var11 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var12 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var13 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var14 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var15 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var16 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=10 [var1]  : true
<randoop.PrimValue, value=0 [var2]  : true
<randoop.PrimValue, value=0 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=10 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true
<randoop.PrimValue, value=10 [var7]  : true
<randoop.PrimValue, value=0 [var8]  : true
<randoop.PrimValue, value=10 [var9]  : true
<randoop.PrimValue, value=0 [var10]  : true
<randoop.PrimValue, value=0 [var11]  : true
<randoop.PrimValue, value=0 [var12]  : true
<randoop.PrimValue, value=10 [var13]  : true
<randoop.PrimValue, value=10 [var14]  : true
<randoop.PrimValue, value=0 [var15]  : true
<randoop.PrimValue, value=10 [var16]  : true

allSequences.size()=662
-------------------------------------------
randoop.util.Randomness: total calls to random: 4044
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 661 sequences.
components: 661
randoop.util.Randomness: total calls to random: 4045
randoop.util.Randomness: total calls to random: 4046
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.normal() : var0 
var2 =  method : A.normal() : var0 
var3 =  method : A.randomNumber() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.randomNumber() : var0 
var6 =  method : A.normal() : var0 
var7 =  method : A.randomNumber() : var0 
var8 =  method : A.normal() : var0 
var9 =  method : A.randomNumber() : var0 
var10 =  method : A.randomNumber() : var0 
var11 =  method : A.randomNumber() : var0 
var12 =  method : A.normal() : var0 
var13 =  method : A.normal() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Making index 12 inactive (value is a primitive)
Making index 13 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var10 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var11 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var12 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var13 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=10 [var1]  : true
<randoop.PrimValue, value=10 [var2]  : true
<randoop.PrimValue, value=0 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=0 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true
<randoop.PrimValue, value=0 [var7]  : true
<randoop.PrimValue, value=10 [var8]  : true
<randoop.PrimValue, value=0 [var9]  : true
<randoop.PrimValue, value=0 [var10]  : true
<randoop.PrimValue, value=0 [var11]  : true
<randoop.PrimValue, value=10 [var12]  : true
<randoop.PrimValue, value=10 [var13]  : true

allSequences.size()=663
-------------------------------------------
randoop.util.Randomness: total calls to random: 4047
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 662 sequences.
components: 662
randoop.util.Randomness: total calls to random: 4048
randoop.util.Randomness: total calls to random: 4049
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 4050
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 662 sequences.
components: 662
randoop.util.Randomness: total calls to random: 4051
randoop.util.Randomness: total calls to random: 4052
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 4053
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 662 sequences.
components: 662
randoop.util.Randomness: total calls to random: 4054
randoop.util.Randomness: total calls to random: 4055
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.normal() : var0 
var2 =  method : A.normal() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.randomNumber() : var0 
var6 =  method : A.randomNumber() : var0 
var7 =  method : A.normal() : var0 
var8 =  method : A.randomNumber() : var0 
var9 =  method : A.normal() : var0 
var10 =  method : A.normal() : var0 
var11 =  method : A.normal() : var0 
var12 =  method : A.randomNumber() : var0 
var13 =  method : A.normal() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Making index 12 inactive (value is a primitive)
Making index 13 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var10 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var11 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var12 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var13 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=10 [var1]  : true
<randoop.PrimValue, value=10 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=0 [var5]  : true
<randoop.PrimValue, value=0 [var6]  : true
<randoop.PrimValue, value=10 [var7]  : true
<randoop.PrimValue, value=0 [var8]  : true
<randoop.PrimValue, value=10 [var9]  : true
<randoop.PrimValue, value=10 [var10]  : true
<randoop.PrimValue, value=10 [var11]  : true
<randoop.PrimValue, value=0 [var12]  : true
<randoop.PrimValue, value=10 [var13]  : true

allSequences.size()=664
-------------------------------------------
randoop.util.Randomness: total calls to random: 4056
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 663 sequences.
components: 663
randoop.util.Randomness: total calls to random: 4057
randoop.util.Randomness: total calls to random: 4058
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.randomNumber() : var0 
var2 =  method : A.randomNumber() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.normal() : var0 
var5 =  method : A.normal() : var0 
var6 =  method : A.randomNumber() : var0 
var7 =  method : A.randomNumber() : var0 
var8 =  method : A.normal() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=0 [var1]  : true
<randoop.PrimValue, value=0 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=10 [var4]  : true
<randoop.PrimValue, value=10 [var5]  : true
<randoop.PrimValue, value=0 [var6]  : true
<randoop.PrimValue, value=0 [var7]  : true
<randoop.PrimValue, value=10 [var8]  : true

allSequences.size()=665
-------------------------------------------
randoop.util.Randomness: total calls to random: 4059
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 664 sequences.
components: 664
randoop.util.Randomness: total calls to random: 4060
randoop.util.Randomness: total calls to random: 4061
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 4062
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 664 sequences.
components: 664
randoop.util.Randomness: total calls to random: 4063
randoop.util.Randomness: total calls to random: 4064
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.randomNumber() : var0 
var2 =  method : A.randomNumber() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.normal() : var0 
var6 =  method : A.normal() : var0 
var7 =  method : A.normal() : var0 
var8 =  method : A.normal() : var0 
var9 =  method : A.normal() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=0 [var1]  : true
<randoop.PrimValue, value=0 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=10 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true
<randoop.PrimValue, value=10 [var7]  : true
<randoop.PrimValue, value=10 [var8]  : true
<randoop.PrimValue, value=10 [var9]  : true

allSequences.size()=666
-------------------------------------------
randoop.util.Randomness: total calls to random: 4065
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 665 sequences.
components: 665
randoop.util.Randomness: total calls to random: 4066
randoop.util.Randomness: total calls to random: 4067
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.normal() : var0 
var2 =  method : A.normal() : var0 
var3 =  method : A.randomNumber() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.randomNumber() : var0 
var6 =  method : A.normal() : var0 
var7 =  method : A.randomNumber() : var0 
var8 =  method : A.normal() : var0 
var9 =  method : A.normal() : var0 
var10 =  method : A.normal() : var0 
var11 =  method : A.randomNumber() : var0 
var12 =  method : A.randomNumber() : var0 
var13 =  method : A.normal() : var0 
var14 =  method : A.normal() : var0 
var15 =  method : A.randomNumber() : var0 
var16 =  method : A.normal() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Making index 12 inactive (value is a primitive)
Making index 13 inactive (value is a primitive)
Making index 14 inactive (value is a primitive)
Making index 15 inactive (value is a primitive)
Making index 16 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var10 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var11 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var12 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var13 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var14 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var15 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var16 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=10 [var1]  : true
<randoop.PrimValue, value=10 [var2]  : true
<randoop.PrimValue, value=0 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=0 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true
<randoop.PrimValue, value=0 [var7]  : true
<randoop.PrimValue, value=10 [var8]  : true
<randoop.PrimValue, value=10 [var9]  : true
<randoop.PrimValue, value=10 [var10]  : true
<randoop.PrimValue, value=0 [var11]  : true
<randoop.PrimValue, value=0 [var12]  : true
<randoop.PrimValue, value=10 [var13]  : true
<randoop.PrimValue, value=10 [var14]  : true
<randoop.PrimValue, value=0 [var15]  : true
<randoop.PrimValue, value=10 [var16]  : true

allSequences.size()=667
-------------------------------------------
randoop.util.Randomness: total calls to random: 4068
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 666 sequences.
components: 666
randoop.util.Randomness: total calls to random: 4069
randoop.util.Randomness: total calls to random: 4070
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.randomNumber() : var0 
var2 =  method : A.randomNumber() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.normal() : var0 
var6 =  method : A.randomNumber() : var0 
var7 =  method : A.randomNumber() : var0 
var8 =  method : A.normal() : var0 
var9 =  method : A.normal() : var0 
var10 =  method : A.normal() : var0 
var11 =  method : A.normal() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var10 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var11 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=0 [var1]  : true
<randoop.PrimValue, value=0 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=10 [var5]  : true
<randoop.PrimValue, value=0 [var6]  : true
<randoop.PrimValue, value=0 [var7]  : true
<randoop.PrimValue, value=10 [var8]  : true
<randoop.PrimValue, value=10 [var9]  : true
<randoop.PrimValue, value=10 [var10]  : true
<randoop.PrimValue, value=10 [var11]  : true

allSequences.size()=668
-------------------------------------------
randoop.util.Randomness: total calls to random: 4071
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 667 sequences.
components: 667
randoop.util.Randomness: total calls to random: 4072
randoop.util.Randomness: total calls to random: 4073
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 4074
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 667 sequences.
components: 667
randoop.util.Randomness: total calls to random: 4075
randoop.util.Randomness: total calls to random: 4076
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.randomNumber() : var0 
var2 =  method : A.randomNumber() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.normal() : var0 
var5 =  method : A.normal() : var0 
var6 =  method : A.randomNumber() : var0 
var7 =  method : A.normal() : var0 
var8 =  method : A.normal() : var0 
var9 =  method : A.normal() : var0 
var10 =  method : A.normal() : var0 
var11 =  method : A.normal() : var0 
var12 =  method : A.normal() : var0 
var13 =  method : A.randomNumber() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Making index 12 inactive (value is a primitive)
Making index 13 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var10 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var11 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var12 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var13 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=0 [var1]  : true
<randoop.PrimValue, value=0 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=10 [var4]  : true
<randoop.PrimValue, value=10 [var5]  : true
<randoop.PrimValue, value=0 [var6]  : true
<randoop.PrimValue, value=10 [var7]  : true
<randoop.PrimValue, value=10 [var8]  : true
<randoop.PrimValue, value=10 [var9]  : true
<randoop.PrimValue, value=10 [var10]  : true
<randoop.PrimValue, value=10 [var11]  : true
<randoop.PrimValue, value=10 [var12]  : true
<randoop.PrimValue, value=0 [var13]  : true

allSequences.size()=669
-------------------------------------------
randoop.util.Randomness: total calls to random: 4077
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 668 sequences.
components: 668
randoop.util.Randomness: total calls to random: 4078
randoop.util.Randomness: total calls to random: 4079
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.randomNumber() : var0 
var2 =  method : A.normal() : var0 
var3 =  method : A.randomNumber() : var0 
var4 =  method : A.normal() : var0 
var5 =  method : A.normal() : var0 
var6 =  method : A.randomNumber() : var0 
var7 =  method : A.normal() : var0 
var8 =  method : A.normal() : var0 
var9 =  method : A.randomNumber() : var0 
var10 =  method : A.randomNumber() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var10 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=0 [var1]  : true
<randoop.PrimValue, value=10 [var2]  : true
<randoop.PrimValue, value=0 [var3]  : true
<randoop.PrimValue, value=10 [var4]  : true
<randoop.PrimValue, value=10 [var5]  : true
<randoop.PrimValue, value=0 [var6]  : true
<randoop.PrimValue, value=10 [var7]  : true
<randoop.PrimValue, value=10 [var8]  : true
<randoop.PrimValue, value=0 [var9]  : true
<randoop.PrimValue, value=0 [var10]  : true

allSequences.size()=670
-------------------------------------------
randoop.util.Randomness: total calls to random: 4080
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 669 sequences.
components: 669
randoop.util.Randomness: total calls to random: 4081
randoop.util.Randomness: total calls to random: 4082
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 4083
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 669 sequences.
components: 669
randoop.util.Randomness: total calls to random: 4084
randoop.util.Randomness: total calls to random: 4085
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 4086
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 669 sequences.
components: 669
randoop.util.Randomness: total calls to random: 4087
randoop.util.Randomness: total calls to random: 4088
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 4089
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 669 sequences.
components: 669
randoop.util.Randomness: total calls to random: 4090
randoop.util.Randomness: total calls to random: 4091
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.normal() : var0 
var2 =  method : A.normal() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.normal() : var0 
var5 =  method : A.normal() : var0 
var6 =  method : A.randomNumber() : var0 
var7 =  method : A.normal() : var0 
var8 =  method : A.normal() : var0 
var9 =  method : A.randomNumber() : var0 
var10 =  method : A.randomNumber() : var0 
var11 =  method : A.randomNumber() : var0 
var12 =  method : A.normal() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Making index 12 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var10 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var11 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var12 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=10 [var1]  : true
<randoop.PrimValue, value=10 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=10 [var4]  : true
<randoop.PrimValue, value=10 [var5]  : true
<randoop.PrimValue, value=0 [var6]  : true
<randoop.PrimValue, value=10 [var7]  : true
<randoop.PrimValue, value=10 [var8]  : true
<randoop.PrimValue, value=0 [var9]  : true
<randoop.PrimValue, value=0 [var10]  : true
<randoop.PrimValue, value=0 [var11]  : true
<randoop.PrimValue, value=10 [var12]  : true

allSequences.size()=671
-------------------------------------------
randoop.util.Randomness: total calls to random: 4092
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 670 sequences.
components: 670
randoop.util.Randomness: total calls to random: 4093
randoop.util.Randomness: total calls to random: 4094
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 4095
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 670 sequences.
components: 670
randoop.util.Randomness: total calls to random: 4096
randoop.util.Randomness: total calls to random: 4097
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.normal() : var0 
var2 =  method : A.normal() : var0 
var3 =  method : A.randomNumber() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.randomNumber() : var0 
var6 =  method : A.normal() : var0 
var7 =  method : A.randomNumber() : var0 
var8 =  method : A.randomNumber() : var0 
var9 =  method : A.normal() : var0 
var10 =  method : A.randomNumber() : var0 
var11 =  method : A.normal() : var0 
var12 =  method : A.randomNumber() : var0 
var13 =  method : A.randomNumber() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Making index 12 inactive (value is a primitive)
Making index 13 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var10 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var11 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var12 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var13 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=10 [var1]  : true
<randoop.PrimValue, value=10 [var2]  : true
<randoop.PrimValue, value=0 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=0 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true
<randoop.PrimValue, value=0 [var7]  : true
<randoop.PrimValue, value=0 [var8]  : true
<randoop.PrimValue, value=10 [var9]  : true
<randoop.PrimValue, value=0 [var10]  : true
<randoop.PrimValue, value=10 [var11]  : true
<randoop.PrimValue, value=0 [var12]  : true
<randoop.PrimValue, value=0 [var13]  : true

allSequences.size()=672
-------------------------------------------
randoop.util.Randomness: total calls to random: 4098
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 671 sequences.
components: 671
randoop.util.Randomness: total calls to random: 4099
randoop.util.Randomness: total calls to random: 4100
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.normal() : var0 
var2 =  method : A.normal() : var0 
var3 =  method : A.randomNumber() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.randomNumber() : var0 
var6 =  method : A.normal() : var0 
var7 =  method : A.randomNumber() : var0 
var8 =  method : A.normal() : var0 
var9 =  method : A.normal() : var0 
var10 =  method : A.randomNumber() : var0 
var11 =  method : A.normal() : var0 
var12 =  method : A.randomNumber() : var0 
var13 =  method : A.randomNumber() : var0 
var14 =  method : A.randomNumber() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Making index 12 inactive (value is a primitive)
Making index 13 inactive (value is a primitive)
Making index 14 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var10 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var11 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var12 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var13 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var14 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=10 [var1]  : true
<randoop.PrimValue, value=10 [var2]  : true
<randoop.PrimValue, value=0 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=0 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true
<randoop.PrimValue, value=0 [var7]  : true
<randoop.PrimValue, value=10 [var8]  : true
<randoop.PrimValue, value=10 [var9]  : true
<randoop.PrimValue, value=0 [var10]  : true
<randoop.PrimValue, value=10 [var11]  : true
<randoop.PrimValue, value=0 [var12]  : true
<randoop.PrimValue, value=0 [var13]  : true
<randoop.PrimValue, value=0 [var14]  : true

allSequences.size()=673
-------------------------------------------
randoop.util.Randomness: total calls to random: 4101
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 672 sequences.
components: 672
randoop.util.Randomness: total calls to random: 4102
randoop.util.Randomness: total calls to random: 4103
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 4104
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 672 sequences.
components: 672
randoop.util.Randomness: total calls to random: 4105
randoop.util.Randomness: total calls to random: 4106
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.normal() : var0 
var2 =  method : A.normal() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.normal() : var0 
var5 =  method : A.randomNumber() : var0 
var6 =  method : A.normal() : var0 
var7 =  method : A.normal() : var0 
var8 =  method : A.normal() : var0 
var9 =  method : A.randomNumber() : var0 
var10 =  method : A.randomNumber() : var0 
var11 =  method : A.normal() : var0 
var12 =  method : A.randomNumber() : var0 
var13 =  method : A.normal() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Making index 12 inactive (value is a primitive)
Making index 13 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var10 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var11 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var12 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var13 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=10 [var1]  : true
<randoop.PrimValue, value=10 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=10 [var4]  : true
<randoop.PrimValue, value=0 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true
<randoop.PrimValue, value=10 [var7]  : true
<randoop.PrimValue, value=10 [var8]  : true
<randoop.PrimValue, value=0 [var9]  : true
<randoop.PrimValue, value=0 [var10]  : true
<randoop.PrimValue, value=10 [var11]  : true
<randoop.PrimValue, value=0 [var12]  : true
<randoop.PrimValue, value=10 [var13]  : true

allSequences.size()=674
-------------------------------------------
randoop.util.Randomness: total calls to random: 4107
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 673 sequences.
components: 673
randoop.util.Randomness: total calls to random: 4108
randoop.util.Randomness: total calls to random: 4109
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 4110
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 673 sequences.
components: 673
randoop.util.Randomness: total calls to random: 4111
randoop.util.Randomness: total calls to random: 4112
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.randomNumber() : var0 
var2 =  method : A.randomNumber() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.normal() : var0 
var5 =  method : A.normal() : var0 
var6 =  method : A.randomNumber() : var0 
var7 =  method : A.randomNumber() : var0 
var8 =  method : A.randomNumber() : var0 
var9 =  method : A.randomNumber() : var0 
var10 =  method : A.normal() : var0 
var11 =  method : A.randomNumber() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var10 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var11 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=0 [var1]  : true
<randoop.PrimValue, value=0 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=10 [var4]  : true
<randoop.PrimValue, value=10 [var5]  : true
<randoop.PrimValue, value=0 [var6]  : true
<randoop.PrimValue, value=0 [var7]  : true
<randoop.PrimValue, value=0 [var8]  : true
<randoop.PrimValue, value=0 [var9]  : true
<randoop.PrimValue, value=10 [var10]  : true
<randoop.PrimValue, value=0 [var11]  : true

allSequences.size()=675
-------------------------------------------
randoop.util.Randomness: total calls to random: 4113
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 674 sequences.
components: 674
randoop.util.Randomness: total calls to random: 4114
randoop.util.Randomness: total calls to random: 4115
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.randomNumber() : var0 
var2 =  method : A.randomNumber() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.normal() : var0 
var6 =  method : A.normal() : var0 
var7 =  method : A.randomNumber() : var0 
var8 =  method : A.normal() : var0 
var9 =  method : A.randomNumber() : var0 
var10 =  method : A.randomNumber() : var0 
var11 =  method : A.normal() : var0 
var12 =  method : A.normal() : var0 
var13 =  method : A.randomNumber() : var0 
var14 =  method : A.randomNumber() : var0 
var15 =  method : A.normal() : var0 
var16 =  method : A.randomNumber() : var0 
var17 =  method : A.normal() : var0 
var18 =  method : A.randomNumber() : var0 
var19 =  method : A.normal() : var0 
var20 =  method : A.normal() : var0 
var21 =  method : A.normal() : var0 
var22 =  method : A.randomNumber() : var0 
var23 =  method : A.normal() : var0 
var24 =  method : A.randomNumber() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Making index 12 inactive (value is a primitive)
Making index 13 inactive (value is a primitive)
Making index 14 inactive (value is a primitive)
Making index 15 inactive (value is a primitive)
Making index 16 inactive (value is a primitive)
Making index 17 inactive (value is a primitive)
Making index 18 inactive (value is a primitive)
Making index 19 inactive (value is a primitive)
Making index 20 inactive (value is a primitive)
Making index 21 inactive (value is a primitive)
Making index 22 inactive (value is a primitive)
Making index 23 inactive (value is a primitive)
Making index 24 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var10 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var11 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var12 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var13 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var14 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var15 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var16 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var17 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var18 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var19 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var20 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var21 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var22 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var23 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var24 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=0 [var1]  : true
<randoop.PrimValue, value=0 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=10 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true
<randoop.PrimValue, value=0 [var7]  : true
<randoop.PrimValue, value=10 [var8]  : true
<randoop.PrimValue, value=0 [var9]  : true
<randoop.PrimValue, value=0 [var10]  : true
<randoop.PrimValue, value=10 [var11]  : true
<randoop.PrimValue, value=10 [var12]  : true
<randoop.PrimValue, value=0 [var13]  : true
<randoop.PrimValue, value=0 [var14]  : true
<randoop.PrimValue, value=10 [var15]  : true
<randoop.PrimValue, value=0 [var16]  : true
<randoop.PrimValue, value=10 [var17]  : true
<randoop.PrimValue, value=0 [var18]  : true
<randoop.PrimValue, value=10 [var19]  : true
<randoop.PrimValue, value=10 [var20]  : true
<randoop.PrimValue, value=10 [var21]  : true
<randoop.PrimValue, value=0 [var22]  : true
<randoop.PrimValue, value=10 [var23]  : true
<randoop.PrimValue, value=0 [var24]  : true

allSequences.size()=676
-------------------------------------------
randoop.util.Randomness: total calls to random: 4116
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 675 sequences.
components: 675
randoop.util.Randomness: total calls to random: 4117
randoop.util.Randomness: total calls to random: 4118
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 4119
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 675 sequences.
components: 675
randoop.util.Randomness: total calls to random: 4120
randoop.util.Randomness: total calls to random: 4121
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 4122
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 675 sequences.
components: 675
randoop.util.Randomness: total calls to random: 4123
randoop.util.Randomness: total calls to random: 4124
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.normal() : var0 
var2 =  method : A.randomNumber() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.normal() : var0 
var6 =  method : A.randomNumber() : var0 
var7 =  method : A.randomNumber() : var0 
var8 =  method : A.normal() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=10 [var1]  : true
<randoop.PrimValue, value=0 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=10 [var5]  : true
<randoop.PrimValue, value=0 [var6]  : true
<randoop.PrimValue, value=0 [var7]  : true
<randoop.PrimValue, value=10 [var8]  : true

allSequences.size()=677
-------------------------------------------
randoop.util.Randomness: total calls to random: 4125
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 676 sequences.
components: 676
randoop.util.Randomness: total calls to random: 4126
randoop.util.Randomness: total calls to random: 4127
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 4128
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 676 sequences.
components: 676
randoop.util.Randomness: total calls to random: 4129
randoop.util.Randomness: total calls to random: 4130
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 4131
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 676 sequences.
components: 676
randoop.util.Randomness: total calls to random: 4132
randoop.util.Randomness: total calls to random: 4133
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 4134
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 676 sequences.
components: 676
randoop.util.Randomness: total calls to random: 4135
randoop.util.Randomness: total calls to random: 4136
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.normal() : var0 
var2 =  method : A.normal() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.randomNumber() : var0 
var6 =  method : A.normal() : var0 
var7 =  method : A.randomNumber() : var0 
var8 =  method : A.randomNumber() : var0 
var9 =  method : A.normal() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=10 [var1]  : true
<randoop.PrimValue, value=10 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=0 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true
<randoop.PrimValue, value=0 [var7]  : true
<randoop.PrimValue, value=0 [var8]  : true
<randoop.PrimValue, value=10 [var9]  : true

allSequences.size()=678
-------------------------------------------
randoop.util.Randomness: total calls to random: 4137
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 677 sequences.
components: 677
randoop.util.Randomness: total calls to random: 4138
randoop.util.Randomness: total calls to random: 4139
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 4140
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 677 sequences.
components: 677
randoop.util.Randomness: total calls to random: 4141
randoop.util.Randomness: total calls to random: 4142
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.randomNumber() : var0 
var2 =  method : A.normal() : var0 
var3 =  method : A.randomNumber() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.randomNumber() : var0 
var6 =  method : A.normal() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=0 [var1]  : true
<randoop.PrimValue, value=10 [var2]  : true
<randoop.PrimValue, value=0 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=0 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true

allSequences.size()=679
-------------------------------------------
randoop.util.Randomness: total calls to random: 4143
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 678 sequences.
components: 678
randoop.util.Randomness: total calls to random: 4144
randoop.util.Randomness: total calls to random: 4145
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 4146
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 678 sequences.
components: 678
randoop.util.Randomness: total calls to random: 4147
randoop.util.Randomness: total calls to random: 4148
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 4149
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 678 sequences.
components: 678
randoop.util.Randomness: total calls to random: 4150
randoop.util.Randomness: total calls to random: 4151
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 4152
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 678 sequences.
components: 678
randoop.util.Randomness: total calls to random: 4153
randoop.util.Randomness: total calls to random: 4154
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 4155
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 678 sequences.
components: 678
randoop.util.Randomness: total calls to random: 4156
randoop.util.Randomness: total calls to random: 4157
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 4158
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 678 sequences.
components: 678
randoop.util.Randomness: total calls to random: 4159
randoop.util.Randomness: total calls to random: 4160
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 4161
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 678 sequences.
components: 678
randoop.util.Randomness: total calls to random: 4162
randoop.util.Randomness: total calls to random: 4163
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.randomNumber() : var0 
var2 =  method : A.randomNumber() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.normal() : var0 
var6 =  method : A.normal() : var0 
var7 =  method : A.randomNumber() : var0 
var8 =  method : A.normal() : var0 
var9 =  method : A.normal() : var0 
var10 =  method : A.normal() : var0 
var11 =  method : A.normal() : var0 
var12 =  method : A.randomNumber() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Making index 12 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var10 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var11 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var12 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=0 [var1]  : true
<randoop.PrimValue, value=0 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=10 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true
<randoop.PrimValue, value=0 [var7]  : true
<randoop.PrimValue, value=10 [var8]  : true
<randoop.PrimValue, value=10 [var9]  : true
<randoop.PrimValue, value=10 [var10]  : true
<randoop.PrimValue, value=10 [var11]  : true
<randoop.PrimValue, value=0 [var12]  : true

allSequences.size()=680
-------------------------------------------
randoop.util.Randomness: total calls to random: 4164
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 679 sequences.
components: 679
randoop.util.Randomness: total calls to random: 4165
randoop.util.Randomness: total calls to random: 4166
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 4167
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 679 sequences.
components: 679
randoop.util.Randomness: total calls to random: 4168
randoop.util.Randomness: total calls to random: 4169
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 4170
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 679 sequences.
components: 679
randoop.util.Randomness: total calls to random: 4171
randoop.util.Randomness: total calls to random: 4172
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 4173
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 679 sequences.
components: 679
randoop.util.Randomness: total calls to random: 4174
randoop.util.Randomness: total calls to random: 4175
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 4176
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 679 sequences.
components: 679
randoop.util.Randomness: total calls to random: 4177
randoop.util.Randomness: total calls to random: 4178
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 4179
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 679 sequences.
components: 679
randoop.util.Randomness: total calls to random: 4180
randoop.util.Randomness: total calls to random: 4181
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.normal() : var0 
var2 =  method : A.normal() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.normal() : var0 
var5 =  method : A.randomNumber() : var0 
var6 =  method : A.normal() : var0 
var7 =  method : A.randomNumber() : var0 
var8 =  method : A.normal() : var0 
var9 =  method : A.normal() : var0 
var10 =  method : A.randomNumber() : var0 
var11 =  method : A.normal() : var0 
var12 =  method : A.randomNumber() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Making index 12 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var10 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var11 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var12 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=10 [var1]  : true
<randoop.PrimValue, value=10 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=10 [var4]  : true
<randoop.PrimValue, value=0 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true
<randoop.PrimValue, value=0 [var7]  : true
<randoop.PrimValue, value=10 [var8]  : true
<randoop.PrimValue, value=10 [var9]  : true
<randoop.PrimValue, value=0 [var10]  : true
<randoop.PrimValue, value=10 [var11]  : true
<randoop.PrimValue, value=0 [var12]  : true

allSequences.size()=681
-------------------------------------------
randoop.util.Randomness: total calls to random: 4182
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 680 sequences.
components: 680
randoop.util.Randomness: total calls to random: 4183
randoop.util.Randomness: total calls to random: 4184
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 4185
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 680 sequences.
components: 680
randoop.util.Randomness: total calls to random: 4186
randoop.util.Randomness: total calls to random: 4187
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.randomNumber() : var0 
var2 =  method : A.randomNumber() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.normal() : var0 
var5 =  method : A.randomNumber() : var0 
var6 =  method : A.randomNumber() : var0 
var7 =  method : A.normal() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=0 [var1]  : true
<randoop.PrimValue, value=0 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=10 [var4]  : true
<randoop.PrimValue, value=0 [var5]  : true
<randoop.PrimValue, value=0 [var6]  : true
<randoop.PrimValue, value=10 [var7]  : true

allSequences.size()=682
-------------------------------------------
randoop.util.Randomness: total calls to random: 4188
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 681 sequences.
components: 681
randoop.util.Randomness: total calls to random: 4189
randoop.util.Randomness: total calls to random: 4190
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.randomNumber() : var0 
var2 =  method : A.randomNumber() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.normal() : var0 
var6 =  method : A.normal() : var0 
var7 =  method : A.randomNumber() : var0 
var8 =  method : A.normal() : var0 
var9 =  method : A.randomNumber() : var0 
var10 =  method : A.normal() : var0 
var11 =  method : A.normal() : var0 
var12 =  method : A.randomNumber() : var0 
var13 =  method : A.randomNumber() : var0 
var14 =  method : A.normal() : var0 
var15 =  method : A.randomNumber() : var0 
var16 =  method : A.randomNumber() : var0 
var17 =  method : A.normal() : var0 
var18 =  method : A.randomNumber() : var0 
var19 =  method : A.randomNumber() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Making index 12 inactive (value is a primitive)
Making index 13 inactive (value is a primitive)
Making index 14 inactive (value is a primitive)
Making index 15 inactive (value is a primitive)
Making index 16 inactive (value is a primitive)
Making index 17 inactive (value is a primitive)
Making index 18 inactive (value is a primitive)
Making index 19 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var10 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var11 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var12 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var13 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var14 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var15 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var16 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var17 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var18 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var19 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=0 [var1]  : true
<randoop.PrimValue, value=0 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=10 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true
<randoop.PrimValue, value=0 [var7]  : true
<randoop.PrimValue, value=10 [var8]  : true
<randoop.PrimValue, value=0 [var9]  : true
<randoop.PrimValue, value=10 [var10]  : true
<randoop.PrimValue, value=10 [var11]  : true
<randoop.PrimValue, value=0 [var12]  : true
<randoop.PrimValue, value=0 [var13]  : true
<randoop.PrimValue, value=10 [var14]  : true
<randoop.PrimValue, value=0 [var15]  : true
<randoop.PrimValue, value=0 [var16]  : true
<randoop.PrimValue, value=10 [var17]  : true
<randoop.PrimValue, value=0 [var18]  : true
<randoop.PrimValue, value=0 [var19]  : true

allSequences.size()=683
-------------------------------------------
randoop.util.Randomness: total calls to random: 4191
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 682 sequences.
components: 682
randoop.util.Randomness: total calls to random: 4192
randoop.util.Randomness: total calls to random: 4193
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 4194
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 682 sequences.
components: 682
randoop.util.Randomness: total calls to random: 4195
randoop.util.Randomness: total calls to random: 4196
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 4197
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 682 sequences.
components: 682
randoop.util.Randomness: total calls to random: 4198
randoop.util.Randomness: total calls to random: 4199
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 4200
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 682 sequences.
components: 682
randoop.util.Randomness: total calls to random: 4201
randoop.util.Randomness: total calls to random: 4202
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 4203
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 682 sequences.
components: 682
randoop.util.Randomness: total calls to random: 4204
randoop.util.Randomness: total calls to random: 4205
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.randomNumber() : var0 
var2 =  method : A.randomNumber() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.normal() : var0 
var6 =  method : A.normal() : var0 
var7 =  method : A.randomNumber() : var0 
var8 =  method : A.normal() : var0 
var9 =  method : A.randomNumber() : var0 
var10 =  method : A.randomNumber() : var0 
var11 =  method : A.normal() : var0 
var12 =  method : A.normal() : var0 
var13 =  method : A.randomNumber() : var0 
var14 =  method : A.randomNumber() : var0 
var15 =  method : A.normal() : var0 
var16 =  method : A.randomNumber() : var0 
var17 =  method : A.normal() : var0 
var18 =  method : A.randomNumber() : var0 
var19 =  method : A.normal() : var0 
var20 =  method : A.normal() : var0 
var21 =  method : A.randomNumber() : var0 
var22 =  method : A.normal() : var0 
var23 =  method : A.normal() : var0 
var24 =  method : A.randomNumber() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Making index 12 inactive (value is a primitive)
Making index 13 inactive (value is a primitive)
Making index 14 inactive (value is a primitive)
Making index 15 inactive (value is a primitive)
Making index 16 inactive (value is a primitive)
Making index 17 inactive (value is a primitive)
Making index 18 inactive (value is a primitive)
Making index 19 inactive (value is a primitive)
Making index 20 inactive (value is a primitive)
Making index 21 inactive (value is a primitive)
Making index 22 inactive (value is a primitive)
Making index 23 inactive (value is a primitive)
Making index 24 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var10 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var11 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var12 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var13 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var14 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var15 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var16 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var17 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var18 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var19 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var20 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var21 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var22 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var23 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var24 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=0 [var1]  : true
<randoop.PrimValue, value=0 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=10 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true
<randoop.PrimValue, value=0 [var7]  : true
<randoop.PrimValue, value=10 [var8]  : true
<randoop.PrimValue, value=0 [var9]  : true
<randoop.PrimValue, value=0 [var10]  : true
<randoop.PrimValue, value=10 [var11]  : true
<randoop.PrimValue, value=10 [var12]  : true
<randoop.PrimValue, value=0 [var13]  : true
<randoop.PrimValue, value=0 [var14]  : true
<randoop.PrimValue, value=10 [var15]  : true
<randoop.PrimValue, value=0 [var16]  : true
<randoop.PrimValue, value=10 [var17]  : true
<randoop.PrimValue, value=0 [var18]  : true
<randoop.PrimValue, value=10 [var19]  : true
<randoop.PrimValue, value=10 [var20]  : true
<randoop.PrimValue, value=0 [var21]  : true
<randoop.PrimValue, value=10 [var22]  : true
<randoop.PrimValue, value=10 [var23]  : true
<randoop.PrimValue, value=0 [var24]  : true

allSequences.size()=684
-------------------------------------------
randoop.util.Randomness: total calls to random: 4206
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 683 sequences.
components: 683
randoop.util.Randomness: total calls to random: 4207
randoop.util.Randomness: total calls to random: 4208
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 4209
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 683 sequences.
components: 683
randoop.util.Randomness: total calls to random: 4210
randoop.util.Randomness: total calls to random: 4211
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 4212
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 683 sequences.
components: 683
randoop.util.Randomness: total calls to random: 4213
randoop.util.Randomness: total calls to random: 4214
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 4215
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 683 sequences.
components: 683
randoop.util.Randomness: total calls to random: 4216
randoop.util.Randomness: total calls to random: 4217
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 4218
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 683 sequences.
components: 683
randoop.util.Randomness: total calls to random: 4219
randoop.util.Randomness: total calls to random: 4220
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.normal() : var0 
var2 =  method : A.normal() : var0 
var3 =  method : A.randomNumber() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.randomNumber() : var0 
var6 =  method : A.randomNumber() : var0 
var7 =  method : A.randomNumber() : var0 
var8 =  method : A.normal() : var0 
var9 =  method : A.normal() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=10 [var1]  : true
<randoop.PrimValue, value=10 [var2]  : true
<randoop.PrimValue, value=0 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=0 [var5]  : true
<randoop.PrimValue, value=0 [var6]  : true
<randoop.PrimValue, value=0 [var7]  : true
<randoop.PrimValue, value=10 [var8]  : true
<randoop.PrimValue, value=10 [var9]  : true

allSequences.size()=685
-------------------------------------------
randoop.util.Randomness: total calls to random: 4221
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 684 sequences.
components: 684
randoop.util.Randomness: total calls to random: 4222
randoop.util.Randomness: total calls to random: 4223
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.normal() : var0 
var2 =  method : A.normal() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.normal() : var0 
var5 =  method : A.normal() : var0 
var6 =  method : A.randomNumber() : var0 
var7 =  method : A.normal() : var0 
var8 =  method : A.normal() : var0 
var9 =  method : A.randomNumber() : var0 
var10 =  method : A.normal() : var0 
var11 =  method : A.randomNumber() : var0 
var12 =  method : A.normal() : var0 
var13 =  method : A.normal() : var0 
var14 =  method : A.normal() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Making index 12 inactive (value is a primitive)
Making index 13 inactive (value is a primitive)
Making index 14 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var10 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var11 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var12 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var13 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var14 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=10 [var1]  : true
<randoop.PrimValue, value=10 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=10 [var4]  : true
<randoop.PrimValue, value=10 [var5]  : true
<randoop.PrimValue, value=0 [var6]  : true
<randoop.PrimValue, value=10 [var7]  : true
<randoop.PrimValue, value=10 [var8]  : true
<randoop.PrimValue, value=0 [var9]  : true
<randoop.PrimValue, value=10 [var10]  : true
<randoop.PrimValue, value=0 [var11]  : true
<randoop.PrimValue, value=10 [var12]  : true
<randoop.PrimValue, value=10 [var13]  : true
<randoop.PrimValue, value=10 [var14]  : true

allSequences.size()=686
-------------------------------------------
randoop.util.Randomness: total calls to random: 4224
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 685 sequences.
components: 685
randoop.util.Randomness: total calls to random: 4225
randoop.util.Randomness: total calls to random: 4226
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.normal() : var0 
var2 =  method : A.normal() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.normal() : var0 
var5 =  method : A.randomNumber() : var0 
var6 =  method : A.normal() : var0 
var7 =  method : A.randomNumber() : var0 
var8 =  method : A.normal() : var0 
var9 =  method : A.normal() : var0 
var10 =  method : A.randomNumber() : var0 
var11 =  method : A.randomNumber() : var0 
var12 =  method : A.randomNumber() : var0 
var13 =  method : A.normal() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Making index 12 inactive (value is a primitive)
Making index 13 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var10 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var11 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var12 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var13 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=10 [var1]  : true
<randoop.PrimValue, value=10 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=10 [var4]  : true
<randoop.PrimValue, value=0 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true
<randoop.PrimValue, value=0 [var7]  : true
<randoop.PrimValue, value=10 [var8]  : true
<randoop.PrimValue, value=10 [var9]  : true
<randoop.PrimValue, value=0 [var10]  : true
<randoop.PrimValue, value=0 [var11]  : true
<randoop.PrimValue, value=0 [var12]  : true
<randoop.PrimValue, value=10 [var13]  : true

allSequences.size()=687
-------------------------------------------
randoop.util.Randomness: total calls to random: 4227
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 686 sequences.
components: 686
randoop.util.Randomness: total calls to random: 4228
randoop.util.Randomness: total calls to random: 4229
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.normal() : var0 
var2 =  method : A.normal() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.randomNumber() : var0 
var6 =  method : A.randomNumber() : var0 
var7 =  method : A.normal() : var0 
var8 =  method : A.randomNumber() : var0 
var9 =  method : A.randomNumber() : var0 
var10 =  method : A.randomNumber() : var0 
var11 =  method : A.randomNumber() : var0 
var12 =  method : A.normal() : var0 
var13 =  method : A.randomNumber() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Making index 12 inactive (value is a primitive)
Making index 13 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var10 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var11 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var12 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var13 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=10 [var1]  : true
<randoop.PrimValue, value=10 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=0 [var5]  : true
<randoop.PrimValue, value=0 [var6]  : true
<randoop.PrimValue, value=10 [var7]  : true
<randoop.PrimValue, value=0 [var8]  : true
<randoop.PrimValue, value=0 [var9]  : true
<randoop.PrimValue, value=0 [var10]  : true
<randoop.PrimValue, value=0 [var11]  : true
<randoop.PrimValue, value=10 [var12]  : true
<randoop.PrimValue, value=0 [var13]  : true

allSequences.size()=688
-------------------------------------------
randoop.util.Randomness: total calls to random: 4230
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 687 sequences.
components: 687
randoop.util.Randomness: total calls to random: 4231
randoop.util.Randomness: total calls to random: 4232
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.randomNumber() : var0 
var2 =  method : A.randomNumber() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.normal() : var0 
var6 =  method : A.normal() : var0 
var7 =  method : A.randomNumber() : var0 
var8 =  method : A.normal() : var0 
var9 =  method : A.randomNumber() : var0 
var10 =  method : A.randomNumber() : var0 
var11 =  method : A.normal() : var0 
var12 =  method : A.randomNumber() : var0 
var13 =  method : A.normal() : var0 
var14 =  method : A.randomNumber() : var0 
var15 =  method : A.normal() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Making index 12 inactive (value is a primitive)
Making index 13 inactive (value is a primitive)
Making index 14 inactive (value is a primitive)
Making index 15 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var10 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var11 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var12 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var13 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var14 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var15 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=0 [var1]  : true
<randoop.PrimValue, value=0 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=10 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true
<randoop.PrimValue, value=0 [var7]  : true
<randoop.PrimValue, value=10 [var8]  : true
<randoop.PrimValue, value=0 [var9]  : true
<randoop.PrimValue, value=0 [var10]  : true
<randoop.PrimValue, value=10 [var11]  : true
<randoop.PrimValue, value=0 [var12]  : true
<randoop.PrimValue, value=10 [var13]  : true
<randoop.PrimValue, value=0 [var14]  : true
<randoop.PrimValue, value=10 [var15]  : true

allSequences.size()=689
-------------------------------------------
randoop.util.Randomness: total calls to random: 4233
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 688 sequences.
components: 688
randoop.util.Randomness: total calls to random: 4234
randoop.util.Randomness: total calls to random: 4235
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 4236
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 688 sequences.
components: 688
randoop.util.Randomness: total calls to random: 4237
randoop.util.Randomness: total calls to random: 4238
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 4239
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 688 sequences.
components: 688
randoop.util.Randomness: total calls to random: 4240
randoop.util.Randomness: total calls to random: 4241
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 4242
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 688 sequences.
components: 688
randoop.util.Randomness: total calls to random: 4243
randoop.util.Randomness: total calls to random: 4244
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.normal() : var0 
var2 =  method : A.normal() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.randomNumber() : var0 
var6 =  method : A.normal() : var0 
var7 =  method : A.normal() : var0 
var8 =  method : A.randomNumber() : var0 
var9 =  method : A.normal() : var0 
var10 =  method : A.randomNumber() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var10 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=10 [var1]  : true
<randoop.PrimValue, value=10 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=0 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true
<randoop.PrimValue, value=10 [var7]  : true
<randoop.PrimValue, value=0 [var8]  : true
<randoop.PrimValue, value=10 [var9]  : true
<randoop.PrimValue, value=0 [var10]  : true

allSequences.size()=690
-------------------------------------------
randoop.util.Randomness: total calls to random: 4245
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 689 sequences.
components: 689
randoop.util.Randomness: total calls to random: 4246
randoop.util.Randomness: total calls to random: 4247
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 4248
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 689 sequences.
components: 689
randoop.util.Randomness: total calls to random: 4249
randoop.util.Randomness: total calls to random: 4250
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 4251
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 689 sequences.
components: 689
randoop.util.Randomness: total calls to random: 4252
randoop.util.Randomness: total calls to random: 4253
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 4254
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 689 sequences.
components: 689
randoop.util.Randomness: total calls to random: 4255
randoop.util.Randomness: total calls to random: 4256
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 4257
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 689 sequences.
components: 689
randoop.util.Randomness: total calls to random: 4258
randoop.util.Randomness: total calls to random: 4259
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 4260
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 689 sequences.
components: 689
randoop.util.Randomness: total calls to random: 4261
randoop.util.Randomness: total calls to random: 4262
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 4263
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 689 sequences.
components: 689
randoop.util.Randomness: total calls to random: 4264
randoop.util.Randomness: total calls to random: 4265
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 4266
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 689 sequences.
components: 689
randoop.util.Randomness: total calls to random: 4267
randoop.util.Randomness: total calls to random: 4268
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.normal() : var0 
var2 =  method : A.normal() : var0 
var3 =  method : A.randomNumber() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.randomNumber() : var0 
var6 =  method : A.normal() : var0 
var7 =  method : A.randomNumber() : var0 
var8 =  method : A.normal() : var0 
var9 =  method : A.normal() : var0 
var10 =  method : A.normal() : var0 
var11 =  method : A.randomNumber() : var0 
var12 =  method : A.randomNumber() : var0 
var13 =  method : A.randomNumber() : var0 
var14 =  method : A.normal() : var0 
var15 =  method : A.normal() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Making index 12 inactive (value is a primitive)
Making index 13 inactive (value is a primitive)
Making index 14 inactive (value is a primitive)
Making index 15 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var10 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var11 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var12 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var13 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var14 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var15 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=10 [var1]  : true
<randoop.PrimValue, value=10 [var2]  : true
<randoop.PrimValue, value=0 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=0 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true
<randoop.PrimValue, value=0 [var7]  : true
<randoop.PrimValue, value=10 [var8]  : true
<randoop.PrimValue, value=10 [var9]  : true
<randoop.PrimValue, value=10 [var10]  : true
<randoop.PrimValue, value=0 [var11]  : true
<randoop.PrimValue, value=0 [var12]  : true
<randoop.PrimValue, value=0 [var13]  : true
<randoop.PrimValue, value=10 [var14]  : true
<randoop.PrimValue, value=10 [var15]  : true

allSequences.size()=691
-------------------------------------------
randoop.util.Randomness: total calls to random: 4269
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 690 sequences.
components: 690
randoop.util.Randomness: total calls to random: 4270
randoop.util.Randomness: total calls to random: 4271
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.normal() : var0 
var2 =  method : A.normal() : var0 
var3 =  method : A.randomNumber() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.randomNumber() : var0 
var6 =  method : A.normal() : var0 
var7 =  method : A.randomNumber() : var0 
var8 =  method : A.randomNumber() : var0 
var9 =  method : A.normal() : var0 
var10 =  method : A.randomNumber() : var0 
var11 =  method : A.normal() : var0 
var12 =  method : A.randomNumber() : var0 
var13 =  method : A.normal() : var0 
var14 =  method : A.normal() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Making index 12 inactive (value is a primitive)
Making index 13 inactive (value is a primitive)
Making index 14 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var10 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var11 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var12 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var13 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var14 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=10 [var1]  : true
<randoop.PrimValue, value=10 [var2]  : true
<randoop.PrimValue, value=0 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=0 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true
<randoop.PrimValue, value=0 [var7]  : true
<randoop.PrimValue, value=0 [var8]  : true
<randoop.PrimValue, value=10 [var9]  : true
<randoop.PrimValue, value=0 [var10]  : true
<randoop.PrimValue, value=10 [var11]  : true
<randoop.PrimValue, value=0 [var12]  : true
<randoop.PrimValue, value=10 [var13]  : true
<randoop.PrimValue, value=10 [var14]  : true

allSequences.size()=692
-------------------------------------------
randoop.util.Randomness: total calls to random: 4272
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 691 sequences.
components: 691
randoop.util.Randomness: total calls to random: 4273
randoop.util.Randomness: total calls to random: 4274
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.normal() : var0 
var2 =  method : A.randomNumber() : var0 
var3 =  method : A.randomNumber() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.randomNumber() : var0 
var6 =  method : A.randomNumber() : var0 
var7 =  method : A.normal() : var0 
var8 =  method : A.normal() : var0 
var9 =  method : A.randomNumber() : var0 
var10 =  method : A.normal() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var10 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=10 [var1]  : true
<randoop.PrimValue, value=0 [var2]  : true
<randoop.PrimValue, value=0 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=0 [var5]  : true
<randoop.PrimValue, value=0 [var6]  : true
<randoop.PrimValue, value=10 [var7]  : true
<randoop.PrimValue, value=10 [var8]  : true
<randoop.PrimValue, value=0 [var9]  : true
<randoop.PrimValue, value=10 [var10]  : true

allSequences.size()=693
-------------------------------------------
randoop.util.Randomness: total calls to random: 4275
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 692 sequences.
components: 692
randoop.util.Randomness: total calls to random: 4276
randoop.util.Randomness: total calls to random: 4277
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.normal() : var0 
var2 =  method : A.normal() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.normal() : var0 
var5 =  method : A.normal() : var0 
var6 =  method : A.randomNumber() : var0 
var7 =  method : A.normal() : var0 
var8 =  method : A.normal() : var0 
var9 =  method : A.randomNumber() : var0 
var10 =  method : A.normal() : var0 
var11 =  method : A.randomNumber() : var0 
var12 =  method : A.randomNumber() : var0 
var13 =  method : A.randomNumber() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Making index 12 inactive (value is a primitive)
Making index 13 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var10 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var11 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var12 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var13 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=10 [var1]  : true
<randoop.PrimValue, value=10 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=10 [var4]  : true
<randoop.PrimValue, value=10 [var5]  : true
<randoop.PrimValue, value=0 [var6]  : true
<randoop.PrimValue, value=10 [var7]  : true
<randoop.PrimValue, value=10 [var8]  : true
<randoop.PrimValue, value=0 [var9]  : true
<randoop.PrimValue, value=10 [var10]  : true
<randoop.PrimValue, value=0 [var11]  : true
<randoop.PrimValue, value=0 [var12]  : true
<randoop.PrimValue, value=0 [var13]  : true

allSequences.size()=694
-------------------------------------------
randoop.util.Randomness: total calls to random: 4278
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 693 sequences.
components: 693
randoop.util.Randomness: total calls to random: 4279
randoop.util.Randomness: total calls to random: 4280
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 4281
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 693 sequences.
components: 693
randoop.util.Randomness: total calls to random: 4282
randoop.util.Randomness: total calls to random: 4283
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.normal() : var0 
var2 =  method : A.randomNumber() : var0 
var3 =  method : A.randomNumber() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.randomNumber() : var0 
var6 =  method : A.randomNumber() : var0 
var7 =  method : A.normal() : var0 
var8 =  method : A.randomNumber() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=10 [var1]  : true
<randoop.PrimValue, value=0 [var2]  : true
<randoop.PrimValue, value=0 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=0 [var5]  : true
<randoop.PrimValue, value=0 [var6]  : true
<randoop.PrimValue, value=10 [var7]  : true
<randoop.PrimValue, value=0 [var8]  : true

allSequences.size()=695
-------------------------------------------
randoop.util.Randomness: total calls to random: 4284
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 694 sequences.
components: 694
randoop.util.Randomness: total calls to random: 4285
randoop.util.Randomness: total calls to random: 4286
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 4287
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 694 sequences.
components: 694
randoop.util.Randomness: total calls to random: 4288
randoop.util.Randomness: total calls to random: 4289
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 4290
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 694 sequences.
components: 694
randoop.util.Randomness: total calls to random: 4291
randoop.util.Randomness: total calls to random: 4292
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.randomNumber() : var0 
var2 =  method : A.randomNumber() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.normal() : var0 
var6 =  method : A.randomNumber() : var0 
var7 =  method : A.normal() : var0 
var8 =  method : A.normal() : var0 
var9 =  method : A.normal() : var0 
var10 =  method : A.normal() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var10 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=0 [var1]  : true
<randoop.PrimValue, value=0 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=10 [var5]  : true
<randoop.PrimValue, value=0 [var6]  : true
<randoop.PrimValue, value=10 [var7]  : true
<randoop.PrimValue, value=10 [var8]  : true
<randoop.PrimValue, value=10 [var9]  : true
<randoop.PrimValue, value=10 [var10]  : true

allSequences.size()=696
-------------------------------------------
randoop.util.Randomness: total calls to random: 4293
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 695 sequences.
components: 695
randoop.util.Randomness: total calls to random: 4294
randoop.util.Randomness: total calls to random: 4295
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 4296
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 695 sequences.
components: 695
randoop.util.Randomness: total calls to random: 4297
randoop.util.Randomness: total calls to random: 4298
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.randomNumber() : var0 
var2 =  method : A.randomNumber() : var0 
var3 =  method : A.randomNumber() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.normal() : var0 
var6 =  method : A.normal() : var0 
var7 =  method : A.normal() : var0 
var8 =  method : A.normal() : var0 
var9 =  method : A.normal() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=0 [var1]  : true
<randoop.PrimValue, value=0 [var2]  : true
<randoop.PrimValue, value=0 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=10 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true
<randoop.PrimValue, value=10 [var7]  : true
<randoop.PrimValue, value=10 [var8]  : true
<randoop.PrimValue, value=10 [var9]  : true

allSequences.size()=697
-------------------------------------------
randoop.util.Randomness: total calls to random: 4299
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 696 sequences.
components: 696
randoop.util.Randomness: total calls to random: 4300
randoop.util.Randomness: total calls to random: 4301
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 4302
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 696 sequences.
components: 696
randoop.util.Randomness: total calls to random: 4303
randoop.util.Randomness: total calls to random: 4304
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.randomNumber() : var0 
var2 =  method : A.randomNumber() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.normal() : var0 
var5 =  method : A.normal() : var0 
var6 =  method : A.randomNumber() : var0 
var7 =  method : A.normal() : var0 
var8 =  method : A.normal() : var0 
var9 =  method : A.normal() : var0 
var10 =  method : A.normal() : var0 
var11 =  method : A.randomNumber() : var0 
var12 =  method : A.randomNumber() : var0 
var13 =  method : A.randomNumber() : var0 
var14 =  method : A.randomNumber() : var0 
var15 =  method : A.randomNumber() : var0 
var16 =  method : A.normal() : var0 
var17 =  method : A.randomNumber() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Making index 12 inactive (value is a primitive)
Making index 13 inactive (value is a primitive)
Making index 14 inactive (value is a primitive)
Making index 15 inactive (value is a primitive)
Making index 16 inactive (value is a primitive)
Making index 17 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var10 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var11 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var12 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var13 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var14 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var15 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var16 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var17 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=0 [var1]  : true
<randoop.PrimValue, value=0 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=10 [var4]  : true
<randoop.PrimValue, value=10 [var5]  : true
<randoop.PrimValue, value=0 [var6]  : true
<randoop.PrimValue, value=10 [var7]  : true
<randoop.PrimValue, value=10 [var8]  : true
<randoop.PrimValue, value=10 [var9]  : true
<randoop.PrimValue, value=10 [var10]  : true
<randoop.PrimValue, value=0 [var11]  : true
<randoop.PrimValue, value=0 [var12]  : true
<randoop.PrimValue, value=0 [var13]  : true
<randoop.PrimValue, value=0 [var14]  : true
<randoop.PrimValue, value=0 [var15]  : true
<randoop.PrimValue, value=10 [var16]  : true
<randoop.PrimValue, value=0 [var17]  : true

allSequences.size()=698
-------------------------------------------
randoop.util.Randomness: total calls to random: 4305
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 697 sequences.
components: 697
randoop.util.Randomness: total calls to random: 4306
randoop.util.Randomness: total calls to random: 4307
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 4308
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 697 sequences.
components: 697
randoop.util.Randomness: total calls to random: 4309
randoop.util.Randomness: total calls to random: 4310
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.randomNumber() : var0 
var2 =  method : A.randomNumber() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.normal() : var0 
var6 =  method : A.normal() : var0 
var7 =  method : A.randomNumber() : var0 
var8 =  method : A.normal() : var0 
var9 =  method : A.normal() : var0 
var10 =  method : A.normal() : var0 
var11 =  method : A.normal() : var0 
var12 =  method : A.randomNumber() : var0 
var13 =  method : A.randomNumber() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Making index 12 inactive (value is a primitive)
Making index 13 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var10 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var11 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var12 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var13 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=0 [var1]  : true
<randoop.PrimValue, value=0 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=10 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true
<randoop.PrimValue, value=0 [var7]  : true
<randoop.PrimValue, value=10 [var8]  : true
<randoop.PrimValue, value=10 [var9]  : true
<randoop.PrimValue, value=10 [var10]  : true
<randoop.PrimValue, value=10 [var11]  : true
<randoop.PrimValue, value=0 [var12]  : true
<randoop.PrimValue, value=0 [var13]  : true

allSequences.size()=699
-------------------------------------------
randoop.util.Randomness: total calls to random: 4311
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 698 sequences.
components: 698
randoop.util.Randomness: total calls to random: 4312
randoop.util.Randomness: total calls to random: 4313
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.normal() : var0 
var2 =  method : A.normal() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.randomNumber() : var0 
var6 =  method : A.randomNumber() : var0 
var7 =  method : A.normal() : var0 
var8 =  method : A.randomNumber() : var0 
var9 =  method : A.normal() : var0 
var10 =  method : A.randomNumber() : var0 
var11 =  method : A.normal() : var0 
var12 =  method : A.normal() : var0 
var13 =  method : A.randomNumber() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Making index 12 inactive (value is a primitive)
Making index 13 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var10 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var11 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var12 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var13 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=10 [var1]  : true
<randoop.PrimValue, value=10 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=0 [var5]  : true
<randoop.PrimValue, value=0 [var6]  : true
<randoop.PrimValue, value=10 [var7]  : true
<randoop.PrimValue, value=0 [var8]  : true
<randoop.PrimValue, value=10 [var9]  : true
<randoop.PrimValue, value=0 [var10]  : true
<randoop.PrimValue, value=10 [var11]  : true
<randoop.PrimValue, value=10 [var12]  : true
<randoop.PrimValue, value=0 [var13]  : true

allSequences.size()=700
-------------------------------------------
randoop.util.Randomness: total calls to random: 4314
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 699 sequences.
components: 699
randoop.util.Randomness: total calls to random: 4315
randoop.util.Randomness: total calls to random: 4316
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 4317
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 699 sequences.
components: 699
randoop.util.Randomness: total calls to random: 4318
randoop.util.Randomness: total calls to random: 4319
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 4320
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 699 sequences.
components: 699
randoop.util.Randomness: total calls to random: 4321
randoop.util.Randomness: total calls to random: 4322
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 4323
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 699 sequences.
components: 699
randoop.util.Randomness: total calls to random: 4324
randoop.util.Randomness: total calls to random: 4325
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 4326
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 699 sequences.
components: 699
randoop.util.Randomness: total calls to random: 4327
randoop.util.Randomness: total calls to random: 4328
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.randomNumber() : var0 
var2 =  method : A.randomNumber() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.normal() : var0 
var6 =  method : A.normal() : var0 
var7 =  method : A.randomNumber() : var0 
var8 =  method : A.randomNumber() : var0 
var9 =  method : A.randomNumber() : var0 
var10 =  method : A.randomNumber() : var0 
var11 =  method : A.normal() : var0 
var12 =  method : A.randomNumber() : var0 
var13 =  method : A.normal() : var0 
var14 =  method : A.randomNumber() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Making index 12 inactive (value is a primitive)
Making index 13 inactive (value is a primitive)
Making index 14 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var10 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var11 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var12 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var13 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var14 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=0 [var1]  : true
<randoop.PrimValue, value=0 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=10 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true
<randoop.PrimValue, value=0 [var7]  : true
<randoop.PrimValue, value=0 [var8]  : true
<randoop.PrimValue, value=0 [var9]  : true
<randoop.PrimValue, value=0 [var10]  : true
<randoop.PrimValue, value=10 [var11]  : true
<randoop.PrimValue, value=0 [var12]  : true
<randoop.PrimValue, value=10 [var13]  : true
<randoop.PrimValue, value=0 [var14]  : true

allSequences.size()=701
-------------------------------------------
randoop.util.Randomness: total calls to random: 4329
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 700 sequences.
components: 700
randoop.util.Randomness: total calls to random: 4330
randoop.util.Randomness: total calls to random: 4331
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.normal() : var0 
var2 =  method : A.randomNumber() : var0 
var3 =  method : A.randomNumber() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.normal() : var0 
var6 =  method : A.normal() : var0 
var7 =  method : A.normal() : var0 
var8 =  method : A.randomNumber() : var0 
var9 =  method : A.normal() : var0 
var10 =  method : A.randomNumber() : var0 
var11 =  method : A.randomNumber() : var0 
var12 =  method : A.randomNumber() : var0 
var13 =  method : A.normal() : var0 
var14 =  method : A.normal() : var0 
var15 =  method : A.normal() : var0 
var16 =  method : A.normal() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Making index 12 inactive (value is a primitive)
Making index 13 inactive (value is a primitive)
Making index 14 inactive (value is a primitive)
Making index 15 inactive (value is a primitive)
Making index 16 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var10 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var11 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var12 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var13 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var14 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var15 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var16 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=10 [var1]  : true
<randoop.PrimValue, value=0 [var2]  : true
<randoop.PrimValue, value=0 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=10 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true
<randoop.PrimValue, value=10 [var7]  : true
<randoop.PrimValue, value=0 [var8]  : true
<randoop.PrimValue, value=10 [var9]  : true
<randoop.PrimValue, value=0 [var10]  : true
<randoop.PrimValue, value=0 [var11]  : true
<randoop.PrimValue, value=0 [var12]  : true
<randoop.PrimValue, value=10 [var13]  : true
<randoop.PrimValue, value=10 [var14]  : true
<randoop.PrimValue, value=10 [var15]  : true
<randoop.PrimValue, value=10 [var16]  : true

allSequences.size()=702
-------------------------------------------
randoop.util.Randomness: total calls to random: 4332
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 701 sequences.
components: 701
randoop.util.Randomness: total calls to random: 4333
randoop.util.Randomness: total calls to random: 4334
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 4335
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 701 sequences.
components: 701
randoop.util.Randomness: total calls to random: 4336
randoop.util.Randomness: total calls to random: 4337
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.randomNumber() : var0 
var2 =  method : A.randomNumber() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.normal() : var0 
var6 =  method : A.normal() : var0 
var7 =  method : A.randomNumber() : var0 
var8 =  method : A.normal() : var0 
var9 =  method : A.randomNumber() : var0 
var10 =  method : A.normal() : var0 
var11 =  method : A.normal() : var0 
var12 =  method : A.randomNumber() : var0 
var13 =  method : A.randomNumber() : var0 
var14 =  method : A.randomNumber() : var0 
var15 =  method : A.normal() : var0 
var16 =  method : A.randomNumber() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Making index 12 inactive (value is a primitive)
Making index 13 inactive (value is a primitive)
Making index 14 inactive (value is a primitive)
Making index 15 inactive (value is a primitive)
Making index 16 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var10 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var11 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var12 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var13 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var14 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var15 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var16 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=0 [var1]  : true
<randoop.PrimValue, value=0 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=10 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true
<randoop.PrimValue, value=0 [var7]  : true
<randoop.PrimValue, value=10 [var8]  : true
<randoop.PrimValue, value=0 [var9]  : true
<randoop.PrimValue, value=10 [var10]  : true
<randoop.PrimValue, value=10 [var11]  : true
<randoop.PrimValue, value=0 [var12]  : true
<randoop.PrimValue, value=0 [var13]  : true
<randoop.PrimValue, value=0 [var14]  : true
<randoop.PrimValue, value=10 [var15]  : true
<randoop.PrimValue, value=0 [var16]  : true

allSequences.size()=703
-------------------------------------------
randoop.util.Randomness: total calls to random: 4338
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 702 sequences.
components: 702
randoop.util.Randomness: total calls to random: 4339
randoop.util.Randomness: total calls to random: 4340
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 4341
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 702 sequences.
components: 702
randoop.util.Randomness: total calls to random: 4342
randoop.util.Randomness: total calls to random: 4343
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.randomNumber() : var0 
var2 =  method : A.randomNumber() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.normal() : var0 
var6 =  method : A.normal() : var0 
var7 =  method : A.randomNumber() : var0 
var8 =  method : A.normal() : var0 
var9 =  method : A.randomNumber() : var0 
var10 =  method : A.randomNumber() : var0 
var11 =  method : A.normal() : var0 
var12 =  method : A.normal() : var0 
var13 =  method : A.randomNumber() : var0 
var14 =  method : A.randomNumber() : var0 
var15 =  method : A.normal() : var0 
var16 =  method : A.randomNumber() : var0 
var17 =  method : A.normal() : var0 
var18 =  method : A.randomNumber() : var0 
var19 =  method : A.normal() : var0 
var20 =  method : A.normal() : var0 
var21 =  method : A.normal() : var0 
var22 =  method : A.randomNumber() : var0 
var23 =  method : A.normal() : var0 
var24 =  method : A.randomNumber() : var0 
var25 =  method : A.randomNumber() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Making index 12 inactive (value is a primitive)
Making index 13 inactive (value is a primitive)
Making index 14 inactive (value is a primitive)
Making index 15 inactive (value is a primitive)
Making index 16 inactive (value is a primitive)
Making index 17 inactive (value is a primitive)
Making index 18 inactive (value is a primitive)
Making index 19 inactive (value is a primitive)
Making index 20 inactive (value is a primitive)
Making index 21 inactive (value is a primitive)
Making index 22 inactive (value is a primitive)
Making index 23 inactive (value is a primitive)
Making index 24 inactive (value is a primitive)
Making index 25 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var10 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var11 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var12 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var13 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var14 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var15 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var16 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var17 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var18 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var19 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var20 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var21 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var22 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var23 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var24 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var25 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=0 [var1]  : true
<randoop.PrimValue, value=0 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=10 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true
<randoop.PrimValue, value=0 [var7]  : true
<randoop.PrimValue, value=10 [var8]  : true
<randoop.PrimValue, value=0 [var9]  : true
<randoop.PrimValue, value=0 [var10]  : true
<randoop.PrimValue, value=10 [var11]  : true
<randoop.PrimValue, value=10 [var12]  : true
<randoop.PrimValue, value=0 [var13]  : true
<randoop.PrimValue, value=0 [var14]  : true
<randoop.PrimValue, value=10 [var15]  : true
<randoop.PrimValue, value=0 [var16]  : true
<randoop.PrimValue, value=10 [var17]  : true
<randoop.PrimValue, value=0 [var18]  : true
<randoop.PrimValue, value=10 [var19]  : true
<randoop.PrimValue, value=10 [var20]  : true
<randoop.PrimValue, value=10 [var21]  : true
<randoop.PrimValue, value=0 [var22]  : true
<randoop.PrimValue, value=10 [var23]  : true
<randoop.PrimValue, value=0 [var24]  : true
<randoop.PrimValue, value=0 [var25]  : true

allSequences.size()=704
-------------------------------------------
randoop.util.Randomness: total calls to random: 4344
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 703 sequences.
components: 703
randoop.util.Randomness: total calls to random: 4345
randoop.util.Randomness: total calls to random: 4346
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 4347
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 703 sequences.
components: 703
randoop.util.Randomness: total calls to random: 4348
randoop.util.Randomness: total calls to random: 4349
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.normal() : var0 
var2 =  method : A.normal() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.randomNumber() : var0 
var6 =  method : A.randomNumber() : var0 
var7 =  method : A.normal() : var0 
var8 =  method : A.randomNumber() : var0 
var9 =  method : A.normal() : var0 
var10 =  method : A.normal() : var0 
var11 =  method : A.normal() : var0 
var12 =  method : A.normal() : var0 
var13 =  method : A.randomNumber() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Making index 12 inactive (value is a primitive)
Making index 13 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var10 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var11 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var12 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var13 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=10 [var1]  : true
<randoop.PrimValue, value=10 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=0 [var5]  : true
<randoop.PrimValue, value=0 [var6]  : true
<randoop.PrimValue, value=10 [var7]  : true
<randoop.PrimValue, value=0 [var8]  : true
<randoop.PrimValue, value=10 [var9]  : true
<randoop.PrimValue, value=10 [var10]  : true
<randoop.PrimValue, value=10 [var11]  : true
<randoop.PrimValue, value=10 [var12]  : true
<randoop.PrimValue, value=0 [var13]  : true

allSequences.size()=705
-------------------------------------------
randoop.util.Randomness: total calls to random: 4350
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 704 sequences.
components: 704
randoop.util.Randomness: total calls to random: 4351
randoop.util.Randomness: total calls to random: 4352
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.normal() : var0 
var2 =  method : A.normal() : var0 
var3 =  method : A.randomNumber() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.randomNumber() : var0 
var6 =  method : A.normal() : var0 
var7 =  method : A.randomNumber() : var0 
var8 =  method : A.randomNumber() : var0 
var9 =  method : A.normal() : var0 
var10 =  method : A.randomNumber() : var0 
var11 =  method : A.normal() : var0 
var12 =  method : A.randomNumber() : var0 
var13 =  method : A.randomNumber() : var0 
var14 =  method : A.normal() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Making index 12 inactive (value is a primitive)
Making index 13 inactive (value is a primitive)
Making index 14 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var10 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var11 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var12 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var13 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var14 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=10 [var1]  : true
<randoop.PrimValue, value=10 [var2]  : true
<randoop.PrimValue, value=0 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=0 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true
<randoop.PrimValue, value=0 [var7]  : true
<randoop.PrimValue, value=0 [var8]  : true
<randoop.PrimValue, value=10 [var9]  : true
<randoop.PrimValue, value=0 [var10]  : true
<randoop.PrimValue, value=10 [var11]  : true
<randoop.PrimValue, value=0 [var12]  : true
<randoop.PrimValue, value=0 [var13]  : true
<randoop.PrimValue, value=10 [var14]  : true

allSequences.size()=706
-------------------------------------------
randoop.util.Randomness: total calls to random: 4353
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 705 sequences.
components: 705
randoop.util.Randomness: total calls to random: 4354
randoop.util.Randomness: total calls to random: 4355
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.normal() : var0 
var2 =  method : A.normal() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.normal() : var0 
var5 =  method : A.normal() : var0 
var6 =  method : A.randomNumber() : var0 
var7 =  method : A.normal() : var0 
var8 =  method : A.normal() : var0 
var9 =  method : A.randomNumber() : var0 
var10 =  method : A.normal() : var0 
var11 =  method : A.randomNumber() : var0 
var12 =  method : A.normal() : var0 
var13 =  method : A.normal() : var0 
var14 =  method : A.normal() : var0 
var15 =  method : A.randomNumber() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Making index 12 inactive (value is a primitive)
Making index 13 inactive (value is a primitive)
Making index 14 inactive (value is a primitive)
Making index 15 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var10 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var11 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var12 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var13 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var14 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var15 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=10 [var1]  : true
<randoop.PrimValue, value=10 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=10 [var4]  : true
<randoop.PrimValue, value=10 [var5]  : true
<randoop.PrimValue, value=0 [var6]  : true
<randoop.PrimValue, value=10 [var7]  : true
<randoop.PrimValue, value=10 [var8]  : true
<randoop.PrimValue, value=0 [var9]  : true
<randoop.PrimValue, value=10 [var10]  : true
<randoop.PrimValue, value=0 [var11]  : true
<randoop.PrimValue, value=10 [var12]  : true
<randoop.PrimValue, value=10 [var13]  : true
<randoop.PrimValue, value=10 [var14]  : true
<randoop.PrimValue, value=0 [var15]  : true

allSequences.size()=707
-------------------------------------------
randoop.util.Randomness: total calls to random: 4356
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 706 sequences.
components: 706
randoop.util.Randomness: total calls to random: 4357
randoop.util.Randomness: total calls to random: 4358
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 4359
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 706 sequences.
components: 706
randoop.util.Randomness: total calls to random: 4360
randoop.util.Randomness: total calls to random: 4361
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 4362
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 706 sequences.
components: 706
randoop.util.Randomness: total calls to random: 4363
randoop.util.Randomness: total calls to random: 4364
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.randomNumber() : var0 
var2 =  method : A.randomNumber() : var0 
var3 =  method : A.randomNumber() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.randomNumber() : var0 
var6 =  method : A.normal() : var0 
var7 =  method : A.randomNumber() : var0 
var8 =  method : A.randomNumber() : var0 
var9 =  method : A.normal() : var0 
var10 =  method : A.normal() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var10 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=0 [var1]  : true
<randoop.PrimValue, value=0 [var2]  : true
<randoop.PrimValue, value=0 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=0 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true
<randoop.PrimValue, value=0 [var7]  : true
<randoop.PrimValue, value=0 [var8]  : true
<randoop.PrimValue, value=10 [var9]  : true
<randoop.PrimValue, value=10 [var10]  : true

allSequences.size()=708
-------------------------------------------
randoop.util.Randomness: total calls to random: 4365
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 707 sequences.
components: 707
randoop.util.Randomness: total calls to random: 4366
randoop.util.Randomness: total calls to random: 4367
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 4368
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 707 sequences.
components: 707
randoop.util.Randomness: total calls to random: 4369
randoop.util.Randomness: total calls to random: 4370
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.normal() : var0 
var2 =  method : A.normal() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.randomNumber() : var0 
var6 =  method : A.randomNumber() : var0 
var7 =  method : A.normal() : var0 
var8 =  method : A.randomNumber() : var0 
var9 =  method : A.randomNumber() : var0 
var10 =  method : A.randomNumber() : var0 
var11 =  method : A.randomNumber() : var0 
var12 =  method : A.randomNumber() : var0 
var13 =  method : A.randomNumber() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Making index 12 inactive (value is a primitive)
Making index 13 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var10 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var11 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var12 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var13 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=10 [var1]  : true
<randoop.PrimValue, value=10 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=0 [var5]  : true
<randoop.PrimValue, value=0 [var6]  : true
<randoop.PrimValue, value=10 [var7]  : true
<randoop.PrimValue, value=0 [var8]  : true
<randoop.PrimValue, value=0 [var9]  : true
<randoop.PrimValue, value=0 [var10]  : true
<randoop.PrimValue, value=0 [var11]  : true
<randoop.PrimValue, value=0 [var12]  : true
<randoop.PrimValue, value=0 [var13]  : true

allSequences.size()=709
-------------------------------------------
randoop.util.Randomness: total calls to random: 4371
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 708 sequences.
components: 708
randoop.util.Randomness: total calls to random: 4372
randoop.util.Randomness: total calls to random: 4373
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 4374
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 708 sequences.
components: 708
randoop.util.Randomness: total calls to random: 4375
randoop.util.Randomness: total calls to random: 4376
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.randomNumber() : var0 
var2 =  method : A.randomNumber() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.normal() : var0 
var6 =  method : A.normal() : var0 
var7 =  method : A.randomNumber() : var0 
var8 =  method : A.randomNumber() : var0 
var9 =  method : A.randomNumber() : var0 
var10 =  method : A.randomNumber() : var0 
var11 =  method : A.normal() : var0 
var12 =  method : A.normal() : var0 
var13 =  method : A.normal() : var0 
var14 =  method : A.randomNumber() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Making index 12 inactive (value is a primitive)
Making index 13 inactive (value is a primitive)
Making index 14 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var10 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var11 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var12 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var13 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var14 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=0 [var1]  : true
<randoop.PrimValue, value=0 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=10 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true
<randoop.PrimValue, value=0 [var7]  : true
<randoop.PrimValue, value=0 [var8]  : true
<randoop.PrimValue, value=0 [var9]  : true
<randoop.PrimValue, value=0 [var10]  : true
<randoop.PrimValue, value=10 [var11]  : true
<randoop.PrimValue, value=10 [var12]  : true
<randoop.PrimValue, value=10 [var13]  : true
<randoop.PrimValue, value=0 [var14]  : true

allSequences.size()=710
-------------------------------------------
randoop.util.Randomness: total calls to random: 4377
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 709 sequences.
components: 709
randoop.util.Randomness: total calls to random: 4378
randoop.util.Randomness: total calls to random: 4379
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 4380
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 709 sequences.
components: 709
randoop.util.Randomness: total calls to random: 4381
randoop.util.Randomness: total calls to random: 4382
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 4383
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 709 sequences.
components: 709
randoop.util.Randomness: total calls to random: 4384
randoop.util.Randomness: total calls to random: 4385
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 4386
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 709 sequences.
components: 709
randoop.util.Randomness: total calls to random: 4387
randoop.util.Randomness: total calls to random: 4388
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.randomNumber() : var0 
var2 =  method : A.randomNumber() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.normal() : var0 
var6 =  method : A.normal() : var0 
var7 =  method : A.randomNumber() : var0 
var8 =  method : A.normal() : var0 
var9 =  method : A.randomNumber() : var0 
var10 =  method : A.normal() : var0 
var11 =  method : A.normal() : var0 
var12 =  method : A.randomNumber() : var0 
var13 =  method : A.randomNumber() : var0 
var14 =  method : A.normal() : var0 
var15 =  method : A.normal() : var0 
var16 =  method : A.normal() : var0 
var17 =  method : A.normal() : var0 
var18 =  method : A.normal() : var0 
var19 =  method : A.normal() : var0 
var20 =  method : A.normal() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Making index 12 inactive (value is a primitive)
Making index 13 inactive (value is a primitive)
Making index 14 inactive (value is a primitive)
Making index 15 inactive (value is a primitive)
Making index 16 inactive (value is a primitive)
Making index 17 inactive (value is a primitive)
Making index 18 inactive (value is a primitive)
Making index 19 inactive (value is a primitive)
Making index 20 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var10 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var11 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var12 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var13 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var14 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var15 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var16 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var17 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var18 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var19 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var20 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=0 [var1]  : true
<randoop.PrimValue, value=0 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=10 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true
<randoop.PrimValue, value=0 [var7]  : true
<randoop.PrimValue, value=10 [var8]  : true
<randoop.PrimValue, value=0 [var9]  : true
<randoop.PrimValue, value=10 [var10]  : true
<randoop.PrimValue, value=10 [var11]  : true
<randoop.PrimValue, value=0 [var12]  : true
<randoop.PrimValue, value=0 [var13]  : true
<randoop.PrimValue, value=10 [var14]  : true
<randoop.PrimValue, value=10 [var15]  : true
<randoop.PrimValue, value=10 [var16]  : true
<randoop.PrimValue, value=10 [var17]  : true
<randoop.PrimValue, value=10 [var18]  : true
<randoop.PrimValue, value=10 [var19]  : true
<randoop.PrimValue, value=10 [var20]  : true

allSequences.size()=711
-------------------------------------------
randoop.util.Randomness: total calls to random: 4389
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 710 sequences.
components: 710
randoop.util.Randomness: total calls to random: 4390
randoop.util.Randomness: total calls to random: 4391
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 4392
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 710 sequences.
components: 710
randoop.util.Randomness: total calls to random: 4393
randoop.util.Randomness: total calls to random: 4394
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.normal() : var0 
var2 =  method : A.normal() : var0 
var3 =  method : A.randomNumber() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.randomNumber() : var0 
var6 =  method : A.normal() : var0 
var7 =  method : A.randomNumber() : var0 
var8 =  method : A.normal() : var0 
var9 =  method : A.randomNumber() : var0 
var10 =  method : A.randomNumber() : var0 
var11 =  method : A.randomNumber() : var0 
var12 =  method : A.randomNumber() : var0 
var13 =  method : A.randomNumber() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Making index 12 inactive (value is a primitive)
Making index 13 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var10 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var11 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var12 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var13 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=10 [var1]  : true
<randoop.PrimValue, value=10 [var2]  : true
<randoop.PrimValue, value=0 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=0 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true
<randoop.PrimValue, value=0 [var7]  : true
<randoop.PrimValue, value=10 [var8]  : true
<randoop.PrimValue, value=0 [var9]  : true
<randoop.PrimValue, value=0 [var10]  : true
<randoop.PrimValue, value=0 [var11]  : true
<randoop.PrimValue, value=0 [var12]  : true
<randoop.PrimValue, value=0 [var13]  : true

allSequences.size()=712
-------------------------------------------
randoop.util.Randomness: total calls to random: 4395
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 711 sequences.
components: 711
randoop.util.Randomness: total calls to random: 4396
randoop.util.Randomness: total calls to random: 4397
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.normal() : var0 
var2 =  method : A.randomNumber() : var0 
var3 =  method : A.randomNumber() : var0 
var4 =  method : A.normal() : var0 
var5 =  method : A.randomNumber() : var0 
var6 =  method : A.normal() : var0 
var7 =  method : A.randomNumber() : var0 
var8 =  method : A.randomNumber() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=10 [var1]  : true
<randoop.PrimValue, value=0 [var2]  : true
<randoop.PrimValue, value=0 [var3]  : true
<randoop.PrimValue, value=10 [var4]  : true
<randoop.PrimValue, value=0 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true
<randoop.PrimValue, value=0 [var7]  : true
<randoop.PrimValue, value=0 [var8]  : true

allSequences.size()=713
-------------------------------------------
randoop.util.Randomness: total calls to random: 4398
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 712 sequences.
components: 712
randoop.util.Randomness: total calls to random: 4399
randoop.util.Randomness: total calls to random: 4400
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.randomNumber() : var0 
var2 =  method : A.normal() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.randomNumber() : var0 
var6 =  method : A.normal() : var0 
var7 =  method : A.randomNumber() : var0 
var8 =  method : A.normal() : var0 
var9 =  method : A.normal() : var0 
var10 =  method : A.normal() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var10 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=0 [var1]  : true
<randoop.PrimValue, value=10 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=0 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true
<randoop.PrimValue, value=0 [var7]  : true
<randoop.PrimValue, value=10 [var8]  : true
<randoop.PrimValue, value=10 [var9]  : true
<randoop.PrimValue, value=10 [var10]  : true

allSequences.size()=714
-------------------------------------------
randoop.util.Randomness: total calls to random: 4401
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 713 sequences.
components: 713
randoop.util.Randomness: total calls to random: 4402
randoop.util.Randomness: total calls to random: 4403
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.randomNumber() : var0 
var2 =  method : A.randomNumber() : var0 
var3 =  method : A.randomNumber() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.normal() : var0 
var6 =  method : A.normal() : var0 
var7 =  method : A.randomNumber() : var0 
var8 =  method : A.normal() : var0 
var9 =  method : A.normal() : var0 
var10 =  method : A.normal() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var10 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=0 [var1]  : true
<randoop.PrimValue, value=0 [var2]  : true
<randoop.PrimValue, value=0 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=10 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true
<randoop.PrimValue, value=0 [var7]  : true
<randoop.PrimValue, value=10 [var8]  : true
<randoop.PrimValue, value=10 [var9]  : true
<randoop.PrimValue, value=10 [var10]  : true

allSequences.size()=715
-------------------------------------------
randoop.util.Randomness: total calls to random: 4404
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 714 sequences.
components: 714
randoop.util.Randomness: total calls to random: 4405
randoop.util.Randomness: total calls to random: 4406
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.normal() : var0 
var2 =  method : A.normal() : var0 
var3 =  method : A.randomNumber() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.normal() : var0 
var6 =  method : A.normal() : var0 
var7 =  method : A.randomNumber() : var0 
var8 =  method : A.randomNumber() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=10 [var1]  : true
<randoop.PrimValue, value=10 [var2]  : true
<randoop.PrimValue, value=0 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=10 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true
<randoop.PrimValue, value=0 [var7]  : true
<randoop.PrimValue, value=0 [var8]  : true

allSequences.size()=716
-------------------------------------------
randoop.util.Randomness: total calls to random: 4407
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 715 sequences.
components: 715
randoop.util.Randomness: total calls to random: 4408
randoop.util.Randomness: total calls to random: 4409
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 4410
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 715 sequences.
components: 715
randoop.util.Randomness: total calls to random: 4411
randoop.util.Randomness: total calls to random: 4412
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 4413
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 715 sequences.
components: 715
randoop.util.Randomness: total calls to random: 4414
randoop.util.Randomness: total calls to random: 4415
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.randomNumber() : var0 
var2 =  method : A.randomNumber() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.normal() : var0 
var6 =  method : A.normal() : var0 
var7 =  method : A.randomNumber() : var0 
var8 =  method : A.normal() : var0 
var9 =  method : A.normal() : var0 
var10 =  method : A.normal() : var0 
var11 =  method : A.randomNumber() : var0 
var12 =  method : A.normal() : var0 
var13 =  method : A.randomNumber() : var0 
var14 =  method : A.normal() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Making index 12 inactive (value is a primitive)
Making index 13 inactive (value is a primitive)
Making index 14 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var10 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var11 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var12 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var13 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var14 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=0 [var1]  : true
<randoop.PrimValue, value=0 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=10 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true
<randoop.PrimValue, value=0 [var7]  : true
<randoop.PrimValue, value=10 [var8]  : true
<randoop.PrimValue, value=10 [var9]  : true
<randoop.PrimValue, value=10 [var10]  : true
<randoop.PrimValue, value=0 [var11]  : true
<randoop.PrimValue, value=10 [var12]  : true
<randoop.PrimValue, value=0 [var13]  : true
<randoop.PrimValue, value=10 [var14]  : true

allSequences.size()=717
-------------------------------------------
randoop.util.Randomness: total calls to random: 4416
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 716 sequences.
components: 716
randoop.util.Randomness: total calls to random: 4417
randoop.util.Randomness: total calls to random: 4418
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.normal() : var0 
var2 =  method : A.randomNumber() : var0 
var3 =  method : A.randomNumber() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.normal() : var0 
var6 =  method : A.normal() : var0 
var7 =  method : A.randomNumber() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=10 [var1]  : true
<randoop.PrimValue, value=0 [var2]  : true
<randoop.PrimValue, value=0 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=10 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true
<randoop.PrimValue, value=0 [var7]  : true

allSequences.size()=718
-------------------------------------------
randoop.util.Randomness: total calls to random: 4419
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 717 sequences.
components: 717
randoop.util.Randomness: total calls to random: 4420
randoop.util.Randomness: total calls to random: 4421
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.randomNumber() : var0 
var2 =  method : A.randomNumber() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.normal() : var0 
var6 =  method : A.normal() : var0 
var7 =  method : A.randomNumber() : var0 
var8 =  method : A.normal() : var0 
var9 =  method : A.randomNumber() : var0 
var10 =  method : A.normal() : var0 
var11 =  method : A.normal() : var0 
var12 =  method : A.randomNumber() : var0 
var13 =  method : A.randomNumber() : var0 
var14 =  method : A.normal() : var0 
var15 =  method : A.randomNumber() : var0 
var16 =  method : A.randomNumber() : var0 
var17 =  method : A.normal() : var0 
var18 =  method : A.randomNumber() : var0 
var19 =  method : A.randomNumber() : var0 
var20 =  method : A.normal() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Making index 12 inactive (value is a primitive)
Making index 13 inactive (value is a primitive)
Making index 14 inactive (value is a primitive)
Making index 15 inactive (value is a primitive)
Making index 16 inactive (value is a primitive)
Making index 17 inactive (value is a primitive)
Making index 18 inactive (value is a primitive)
Making index 19 inactive (value is a primitive)
Making index 20 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var10 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var11 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var12 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var13 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var14 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var15 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var16 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var17 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var18 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var19 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var20 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=0 [var1]  : true
<randoop.PrimValue, value=0 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=10 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true
<randoop.PrimValue, value=0 [var7]  : true
<randoop.PrimValue, value=10 [var8]  : true
<randoop.PrimValue, value=0 [var9]  : true
<randoop.PrimValue, value=10 [var10]  : true
<randoop.PrimValue, value=10 [var11]  : true
<randoop.PrimValue, value=0 [var12]  : true
<randoop.PrimValue, value=0 [var13]  : true
<randoop.PrimValue, value=10 [var14]  : true
<randoop.PrimValue, value=0 [var15]  : true
<randoop.PrimValue, value=0 [var16]  : true
<randoop.PrimValue, value=10 [var17]  : true
<randoop.PrimValue, value=0 [var18]  : true
<randoop.PrimValue, value=0 [var19]  : true
<randoop.PrimValue, value=10 [var20]  : true

allSequences.size()=719
-------------------------------------------
randoop.util.Randomness: total calls to random: 4422
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 718 sequences.
components: 718
randoop.util.Randomness: total calls to random: 4423
randoop.util.Randomness: total calls to random: 4424
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 4425
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 718 sequences.
components: 718
randoop.util.Randomness: total calls to random: 4426
randoop.util.Randomness: total calls to random: 4427
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.randomNumber() : var0 
var2 =  method : A.normal() : var0 
var3 =  method : A.randomNumber() : var0 
var4 =  method : A.normal() : var0 
var5 =  method : A.randomNumber() : var0 
var6 =  method : A.normal() : var0 
var7 =  method : A.normal() : var0 
var8 =  method : A.randomNumber() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=0 [var1]  : true
<randoop.PrimValue, value=10 [var2]  : true
<randoop.PrimValue, value=0 [var3]  : true
<randoop.PrimValue, value=10 [var4]  : true
<randoop.PrimValue, value=0 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true
<randoop.PrimValue, value=10 [var7]  : true
<randoop.PrimValue, value=0 [var8]  : true

allSequences.size()=720
-------------------------------------------
randoop.util.Randomness: total calls to random: 4428
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 719 sequences.
components: 719
randoop.util.Randomness: total calls to random: 4429
randoop.util.Randomness: total calls to random: 4430
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.normal() : var0 
var2 =  method : A.normal() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.normal() : var0 
var5 =  method : A.randomNumber() : var0 
var6 =  method : A.randomNumber() : var0 
var7 =  method : A.randomNumber() : var0 
var8 =  method : A.normal() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=10 [var1]  : true
<randoop.PrimValue, value=10 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=10 [var4]  : true
<randoop.PrimValue, value=0 [var5]  : true
<randoop.PrimValue, value=0 [var6]  : true
<randoop.PrimValue, value=0 [var7]  : true
<randoop.PrimValue, value=10 [var8]  : true

allSequences.size()=721
-------------------------------------------
randoop.util.Randomness: total calls to random: 4431
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 720 sequences.
components: 720
randoop.util.Randomness: total calls to random: 4432
randoop.util.Randomness: total calls to random: 4433
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 4434
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 720 sequences.
components: 720
randoop.util.Randomness: total calls to random: 4435
randoop.util.Randomness: total calls to random: 4436
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 4437
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 720 sequences.
components: 720
randoop.util.Randomness: total calls to random: 4438
randoop.util.Randomness: total calls to random: 4439
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 4440
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 720 sequences.
components: 720
randoop.util.Randomness: total calls to random: 4441
randoop.util.Randomness: total calls to random: 4442
Sequence discarded because the same sequence was previously created.
-------------------------------------------
randoop.util.Randomness: total calls to random: 4443
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 720 sequences.
components: 720
randoop.util.Randomness: total calls to random: 4444
randoop.util.Randomness: total calls to random: 4445
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.randomNumber() : var0 
var2 =  method : A.randomNumber() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.normal() : var0 
var6 =  method : A.normal() : var0 
var7 =  method : A.randomNumber() : var0 
var8 =  method : A.normal() : var0 
var9 =  method : A.randomNumber() : var0 
var10 =  method : A.randomNumber() : var0 
var11 =  method : A.normal() : var0 
var12 =  method : A.randomNumber() : var0 
var13 =  method : A.normal() : var0 
var14 =  method : A.normal() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Making index 12 inactive (value is a primitive)
Making index 13 inactive (value is a primitive)
Making index 14 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var10 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var11 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var12 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var13 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var14 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=0 [var1]  : true
<randoop.PrimValue, value=0 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=10 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true
<randoop.PrimValue, value=0 [var7]  : true
<randoop.PrimValue, value=10 [var8]  : true
<randoop.PrimValue, value=0 [var9]  : true
<randoop.PrimValue, value=0 [var10]  : true
<randoop.PrimValue, value=10 [var11]  : true
<randoop.PrimValue, value=0 [var12]  : true
<randoop.PrimValue, value=10 [var13]  : true
<randoop.PrimValue, value=10 [var14]  : true

allSequences.size()=722
-------------------------------------------
randoop.util.Randomness: total calls to random: 4446
Selected statement: A.normal()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 721 sequences.
components: 721
randoop.util.Randomness: total calls to random: 4447
randoop.util.Randomness: total calls to random: 4448
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.normal() : var0 
var2 =  method : A.normal() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.normal() : var0 
var5 =  method : A.normal() : var0 
var6 =  method : A.randomNumber() : var0 
var7 =  method : A.normal() : var0 
var8 =  method : A.normal() : var0 
var9 =  method : A.randomNumber() : var0 
var10 =  method : A.normal() : var0 
var11 =  method : A.randomNumber() : var0 
var12 =  method : A.normal() : var0 
var13 =  method : A.normal() : var0 
var14 =  method : A.normal() : var0 
var15 =  method : A.randomNumber() : var0 
var16 =  method : A.normal() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Making index 12 inactive (value is a primitive)
Making index 13 inactive (value is a primitive)
Making index 14 inactive (value is a primitive)
Making index 15 inactive (value is a primitive)
Making index 16 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var10 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var11 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var12 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var13 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var14 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var15 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var16 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=10 [var1]  : true
<randoop.PrimValue, value=10 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=10 [var4]  : true
<randoop.PrimValue, value=10 [var5]  : true
<randoop.PrimValue, value=0 [var6]  : true
<randoop.PrimValue, value=10 [var7]  : true
<randoop.PrimValue, value=10 [var8]  : true
<randoop.PrimValue, value=0 [var9]  : true
<randoop.PrimValue, value=10 [var10]  : true
<randoop.PrimValue, value=0 [var11]  : true
<randoop.PrimValue, value=10 [var12]  : true
<randoop.PrimValue, value=10 [var13]  : true
<randoop.PrimValue, value=10 [var14]  : true
<randoop.PrimValue, value=0 [var15]  : true
<randoop.PrimValue, value=10 [var16]  : true

allSequences.size()=723
-------------------------------------------
randoop.util.Randomness: total calls to random: 4449
Selected statement: A.randomNumber()
Will query component set for objects of typeclass A
getActivesequencesThatYield: entering method, clazz=class A
getActivesequencesThatYield: returning 722 sequences.
components: 722
randoop.util.Randomness: total calls to random: 4450
randoop.util.Randomness: total calls to random: 4451
Successfully created new unique sequence:var0 =  cons : A.<init>() : 
var1 =  method : A.randomNumber() : var0 
var2 =  method : A.randomNumber() : var0 
var3 =  method : A.normal() : var0 
var4 =  method : A.randomNumber() : var0 
var5 =  method : A.normal() : var0 
var6 =  method : A.normal() : var0 
var7 =  method : A.randomNumber() : var0 
var8 =  method : A.randomNumber() : var0 
var9 =  method : A.randomNumber() : var0 
var10 =  method : A.randomNumber() : var0 
var11 =  method : A.normal() : var0 
var12 =  method : A.normal() : var0 
var13 =  method : A.randomNumber() : var0 
var14 =  method : A.randomNumber() : var0 

Checking contract class randoop.EqualsHashcode on 0, 0
Contract returned true.
Checking contract class randoop.EqualsSymmetric on 0, 0
Contract returned true.
Making index 0 active.
Making index 1 inactive (value is a primitive)
Making index 2 inactive (value is a primitive)
Making index 3 inactive (value is a primitive)
Making index 4 inactive (value is a primitive)
Making index 5 inactive (value is a primitive)
Making index 6 inactive (value is a primitive)
Making index 7 inactive (value is a primitive)
Making index 8 inactive (value is a primitive)
Making index 9 inactive (value is a primitive)
Making index 10 inactive (value is a primitive)
Making index 11 inactive (value is a primitive)
Making index 12 inactive (value is a primitive)
Making index 13 inactive (value is a primitive)
Making index 14 inactive (value is a primitive)
Adding sequence to active sequences of type class A
Sequence after execution: 
A var0 = new A();
// <NormalExecution object=object-of-type-A>;
long var1 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var2 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var3 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var4 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var5 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var6 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var7 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var8 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var9 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var10 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var11 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var12 = var0.normal();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var13 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
long var14 = var0.randomNumber();
// <NormalExecution object=object-of-type-java.lang.Long>;
<randoop.PrimValue, value=0 [var1]  : true
<randoop.PrimValue, value=0 [var2]  : true
<randoop.PrimValue, value=10 [var3]  : true
<randoop.PrimValue, value=0 [var4]  : true
<randoop.PrimValue, value=10 [var5]  : true
<randoop.PrimValue, value=10 [var6]  : true
<randoop.PrimValue, value=0 [var7]  : true
<randoop.PrimValue, value=0 [var8]  : true
<randoop.PrimValue, value=0 [var9]  : true
<randoop.PrimValue, value=0 [var10]  : true
<randoop.PrimValue, value=10 [var11]  : true
<randoop.PrimValue, value=10 [var12]  : true
<randoop.PrimValue, value=0 [var13]  : true
<randoop.PrimValue, value=0 [var14]  : true

allSequences.size()=724
